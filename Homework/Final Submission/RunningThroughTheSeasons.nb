(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2187147,      41366]
NotebookOptionsPosition[   2180518,      41247]
NotebookOutlinePosition[   2181519,      41281]
CellTagsIndexPosition[   2181447,      41276]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Running through the Seasons", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
  3.770055604008165*^9, 3.7700556066618843`*^9}, {3.770373672636671*^9, 
  3.7703737875292807`*^9}, {3.770547533352271*^9, 3.770547539854568*^9}, {
  3.7707421951345067`*^9, 3.77074223214286*^9}, {3.770742692294305*^9, 
  3.770742708212878*^9}, {3.7707428094793897`*^9, 3.7707428399375463`*^9}},
 CellTags->"Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd"],

Cell["Predicting Runs Based on Environmental Data", "Subtitle",
 CellChangeTimes->{{3.7705475677558756`*^9, 3.770547587938833*^9}, {
   3.7705478907996206`*^9, 3.7705479091561575`*^9}, 
   3.7707429413879366`*^9},ExpressionUUID->"8a1a1634-d8b7-462a-80e1-\
f7e6df34ce06"],

Cell[TextData[StyleBox["Stephen Schroeder, June 28, 2019", "Subsubsection"]], \
"Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.7705475458253107`*^9, 
  3.770547548613963*^9}, {3.770764523638613*^9, 3.7707645392753935`*^9}, {
  3.7707645696894207`*^9, 3.7707645875166297`*^9}, {3.7716034049283476`*^9, 
  3.7716034128375635`*^9}},ExpressionUUID->"94536f76-3fd2-4bf6-b228-\
fa93ec9acae9"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.7705476515653253`*^9, 
  3.7705476621860085`*^9}},ExpressionUUID->"444246f5-b120-4af2-b40d-\
8ac57b74d2b2"],

Cell[TextData[StyleBox["\"Whether the weather is fine, or whether the weather \
is not; whether the weather is cold, or whether the weather is hot; we'll \
weather the weather, whatever the weather, whether we like it or not!\"\n\
-Unknown",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.7707422427375107`*^9, 
  3.770742257487158*^9}},ExpressionUUID->"376195f3-5903-4a3b-8346-\
2b765c665a2c"],

Cell["\<\
After a few years of running, I have ideas about things that might affect my \
running, but previously I had not done any rigorous analysis. I know I run \
less in the middle of the winter, and I run more during the summer, but how \
much more exactly? Wolfram Language allows for all of my abstract thoughts to \
be crystallised with my runs tracked using RunKeeper! Normally, I don\
\[CloseCurlyQuote]t go out with a plan for how long I will run, and I turn \
back based on how I am feeling that day as long as my run is at least 2km. \
Because of this, one of the main questions that I have about my running data \
is how my running is affected by temperature, and if I can predict how long I \
will run, given a temperature outside.\
\>", "Text",
 CellChangeTimes->{{3.770547683575382*^9, 3.7705476836172233`*^9}, {
  3.770547718564888*^9, 3.770547883977233*^9}, {3.7705479242261047`*^9, 
  3.7705480906130495`*^9}, {3.7705484472029023`*^9, 3.7705484560297*^9}, {
  3.770632958165056*^9, 3.7706329668658085`*^9}, {3.7707410573815217`*^9, 
  3.7707411011223993`*^9}, {3.770742284794274*^9, 
  3.7707424378921223`*^9}},ExpressionUUID->"6e47cff0-1e89-48cb-a4ee-\
e61e7020d444"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Running Data Preparation", "Section",
 CellChangeTimes->{{3.7705481399490995`*^9, 
  3.770548153880441*^9}},ExpressionUUID->"cd29592b-705a-4fc7-9761-\
f3f3328b8ef1"],

Cell[CellGroupData[{

Cell["Importing Running Data", "Subsection",
 CellChangeTimes->{{3.7705481638800955`*^9, 3.770548176555277*^9}, {
  3.7705483709027987`*^9, 
  3.770548374189679*^9}},ExpressionUUID->"091cf052-dc81-43c5-8873-\
1a26138f7182"],

Cell[TextData[{
 ButtonBox["Previously",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://community.wolfram.com/groups/-/m/t/1668269?p_p_auth=\
KfG72yPC"], None},
  ButtonNote->
   "https://community.wolfram.com/groups/-/m/t/1668269?p_p_auth=KfG72yPC"],
 ", I used ",
 StyleBox["ServiceConnect", "Code"],
 " to fetch my running data, but unfortunately ",
 StyleBox["ServiceConnect", "Code"],
 " does not fetch GPS data. And I will need location data to be able to know \
what the outside temperature was at the time of my run.\[LineSeparator]In \
order to do that, I manually exported my data from my RunKeeper account as ",
 ButtonBox["explained here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://support.runkeeper.com/hc/en-us/articles/201109886-How-to-\
Export-your-Runkeeper-data"], None},
  ButtonNote->
   "https://support.runkeeper.com/hc/en-us/articles/201109886-How-to-Export-\
your-Runkeeper-data"],
 ", and saved the data to my ",
 StyleBox["NotebookDirectory[]", "Code"],
 " with all the GPS files in their own folder.\nNow, to get started, all the \
data needs to be imported. I imported the data in a similar fashion to this ",
 ButtonBox["fantastic Wolfram Blog post",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://blog.wolfram.com/2015/12/04/a-year-of-runkeeper-analysis-and-\
visualization/"], None},
  ButtonNote->
   "https://blog.wolfram.com/2015/12/04/a-year-of-runkeeper-analysis-and-\
visualization/"],
 ", where the running data is parsed using the smart ",
 StyleBox["SemanticImport", "Code"],
 " on the .csv file from RunKeeper. Feel free to follow along with your own \
data as long as the RunKeeper export file is in the same folder as this \
notebook. Or, just read along!"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwdxUsoA3AAB+DhYGqWUmOTea6mlRDSrGxMGuUw29oyK1tWIo8oLpOZUtvB
ZAc5rCxrtSJWxNKsbUltslqIbe1iRTbcLOXx/+3w9dVpZ6UThRQKpYrAk05V
ub8iI3I+drJwm6G0HlPV+634k5O0YOFlsRUfjrFsOERX27H5xXSAy7oZJ9jG
53kxR1cUxHvH+gSWSx3P2DMXzGLt6tovdtfejITJFwUfMnydZvTfkunDivxC
fvMStrdElnFytiMWJUt1ffmtD1/yV/KGSaPAVFau64+sHzTzsTLrbGdXZkSG
QLUAP7GnRPhKERFjY0qsxPqFFRU+7/25byBzae44njEmrI1kjWzdhUddTAmH
3PNNGcK2uNDHJd+l50PYQctlsXfb9I59A28lTeTFCI+Gg8IaLWZtTuf3SLxh
fCZO5bc5LVF8yhiP4R1myC9gZkS7R1sB/A/xl8n9
  "],ExpressionUUID->"87132916-27dd-40fa-a986-a69c1f83d536"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Code",
 CellChangeTimes->{{3.7705508943975854`*^9, 3.7705509123579545`*^9}, 
   3.770551154909594*^9, {3.770551197677636*^9, 3.77055119998446*^9}, {
   3.770551242538692*^9, 3.7705512773087454`*^9}, {3.7705514287230377`*^9, 
   3.770551430824024*^9}, 3.7705514853816853`*^9, {3.7705515461099367`*^9, 
   3.770551589752689*^9}, {3.7705516244789715`*^9, 3.770551654260516*^9}, {
   3.7705525147150126`*^9, 3.770552555942882*^9}, {3.770564564828285*^9, 
   3.7705645684898024`*^9}, {3.770763371270235*^9, 3.770763375930801*^9}, {
   3.7707640250824842`*^9, 3.770764037069294*^9}, {3.7707643022807856`*^9, 
   3.7707643056001716`*^9}, {3.771327984340407*^9, 3.771327984909884*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"0264e3e9-b146-4693-a1d0-7c3c665e4ec6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"runningData", " ", "=", " ", 
   RowBox[{"SemanticImport", "[", "\n", "\t", 
    RowBox[{"\"\<cardioActivities.csv\>\"", ",", "\n", "\t", 
     RowBox[{"{", 
      RowBox[{
      "\"\<String\>\"", ",", "\"\<Date\>\"", ",", "\"\<String\>\"", ",", 
       "\"\<String\>\"", ",", 
       RowBox[{"Restricted", "[", 
        RowBox[{"\"\<Quantity\>\"", ",", "\"\<Kilometers\>\""}], "]"}], ",", 
       "\n", "\t", "\"\<String\>\"", ",", "\"\<String\>\"", ",", 
       RowBox[{"Restricted", "[", 
        RowBox[{"\"\<Quantity\>\"", ",", 
         FractionBox["\"\<Kilometers\>\"", "\"\<Hours\>\""]}], "]"}], ",", 
       RowBox[{"Restricted", "[", 
        RowBox[{"\"\<Quantity\>\"", ",", "\"\<LargeCalories\>\""}], "]"}], 
       ",", "\n", "\t", 
       RowBox[{"Restricted", "[", 
        RowBox[{"\"\<Quantity\>\"", ",", "\"\<Meters\>\""}], "]"}], ",", 
       "\"\<String\>\"", ",", "\"\<String\>\"", ",", "\"\<String\>\"", ",", 
       "\"\<String\>\""}], "\n", "\t", "}"}]}], "\n", "]"}]}], ";"}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.770549790681119*^9, 3.770549905765168*^9}, {
   3.7705500632643056`*^9, 3.7705500909563656`*^9}, {3.7705502672116933`*^9, 
   3.770550330776492*^9}, {3.770550390972964*^9, 3.770550594968646*^9}, {
   3.770550641965489*^9, 3.7705506601567755`*^9}, {3.7705506923505783`*^9, 
   3.7705507166410627`*^9}, {3.7705508534074416`*^9, 
   3.7705508570420623`*^9}, {3.77055088911671*^9, 3.770550925122101*^9}, 
   3.7705517027109632`*^9, 3.770551993966163*^9, {3.7705645210412874`*^9, 
   3.7705645512481174`*^9}, {3.7705647733304214`*^9, 3.77056478915508*^9}, {
   3.7705649615294685`*^9, 3.7705650279838605`*^9}, {3.7705650649790835`*^9, 
   3.770565066290097*^9}, {3.7705656025240107`*^9, 3.770565642327368*^9}, {
   3.7705657786843815`*^9, 3.770565825665147*^9}, {3.770565887747199*^9, 
   3.7705658884807897`*^9}, {3.770565969052726*^9, 3.770565970411046*^9}, {
   3.7705660028931646`*^9, 3.770566004184886*^9}, {3.770566055860011*^9, 
   3.7705660567526584`*^9}, {3.770570323697942*^9, 3.7705703249475965`*^9}, {
   3.77057095419656*^9, 3.770570954978467*^9}, {3.770677607202387*^9, 
   3.7706776730586777`*^9}, 3.7706777327789497`*^9, {3.7707172525776978`*^9, 
   3.7707172586882253`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"959a7cc8-b788-4878-ba56-06e46ed0407a"],

Cell[TextData[{
 "To import the GPS data, I put all the .gpx files in their own folder called \
GPS. If you\[CloseCurlyQuote]re following along you will need to do this as \
well. I only need the first GPS coordinate from each run, so I used ",
 StyleBox["First", "Code"],
 " to individually select that."
}], "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.770632895289568*^9, 3.770633129840459*^9}, {
   3.77067750896266*^9, 3.7706775175918627`*^9}, 3.770677847580335*^9, {
   3.7707413723976784`*^9, 3.7707414197454667`*^9}, {3.7707414694583874`*^9, 
   3.7707416306623654`*^9}},ExpressionUUID->"bad86d7b-0ba7-4268-8ca8-\
fc77ba3316a3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"importGPSData", "[", "]"}], " ", ":=", " ", 
  RowBox[{"importGPSData", "[", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.gpx\>\"", ",", " ", "\"\<GPS\>\""}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"importGPSData", "[", "files_List", "]"}], " ", ":=", " ", 
  RowBox[{"Association", "@", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"importGPSData", ",", " ", "files"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"importGPSData", "[", "file_String", "]"}], " ", ":=", 
    RowBox[{
     RowBox[{"FileNameTake", "[", "file", "]"}], " ", "\[Rule]", "  ", 
     RowBox[{"First", " ", "@", " ", 
      RowBox[{"Cases", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{"file", ",", " ", "\"\<XML\>\""}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<trkpt\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<lat\>\"", "\[Rule]", "lat_"}], ",", 
             RowBox[{"\"\<lon\>\"", "\[Rule]", "lon_"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"_", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<time\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "time_", "}"}]}], "]"}]}], "}"}]}], "]"}], " ", 
         "\[RuleDelayed]", " ", 
         RowBox[{"{", 
          RowBox[{"time", ",", " ", "lat", ",", " ", "lon"}], "}"}]}], ",", 
        " ", "\[IndentingNewLine]", "Infinity"}], "\[IndentingNewLine]", 
       "]"}]}]}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rawGPSData", " ", "=", " ", 
   RowBox[{"importGPSData", "[", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.770678040972826*^9, {3.7707623032544327`*^9, 3.770762306798276*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"cb339342-d642-4742-b8b6-1ce19c640d3c"],

Cell[TextData[{
 "Now, so I can best use the GPS data, I will make sure that it is explicitly \
made up of lists of ",
 StyleBox["GeoPosition", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.7706778715134053`*^9, 3.7706780066335435`*^9}, 
   3.770678053018113*^9, {3.77074165007802*^9, 
   3.770741682991731*^9}},ExpressionUUID->"26a71cc0-6dbb-4d63-978e-\
18cb5d014900"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GPSData", " ", "=", " ", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"GeoPosition", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", " ", 
         RowBox[{"ToExpression", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], " ", "&"}], ",", 
     " ", "\[IndentingNewLine]", "rawGPSData"}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"9b0c98c6-328e-4586-ae5a-1937874ccebd"],

Cell["\<\
Lastly, the data needs to be added alongside the rest of the running data \
imported earlier into our now nice looking dataset!\
\>", "Text",
 CellChangeTimes->{{3.770678057923661*^9, 3.7706780826354775`*^9}, {
  3.7707170906945467`*^9, 
  3.7707170938081255`*^9}},ExpressionUUID->"f88871e4-07a9-4845-aada-\
f6d21879b7ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"runningDataWithGPS", " ", "=", " ", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"\"\<GeoCoord\>\"", " ", "\[Rule]", " ", 
         RowBox[{"GPSData", "[", 
          RowBox[{"#", "[", "\"\<GPX File\>\"", "]"}], "]"}]}]}], "]"}], 
      "&"}], ",", "\[IndentingNewLine]", "runningData"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.770677896593279*^9, 3.7706778974420605`*^9}, 
   3.770678118369996*^9, 3.770717130659139*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"def2ee34-a1df-4d74-84c4-b7e33ef3dc2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting Date-time and Location Specific Temperatures", "Subsection",
 CellChangeTimes->{{3.770678325047756*^9, 3.770678344367457*^9}, {
  3.7706784035743637`*^9, 
  3.7706784489361467`*^9}},ExpressionUUID->"50df9762-53f9-4026-b5e0-\
9ddaea14b77f"],

Cell["\<\
In order to discover how temperature affects how long I run, I still need to \
get the temperature data. Thankfully, Location and Time-Specific data is \
available using the Wolfram Language\[CloseCurlyQuote]s integrated knowledge. \
I\[CloseCurlyQuote]ll also clean up some missing GPS data to avoid errors.\
\>", "Text",
 CellChangeTimes->{{3.770678456519435*^9, 3.77067865096906*^9}, 
   3.770678747762471*^9, {3.7707417196433764`*^9, 
   3.7707417411249495`*^9}},ExpressionUUID->"aacdb114-8c42-4e72-9c4d-\
e5b41b5f06ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"coords", " ", "=", " ", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Values", "@", 
      RowBox[{"Normal", "@", 
       RowBox[{"runningDataWithGPS", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<GeoCoord\>\"", ",", " ", "\"\<Date\>\""}], "}"}]}], 
         "]"}], "]"}]}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"_Missing", ",", " ", "_"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.770678752254027*^9, 3.770678765012774*^9}, {
   3.7707389138676176`*^9, 3.770738928213695*^9}, 
   3.771603809302478*^9},ExpressionUUID->"7485bb05-851b-4c43-84d7-\
e09558e82ccd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tempData", " ", "=", " ", 
   RowBox[{"AirTemperatureData", "[", 
    RowBox[{"coords", ",", 
     RowBox[{"UnitSystem", "->", "\"\<Metric\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.770678752254027*^9, 3.770678765012774*^9}, {
   3.7707389138676176`*^9, 3.770738928213695*^9}, 
   3.771603809302478*^9},ExpressionUUID->"88e413a0-02a5-4b73-999c-\
d6f174abf3db"],

Cell["\<\
Finally, all that needs to be done is to add this data to the dataset!\
\>", "Text",
 CellChangeTimes->{{3.770678841929205*^9, 3.770678870596822*^9}, {
  3.7707170981862717`*^9, 
  3.7707171051268997`*^9}},ExpressionUUID->"efae4613-604f-4802-929c-\
361db41b9ac7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tempDataAssoc", " ", "=", " ", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"coords", " ", "\[Rule]", " ", "tempData"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.770657490960631*^9, 3.770657537970891*^9}, 
   3.770717116059338*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"81b463c9-c949-4976-a196-dcd2cac8c6b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"runningDataWithGPSandTemp", " ", "=", " ", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"\"\<Temperature\>\"", " ", "\[Rule]", " ", 
         RowBox[{"tempDataAssoc", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"#", "[", "\"\<GeoCoord\>\"", "]"}], ",", 
            RowBox[{"#", "[", "\"\<Date\>\"", "]"}]}], "}"}], "]"}]}]}], 
       "]"}], "&"}], ",", "\[IndentingNewLine]", "runningDataWithGPS"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.770678942585203*^9, 3.7706789428365364`*^9}, 
   3.770717124003212*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"4443d08e-3f14-49fb-a11f-8a4de2635edd"],

Cell["\<\
All the data is ready, so it\[CloseCurlyQuote]s time to visualise and \
understand how temperature really effects my running.\
\>", "Text",
 CellChangeTimes->{{3.7707546586731544`*^9, 
  3.770754722780895*^9}},ExpressionUUID->"eff5c0d9-1cbe-483c-8473-\
e51e0954d32c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Visualisation and Evaluation", "Section",
 CellChangeTimes->{{3.770649869370246*^9, 
  3.770649882170206*^9}},ExpressionUUID->"ad92d571-0d13-4e14-97b8-\
a08f85822648"],

Cell["\<\
Now it' s possible to do tons of analysis of my running data! First, we can \
see the starting locations of my runs over the past  2 years. Lots of running \
in icy Canada.\
\>", "Text",
 CellChangeTimes->{{3.7706498874530163`*^9, 3.77064989736728*^9}, {
  3.7706499602859445`*^9, 3.7706500424002595`*^9}, {3.770679162676326*^9, 
  3.7706791636992216`*^9}, {3.770718164468419*^9, 
  3.7707182060509043`*^9}},ExpressionUUID->"e4274698-a6c4-472b-a13d-\
2724c3c1541f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"geodata", " ", "=", " ", 
   RowBox[{"Flatten", "[", "\[IndentingNewLine]", "\t\t\t", 
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{"coords", ",", 
       RowBox[{
        RowBox[{"GeoPosition", "[", "place__", "]"}], "\[RuleDelayed]", 
        RowBox[{"{", "place", "}"}]}], ",", "Infinity"}], "]"}], 
     "\[IndentingNewLine]", "\t\t\t\t", ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.770717845588467*^9, 3.77071812622925*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5f601c88-7403-43ba-b133-273808ef0c34"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeoGraphics", "[", 
  RowBox[{
   RowBox[{"GeoMarker", "[", "geodata", "]"}], ",", 
   RowBox[{"GeoBackground", "\[Rule]", "\"\<CountryBorders\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7706322671151648`*^9, 3.77063235092702*^9}, {
   3.770632424518305*^9, 3.7706324732707853`*^9}, {3.7706327099524274`*^9, 
   3.77063277606101*^9}, 3.7706328318946934`*^9, {3.7706495753935847`*^9, 
   3.7706496230380783`*^9}, {3.770649691230802*^9, 3.7706497117618427`*^9}, {
   3.77064981968266*^9, 3.770649824335167*^9}, {3.7706791173311377`*^9, 
   3.770679119839308*^9}, {3.7706791524841557`*^9, 3.7706791533547792`*^9}, {
   3.7707181322909937`*^9, 3.770718133008072*^9}, {3.770718282235729*^9, 
   3.770718329790188*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"5a6959af-c86e-4c26-9751-4f178bbc6f7f"],

Cell[BoxData[
 GraphicsBox[{{
    TagBox[{
      {FaceForm[RGBColor[0.87, 0.94, 1]], PolygonBox[CompressedData["
1:eJxle3lcjVvUvwghGaOSylC4phBKtJChEGUomSOkEiHzUIgkCZGMkVJSGk5R
ua1GUhpporkz1UkaT5nynt991n7/eH9/3c/zuadz9rP32mt9J2N2Hli7u2eP
Hj20evXo8f/++8/Y6aF+tV247cN8Na30XMgftiUyKr8L77r5G1kWZEPPme8l
iv92IfRLdB0sygS1kSZqvOddWHy9ufea3u9gsQk8j/LpwjPuLcLBU9LgW8WW
8EHHu3BNwsxV6zcngyBrx4+SrV3YPa970FSdRDi5q1Bx+OIuNAvo2BISHAvP
tMO1csZ3Id/U3mqofiR0jpSbqNinC4vcI7en8YLAc4d7YZmgE8X3BlvozrkD
jp2jrhuld+Ltou83fG3WQ+nNpd6Ln3TiTCfVCU17buFITff0b6c7sc6Up+sl
DsSchdGNy6068V4fxx+rfodjD495nht1O1E7z9DMvjMGT6hbSHQUOnFCWeUZ
zeo3uPuD4uSESikOfXtt1fo3/+JIuyOzVHlSPJMW5zdgYQqa4Qlc4SHFSwY2
OxPvp6HW39otGzZL8Z39zNqF3zPw9JBxTjBVigXPLU4EzsvE1fJjpgzq7sD0
uHmeDWeycHJF0/OsnA4c2u18aHT8R4ycfvDjsQcd6Kz53t24MRdPFzdvV7fv
wPCFA3tHX83Hcr2XvZPmdOCFazmqxg8LcILDUtjZswPRPN6n9EUhHpToOinl
tOMXF4dvLrxPmF8xqOj9nXbEAfODNRI+48mMP3dvbW/HGdljxhUnFmFJSX7q
0QntGO2c8PZxfDEOPWa28GhTG/b2O5p4NqZEtl9mgju8NlwlEFgeDS3FKK0v
jhUn2pBXrBV75X4Zfvy84ORqozaca2nWkHjlCxqZ97nXJNeG+YWGXYOOfMV1
e/4uTk1vReVLarkem8pxuM7YkpxLrfj463yTSQsq8PbKk8+UTVpRa3DH9PZR
lTj5n57ChwqtqLv0rGGjtBI3HXBJt89swWj7joHDc6twrvooK9fLLZiMr0a9
Nq/Gg4MuP6td2oJB/K33zr6pRuXj6wJv92rB6u2D39ho1OBj98J5D5ObMWGh
c4DN+Rq8/PyN8Z/TzahSXe1yjl+Dx8PQI16/GYOH37B4u6QWtQde8g4TfUf7
qEBj1cBalOiEbQ/b8h1v8Feu8/tbi8NUnuacyG9CeeXWs3M31SH2wX4axk3o
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
v/f4Hx+Kyyc=
        "]]}, 
      {EdgeForm[GrayLevel[0.6]], FaceForm[RGBColor[1, 0.93, 0.82]], 
       StyleBox[{PolygonBox[CompressedData["
1:eJxdmHdcje//xzNLgwZpkySjRDSpV30iyUxSRkVlpOxECJWkKSuJpL2srENF
UYQ0SDq7zrnPfUYnQgN9ye/6fP78/XHO/Xg+rnlf13u83rdx4J41W0coKCgM
Iz978jecPJeq94SUysQw3FxmUuInxYKjM3fdJryxvDk1n/BEjlX1a8JeMy/5
/MtpClU/+t0kMPexr09eKcVJzTb1pcYSXD1TaOGlKUVc9S7LdxoSHFOda7hq
UIKgiCurj3lLoOeoUHWZJYFna1vRjwwJBmaOLJ/4WIKIoezmJZOkUBwqz6ve
L0HWcPGZyYukiG9pi9MJkMD9i0ZTxgEp3KeEaluWSSBfbNeeelWKm2Pmf43/
IsHvPGZeSasUfwtakuaMliLh3qbon3Yy/NC9+SH1mwSio89yXRfIcGHSvYzp
pP9U+lvk/oUy/B5++1TbVwl+FBk8squVQQ8BP3pbJSi5U/uAUS8Db5aKi+iY
BLfTq2MiXpPxp2u3Xt0pQXz/N2dfxy5sqS1at0dNgjoNR9fD/l0I+lJ3xfm7
GHHXG+Nc47tge+9bftA4CZQWPZ9ZfacLSqFNa7rMJbhU+ks79FUX7EYo6j9x
lIC39xpPZYkctVvWKt0bIQEaJvDLCuS4m3dGcd08CXbNvprgxZOjRkt+3mm1
BP6/PHXHC+VYm/S3v3+lBM2NE2btQTeSRwodpgrEOP5F/W+dWzcWOtb/XcUU
A24vgxscumHwwdBy6i0x/PZ8ijP/Jkfi9fhvB+LFqMyPZod1y2Gi/0uzf6sY
u04+7rUj7BSsrZ9JWC6p8myUy7FhhGHgIsJ7LZruKDXIobz0cXmogRiD6S45
cdly0Ev2+aTbiuGxOEjmniWH3uuz1crKYtS5T2safUqOpdZpJWFDNLYFbjSS
n5Aj6I/vwGiKxkzz9ToqF+Ro9DnmqfmRBsd3ZmH5cTncTaHbV02DCvE8W0nm
Z1za/SsmgsaTmwGzAy7KceVQbBkjgMaDSH7cnhg5Fo+McD8SRmPsqN+x05fK
kbA2+az/JBqMh2fTz7jLccQzdUmyEY2LlCTL2VWOF9ftEpIeiTBHOuBe6iLH
893jWdFZInzeeV1daYYcUU8/u0aHi/DTmz1LQV2OZ387NXnLRNDzf/LCcpwc
c26ye1M9REhL+5lLqchhbJTSuUhDhESt23+NTMn97e59+f03hZCGbV16hPc+
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
/wfqkx7/
          "]], FilledCurveBox[{{Line[CompressedData["
1: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
vOtC/RE54cy5MASbB+6siujC//9/7f8ApE/sCw==
             "]]}, {
           Line[{{0.029061362949319516`, 0.5956225809759936}, {
             0.02909232373157426, 0.5974810903050897}, {0.028817376598742415`,
              0.5958762850916676}, {0.029061362949319516`, 
             0.5956225809759936}}]}}], FilledCurveBox[{{Line[CompressedData["
1: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
GPD//7/r/wFu2Mpf
             "]]}, {
           Line[{{-0.5771119548321371, 
             0.471681377385629}, {-0.5771119726824214, 
             0.4716812511671137}, {-0.5771114713852119, 
             0.47168164738518054`}, {-0.5771119548321371, 
             0.471681377385629}}]}}], FilledCurveBox[{{Line[CompressedData["
1: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
pvD9Ji7bW9AffIv72Ky/cN//+3/3f2ix4Dk=
             "]]}, {Line[CompressedData["
1:eJxdkm1I03EQx2dJy1SsDHOkUmZJibpejKnpTtDUoCgqU6dgVOtBApeluJaS
ZS0riUzKzYcwbZYIEWZqOC56YWtUoGtq/X8RZZ0uXRpbAx/Xz7e9OI4P3+N7
X47bdLTwgGqZSCQK57XUJ/MVMSXfCFo9pja1lGHfhZzNF78TBGd2hfVuYLhN
3X5M8ovgSkiuT1k4w0Ljsxr6TXDJRzt4g+tyr3cGmZPg48noRsuMgNomwSby
ELg6fN3diwKmVmonHF5jsKXtgW7KIeDcTfOH5EWCBZ2oViABzaPiPj3nh2cy
NK5pAa2+hlLrDEHL9LBqgPtZ+g3GogkCuX93QqRbwOcHq6pT/hCE2tasfeTN
MG174PHaKYLo2U5Toy/D96uj9vXyeVVJ+RPZKobnLZrPTTz/pCb3+iuPgAMd
ZT2vxwk6344u1MwLuLG+wKoeI2jWu47s5RxxaPmJc3YC8XDr3ZYghiGGuflR
fp8e1acieQBDR77kp+IrwZ1Z9+7HkQxfxsaslw0RpNxu7noRwXAk3i9ZZibw
Gx9aV53IMCzbpJJyPYv+3jq1n6HtaVRDoI3gfrF0xJ3AMDFTwma5vjK4sqQP
GEZVSDuDBAJlnHeBnXPeD7nzMGeN0ttdt4vhoLKxLOQLgX5avCc1jWGWLSM8
jxG88VSkxyUxTEoorlNzv8v3ShXp8QzL9TtXxPJ9VXLI8ef7As72O9utBPbs
aw2nFQzVRpVuKT/usIRe3crw/3/4B/o4NMw=
             "]]}}], PolygonBox[{CompressedData["
1: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
AYtnN0o=
           "], CompressedData["
1:eJxdmHk8lO/3/7UQabe0kHeFoo2KstXVRgsioRQilUqlQpYUWUuWtCgloZRk
y76/GMvYZ8YMQ3ZjmLGEpGj9zef75++v+/F8nPtcj3Pu61znOq979RlHk3Mz
hYSE3GYICf3vKTJJ16r36oNLxT2r0webSF/aiuLQc30IM1MSC/7HIvc+6bX9
PdyHwtlbytfnsMj9LVbqcqp9UJ9196iOI4skce44jkj2wUP0/PXSdSzSgN6N
V6Y5OLjkbU9+N5PM6WEuiu7ggC7laaX8gklSnVOLvUs5MIpLfzXflEm4eb2t
UvEcvHeJOHFhAZMMyh7ut3DgYJDjIe7n10gSvzyTm3uEA8fDImf1djeSXweu
mDiqcvDS2Hbq7m8G8et3UAxawkGU7pcbO/IY5Fq3lvapb70Y78ct+5sMwl7g
v4PT1IsXQa9zl6gxiEHAj6I1Ob0I0pSo1/xKJ9Ird99Y8bwX9vl2JzvS6GTk
r/hUjVsv9ILj/v1xpJMmQ5EJNYte3GSkWkSp0MkkrVnEQrMXrqbeIje6aGR2
4ir2juW9KPxbrvzBhkZ+K96d0zjVAwt38cNdvQ1kRkCotlJLD9S+/w6TOt9A
5nOapbVzesBUW77KcLCeKC3t0hGP6MHPp6UrAh3rCS999dFI5x60zN8fVT5Z
R0RnzWkcV+3BguIvD48I1xHxt2f8ixb0YLdHutKr0FqSW3gh89BwNy6bRz2c
WFZLvPRNZj6r7kZGjwbD5G0NEXp3cMm7d91YuXP3aIFqDRnMPhvo6tuNZKWY
IZXiarJeN2X2PJtuiI75l6UaVJOD+2U2ndXphtT2C9d02qtI96awN97LujE/
ZhGv+XIVOUbNlCrndeGuTbys918qMVZzEl8S04UPsem/NcKpxP5Z4pVh8y6Y
0bY5zVSkEnV7n7um87uQXRJl35FXSXzjfjzQL+vEWkpvUY1RJZnR38ZodOvE
6zv+5rX9FeTIT4s1z3o7sPxwFcSWVRDLlOys5ogOuAhd2n0ovZzklItEfDzc
AcNcT7vXhuXERmvHnKV/27HeKGtq3mAZuWYlbLjiUzs29/jXPQosI19P3Dk7
ItWOHFbk0cEKCilsTysEtQ2MgIIHRecpZPvjsO+b3dtQabZHOkmUQrTO9prq
rG/D0PeK5OyPpSRxMVnB//wZlG6aeKdRKTG8a1fr6vEZ6VtoIft7SwivLH3t
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
ecpc2K6AgWeuUT98lClYedyWqVfIwK8snb0ceQo0ts2+9CuHAa/JnBhJaQpm
Od9I/ifgAo3Eo9OCfH/VpXL3Fgnie+EcIqNAwd3K8tI7Av/9XTn36pQE9ZGh
NBwsiOeSs/5VazUK9L8b/VYTvF+ZYqeyVJcC//0zRz9bMmB09PH5fzUUXB2u
+NP2iw69Qzq/Ko3KMHuP7eoN2XRcNv6d+DW5DGkT/IDu93QMeguXqVeUI1X2
9BLmczqKbfxkHNor8IIyldEaTsfzSZnYHRaVkBiyCNsXT8e5iY8/N+2vgM5v
3Vs9OXQspz15s1ClHDfz7jKacgX1HDw+6L+qHC4y6dUFBXTMtW11rnpVAVlT
D4bnGgbmp58x3yldAbstgyHtzxiwNe1RZvpU4PqjJWNPi+lIKgk/Ur6xEv8e
7Eq+JPD3KzMO3CroU1Yf3P7sEeyfh2lbllRFJR6O0kR+CvZj+vKTYmHzKnwr
DWR5XW8EsVySu/RQFVapxp/jXWlE0KoTu5a1U+Fq++mjwu1G/FGSeH6gk4pq
I+9JRc9GxGrc236aSsXzqJW45NMIeslMWdEiKjRatYa7fRvhae7z0h5U9P7W
/fFMwDmLh8eJwD7rhaGnql8jQoM0Y6byqZjuTfDv9m9ExKsxeTEBuwc84m9W
YkJBcVmb3LVq/P7wyDZIlYkzRmnCdwOqsXJVrLnvMhZcyt0f7lStwaLmBuH/
Qljg8ZXd5Xxr8Hebtu6amU2wWBt/IZFVg6phs8LjI02Q/j5iDqdabLvRcX7n
x2YcHNKVCx6thUW2v0KLARtRoQWvLRPrwQz3VdgdwkaXbpaa0G0aOr21xt9f
ZcPGL1zq9goa0lNVTP8eZuPxZLN2gh4N02fH11zYzUaK/jxT2hYaUl46LG7S
YePmqfIrMZo0rEtZElmlxYb84wdakjto2P9zha+aBhvVslMfdwm44ssCx2U7
2GgysYt+KuAM6Z8hJ9XYqNSw3vpb4F+uaji5QYGNcybXR/8I+tp8/W0VmyXY
SNDZ/2JcUJcHRo8O1n9pRsVD99UpdAbcjRfcdxpshjFvcA59jIGjHqF1Mr3N
0LglfXV8PhPXdLpV9T83o+mBnXNpFxOHPVKcvkmy8e7kvg1brFkYMD0oH2fE
xqNZnq9vt7Pwn6TSB/kINnzDmNZznJtgp3d16akeNrxEwufO9WyCy1dL5wW6
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

           "], CompressedData["
1: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
           "], CompressedData["
1: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
           "], CompressedData["
1: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
F2nYPe53eMJBIVqtWpk6sZSG//8/5H+AyGrk
           "]}], FilledCurveBox[{}], PolygonBox[CompressedData["
1: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
yaKWoyViBIwqf15YQGFeqd9weqEYB18qH5lWRJE9oudeNcHu9L4DV2IoXImQ
aTFoFCPwU3+072IKSrzcVPUeMdKcLmZfGGLgyhbLlQkqEvglZzYW/2XA4XDB
6L5JErzPTwg5E0ghNe3SXY6eBNb2BYqCYApqajuu/p0jgWr56LG2Oga0ND/M
qZ8swdM4t7IPFQyEptz8VkX0S349OvWWycDmri+fbYwkMIhRro0eYMD/nKMD
31aCSweUXJ9aUNjVpWBZtlmCIG/XQmVQMF+onLh8hwQnfLPmriD+789j9fYf
laAuwM+t/j0DH7MnzDC/LcHFyi7DcVcZyFHKuWn4kvBZlHe2zYqB4eE11XMb
JbgsazrNzI+BnpHA277fJMBx11UpWxnYoWP6XCQjxai+uvbv1wy0Lajit5Hz
gtSvHdUkfyasNnL5WimB/QuNz+lVDJxQ059zc1CCpRbr3I6EMBCobDXl9Qwp
Ih/fqF6iSoH6e3F7ppwUbza3z2X/ZuD3XoaeqoEUVV3X9d7bMTB0K0jm0UYp
GgrVP18+yEDl3clfvsVJoflhh9We6wysPqNmsspNiuMLj27NJXwa//JiFUKk
OOA+3jeDxEPlrKdKnqMUts6Wk+zUKKR5F+clE/zUi2dfwmOg272gTi9YCgvt
lfOOFzMg0yc/3/uAFOlTGCr6lxj4FrzNQ3JYiqTOPMmtHgaOvJ0Xue62FNw2
h0NdSyms25q89nWjFCpl2RM1nCgIVCf1hTVLYVM+qPdjLYUty9nnc58QueOq
LP+NFLZNs3n4+poUiQKvcas2Ueg+kN8mSpfiWbCNXFkoqT+RMK43Wgq7oif3
LLdR6MqQ/f7cj+hPlMwXtVKIbsjX9U8g9kalDhVrMiHf6PCRd1KKCuan9M8E
M+1ne4sIviCXG+J6lom1Hp/+ueklxU6nP4mqlUy0R61pOQYpjHKr2/aUMxE7
Yt/8e7kUp/7dysspY2ITa9ceczspbvbyQxeuYILn1JS0NJTYn/tjf1AlhTv/
edknO0th9tDmaP4+Cqy9MxsibaU4rKllXnycQsjhs3ppM6U4uyLk17xcCh/q
Hftjx0nROq1GIaWWgtgtua6pVYLHSekFzq+IvxpF8ndaJNgb4+o4cJwJ9Zrl
G7MKJbj1X5TZ32Em4j+mFMuSfP7J1r+1+i2R/3ff/qCfBIPXnmWvv0j6G7u8
39FFgtKEojCfTCaa6OKrCs4SVK1P1TIi9g9Fxk5+Ol+Cf/il7/aeZsKe98gk
VEsCtsEtq6Unmci886O3/w/prz3nRX8pCvt4Tx9FDYhhlhUVrdxB4dls2Rg2
W4wcwcznid8p8HMqFuuTfuae+z1EboBCSsvA5rpyMaKmb1375SeFge2LRy8Q
LH6rcMv4B8m3mZJz1CMxouMUZzd1U1D2CVqdmy9GUSH7SIANE/QYP2+362Ig
n1LWKmLi3esxLkF7xYgvz37jSeaBo0OW1rL1YlSZ9O8fa03iZedt17JUDOaF
B0aVRH9L4DUHW1MxJjQunrTgPROcNGr2zlERJl6cYRhP7OMseBNt0COC5kzd
ijf3meiMkcaWvhLB803wlsapLHh8enWqIE2EnKe8PZVnWJia7kuVHhBBz+70
ldEvLGwva40PMBdhtqVTdeAImffGTz7uNxBhQXNIwHsbNjIPNSSX6IhQq+r0
ysWSjaASg88ZAiHkdmg5M9U4KPNMevDwphA2Bsl5HdkcRBlunzi4VoiMniLj
XwUcTKk5NE52pRDxJcOyjeQ+lbjw16YITyFC9fTTHNfS+Km92r/TWIjgGCez
j6Y0CiddjLabKMSadxnhP5VpqHl/P1kxKMDSvQHHHcm+2u6wRl52gOx75up+
ezfQCGLWTUgtEqBJoyLhHLnHHkzcPVxP9k9+2ZMUL3IvZA85v60l++dI4goT
W2se/k77nGOrKYCcbG+jfg0PnXmTv8jOIPt60W+V/V95WHZ74daGZ3zIZQfF
dB/jw1durOvuHD78dZlzl1F8lL+XtXsSwEfGhQ8hnTICbFwxOEW+mYf+ymr9
+E0CyJ4o4W9x5eH/f4/5Hybt5ZY=
          "]], FilledCurveBox[{}], PolygonBox[CompressedData["
1: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
Fv7/fvZf63AALQ==
          "]], FilledCurveBox[{{Line[CompressedData["
1:eJxdlGs0lVkYxxEpFRKKRHJQulCRaPRPg3LraCxKJWWyqFwySI2YaErllkQu
5VZqIrksGV2oJE2cEO97XjpL2G+6KIcypVRm9vRxPuy1128967ns53n2X983
5Cc/ORkZma30/He7uNzIartFEHxKz8PiRxYxUn0Ft9sEovfO0T2rWUQVM5oT
Kgkm1nrW2pqyaJScOzRYRRDi+3GFsTULucCBCxl/ELjPV0HGWhbFbSPKrsUE
i03P3dinx8Lj/qSZG3MIfMzEQkUNFkeaQxemZBH0aA9riGRZ2BeO9foXEWgl
h4wXjjKQvWu9vjmT4OvyDnZXN4O2404T23MJQotzg/seMHjd6dN1mfoPbpfY
VCUx2PHx+gW5GILeBzskFw8x0EiXrrkWRSDjfK08aQsDry6HxP49BE1XHTtj
Ahnwaf5TX1EWbvcxUQliYOg7ef7QWYLA59l1DRIGoZEaRdPjCD5ILqVVtjKQ
es44dCaWoODyX8dDihlwe23qjL0JsvVmXy7LYLDZdIG+3l6COPcjGyOp/y86
ixs6wwgczF5GHX/CwDavP1H5NEHAu3Wl/m8YJDNeJmp+BJ3RX56oDTLQ/bvP
KXYTQdGJZKOvT2n908IFRzwI5D83Zigps7gaf3hNDM1XPhTIe5mw0H5X6rbV
iYAf8NikaclC/VaL8p9CAj9hU4SmM4u3zJfqfxwI+oOGO5YWsNBx/+yTYknQ
7WWUrtHHgnsecFCgQBDlJVhdsEuMd56NfTfV6fs2awUJAsRoE+ckas0i+Of0
YWOFeDHMreNUTWbSfj/omcO1U/uFL/GhSnQ+T0bOTFPlELnl7a5lygQHGh1O
xQo56Op/nqluQbAtvLDYtItDUuNRy2FXgoQMb3/FDg7mrqOPStcTzDPKTxgS
cRgpapV7QzlfUJI12MThRZehcMEOuj8xfqdTezhUlGl+55i6+u88vioyNp/O
d2pEdENNJYfEJXbPXOPpPoZ23rsZx8G/e6zK/TzBi9vrxzU8OTy1v7r6bRKB
ZeUphZwlHNrD2rNMkgm8dVyO9gk4BCXFXwyh+5b+0XcsVI+DZOWdHwTpBGMG
BnI+ahyqtD+Fp9B4vgEre7wVOYwlHsitLyWoa9o33mtC40mtg5/R/xLlGKWz
3oDDsaN1N+aIaH9kf8+Ln8hhwMbsShLlUOEerawqMSo0V1Sa9xBoapQ0Xq8Q
41bJh5aTfQTTJylaMeliJERuk3HsINgwcKmhjs7H1vLuJ6cuAuVhK/kObzEK
F6kESO7TeWZYG8Y6i5FpXOqfWU/33UDNr8dWjOW9Qzbnmwmssr0CvkKM/FS3
90upfcral087dMV4lpSgb0vrKdvZEDVJRQyLaTZ3W7oJwtQ87Peri7E12rx+
MiGovWdh0DZRjLlC7cORowQ162J0do+zSAvPyt4rz0PUoh3S/JKF57dXds1T
eKiORNxeVM2i0EZq7zKLh0PgwHvHGhYPDY0eV2jzqL2duqwyloWpwiiZoc4j
qnd+a8oBFq/DzF8a6vJY63zxhHsQi2MDOl2xS3hsCkiTd4hm8U10Nm63BQ8j
u6Ytxh4srkywGJ5sw4OXlSrVbaRsqWE1l3KLVuvZPMo6/W4uWpStm8dE2ZTb
zQ+6bVvIY7SaP7hPwMJCcxpXS/OZqqaemWfGImTN6YFgLR71c49FP6bxpRX6
K0cVePiWWIXEnWQR/rVKqviOIKOg5reWUBbLZVftz31BcP/Eq7cpv7K4M7ys
uVxCkCZxLxduoP4+fg+dawjM7KvZvJ1UT62dRE1UX+MLT7b7U31dN7Yw35cy
HNJclexYKDni56mUq3L028uofj5q6pwdQTnTyQsrKP9fn/8FXD3mlw==
             "]]}, {
           Line[{{0.585038251402245, 0.332639400187538}, {0.5850414215828407, 
             0.33264599377721227`}, {0.5850248667662986, 
             0.33265424976633906`}, {0.585038251402245, 
             0.332639400187538}}]}, {
           Line[{{0.5850414215828407, 0.33264599377721227`}, {
             0.5850513431606332, 0.3326398867798886}, {0.5850452942604962, 
             0.33265449916749157`}, {0.5850414215828407, 
             0.33264599377721227`}}]}, {
           Line[{{0.5848168341097123, 0.33275702430229087`}, {
             0.5849222929675648, 0.3327622280661321}, {0.5849159932740003, 
             0.33294329935747874`}, {0.5848690808118728, 
             0.3329397954827479}, {0.5848168341097123, 
             0.33275702430229087`}}]}, {
           Line[{{0.5848321384706952, 0.33272060558448413`}, {
             0.5848477253791147, 0.33271171597854465`}, {0.5848518268516528, 
             0.33273856554763137`}, {0.5848347196152331, 
             0.33274291310550996`}, {0.5848321384706952, 
             0.33272060558448413`}}]}, {
           Line[{{0.5847930257052084, 0.3327283218733552}, {
             0.5848102948175421, 0.3327251916837736}, {0.5848120981594386, 
             0.33274346781466524`}, {0.5847896172081914, 
             0.33274911465833706`}, {0.5847930257052084, 
             0.3327283218733552}}]}, {
           Line[{{0.5849639603420473, 0.3327735473698713}, {
             0.5850044437313865, 0.3328204659200305}, {0.5849864021572287, 
             0.3328359526274319}, {0.5849625295902955, 0.3328288414573883}, {
             0.5849639603420473, 0.3327735473698713}}]}, {
           Line[{{0.5846253712479746, 0.33159908863315124`}, {
             0.5846487706305916, 0.33160717529211936`}, {0.5846461299416591, 
             0.3316168208685088}, {0.5846268573221584, 
             0.33162093867914944`}, {0.5846253712479746, 
             0.33159908863315124`}}]}, {
           Line[{{0.5847926092764733, 0.33269842606705274`}, {
             0.5848093313588861, 0.33269772384045904`}, {0.5848100618364526, 
             0.33270733406307207`}, {0.5847928561782045, 
             0.3327095502427793}, {0.5847926092764733, 
             0.33269842606705274`}}]}, {
           Line[{{0.5848531438632305, 0.3317702020382218}, {
             0.5848713342151364, 0.33176090958896903`}, {0.5848800212711248, 
             0.33177412470682466`}, {0.5848596298530259, 
             0.33178145651676305`}, {0.5848531438632305, 
             0.3317702020382218}}]}, {
           Line[{{0.584861553739245, 0.33208558546495187`}, {
             0.5848832462045425, 0.33207647323793243`}, {0.5848936199927172, 
             0.332108465822114}, {0.5848636304232099, 0.33210542571175405`}, {
             0.584861553739245, 0.33208558546495187`}}]}, {
           Line[{{0.5850036379017901, 0.3326922259819962}, {
             0.5850293292449684, 0.33268913675480366`}, {0.5850075057002232, 
             0.33272199454854506`}, {0.5850104426201506, 
             0.3327072085225265}, {0.5850036379017901, 
             0.3326922259819962}}]}, {
           Line[{{0.584880631343336, 0.3318525583939401}, {0.5848883924262182,
              0.33184886186039575`}, {0.584891090868223, 
             0.33187000307385717`}, {0.5848820202269976, 
             0.3318716140473818}, {0.584880631343336, 
             0.3318525583939401}}]}, {
           Line[{{0.5848300545649011, 0.3328802866757959}, {
             0.5848375635558706, 0.332875503001123}, {0.5848465105766955, 
             0.3328970507110327}, {0.5848391843702674, 0.332901870232421}, {
             0.5848300545649011, 0.3328802866757959}}]}, {
           Line[{{0.5848017635638084, 0.3326449524501464}, {
             0.5848311687822092, 0.33263953950234526`}, {0.5848328987852937, 
             0.33265501680291465`}, {0.5848063700745098, 
             0.33265953005266186`}, {0.5848017635638084, 
             0.3326449524501464}}]}, {
           Line[{{0.5847948267259068, 0.3325661380666185}, {
             0.5848042444111313, 0.33256273142295745`}, {0.5847989347112938, 
             0.33257267079289027`}, {0.5847943244162864, 
             0.33256979429273265`}, {0.5847948267259068, 
             0.3325661380666185}}]}, {
           Line[{{0.5849358588123318, 0.3327332858560533}, {
             0.5849633153888023, 0.33271503801958513`}, {0.5849671724316311, 
             0.3327193199323597}, {0.5849387638963484, 0.3327409561985772}, {
             0.5849358588123318, 0.3327332858560533}}]}, {
           Line[{{0.5848450246228856, 0.33295254009057934`}, {
             0.5848632054505014, 0.33293945554391186`}, {0.5848650029868787, 
             0.33294242837305643`}, {0.5848488131297547, 
             0.3329608428828025}, {0.5848450246228856, 
             0.33295254009057934`}}]}, {
           Line[{{0.5849248291786612, 0.33276852592235323`}, {
             0.5849316734948586, 0.33276505502196246`}, {0.5849355871598845, 
             0.3327774084401518}, {0.5849287541450029, 0.3327809246168326}, {
             0.5849248291786612, 0.33276852592235323`}}]}, {
           Line[{{0.5847878855346058, 0.3328905511392036}, {
             0.5847985717304021, 0.33290146038561486`}, {0.5847843988916619, 
             0.3328951096658386}, {0.5847878855346058, 
             0.3328905511392036}}]}, {
           Line[{{0.5849911908356511, 0.33268965047957333`}, {
             0.5849951941402197, 0.33268729911236633`}, {0.5850029904316227, 
             0.3327037024640212}, {0.5849989973482942, 0.3327060912343025}, {
             0.5849911908356511, 0.33268965047957333`}}]}, {
           Line[CompressedData["
1:eJxTTMoPSmViYGAQB2IQbfLjuv+R4Ef2sVUxNz7zXLPn2RWRuSnlkf0Zvftf
OySu2R/5nsvllPPIXv7oapXP2tfsn728P8E98ZF90tFTpemS1+z9C/mPBUc+
svebxPR/idI1+/b5Mx0mRj2yf3+td8adadfslflVtSzdH9mf/nzP9Mmaa/Z7
knSeWjg/sncqtT8//dA1++k5y+awuz6yD7u4fanMqWv20vuu3a9yeWQfFf/E
rf7MNXuhHqGStXqP7BOsFJ7XLrlmvyosXuGwxiN7a5481X+7rtlnSTi1zRZ/
ZL+bX7Ay6dI1+8k8652VJB7ZT7zIrresHSgv3vDW0OCRfeLDw20Hc6/Z3zHl
3vTC7pH9hHldCfI11+wFFnw7ddThkf3nFsmVW8Ov2f+afCh0vsUjey63GN/J
7tfsZ/p1znX0emSfXhwQKmF2zd7go+30Kv9H9s9LKpvdVa7Zn5C1nJrm88j+
w87VrZIm1+zX3/zT8ybwkb3KZO4oXSAfPXwBaW23mg==
             "]]}}], PolygonBox[{CompressedData["
1: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
i3Fg8P/vZ/8D5OP5aA==
           "], CompressedData["
1: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
B2IZHDSdoRBN8NJbYTq+BP//98Z/Ac4mfg8=
           "], CompressedData["
1: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
f775P78ln8o=
           "]}], FilledCurveBox[{{Line[CompressedData["
1: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
EeD//6//AXPpeqg=
             "]]}, {Line[CompressedData["
1:eJxd0n0s1HEcB3BPXSmrWWPnKW6xteRhU2asPi0P83Q3To6O0EnOIv4gUXHr
0ha6Q5c6cafZ8pAT1bK7kYcdjiPWV8xzwn62GnGxHDd9+rc/fvvttc/n+/T+
fhm8THaKiZGRkTt+//4ZA0VSXTEF+0z73gktAWuLJFf/UgrYCzvLNkMEzHnq
PocnFJRtqD5w0fFhHIWziIL+oJ47yYMEsrNYAZ1o/o0hRkE/AdvZOXZ0GQVa
SULhiJqA5zl9tA4tUmZLenoJTDR58hXlFPwK4VuewLoVK3m0G91ueHX8DI73
3m7b4lRQcL5unlE5QCAgMqwvBh1iNcTwwvUEPlMvzJ5ScFudGROHttgYDFOi
j7EEaeUaApyIhhSuhAK9k9BkGv3AwZGmRlsy0l8fxf17ZBnE79Gm24fKMvC8
yogl6+FnFNzctRnv/0wgv/Gimy86ObBDFTtGQH24cnAA+6/sGyLffiGgaZW+
K0enbN1T5aIXEyfp1bh+epGm68g4gdgQuYKLfuZ78mX9VwJ/Hvq2i9CCT7KR
zgmcf7pltwnP47NZk5M5RaDkdHACG303yto1apbAmB2t0wnzKC7K4ynnCMSE
TJhNiSmw1VJujvMEAut8WvPRJaJU56IFAor6DiYX85cLndWybwQazFfFhehd
+jr94HcCuuec2hy8P7LKp11YIrDXpzCNR7Nqjft/LxOQFaQ69uJ9X5VV+2tW
CFQnxNHc0C4O3eJr6E3NCtNQQkGcfdCaH/YnCNanErE+fV/SaI/zXZLvdNuh
b5Xq/PYWCXgJ89LC0doKC7oK9yOndzBbcHzom8qzizOY/w+dXouW86ThUszn
48zaz2Dst/N8zD6Fea66t4X7Y32y6ZGsapSAsTAitwbd3JHkrR8hcD30AJWO
Xq6tErqgaxQe3GZ8v6GXu4S1wwT+f89/ATF3juQ=
             "]]}, {Line[CompressedData["
1:eJxd0l1I01EYBvA1pGyzzOWQyFkDFRopjUpbW/s7W9HGXJvWxRyhicuMmCsz
o7AxQSdqtVEOHYqSjT6mfWxLaolz0TKQTd1FTgeiYSTOjxIabUT1/G+7OBx+
PPDCed7Drqgp1lApFAoHh7yzvaFsx9UlwqwYtd/kBQmFlPXoI3yY4y5qhwup
OqYP3sFdN3XDDxV68Sq8KUFS+QwOSXiSdfictuxTFxyT5hZFYQezIN4Jzymd
9L/w4mWG5AP82SpLi8G0krb+APz+tEmWXrtEtAkWm9hHg0RjOj3ChgtPbdTv
hPdspanz4MTxqT9ceOqF138SjsYvlqphu4d/RwR/5wamq+BY02//edhi2m/u
h6OrDSnH4HCFlT4DL1g4B5Vw3xZDl4AfJIzqeWUl7C5PpQrh1wzJLx28qzrD
UwpHZTUtWnjczXI+IH2rJ6MMru0eLBmClcuvvknha4dahyfgxipWTj78Tn5m
ZQx272PdJ/uh3JU3KwRBgu7wdZN9DvdGJlNg//Er2/thtU2YS8DBn8mDFtiZ
rJpxkfNzjJea4Yh21KSCO+b5Bj18+4j/eTksjmrsdbBq28J0Hqzx/9AayP1M
PhGmwrKXX6It5Dy5186E7Sv2p/dgz1ld5gj6MKwsM8i8b+9clg2e3mj3mmDb
2xsuM+w7EGjtgE+EtQOd8IUkUXwATktUZirghjdjE49h3fVZfRa8ZlxTkXmY
O9ZDg4sL6sVOmBNKmE2CRdaRr27y/YrdliHsv44npJJ5dT5vswv+/z/+AwJw
TQM=
             "]]}}], 
         PolygonBox[{{{0.7886288053261166, 0.7481486884499584}, {
           0.7884843996615669, 0.7478220922794087}, {0.788204434070921, 
           0.7482370485966489}, {0.7886288053261166, 0.7481486884499584}}, {{
           0.7758377266046639, 0.7507555704843865}, {0.7718404383162712, 
           0.749062219438893}, {0.7689890101921127, 0.7478675548048179}, {
           0.7633667591868653, 0.738425737830134}, {0.7583162950323473, 
           0.7303583730668074}, {0.7501473876930734, 0.7346907343926172}, {
           0.7419508300776299, 0.7389280433846133}, {0.7254786460579803, 
           0.747116489328463}, {0.7209225584356181, 0.7493053026340841}, {
           0.7238023415020071, 0.7537912863221279}, {0.7266336706345922, 
           0.7583212727498049}, {0.727412208420008, 0.7595886126607403}, {
           0.7435936926733698, 0.7568168182416379}, {0.7597360882432275, 
           0.7538728380451923}, {0.7758377266046639, 0.7507555704843865}}, {{
           0.7160381063793889, 0.7614309034918939}, {0.7160255558154413, 
           0.7614310063632205}, {0.7160236424465519, 0.761433190981737}, {
           0.7160381063793889, 0.7614309034918939}}, CompressedData["
1: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
           "], CompressedData["
1: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
hMF+JA==
           "], CompressedData["
1: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
           "], CompressedData["
1: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
7nVDY+olrP//v+/+B9vppSI=
           "], {{1.24062306723688, -0.3757976531489406}, {
           1.2431920206869185`, -0.3718183934142953}, {
           1.2434784151395177`, -0.3727413797034249}, {
           1.24062306723688, -0.3757976531489406}}, CompressedData["
1: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
           "], CompressedData["
1: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
           "], CompressedData["
1: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
/7+X/gdDJxcZ
           "]}], FilledCurveBox[{}], FilledCurveBox[{{Line[CompressedData["
1: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
             "]]}, {
           Line[{{0.7827438927990062, 0.3790617487383961}, {
             0.7830571980041298, 0.3791481393489302}, {0.7829373442717579, 
             0.3794786707849359}, {0.78267651483682, 0.37953156846812813`}, {
             0.7827438927990062, 0.3790617487383961}}]}}], FilledCurveBox[{}],
          PolygonBox[{CompressedData["
1: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
V6Hr3ZQlv6xm0JX9IXDktQr//7/5LySOi7g=
           "], CompressedData["
1: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
Rz/x//3Fv9rZVSk=
           "]}], FilledCurveBox[{{Line[CompressedData["
1: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
qxZJ/XmLw//fr/8FDJzN9A==
             "]]}, {
           Line[{{0.6033971227813548, 0.3331817010957049}, {
             0.6036989802690583, 0.3331587685545297}, {0.6036362850177179, 
             0.33339335302994244`}, {0.6035339692107169, 
             0.3334274891394728}, {0.6033971227813548, 
             0.3331817010957049}}]}}], PolygonBox[{CompressedData["
1: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
7vP/3+9/A7ZsV78=
           "], CompressedData["
1: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
fg==
           "], CompressedData["
1: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
EzCYY7c6VeYX0uzvFEbI/ML/+4d/Aesrw3Q=
           "], CompressedData["
1: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
4I0=
           "], CompressedData["
1:eJxd02tMU2cYB3CgmxsbGERucxtQDIO4ahioqJP+VbQUrLigbs4ybk1Tbnai
lbA5XVBXNimrgcHwBsogELzMC4qi0pYhgozOcRtScRPfcwTktOfMJlrMzN59
3Yc3T355vjy3V5z1eYraw83NLZa+/6KpcdXXTIQAV/KY0CViEMSsX7vnNQG7
OieEH0YINlkqhGLC47mvkD7PRWC5NWvhAoZHRv7RvhO/EpiWpMafP8cj8Jdi
Rb0vA+v912PTSni4tQ190PwPwR9R4Zej9/DY5rF6YLiPoPj4y9w7Wh6LVnSN
qWsI/PxCRBUqHkUvW+2VOoImb6Xh+EYetXLTk1IjwaG6ebcPh/EoeBTgcWAb
wRNn14wrhIc8uleq/4QgK8m4/eaUA6fvXiywlRLw0dIPNXUOXPGWiq88J8if
lmvztzgwaFtd6/8Kgy2q7/o+W+PAR6M1aTcWM2jZfT2xf5kD9dfebY6h9XoG
m75oXeSAe9SGe9wtgoxCc6Ga2qmcuLCik+ChzCLMF+wIrHCt6+kgCO4NUF+/
ZEejUqpQWQgOxoj8dxrtcLl/c7fSTJCZ8Oa0lnroaKTuDLUmSz+SQp1njTnb
QV3dfvJ7P287AsQJ0FgJNqZOPjL3clCGZ7QHDRH4KKWHkw5xsMeVJVy20X6v
1nrKUjnst50YVvxFMP9YSU7/UppXe+f6yej+wrrD71O3dee8EUpd+PjAvslY
Ds2qGWsQtfSOuT2qjMP43y8WrNnBIF7cs1dSw+Gd351F+qsMZCUPVGuptxpV
tjPUhuBAcQp1bphX0RD1Ln8vzcVyDrc1m5ZEDDAY9H02Ov0jh5rx7JhulkGZ
OnQ4rpqDyD3S+f5jBq0P5iQvpk7hiquSqUMqTQv/TOQwkvmbojeLRf9b1mPm
uRze+1Zyc7KFRahhSr8DHDx9pLOSBlnoL+zeunczB63SNbjqEgv508zwj3Uc
zsU1FBy8wcLu2h/dZuTQsL1/9r1yFj8/JMu/6qDzOVVfZraw+LRuqUEhs0PS
lLhsqoqFLt9HUt5jx6vZGSJtLovzFT8dkSscqBwbb5CvZLEv3RCfZ3VAc/JI
Z6EXi9SWmY6ZCB7Lz1YLzlEGpXNHNhdk89C9uHba1Mhg3ZxTQlUTvUeXf9rA
TgZ5bz+NzJng8Wz2l+mSlQz+/7/+BQi80Ec=
           "], CompressedData["
1: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
//A/xjYxIw==
           "], CompressedData["
1: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
           "], CompressedData["
1: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
dFI=
           "], CompressedData["
1:eJxd1Xs8lVsaB3B3W0lRbt3cSgexI9ulmdNTbU6hDooKmU7JoZOQTuGY7d7o
TMqojEqIKFIol845Do8R0mUoM9n22gqx17vLPcVRMbPm/Dl/vJ/38/2sZ71r
rc/7/N7X5GDEzmAlBQWF4+z63327r+eYtwkF59ezKtfypBhqt2xq/yoK75NM
f22Ik2K+50BPShYFp+9DHL7WkOLMpauJ9ucpxFXGFxVOElwv+5i2gdm96a/W
N5n5yuqbrLIpPGstr5ieIFgaW3bbktlqt/Sffxwj2K802PfqCoXqx1qDb4cJ
dvgqiHh5FK4peyk7ygh6Ldm7+s+ZFLbOP0XPjhKs3LPvQAyzftuk9UXmmpMb
X1aepWDxL7uHOV0EFS0NlQ062fq2tVpeKQTvrFVcKZBSsPPuFfU4EtQteGRR
7sHBRsGaLRM2BMl9t9HpVA5Ujseqxb2QYHHWW+93pzngucS0LayU4B+4+9NL
wzjonCNF5XkSHL668S+vhRxM2wrIuUkJpo/WqhSacHBU6nJsTiLBwvPNPq81
OVBVLxecnJVgXnK0ltokBcl4Y6/VgASVvxtZbSimEL5lx4UuNv/V8dM3qx5Q
+Ny87bflpgR1zizOfFxFwT/I/1n8GoKbB4sinG5TyJa/GUo/QnDQd7q9/BsK
T4dEwyk/E1TdGr29gvmLkK7SJOaFx8pVdu+n4CUYizcuJrj1Sd1HmR8Fbeml
jTmVBH3My/zSPCn8PHLGh5YRrFjvFpvhQaGOap7wvEcw7uGtZB13Cjvd1vb4
3CWY9o+qvYFuFLR+vHiQV0XQICGM1xFIoa/tnW/MrwRPRQwVPWNetqHMKoH5
whe6Aj9LCqYQ1z7M3vdIoNLv/uht/Lv9F+gZnGI+kOv5leP3bH3ujQE1pnCR
y+wqzSHYEloWWL2M9d+39tdOHid41Xp2S4Y5hQtdtdonggmGNup8zLSiYJuZ
Hv5iN8GgO8VT2axee9uCyw6RBIu5Q/85vZzC5oqylW1XCLZ3LNllqENhbtlg
qFos20+RlVYYq9fT+Krk+i6CnZf7bJr4FGKGH9csdmX99QxsCp0p8CeSwj0c
2HlNNT07mQuNzboVLQgmyjZFp7E8HBPSeTe/JKiuzM/bzPLC13Pc1CwgmN2p
eL3VjEJo8L1FavYEw3o9dSOZFa/yy4P4BHNd/XLrTCmY9O2z0bIjaFwnqsxl
83sjBz6M2hK0eNgeWcnGJ+bt3Cxh9ap1o5/9mbcXP1m1w5rgnojqE2JWr5iV
PJnCfNR+a0WJPgXDFfEx/X4Ec4qM/D4YUnhn676+lPVPlsLKfzey81dL31s2
7iC498xPNaPMHge4G3POrD+quP0jCykMT5dS6SaCGocO62+YR+En3VAFIdv/
Z5tx0SUNCu0frvMCmNN09C/N8Fj++M5mRuy82yIvRid8ksHc4XrhoXSCvSrZ
K5YWyeCJoNRpwJJgpJvReGy0DG7z1xmJ2PNfrBCFFFyXQZWTzkxGnwTHs+m6
4GoZzF8U+oN6jASrr+Svd3suA83Mw/F3Ertx+ZWWyHfNMgj/24D9LfNutJ4J
CZpgrvcd8ShgnlR6eSOsTQbJsyFGz1vEWNI2PyqZyCAovzfqm2IxNrxfMpTF
zjst9JyUpYqxdcrV4T7LC+8NLzzsbRdWLD1xePYehbGGQw/k+V34sjJjmMfj
IP47jT+1DHWhRsi5d1m6HGxQtY1Kb2bjy9WUfmP5l+W3RNy+34V5oUXVhUc4
GF3rkgGGYgwoFAtKOQ6UHCWvGgPEqOMz9hw05fBD5yrdD+Fi5PN15XoL5JA8
KHIoZD6fYBOWy3wzTaHlfYQYW5yF2vpmchA9WEst28Q4aJYY4OQmhx8n89UO
vhajvOWydm2AHF42ubgtSurGJ6nm0uYUOSQ92xXTUtuNUf3WAu88ObxZUrW+
4VQ3tl0pOunVLod6na89Zx5141jHui21MjkktN+pCg6SYGqA3vE6Zpf6o4bp
zE0NT1NuMJvunjC7x3xVqXXqyww5ZORlGgibJNgP5+7mRshhc+N+g1Et1g8F
scLTJnI4G5lhvN2Q5Tt59a2IhXJ46LrRQNmFfQ/idRMteHLwtlgV8IiN58i0
NM3rOXAcrhWWBBEszwyuC6vhwKHeI8chjOVHZGWUfpcD9U+pTXtYnhdPrezQ
juLg2ITghm4NwR2LCzwC7TjoVv90X3WGoLvMbE3lJwrC/p1diXZSLBGVHvZp
ZfmMjk4x/kWKcf2XGxPiKSi5xxolfZKilv89radH2PfV78Cs/doedFW4dmGB
kMId4ZrmpYE92Lz3xLcNWygs/fucBdnXg2S8wCiH5U1VI+EXm3wp/v//8b+i
BNcz
           "], CompressedData["
1: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
           "]}], FilledCurveBox[{}], PolygonBox[{CompressedData["
1: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
FtN5Nc+sioQqb/5xlut2/P+8/h+pBfh9
           "], CompressedData["
1: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
gv//X/8L5gjb+A==
           "], CompressedData["
1:eJxdVGlQ03cQhYgVK9iiKFArlQbUGawDIogDskJmQMHYyoBWlLGgQEvkCAVR
QPJBBhWhNZyWoIQgIHcOQzhnQYgh4RDFclsOi3JIoQi/v1Ij/fdrP+zsvHmz
u2/evFmLwAjvIIaOjg6Lrv+6tvSS4MhjAtpBnYhtLs3IL73M9NMQIB6cVH4W
Ynp5BzeW5u3+jg7pM25Eb0nYkEBNYGAMxMzaBkzKZpjtbCOgfmPbVJJdjy53
yXG7dgKl2NAao1uHit3TTA3NHzod8NgjrhZ9HpzaG03PdzjUpQrOK/C67pKX
eQuBF6yp2EeKGrQIUKqamglwRl4vc5g1+Ce39PCJegL2pwrUC3oKTHB4tZkj
I7ASl/PHgo4CuclRNjlSAkap3FHRHQXOL/LePiknIHjfkWIhVKBnaOeFpDIC
pjEtYz5HapBylSqHiwhUmj8xqhTX4OSP7T8FigikbbMcLdCX48mhSN0AGgvL
NNa+6+QoeRqpjKTxlal3b0o+kePwun7bpmICz164r3pfe4hP9t722FRCIDBi
wbhCK8N51/flBfQ9/9X+kolhGcaZPcr3ovV09T2vTbsqw3j5V/IH9wksu6p0
b89L0IP51JMjpPVsmx2YG5dg8BJ7kzifQHx6TISusRTVmRl+r/MIjNryL4hq
JWi8vil2VkCAcSVrS95LCfadmU9eySVwcSL3bRdLgo/POKsxi0DMgOFuVa8Y
+YGtqR/SCWzfKs7fsE+Mi/Y2dtW/Ehh3chpZ8BPj0cqKnefTCAyWWbsbMsU4
f27i5McUAnF+vOX9TmJka41Kaq8TOKZn7jZxvhp3pUvbgnn0vsXYL3LtxbiW
oXThxRMIqz5y6fOeajxZe042HUXA8v6KmVFCNfpwnRsquATWW7DuBUxU4fbC
DNJD41DbvO7wjirUMuzN+2ns2vBDL09ThY7KySBmNoGzbTOrE9eK8JhpyI4R
2t93/BpY/l2IvwVXTnnWEdjIqzF86XoHO937VsLpvEYrv048m5GG7reKbnsM
E/iMa8K2NozBPfzBctY4gf1VZXF8G3+0CQ3TZ88QUH3DjEwZCIU1EUMJ0jk6
n20MS23Sz+DE6r0o/pKCb628jUSTN4HdyY4w8aIgOvCfOQfLLJhUaHwnL1OQ
YC8U/BV9Fw4O130wKaZAaPCx+OCiCLpVrD6rKgqUxpGqDnkhbNFIFeomCgb0
bhjhxnuwpiXqwNJzCvxlZSltHCGMbW05/mGWglmRgGXzrACCjn7/aaOWguGo
Hut90yIIcZoxl45S8MsB/WyeZzq47TNNjGmmINRZsiv58Hd4wqMgy0BIQa/b
jpzTZplIBbaWXE2koP7m3sWuuEL0Ddd0dp+hoH+r49mEzgq0as5cWutIAcN0
6uErHRnuKTKY2r2ZghuaqGucNAWuvs32PET7kTno2N6/oRH//x/+BfbcUD0=

           "], CompressedData["
1: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
DzhN1tLzeE/Vk79YX5ws517+SP3/9el/NfNtjA==
           "], CompressedData["
1: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
           
           "], {{-0.4417560119858241, -0.8224988179816467}, \
{-0.44001004093547325`, -0.8221600983389099}, {-0.43870776140583106`, \
-0.8232229931889072}, {-0.4417560119858241, -0.8224988179816467}}, \
CompressedData["
1:eJxd0nss1AEAB3Bk6zXSeTakw9Q88xq1chEdKuZUV/Tg2pXa8uxqzFQ0obbQ
GWktkeXRVVM2nfFlZ87i3HH3O85Kkfg9xIVYL3X92x/ffffZ998vW5DGE5oY
GRl5GPKvn4/t56hjxhDVmtf58DaNCnsvh4R1Y/jV4BxcHEBjwjGTuzSvQ8RU
TPIVGxo7nP3H6rp0EGre17p40ThhJtV5J+oQmNyQs2aFQncwdXnXzlGML1sO
PJiloD5mW1ozOALrorDYGZICX94UFXB8BOVu4flkLwU/1kzP8IQWm/Viz2dP
KGzsmqp8maqFc7bjHnYBBdv269d6PLRY+EpETQdSsAo4Gv3oKwFZxKkPgn0U
9BmlfYWLBLjmP965r6MgCPkW+iJJC/utCQ6ZMhKbxO7SIMO+kT/R0T1I4k0/
y+mQwW2ykJscg0sjo4Mu6glsc0ic+aMg0eknUUwKCVQobC9FfiaRHOJ7tUGr
wRm70CBuIgV/rum5RpYGaWxXG+dyCv3cQw5lt9Rw1NeveFrQsPw+21XEUyMj
9Vm2mEMjQdbEEwmGIXUtyS0+SiPPInb1kW4IUcSMSOhPQ5onF93PGsKvASI3
/jQN8nPNWV+VCqTZ4ou9cTR23lt2bG1XItLkIPdONY3f5dHppjdUYB1MmiWM
GaxdLZPKW1QITdhQ58NmcLIxXiHxVMG8d6210ouBuauLf0GZEn687V8OpzDw
5rpNV5cq0eE+l5t6gUFGDaf2p8ELVVbrJQa7vOqxeeqjgmY3n2xJY7B4d04s
jhuChl+b9DaRQWAlZw8raxhMlfxI4QEGeqfJB3ZiNXhbNI3TPgzqx9mcmtca
lMSRYYwtA1G4m+SxhkBuvLexeJVGTkxzivWSFvNZStnHTzTSm9rmF1mjeJ5M
nR+S0+i35rcH+upwpTm/T9hE4/9//gUWL4qy
           
           "], {{-0.46095697468160823`, -0.8178111022020007}, \
{-0.46094505759588333`, -0.8168750676979519}, {-0.44551064521940653`, \
-0.8104593334015668}, {-0.44046035050991567`, -0.8083337191094127}, \
{-0.4404603487143277, -0.8083337202788575}, {-0.4393110369278858, \
-0.8160028236773241}, {-0.44619048777107845`, -0.8169419726654118}, \
{-0.4458086938770054, -0.8195436302534554}, {-0.4431007819906856, \
-0.8200373448639469}, {-0.44470291691035646`, -0.8217935209471623}, \
{-0.46095697468160823`, -0.8178111022020007}}, CompressedData["
1:eJxdlXtUjWkUxo9ujk4XKSrVyJFLkShJDT3JSJaUmJCccoqmjjmdTkRNkZjS
dM8kJpcxDLqhkEguJbpYKeJ7v2KFQr2r5Daim+adf+ePb33rt/a79372u9fz
fZMDFau3qAgEgkD2/PfWO3ko8oIvxXs1nW6bNg4DNQqphPGT0j1d5YwlneLh
g4xFAZdtNjznsMPC+kapH8U48+DBjq8cSoQVUxp8KDTMjBMiBzhUHjwav56x
QYFOUoSQ4KRBfchVT4qP4X4DQSICrQUFjikrKEYl2j4wGE+gDGupD1jC+h/w
GDNKk6Br+YvdpU4UsW4x/iP6BPMaDy8JmkaRlx3dct+VIOXuuDo7Kwors+go
800Eut2h5f6mFGuraivOKAlOObWOOIynaOas3HzSCARC8w7NcRTF0aq9DqkE
g+szi59rU6ysnXMsqoZAPV+e8HoSRZu8z+DWXYIyt2SXLBMKY9vR2mNfEIhH
z1EmCSkcPt37IKIEYa/m9a1Vp7Be7dTrx+LB4ptpolEUk/Rzr/h0EkxRlOja
D3dhmYlae3k7gfWJ69LYgS6snmFe0zRI4CqtmV2oSnHa/Z6rkLHHtuj2bay+
gpyf+vY7Hil5zX0HGf9aMj47aBKP0qSWZi9NihqtrDevJvJQ3JrTLNGjqP92
3GqmEY8ddYpbcjHbl9o55+3WPJ672v/YaMPqLRL2DdnwKDG5np7vQCEO3yFI
ncbDZHugnWQRxey577IezOHh9zFW/s2VQjvGcGkJy7e7uJh6s/3kKE5Z9bjw
2Oj57KZ4HUWfhvxTIFj9uLLCjA0Ugu9Nd1v78Xg6fFf/QziFpKLTUrSBR6L3
fEMXJcWA18QnPT/xCF1nZNm+l+JKtK7pUCyPC7YaA49TKZLcgwz6lTyGrNsL
bNPYfqv1PBMjeCQvvKGUpVDIPX2dnkh4NEsjz7mnU6x5pxe1eROPjltVu1Sy
KAp0V63oWsNDV32lZ/Z+iheB/mFDM3h4pTsWT2fnvRZyzRJ2n+Eppr81HqK4
rRKT/EnMY1uj86DxXxS1/eVm9iIejebXjcwZm0avxVchj93xVGrJ2NfO+0UF
49uip76v/qbYp+MptO0j6F4sV9dm8YgDwRMW9hAcbRfsSjlJIbSQnit4QGA6
sPP0llwK5ylvj6+tI2jqszNoYHprN1ySdT4ieONz3Hc047NHa5y7WgmkQXec
ExIpusocT2S2EcSLl3lcZvPnNWVq7rtG4ODqYTScQTGoW8W9vUyQXCTeLjhK
se50ZHd2BEGbw+JhX6ZH9UhYQLqMQPPY3pzqIubXqzKl0p7gvu9kA5/rFCoH
uC+hiwgyejJfplVRpBQk9Dy2JDij5lz+up5iQeOdYC0xgUb3vopljKctFSju
GhMk/tkrXdJI8Xv9/AJ9QwId96zpVxl/eO+uOqJDYB9z9uzCxxT2Vd2DX/QI
1DpPbB0mzB8S6QUT5uf317z3U8bvSD7fNoblvzu7aC7rz12ZnVrxkYPuNv+G
XVco9rg8CwlVYf49VPzDz+cpWj/3T1g8zGHPKq1ZankUdHPMxSFVglBnd2XN
aYobIRmyWva92T6/9nJbDtMv1+/d+oWDe5PGm0y2/zilW/IZlv/PulX5M9l9
Pnp55qRLFwf7Sh+v/iiKZR2tlZ97OFi2hO7UZPwd+bR35VMONS/THzgqKEZb
2g+ZtXDILXrr5h/N9qVamF7K9AbIJEnpYRS55MjGUFa/3aj8eAbLV07VsTjE
9P1iuTzLjPlhy8NC033sfrbUx22slVNY1MsTxrL5nIraRoJCmR9HCv/IUicQ
mQeXeckoqvPb78tGEZTOyiv5xuKHK6YfLhvh4H2zw6qHxbUPP8vP6efwodqw
/yLTZx1fWGnEeILu0LVVjAfXVA42vOYQv7mhOC6EYn+RJD+PzRMmKQlbwfqf
DzkfcIHj4BQtS45inPNVVG7DWO3iVvVLUoq6L/n6zg85/P9/8C8yTh8C
           "], CompressedData["
1:eJxd1X001FkYB/CpRiYmbVKplEyqU0KSRm08IUsl7bakQbUMtY2XMZLkPW+7
oQZr6Q29aL1koyjyGtaqabeR+N1RkpxKvztYo7zkZe2d/tw/7rnnc+5znnOf
c+75Xj1P4X7vmQwGw5Ms5c7sveozhWgwPORRvEwNgVlYXt72NhrMGuQTo/MR
aNinrq2Q0qAYtJ81rYEgIWfAw4b4F8mWwgWLEcyWx1bbSWhYY8sQNi1B8BvT
svIdsbm08Sibg0Dcl/LmXAMNSYXxfW3rEDzh6Wk5V9EwM40aPW6BQC0rJuOP
IhrUKwQikRmCLq7VFO8aDbMu+x85L0CQWMQJYlyhweXmSXl6IAKutYP2lJiG
iXkNVH8ZgjMcO4eyJBryW1LUYh8g8OA3WsYn0PChfOvVlC4E752zeaqpNORd
abb88AJBy4ip1t/Ej1xLBb2tCHTGT930vkSD5ar+7AOPEVzpYUQkXaeBpe/x
e+FTBHIrP5W55D6BaUcXbe9D8FD9Je9tLg2xGo6sTSMIIs/QHuvIOc/0u+5q
lgykK6u0VxLrnD4AY8QW7pc+byTOMajaoTtHBsXZguz9ZN7R41Fpaloy0JLY
dNc10eBdkuHAnCmDsbVLQ/Y9puGfxq6CoQUymJyxut77FQ0GDQor4MhguNJf
1YWBwa92/nVDNRlsOMEq11DBYFHTHT5G7uN7uGLKXQ3D4N34lVkfETRr9rwq
J1akl3WEEEteLLOvJr7049JhETH/kNFqtyWk3zR3vzWZP6rg+ZyWDRiqDK6Z
25YjqA36ib+C2CV58fPibAT0wVYwt8bwbl62QvMCghmWd4+9tsNgEMLn1kUg
cGFuypzljOHezU4WW4gg/+mkoiQWw95pNifjEIK+uiFhcBoGL9+WFEEiggij
P8tLMzCsVr/tXByHwLjtRcCBLAxW7GDDp2EIavwKjmvVYAh/bddn74bAr03v
1d56DPz3uUaemgh2c4fum73FsBxVXDz1kALv1nv1itcYatNLXicdpaDZ+5gg
4jMGOk4qHuZR8OBMYdbIJwwaz73FA0BBeab5Z79pDHKtTs3F5hSsQi9TM5ly
yM0bybm3iII9sZujecNk3nNO/Tmf2kGUteKLl+mN9ikt7GznGmMMzQEBiTvm
k3p/W11xP4bioSKJ4Vg7uDppv9fpwXCsyD+nfiEFO6qeHXWVYTBZ9HBy4RwK
tEUTt540YejmR96t06bgh2XfnhVmYxBr+/yVP9AOC3TZRyQRGKIl3+RuHmqH
ndJ9RsliDIWPPe/ISf8FiRkJYuIsT56olvRjnQ+U2cRh6FJsXKe6ggK+Kl08
6oFBfXZQr4Y+BU0TX4fV22K44DuvMDOUAo0CauCREQZpu5V1fjoFg0mj7xhr
MLgLjWUp5RSs77zdKmdj4H5wT3avocDtsjDqFQvDV4FuJsE9FDQ+EvQljdNw
JFZ3fFsvBR2OUsEIeZ/Cq167Po5SIAw3ccucpEGlqmXXRZIferfZtTq9NDzg
3Hz5rwECfa+CARWSP+Wmsl7OcgSsW8OmCTIanJnb75wieWTR62QaQ8xc0h8T
SuziM1EaRXyWyguJILbaON4ZTjxY+Wmf0u/T0j+EEncH7AlWuqq1KOY0Mftl
mSKSWDIQZRSi7MesrI4mLoy77xdMzFoebBxH7HDYdfAk8SX/3Op44opdYl4Q
sbthZFMi8elHhqUniDtLb7QlK+uDBzlKh3JXVyjry0RrxSJiC6e3a6KIJ57o
6wUQp9x4NhVG3GPmyVaa5RrZGUI88Gv3TiHxnifSrJPEP9sEevkQ56vyHYOI
O4JuVwqId0f73zpBLDL5yHUnHtiqbxlAnBr5Bh8grhyNchIRP3NT/biB2Oz7
bUsPEr/p1+taT0wXtwQ5E9cVz/VV5r1Kx5YSZd47jku+5H/P3J4v+f///+A/
kqgwHQ==
           "], CompressedData["
1:eJxd1GlYjQkUB3CS0nppIVN5WkyLpY0rhH/JEq1ukSVXpTKUZTSZmSdZipQu
KVoGRVky3MiMMEMkRRHNROh9b921ovXdIvu8vs6H85zn9+38n+ecYxu9VRSr
NWzYMDFf33ryMR/pBAsOPcK77/wrlTj2yMRtkx0HO91ey7gtSliVSPyW23M4
H33z49AGJU4uM/JKnM3hjMT09VszJd7uePJi2jIOwvIw71X3FPCY6XD19SYO
DgMnzH+OVCC/0naL4XIOt/a2XHTyUsDMsnhbdxCHTSc848IXyFFetONh0GIO
1zM+OhSatSNMJp2vDw6ZzfryvK8yzGofLNd34VB2v+vAiEIZVB0RexujOEx1
9rvaXEfC5MC5lsR4Dq+S+mIfjSKxyNI9/Ju/Cu8SjbxXXHRI7A7mICrpd/UV
kJgnG1yxdDqHWu1/7f4wJ1FMnXc6yuc3KTAWWFmRMJsxVlD3icXIXuGiNDsS
nQ8Zd4WCRaeYEXQ7kahD1V+aWhbn5d4XRa4kch5UZjYdZZFJtWtnzyYhzVk0
KWQnC5N9FU/t9fh5VKreKzEsZntzZ4JeEdhjO+g+EMDCIN07YvQFAnNN9682
FrK4kMU1bvyFQPyRD3mkKws9wXapwxYCmiUbPzWMYSFrtbb8WEogMWuOuphl
ENDTtWrlSwIF4uUZq1sYSKwvJXgb8HlF2s6frzN4aC4PqpxHwjFi8Kr0AIN+
/X+qKw6RONjo7LsukYHDgvUxPfNJPHxVmNMlZnBQ8WtM/xABKaOVphXOYPu4
moZ7MgLB470jpFYMjKWzl87pJeBr/mLUKBUNxRv9HJ9PBCy+HB33Wy2NFQmC
5J3aJEbkufuMK6PRX+o4QW5Iwqm2p56Mp2FM9420m0Ait8RUXb+aRqf/e+FM
exK7jiSvfR5EY3KNnlSzj4B8VPTdt9No1LuAyfxMwHPhrmC5BY39fcnXzJJI
vHy7QmCkS+NNDdGYV0Ni+MjkGQa8Yya6rm7h3frDZMNyaxqLwzq4olIZyLNM
X7QNjZAqXx3/OzJU6EVKvv9CIVBs7qnV1gYBNSPKnXfZyORTq660Q5mtlS/v
ptDpnHqBMZajevfBmVlqCvq7cxTZKbwzdVzyGigo2e4W9wg5HN22vd5/hUKa
9H1XgpccGpOiPdrHKbxba1TVayPHlNR3zk7HKOj0+6z5aKnA9iW6nwckFEZX
uQnXlSlgdy5lai7vqtBu4mm5AsbTK8XH0yi0OM+Pm9eiwECThLi0m0IB8Qyl
nQo83Zmuf3sPhWg9v6KsXgXImAui1lMUXNZPpx4vUCJvkk7YeH6eWfoOTft+
VMKow/yD/R0Kua09i84UK/l7ijky1Ejh05y6qY6NSoTciI/KJykIfE6uHP1B
iZsBNSWyQQqtpdfXxAWr4FQvHrLSoWFz2N/q6VwV9DbE3khypTEl8EjElF0q
vBCs0+3wpRHuIx3RU6xC4fNTmkkraUQwzWP0qlX4k/PwbBPTiAuJrLZ+rEKc
ykImiqJRdCNO7meoRvqqsPCk9TQKDJunXQxU41qGMbskjsaJyoA6+1tq7Pnu
8mVX3l5Gd0yv8c70ZLYKeessnBjgfFuNEybj6lr5/XKpcLcOcdPAy2+g6dAO
Gh7h6a97hBrsiinIjkilYUvlVo+fqsF90dEzBlk0DjeERg730MDRb/uT2Awa
RLZRR1C+BrHX2ozjeWct2FYSytsorWFrZi6Ndw82Pw49rcFPpamTbJpoxG5J
F1vEavC3smvdWgMG4qWfxVOcNLi5pq9g3mIGd8TvdSRv1Ih8cjbwXiqDK6Up
ydN+V6On9nS/qopB8/HexxM2qLFbFEKcHmJQ5iChl9irMVYuihryYBFN6jVV
tKmw9tH92s4EFjdDhrkF56uQlJAi3HieRUZTSr1NoAoa09BnO+UsNrdLpttq
qfD/f/4fYfoB4w==
           "], CompressedData["
1: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
LP7///kvg45VqQ==
           "], CompressedData["
1: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
njRR9y/+/3/8F9tfdzw=
           "], CompressedData["
1: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
mxuPj2cQtFq7fKbzU1z5pyaXI8L/5+v/AM5VsPs=
           "], CompressedData["
1:eJxd1Hs0lHkYB/BZl8WMonRdu2qSZtRUlFIz1dtyymWjC0etxXGyrmlIYSaX
skLIKo7LCLO6bGoHZZDbZrRmKBNv6KpB0mw33bfbhv3++nP/mPOez3ne+c0z
399zHvbOiG2BOgwGwwcf8lRcXWdtnKal/jy+wvKbvTRlHGb9+p8ULVWZXNRW
GkVTB7j6K0bgPdH7FyxG3cY4o/0DLFxSOFABt3d/+nQS3htouN5pH015TGu+
XgB/mzQ3pCCGplo1Pm3JMPdQt2hyLE2dfynxSIVV9eNjfvDWClp5AW4xPyyI
hCcMGSGV8ICau3sQlj5Qysl5N/YpLc+IaCpA9n37T3DXqakWW8U01elmH7sS
rhX/dYu9n6a2BL/udoOnU2ebXOGDy/pqhXCy0rOOF0dTRbEez4PgVE3lsSp4
Y+OSaGf4Uv+1u01wutmS0n3wq8KgmYNwkt8ci8OkX42n7lk4v90ms5p830qT
8gts82tvXAOsmJbGF5O6foitQaqWSn8X+uwrWF/BkrxEnXd7oUSOfuJfCYfr
4L6lExUq2GTtCLOe5LmNNyCBN81IDbsCL5JHvy2C1ZyJG93w3aS5/qFw84RR
OqmHu1+86QXXW9V2KeDzRUMvRLBZ7M6LJE+z1kT2FniO7YD6ImxtsUPIgul4
Tkk7XJpXItaD2YFVCaT/rcyEGgM4+561dy0csDKtRYV8I+pqGsjvGceU2xXA
Z6XV/F4414QXXgNnyk5PuwFPKmMN7YHn6JVwnsERHUdeCuDtAzmjk5HH0xDu
WAjuL2NNi9VquE1nxGQWuc/h5bwd8M855rqHcd/CjdFuyfAn8y19ZD4YPZ0m
XnBa3TVmLNzCZnIc4Oc8WaIpvF5rpAqBHby6t/dj3iwUz4KC4SebGo+0wXla
8RAfnl2t56KH9xsCYpmL4SoD7+Je1DONvvYk5632s7taDa8KnFq8FNY6d3ip
YYWoUF8HjrNLSbSH/SsqLpnDvgkFxx9F09SG8JU95P9MyS0+1Qs/GnXU8uDp
WZzRd7B4Ct+XnP9us0U/8dQsT4vlsKjhlu8MnJfhYsj0gYNdH/6uQd3nfATH
BfZ/Ouvxc9ipSnbQET7xKKnrFhzFmPmbB1xn6pDeCus8OHV0PRw6LJuhhk0S
4k+7w5tt5R9q4OVv+A4kz0u73pZJ4SL7+ssZ8Kta50MqeN1RWWUEyW9mTOcd
OO2+khkDn1t8ZP9ruHrM91wm6T/nin4nfKVvhH0Ozqqy1N2F/h8nzi89AH+U
ZghPwktTBOUX4NvBzPImkm9WfssJ+E6+fJ4c+SsHpR87SF3FcPRCvccmLEpD
+p/7hmkLd8WPD4/CTjnLhEqSZ1lklhb+4YNY9Bn75Xr5eDwN95c/nH0Z9n4x
lPkELstve58Nd0ct/LETVqytiWyGA/4OFJB+O3a7XyC+ad4XXAK7PLzvIoJ9
WfKbQbDaNNRPCPdy46yIjUTvWd/B4WMfWSQ/u/mhCzzhoEVrlyWSeV7DNbOH
4zR5UyRk3s74cAzhnak9g2Vwl2qXYB48+KZLUknyPL7BzRgWSE2s1GT+cxuz
I+EFV4/d+wyfHr/nugnmuCf/a4R97DRp4baT8Kow/pf9XPXHoS/7+f/7+j8t
iPTU
           "], CompressedData["
1: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
/wAD/x0x
           "], CompressedData["
1:eJxdlXs01Hkfx5GICG1op5VcTqlUKJf10JvEIg3V2q1ZufS47PCotlGJtHp6
tGE7IpTNlGcrTg2LEdZld0fjvsIw8xvjXpGs6OL3+63brOe3/z5/fM7nvM7n
cj7nc/l+zU6cOhyhpqKiEsHI31rXOuS3NlsKwpYn5JcqzdhypNrFbjWFS37R
LdrRrXh1K8dykwqFAP1L8VFGbSjT8NdN1aIAjw+CJ+facf7ofeHHQyQerWd/
YpXYgQ1CkxlpAwmVAv6Eg0cXflBarZgUkXjSYJyVxOnCtd3G+rmtJHSNVH43
/LQby8eHSxKFJFhnl9LWtHdj41mrMFY+E6/+rbkqRwLOwi2t8Msk3n9V9Kez
Wg+E9Vda5pNJ5N+s/+C4sgfmg1NHdBl7SoDFFVONHljfLQmtSCMhmXNWE97o
QV/USPxfKSTejREJfvq9EMRvTLK9TcJnIfwXN6NekE6RZbEXSHg7VeoGm0uh
P3yFv5JPolCP79UUJIXqpsdDBkw9H39tWBQTKsN1ScfOocckDExC9Qx9ZbiW
l3bsxkMSJnXzr+f6ZDDNEMznV5JoaCtZX21MoGyfpnNmOQlHiZXmmdMEfk70
1EmvI1GqE5t+MIpAioYy6ICcBNuLU/hOXY6T8SmWqRQJM4cRdpCKHNvyHrzk
aVJIyJ3aFeMjh9Pu6PJAZwqKgP7EqVg5uu2+Ln3hTiFiAzfwJE+OTveBGtZ+
ChffS9T14uQgDvsWLDHsN25hMPUvOc5FbufsCqMwU7CSnRxM4EXotzau4RRM
bwn4HHMCz0sjBGOnKHSYHymdHpChYiJXX3aBgp37obB5kQzb5xTmFekUDF3+
aAs4I4Pt1keNpzMpLH7HEW7IluGB2c7+6iwKb8wp24f1MvhZbasdvEEhL9Hl
lN5zGST1Dh+IbAqCYtZPIU4ESpatVxUz8Z+/1H+jyCKwGEmP3WXsdSyurSOf
QJ3aLaU7wwHZiEmuIpCZ0TXYmEdBahvJXvqJQJYz79G6fAoPPG3WbH5OYHdC
u6krwxFB48PqYwSEnOQ2KZ+CSW3jbLuEQELGZ+ftiykE3i3J7NhPQKn9LO+I
mMlvZeT22IRAlV3jvZ2zFLQ0Bw7nHiewJ3ZHsdiQRq3nf8MGvyfwxVGX2RBL
Grfn+5w/WSFHcOex32vsaAxZdkp3JMhRny/0uc+moXmttbw5ug8ZSpt42yAa
f2lHb2WP9SF7lZV3ApfGnft/thcFK9DsaclVxNBYZ3TuTn+cAja5gWuj4xj/
HxZuT4v6cWOXZahlCo2kjIRv+IsKDLxa5nFzaCh/NOEm2ivg4/a6x+khjZm9
ppLrJ/vQmKmjlfWExiu99wv9hXLkvRM/ihPTSB0SOHKHCZza9x//UQkN18h/
y/caEth7vu+OdISGWqDD1hMHZHD6EOh4aJpGcXjGBUWyFGsW6mJB0ahrmqBW
akgRvME29dO3NLzsBstSjvbiwHlZYudrGoWCoAyRoAd6zqq/Ui9oDPg7Xo02
7sGekIM73kzSSK5TOixd7kasTpNP8AwNVtTZ8U3+nSivezGxn+EcVlKjnm8n
EFxZtZlhbqSLjQXDvAoim/Wchuma6VSr4A7Et8jkM600Wp8Zqb7V6sBW9YUS
VYbdr45bGM+1wut1H/sfBI1wb08NN/sWVBWyouxbaBicdno7YtoMpZv34Ktq
GkWaq7WddZqg2rtjMu0xjc+iMu/pmTVi9Jtzo0E3adwc/TyNUynGiqnV06sv
0ngnNu343leMLRZpG0eYeT09nmPJURXDbku30ZwPM5/lIk/Wogjrus94h3vR
6Kot9atuEuFYhnQfdz+zD1f+EL8ZEKEw7GKtOsPPOo/Zj4+JcPULDw9rCxpr
uaPpN3WeYmbpUNmPHzH7tj7ntHWrCAfry2OyVJl+z47xLSZEWNHZlVLTQ8E1
TLl9rc9TjM5+tIpXQyHJt/HEsP5TVIQPXdYvoMCrCrzrr2hA5Xfa/5y7RGH5
UojYMasB7F/MJqeY+3d9P7YqPEAE9tHsbbMHmfu43rA4OtGAgnSzE7+GULha
M2kg/LIRbtebvwr0oMBKermrl9eEe2t5IcQe5v2Ic9q8b7YJ//9//A+u+jbE

           "], CompressedData["
1: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
M54PZinR6aqxXxhP8f/8/w9RtiRU
           "]}], FilledCurveBox[{{Line[CompressedData["
1:eJxd1Hs01GkYB3Bm2ayanHTSrq0UubTDbtg9yyrfSGdjdXFJrTmM226aYWNN
blPi0MXKViNpy4oopyIVtnJJR4hqZOb3npgYpeYVWrmcJatk3/7dP97zns95
3ut5n/dZEbbb9yeejo7OZtY+9G8dJBg5QJEeMRVSr6+CnkvbfYRQXA7NyvDl
q8A38tf1caeYE1OIIG8VciVtetO2FO+D29cssFBhodqrttCGQrlhyrFkQInD
do2J2U4UBtEK5fYnSpgMCXIbnCmsFp5q/KdSiUV/DYyarqKIE9aU9+Qr4VsZ
Lupk69X7ad0s7yhxcMYo0eMTCo+MHfPBU2Gy+sjq8TkUp72Pa6yCVfDeK9xq
MalFev7jpF0yFUbcl/tVDGsRsnj6i8sCDulvzcjVPi2MT5dUWC/iYCB5LeB3
aRHdU9Z10Y3DUoOnJyUTWti0P1UHxnDg23TOxI5oUe+iSBNf4TAT7e4RwGwQ
ueVYB3OeafXRS8xfXSi1XFvBwdlVcEy9kuKPiMcFQg+CgcwEXFlK8aWxxNNt
O4Et/l5/xphCz+GHkixngvPPpK/D51FsnF1W3RVF4KV3Iv7TYIo1E5li+T2C
s64TDWuYFXvEGbXMSwrNds8XUdRJTUx77hPUnbMP8g+nSMnedM24hUBYtDuK
xFO8NBz0/7qBAHOtyYSMYs8i24ApOYH5m+8P6e6lcJCHB3Uwp+iK6kyYB94l
S3KZgxqEUXEpFI4j7Q5jWQTbIxShZqkUtYeLbvtlELgTI6eidIq52yZdVicT
FNQkBL5n+RGvftgRkEDgWtwxlvobhfePO/cGSwme5lnkjf5OUVOv6Ar5heCE
Ic+t+yjFjHPpuq0SgsibtecHmB8ljR2JDiUYq7vV63+MojW5vOGzEIIiUc9o
8XEKv8rJnrvBBBb2dhH7mdubHpcUsfi0p2F+opzCRSKraRQR2MtCVr1h8RL9
3F7DMHb+2JTOYhZP2GkV85w5LDOzLzuHYu2OrGZXtv+ye0Z8eoLC7cbQqXbm
N74CR+lJijOVsT5PxAR6bU0Ff+axfL5kKStm98lo4S0/x6xfXiW7znwrpnr4
PPNt+8zuKuZhjW8TuU+hk3z7BcklUM+G1924RyHz/9U4uo/gwfuA0NZuisFR
132TSoL8vpSX4h4KsaDUxpLZ8RvTlpUa9r7Ww4sDOwjuTF11XvyKImkiyetu
EcHz8pOpj2YpykS9vIocgruNEVKjQYr+fWRTWxqBpKwrfRdzaWJT2f6tBLMF
mz8/vKAfTl3N7+LN2Pt1x6bmTFKkSVXznMwJclvWN4ax8T6I1BgSDkPjzUev
KijGNVcs7UbZf3lYvMKpmcJoX2TORSWHzU9GhfJnFAesREuS8zgoE3zEK9l8
yb8FSVVeHNatkM9dz+vHNs30WhdzDoYbXsj1n1PIP+psdVvG/pPn2M+27L5B
cQ75xt9x+Dj04ITwOkWiwYXxbBZvHUzb5Xeawlw9S+I8OVybz+vfmE9xSSGo
+PaVCvGm6dZbylk96i0k+hoVmn0Vc7qrKaK6F8qC01QYH5I9eMfyURqeMnOT
1Ss+f3XVFPPZy2rxB/+/nv0H3HqMeQ==
             "]]}, {
           Line[{{0.6599513088175656, 0.3185365797158881}, {
             0.6601142235345393, 0.318561041853491}, {0.6603482161637633, 
             0.3190715275546585}, {0.6599056582683446, 0.319219530671165}, {
             0.6599513088175656, 0.3185365797158881}}]}, {
           Line[{{0.6853425561115507, 0.30005300575251465`}, {
             0.6855007932784946, 0.3001767704586873}, {0.6852265208223426, 
             0.30045564666010727`}, {0.6851384763088821, 
             0.30037090363835595`}, {0.6853425561115507, 
             0.30005300575251465`}}]}}], PolygonBox[{CompressedData["
1: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
Mw==
           "], CompressedData["
1:eJxd1HtUTXkUB/BqPBI1HiHJIJUUN4mVqatvLVHppodHlLo01yMhpEuFW0mI
RC83ZUyNniM1qIhIFEPFSKvccx+nzj2HYiKRTA/z48/5Y6+9Pn/s/cdee31n
BoX6bNbS0NAIIPWtF2TzQ0ydGQymWdb26srB16/t/cJnIDG7GlFiKMdN/fL5
GksYUEObwiqIdfc3yh45MnjZs3PRzDA5BsN4sdPI/C3HtTvET+RwzW9wGFrO
IMb8gU7ZLAVWHfpsGeLGIH/+kCYVpUCst882kTsD7ZAvTlyTAqK93MROAQN3
s5CbLyyV+GGHuGnvSgbrtnqGvapSIobimnX9GNxsw5eij0qkGLQ3W4sZqM6k
JbqMV6FxIEh5X8IgPV00QjRFBedoj+Q/tzJotLLO4r1XYlmJ2OZyDoMDvAkn
rF+R+aF3/WOvM/BVSXuC9qugMT2iQ4/YcDvtcJBY7VVzZVQZAz2zwZMzDqhg
Mjxjx2jiXXJx9DDi+na3v29UMDDuM1E/m62C+dzTX61vMUhNLBIYJqrwYFno
dx/b0/TdWY83GvU+YbA/uajE/oUKz1d4+26RM5hXe9NTpktDZhtqFPuWgYuW
zpQaaxqb7DxaXQcY9Akdql6soeFdaztspaEaAqFUaHWBRvCKY+UJxG/naA4v
IhYHLF0QTlzaYzY0RFzX2bKv014Nq0zLWZJqGl8v8nQmi9Twd2K6sytoeLWJ
FjsTJ51tszlO7HnEo96fuGfOXwWRxKldF5IWFpB9WpOK7+TQ6Ng4Tz3wRo2J
LqWLh52mIWqPX2I7iUXzgo9Cgxga50yPa+nYs3jd0NN4zIzGJK2gqfYiFllH
YNrNp5Fd828K/woLrcGWGLdxNNxyw/18iVP9zkr4xP5W3V8PEBdmXO40J7Y4
eu1Q1zgOUx89/VBC7tPsGWXr48ghLid35bmXKiS31iUUrudwcISIvhuiQpXB
4f7dezks1P4kNhxUYmGei0dyGoegH/vHuvopoeVwVLitjcOZ8OXRT22UmNvm
Kkur51BXlPl76Cgl7tlFdH7zmED3rp3Ed0z6rp8h1r1Pf3Qn3rDr9KFyCYcs
bdqoNleBiNbexnziG6fWH7pKHOIa7DZuNwfDjs92S7wU+Gdl4XpBFIeelLsx
jwwUaOmabPB0Hdl/5fCcmIdybLrU13V1Bwdjy0h9aaQcRoISl9wADo6Zr6+e
cpcjpX7Pe5kzh7bo0qYNe+RQKNR6O6dz8CvcomMRKEd3SzDvFI+DeHO4RYq2
HO/aPeJHT+QgXHNOeKSTwoSxlS90iDUjM2MjidWCk9xw4oEaq54YYsOs8s5r
LSy8RYJ0W005krxHLlpXzKJfqildnUIhOdZmVX0qizcmDZJniRRY/Q56WRqL
T3XGdEMJhV7dgltf41hk7PXJ5d2moMo2vCI5zCLOfXeeIIKCsyef1lvLIn/0
uwx9HwofpF8mOYpZlK4+4TTTicIY8fgopwgW56pquuI+yWAzvqbalU/+o7hC
b3e7DAk3ai6127DwaD1xQGhMYaO0167YlEWejnSgcgaFe/ScTc0zWES7rzjc
qZYhyaJ4z7ThLC5Vzjo/hZbhNlV99uR7NVq0A9/m/CZDVmn/xbDHxNQd36WX
ZQjtXnTteKMa843Oy/wDZMjb1+T4zXHyX16uIZYo4nXjiP9gKuf5ENufLCgb
k6dGNPVs5JsHMjyvqDXx9VLD+I3eT1FtMlwIqMuP/8SgOOlO5fkQChFb0wt5
1SQvpqeXGXlSECw5alcjZbBz9i7ezw/Jfc0vShz8GTg+yE+410eh49dpK5yI
eRlmDXeJ+dXbLUaHMwhcK/4QPFGOhYPb44LXMuiYILS46CzHqevrv+d1W8by
73n9//z+D7Kp/lk=
           "], CompressedData["
1:eJxdlHk0llkcx3m99ryJV0N2NbJkqckYlfkWxUxDUzq2DKVF0njtM94S6oSy
hIZyphzbKDHNSVkqJAxKaJH7PGQoyzzPYw5SJ02WzNO/88c993zO99x7f/f7
O7+v8f4wj0MCGRkZL3592s3FYp+vhRxq9psVjaQSHKkQ5ZkqcBBMZa0+W0bg
8qz6d+05FipHBQbPbxDYdGf7KPawGBJ7OzZdIlic+a1ssIZF5xEV47paAsuF
w3oeBSwmTNeMTfG6i1vSQexiob1Skxq5QCAt2ZoqdWRh/XZy+dFkguWrP9Zs
XMNCKbHTOS6FQHnCwk2qz8K5+HbFeCHBksAtJ0WaLFb9pdZelUdwKls4/UTM
QlIa2f62mGAwtVzopMLC1WC8eLyCQGW0wZ28ZzDQTMa8+fpn1+YK018zeBeZ
Xi+5QzCV62srecpgJCpwl3IJwbIV6voJ3QzSuTmdi1UETSbmTq5NDDI3Z0Uk
1BFI+l4UkVIGalIFJuE1wYuc1irdcga7kVS7oEthhmm1ET5i0O0k1xisR6H5
SyKmexmklT+MKbGm0JvvdV3awkDgUzClGk3hWUJGYzevq4S+97hWTCHD1Wb2
xWMGo+SSV0obhWStKoHZOAPTntpNoj4K5jHPC8o4BjEN97eXTlPY6OgvLJpn
sKPbqvecIg2r7JOPaVkWYwL3wg5LGrnxqaSe92fUdaoifiMNXVFNep6IxcEz
ncvkQmicW+0dvaDLoi1gZ3hwOI03H0JKN/E80C0JcsihsbCr2jZoHYvomieS
wJs0bC94+57g++M6VrP3VR2NufXa0Qa8bjf9dH6gh0boaM3Xkc68PiK/ZDfF
c6cg96I7izuqKXO7m2mIGxfnn/qzSCkUDJ8do2H5mdu5jzxXdZ1yXvs3DYvB
fZF6ASzMxMKgDp43/Rg+kPkDC53547HKoj5sGZ+uzgxmcT5aPkrHvA/vejob
RCf487WCkv6PNBhz9e2GGSxO5W9OLbhDI8RhKPrQZRZdjqdjPQtoKDGJCsl9
LNx1d96ybqHhqh7xSuUVi367yRSLIhqyGgq597pYJGoXiOx+plGuUNnix8/D
nvwW2ZcSGvfdUm59EHFQvW+Rf9ab/78wa4KT5RC/ZbJt3p5GjF6lVpESh4TE
X/QzDWmklfXM5PJ8ulIr5wDPblHS4Siew6g/Pp8woOEU2G5dIceh9Js2J6U5
ClaFdYFxsyw8zIzan/C8Mqxyqd0C76eucPjuMIUgk3sZqvx7hpq/1ngyFCSj
62e85DlYeWyY9HtJwUTRNuIMf7/927ZpVY5CrUvq5mxdDjrrFNXUeV3+WmjS
mCGHwdAZcWMrhTmfrBtDahzcH9jmx7ZTkFEyGlHR4HBDKjdpn06hZEP/or0W
hx5i4eKZQWHpP0fuBuhx8Gp+UH8lgkJaq8bDLyw4WOhLY432UVj/OM/5gCmH
shxp3yMnCuy3L+OrN3CIczkesKhJIULS17HXmcPr827KsioUlnxV7pD2HQfZ
5HXdYi0KxeKO4Ns7OLwJ95s9oEqhKffySR9PDuJy0ZlIJQqVSvUru3hW0NdJ
ipkl+GmVVUO1HwcNo6C5kX8J/BmThVxfvj97q2z2DPHz3h4W6M9zb3Uie3eQ
4P2fxpXEh8PhWK0Vo7y+rbUz89l2Dm2mPVcvthL4+MZ1TBtzWFihfHWinMCB
8TJz0OTgdOX5PcubBFljJ0TbeL/I7Zix6QyCm8c6TLbyrHCsJOQNz24z1/s/
5Wfh96q1n/Lz/3n6H76Jt1Y=
           "], CompressedData["
1:eJxd1Hs01GkYB3DrHLfNlpQsrVVNklxyLbd8V5O7SbmEkFxiVxd1KqmN2nRd
m8ooKmxIJ0sWKdkZJjtFR1RGUb+ZMb9kze/VQVIZ5az91Z/7x3ve8znnfc/z
nOc5z7MwPjV4i7qamlo4ez7fmQ7aTMe4EgeSjrqbFVGItc5o6WR9JizEjcta
44dzURFqDK6Xb0yMiJLivIZZkWmvEvFRehPru6Rw1PyQFH1DiegWvsTDW4Zd
EvnNwCwlPC28/0lrlGEkIJbRSlFClaH9oPqsHPec1+yYw7qyx079JeuNOi9F
pqyzI2IaL52Tw0eaUlAZo0TptjCDEUqOlu5Zv/DylfC/xDHdkdiHuF3fJW9v
V2JffjxP51UfOrpPzuQLlFjZZlRv1qiAX9LdEl6NEruDlqVXL6YRE9Ay3461
xKKgoY119pUByQzWn0ovnfzE+tzsNN4ft5Ro9jguCHakEcDlpzt3KBG5LS20
HjTSDouv+mkw8ObbHLzpRqOm6bFTty6DLG6f3QInGtcCW+8ftWedWyDQ/IGG
xcXjVkNrGAiePu8zXknjFqoqk3gMwt6divRaTWMkufNCYzwD9dDwx3ruNB4J
fR/8fJhB8ZK6hIU8GssTUrVfnGcgn3pgIuDSeNucu8WtnsFqlxtZk540/MrX
/xrzN4NVg9eEKjZ+jXpV98xHDDrnYS1h8y8/tPqv0/0MDJZnnLc1pjFWGyta
8RXBszeV819o0hjUDfq2woHAnFpnXEMUcI+TjDasIMjmaPP7uxUArZ9BAgh+
C5QJGnoU8CqsV1kHEuik1y/5l3XyZpmGP2vL8mV6O3sVcPEObfXcTxCnuaxf
T4fGEZeuh9PbCfg2RR5d0TS2RT4p25lHMJK/rr8wkcbHFTu+ON535xe/qvLV
/b2IwK6g9qD/jzSUMZyHdsUEiNm6ZZj9Pz/Ox9amieCqqM2ryIetd5vsxOK7
BHOqmvW5XjSChvyP0i0EJ4SFT1PZeokM2g17xATGpir9JrYfzl08rxNDBMVF
02dM8hQotbx8SD5MMPH+62pJpgJ5WxfYR7kMwfOubWiYqQL7i4O/WDOvN+Sz
P5w6oLKbIriX6Zovye5Di9dR37fPCWLnDPikuPThNV0XbiUhEOe639BOlWMg
PSrB/DWBdf1gZme7DG07e25WCghCDCQCpwUyqCiuUcEdAtGrmR9+MpAhYU6s
LLOBoDqHJ2xql2LpjOZS/2MEFmOGijscKYRDnraX9xK4hbvseP+GgsPUbEej
TQQDHHmEmbMU9zrKRxM9CIxG9qy/OkMKBxuzYlPWQROFaiWs56VfOOu+iiBx
dN0kR1eK4X3ewkwDguhgX966WVJkffN6utOQoIwn5oaFSHFFNHamTsVA88nc
CX1XKaas77ens15gfmRKay47/8W6g490CDze8dbUPqXwp+XDhSVvGGz0c7Qi
rNeLc6ZyFAz61YUbrl+kIM8dF092MRBvTi9XK6FgY2Lu/aqVgXWe69iVwxRe
XLY3qxIwqPbYveLCSQrvlujt1Rcx8NV7O8ito7Ahdlvk3OsMekInS06VUfBt
Py1aWcHA53n/sNEdNp7loUUalxkscj1+qu05W58Ky0rFMQbUlbWCRbUUhO4R
AvoAg3F5Tj3nNgWDNJPswT0M1vZsvX2Nzc95fDpYK4LBcvuPV1PY+DoOEcOp
IQz2ZHonSwopJCsGynx8GPC7e6NU7D7MmbSYudKJQcEzvVG+mIJhC7/9oAM7
r1ZLW8UVFCIbOZsG2P0JidaR79n3/9+v/wHRBcnN
           "], CompressedData["
1:eJxdlHk0lXkYx7muog3JSJSojK3iWFpQZFrQhDJKZCdjyVBpnaaVSrhuEpJp
ppuldBoq25SvraihIcx9773vpe7vjVCkm7KMmrd/54/nPOfzx7Oc73mer0Fw
7NYwjoKCgjcbXzNvg1rH+hYpllcGmh0+SWAijBnteSbFiUnDTRFBBD+0adTV
DkhhEZZvVOBFwE90cfErlGLYoyEULgQYazG7lSfF7pAjWpY2BMOJSvzwUim6
ys606CwkWGKqcP1lrBSW7TvfOGgS7OOQhs9s/bvMf5qtR2RQHp1tMZwpRehy
TY5yjQz3j2R1fzksRUR2bvZcll/8xB+aOCiFuUioHH9HBv8Hv08/5iqF8Dsu
ZdYkw6KUH08XGEsR5HK+bHqdDPsfNxVasHwjw6PRgGVBf5HYbYhGB9OoGtkl
w+vTJRrukzR0r8Sld07IMK9B46NDM41rH0yXfeIS6Ck/q015TUPnIcf7gi5B
B083Uh5B41eaPza+guBJ5mG1qGQazr23mTotAlXx9eDiBBplaqna6rMJdFY+
Kg78V4JShTz/ul0ECWi2ER+VoNCnNuvmboL6fRXpl4bF4BtLH8b4EURvP+sX
ES6G004SKfQgiFO0bNfREaPc32CxoyvBVMMlvRoSERqCcqPVlhFYXa3R9zUU
QTnU6gZ3M0GRfn+jcJ0II7lrFff7EJjP7OTs+YNCx7bJcsMoAq7rkYBkAwo9
5OStQ5cJrqh9Dh+KE2JiXdafOeMEb77NLVWKF2LxxUR+K8tltmG1q3hCpHXl
VntrMggSeSgyG4Vwr7+TOieEgZKBs6nVKSF6BXbd3aEM7EzUXzW1C9FW2Xdw
aTqDOXXPjS0mhdCsD3IdiGPQXtn+m2xCiMfc2tkNFxj0e8wcEztQaCqwPuBU
zMD2g/foVy56PCvhK9v58Yan1FOI1b/wMd+EwdT76k/z0ykoVvOSYMZgfiYv
KyeQwsyAdf1cJQaj72PNB9dSEAjeNTUtZLDFtyZCYQqFbxb1ZiywZVA+t7OS
60hhy7QDC9R1GRCV1h6lVRTkAWYnklQZbH2ZtibHm4JIeNA84jVBsBn3XqkH
u882leP1ygz0wyyqOwMojEwdRi6rj1AxqCUqkoLPoHbGBIeB8YRF2YtfKJgk
jLk5s/vk+VU9aN1DwfjQprtFXwgED9/OUI+hML1r9Q2nYQLPBr18370ULNR6
jMsHCUJu1lql5VEQ91L7LScI7K1HBfJcCv4tI5/29hHkqkQH+wvY+VHOiZcY
gkvJbvKbdyicWTYUUM3OO9d+ZdhBTCGo8P72RzUEX2Jcuov7KDR6xHg+ecre
V5uj6cVIEfQq9FHEI/A2XJOopiFGXHzJ9+6pBF4r9Doi1ovhckz7sk0Bwfvw
xIFkbTE2Pbe3FxSz92utUeFiLsaGA44GE6UE5Y0l4nxVCeIr3ANnsf0jE554
hU2TQN/Z41ryKwJrhb9neGeLERJ+a84pOwZP97SutVkigdHqEvUUdwZJBip9
z4okuNffydNxZlAh4gyqVktwrPacZrSUILX25VztcQkq3/sKU54TOMQlbZ7H
/pNXP/9LD6unJ/F1q3OjwW/z/9m8lyCtQmV30iEaO4a4bzdmE4xzPpzVO03j
qGnIxhwBQY+WE7NqgEaLVVWrz3GC26o7CpoJjZXp8rq/zhMY2b/Rsn9Loyqh
/Vwlq88YR1SVIKch/1w+vyaNYNEuWuo5QuPeK58xozgCp7O+J5vusn6TutTN
NoRg59WMbjPWPzPkq3edYv3z/376H0F9HlM=
           "], CompressedData["
1:eJxd1HswlWkcB/DjEockk9uRDumGTG2pkU3tz1kpySp2IymVyi2VtDpLWLlk
ThyNjNKGrEvJYVJZbOLXZdQKReK83nPJUao97/uSS1Yute/25/7xzDOfeZ7f
M/Ob+T1fm+Djvoc1ORyOP7v+27s2Jr/aY0+BRgIvQq9OjttdvVxSWdvs3ptw
rVaOfsvcXNZuo6Bf8oFYnCPH4etD8U4eFIQvmhvGHZchV1wQpreLgv3v7bb6
v5fhYf7s1Gz2vmC0ODcRZfgOTFZ8sqPAt3Cas1wpw+2jovX11hTcS23acfCq
DCdnAo1IHwqGvaOqJDtlOD10r837GAV9eaFz4v1lOKdi6uzfgRTcTRG2ZJvL
UHRr3xb+KgpGqrL7RSYyDEpuNDDcRIFhnUU9v5LEieeFRkdtKcDvaoy5EhI7
rKKKNZZSYBkdUd8cTCJaa9W6zKXA1sIp2TWdRH8v14PklBrafinOmzxJoqX4
xYu2ATUw2wQJDlwSm86su/toWA02F7s3GFf3Im9AlwwYUUPB/LpVXNYenulv
a1h7OwurbFg/nD+cMMan4NTKi3ahvF701dfxrXSmoGjWmNVeF7behdf3axgF
YrM/w6cte1FcP5S5PJyCoNKcN6NSAsdFG92YTAp2PLkw3VpKoKbG+kBIZPvj
rknJ9CXwkH4MJ6uAgtWSEt0JLwLP5DqLovIo4Hp7JPGWEZhSkrfg9woKPnj6
2IZyCHQvcd94tZ0C4/AkzIon0GXqYTvMoyENHNf0EFI072o6cpL1AQ3zKGTt
Nxaj9wPrPP1R8QmZFCFy8V3/5TTMS9cXTb6TYnDTBs1XHjQ8jVsyV7tWigJO
UFT5MRryi2ZyzQ0IDLG2OhvyGw398bk/FpkReLG6ntMioUFPmdGueitFiVaV
eHEbDaJNH62i1VJ8UlgmKO2hYWXZpV2kWIpdC5rTuAIGJBl+xzNf9KBKVDX7
6DkG9P7Y1FZjLMX96gr5+AUG/DxH9f2GerBkyuLl6RwGbngOrq4Z7MGVA6Rp
DevIs7pznrHnI4YnXY4UMODd3nOm8ZgUXXfHFj2uYyBk35oNFUIptntd8/RX
M9BhNJOfZU3g1cQPHfteMpC2Tvf5txcJLJdsN7zfw0DxKbPQPat78XPxeVU+
wUD+vPY559t6Ub5zuO1RLwMZwmLPv7xI7A406BQsHIQ0dbtvKzuv2RbjFwrd
B+GAwNZ+s44MiwJ8qI9BgxDX9/NodZwMZ96O8FIdB0FsEpM1/lSGtaqTX23i
MP3V8dp8rZ3IwBdB9/4d6+Socj9kYZPKQOmD7kWcfDne1iEvX/JgwKyq45++
L3I8bVq+tOEdDfeLFx5MvKrAHKuBPZhEQ4mzZYv3FSXaf9F2tF5CQ6mRWq0W
vsLO2Oro+awDxoxKB1m73TyaZ6xDg0fkPdnMqBIHnhKxMYY0rLp8IrlIpcTO
HLvCbdo0VMuz+bxGJXIeH/k4NJsG04roUCn7PnmjQusKW59eeWxLbqwS14xV
nvuGnaeQOkNh4G4l8h/GdDVr0RBxpz+E9FLi9fuE5lZdGmzKjFLE5kqsvzmZ
sGucAnvmtEMzqcCRteu7X7dQ4JdFtm7+qMCHPGH5m2sU/GSq6n1drUDFs1tX
IlMpUDU47W1QsJ6X8PJSMAVnEm61NlAKjOU+iHEPYP/HZ2OL2+0KfF6Q1KL2
o2BgnxV2vVHgnZfiuCo2PxJLDwdWsBaTgcN8Nm92mD+tDBIq0Heh1KuQrc9I
t4uQOCiwxGC+qQ+bV99PTDg5zsjR+uhAWJQbBcSKpFnKT3JUlhk0nmfzc+rW
UGcZm6f/z9d/AVJT9a4=
           "], CompressedData["
1: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
           "], CompressedData["
1:eJxdlHk01lkcxmW0CJOcyPsqa9PCmBcRHeWxt6BwFBImRqtiKIWSGU5T1iRF
SYtlhEYk0itjKZyZLGMZRN5L6Xd/TIOJqIyZO//OH/fc85zvPfd+7nOf+9Xy
C3INkJaSknJj47/5qI7g/J5iDnV9cwOVqwiczfo0/87m8OLwqMIVQ4LkuPPu
x1ldz8HPxmQjwa0U7zOBWRwOCNyDVcwIFvbP2+pdxMHMwyx4iSOB79z799dy
OJCEJZ9t9SRYZjJ50KiUQ+nmog8Z+wlqD3uk+d3lIBBfy0w8RvDg0bYh+RIO
7a6PciNOErQlFf3Sz+q+WQniC3EEg7L3Evc+53DWxHTq23yCaqPTxbI9jNc+
Zlghh2CgMbRP8JLDuzRB8tMqxuMT/lZnhENcge5jtRKChtcKW1Iph0P1m9wt
qgk+joU0Zb3n8EwuTiv/MUHFwV1Xi9n6/VOSAjwnGAu03fPNDAf7AynX5yQE
c+d6dX9UpFgdsuZqQD9Bq8xxceVSit7BCX7VFMFkuVqikhbFdLlVlMI4QV+r
r1eANsWpC3LrM6cJ6sKTcqvWUQh9nYeiRgneTo035OlT2BrWewZPEKxdLBKF
m1LEjh5vNR0m8De2WHPCmuJlTZRe5RDBtLtXRrEDBeYblwnbCU76bF/Z7EqR
paIQMt3F/HZW1w3xpMgtuazp0kpg/fHVF0d8KG5cbRFteEnQmDyYrxBGEXzp
mPRFxi9fGKHdeIxC0lYn6zZGkGGntTspiUJfpWbFJ3bfqCOOFmaJFKK2FPn+
bgLLFlWV/MsU5oqxvj6EIN0o+eJsLoWVXcLZjt8IhJNrly+rozAQrHWKYPs9
K06bMn5N0akdX6/cR/DdnXLXaKYrbpbq7uogqFos0u+YpZjQEL/VYPdV9o8z
kPmHIi8j0CiikeDE7R5zr1GK7JLw7MFalg9dxVWWMxSJLr6qhUUEoWGbK6wH
Kbo7H620YHn4+rlwxSue+fdE+VfHLAIXLjLUYoDxC7xmrt8k6JKRi+n4g+Lu
QvFIUAJBZEnyke2dFK9CeEFmOoFOfqp+YjeFsqWbleg0wU7NK0r6/RQJST5t
R6MI3uwbdox/QTFao+6w/QTzq/bpmOYYhXNWh6pJCHtviy3qP0xR3NGINg08
RKBlrZvVJcVjWbNpX3EQwfd11s035HjkFyyUyfIm6L6e67FblYdZdP7eEfY/
5DyU7CuXs/rg8Hi2LeN5Jwj11OXhn9CbW2lOYFVT3uRswENvOE5begXBjR33
in7aySPHXcPq4mKCv2aeVMza8AggvkK9SQkaIr1uix14iGLVLXR6JLDLLJvR
d+Qhe6ps9dzvEoAoneFZPcGxX1zB9KZ97WMVG3jE6yxKHeqQ4I38TtW763ms
eeEsvM9LMFHi+/OGeTy6xgvVehcQ5J61fpw4xPwSnUkzEBLcly7q+LyFolkF
O3hjgm25LnHeLA+b3+RVzZgwvupLAeZlFNYb78V8sCIQ+Qct6k1j+Z5tWim2
IWip2toUGc3yvLrUX8uJ4M8DzVcq/Sik3dxbFTcRPERR4X4nil2TFzztrAnW
ZZz7csSWQtzZMyA0JchzbHgWa0QRcyldvMCS8TxpNemQZ9pmwFCTnR8WXZ+z
bT6FfepXpx8wPx1sUk+ZsX7iGRjmVgaClKVhTgUPOVRbnBO7Mv74W6/b5e5z
+HTn2vlPrB96O9SqGTLdvi69opHp//fLfwGqX7mf
           "], CompressedData["
1:eJxd1HlUzWkYB/CmBZVb5KBQokX74nZJKmNpu4kUQqmuSI3SokyTpLTKhGhl
ao5uSCJTStZvHB1jCGFU8lve329ipkFk0G2dn/lz/njPez7nOe/zx3Pe5ztn
S4zfNmUlJSV/4Xy9ny9Orqifx0I/Sf5D7k4CUcG70WA9FtNnG6+6FkKQ469x
7UkGgxLFLz45JwlavB613XNmkKap1exURuA6qDawWZnB3GtV+aENBK8txQW/
0zTCrB+/L2wkKIxIkqTfpKEdX/NwXBeB9XB0/c5cGm6Rfu0RLEFGj3TDQAKN
5HCpqWEfQWdFX/RncxpNCwzjEt8ROJLuyHgzGqMaIY88XhA0O5l5xArO0mmR
fbXvrIKFmQMUxDdK/FQsOES9vlWTcInCfvn6i/t2cKhP2zj9cAmF3aG25x0S
OYjvq7cGyigMXyFhY7Uctr24l3XGjEIJ8WzSvM3BKD8y86tlXnn/Ofh6pWaq
lELHCtVOy185sLFH+4aSKFh1dajF13Fo3FPKjCVTiCj7qUy3hYPagI7dh2IK
W22nKKsJTlDm74xWU3hf/PyBwycOJhZKchJDwf7ppjcuU3h8yFY5Gl5PgW7K
atMz5AFFm+W5Cgrbw/ZMtZfwOJrt5RUkvP/ge2crvHisa598+9bfFOy2nTY9
s5aHeUf0wKuHFNJH5npGyHgccdd+5tZGwfZKqGXyfsGb5gQVCc5eemB0s2D/
aO3cB50U4uePVJzbyuPUTENHczUax46IG31W8tC0sZ0xsZ9CloNY2XU5jz9F
n4+dHaXQelhyXy7mMdtcffzLXgrlcQ2WCQt56LuceGQg1Pctjj2ebsejXHvl
6diPFNoTYqQF1jzqry4xCZPQkOWqX1ikzcPtYY3BdF8aUdqXXQK0ePS7a/lJ
pDS2BJ2qzTXgkeDQx2iY0LD1cgokNjya98mctS1oOH9SK1ZdweOboNWbVdJo
+DRdnDBixUO6ZANrKKfRWXpdpBDmOVYQdLAqgkaLmWOPvYIDl3fC2nwXjVK7
T6vUuznc7y1MW6zBwDUy8NbCLA7pGnvdl8YwML4Z7DISwSE5svrtYCKDPbUp
OVELOOjHSMYCyxlIK1WmBphzqAq1SGoT9kHhZlwcasXhyo268OpsBovUVw99
K/y/2oGaoop2BnmepoVDqoLRu6xWwaDGyll5/AiBjZHxRskwg4iULyan+wl2
OLgrPFRYLDfL0f2xl+BYinxdxzgWcVFxzw73EBSt3P7GScRCEjmlI40nqO8P
me8zxmBw7aWDjh+Fff3ZZqBa6Fe3z6eV1+FQqdD/7XEDA7vR7/6Yac3B7J/8
6Ak3GXi+rR5tc+Rgs0Y0LrWaQf76ed43nDnE+Bf5uT5nILur26a7jIOoa1LQ
5SEGFrdD+M/rOChOdMstJrKY45I5eYsdh/XijbsOLWcRLqr8OE1LmKeGgbh+
LQupzoORmLsEx72T29VWsCh7ual5GASSsgxRqgeLaQ0JRl8uCXlBu315ZsFC
fmiw/90Fgr9si89l2bCwLPVQHawhMLk6vDp3PotXYzMmGQr18fSFWQESFkoy
a3vv8wRp3wf37LVkkVFe4O14nOCqkbm005eF1tPmNZNTCPCELtVzZ9GoyDs7
uJugtLt1noUti7qdB+527SeYEbvhyQShf6mntWZLPEGAaqJ1hSmLLJWTejGJ
BLVVRpHVQh7qZKYalgh5+P98/BfpaedA
           "], CompressedData["
1:eJxd1Hs01FkcAHAtLSklzlZTrSGrkcdsTcvJrCG0PaTllMesZkoNKgpN2axM
IuPRY/Wg2ERNzymnvTePOOErybap5FGUNrk1m9UDQ5O82u/+u3/8zu98zvd+
z/2e7733a7UxenXYF3p6emvw++8vaNCe/NqVwtpiUe/J/QzqePdHF0jR39+r
jc9gQBMdDCvDKBz0G5ZtSmPAa3Ha8/IYBdXd0wv4qQzONfPjV16nULXTrygr
iUE+v7GksIaChdpVZZ7I4LKaY/vgKoWGshfcAwkMjtCFct9SCmX7f1YpdzPY
3NXY7XqFgovvc7OpvzAokD8Jy8B8h7p3Ham7GNySb3l/9CaFFMv6gKBYBm7Z
vUbKixSafljcO7CNQeCSmKqO4xSqcz9mStHi7MdV8UoKEQVXzlduYeA5Vtsq
SaAQZdZu/BxNUu23NmF8Ofdo0TK0tC623j2JwtnRVHgdzqD5N//d8dtwvwTF
J49NDL7l6YqdYimkvy0YDMR4EOd2hTaGgsa4z6tTxqDNwlJCAygcro6aWI4e
pZP1dOEUuHbrLMZtZJCmWbsmJ5BCsEl+aDQ6N1VSr/KgkLAntONMCIMSSVro
Ii8KlssTBSIJg0dOo6HtdhQKFXKjlmAGyeeDvyPzKCSJ15NpGK/RcFRlcyjY
SKb7t67F/tffrinF9eKgpGThTwxOz0hTXHOhIPJy5PSIGQzezbhRiPHYQuXh
AXRhLrHRRzv2d73/ET0csqK2w4bCry1jBmK097KGDre5FD47prd2BzEYMq9+
xrOicGFGz1YZ+h1HABtx/yHu2R3j0U93vBpTcimEjgnyagIZZHuc3S5Fayq/
FJ5B+7yYZOtrQeGAIQlOR89cv6FJbxwFq7iHmZcwf7xpFUc9RsCUayqcgvX3
FQUUL5xE4UvzZvdy9BX/LU9XDhKY8kZt/Qr74b17u5vPMIHrKfdWnZIyWPWY
28x/T2DrtCTr37E/VHjq4UgbgezsudMM1jNYWGHW3f2cwITNzpGZ2G9bfrs2
s4vAQdOcokS0QZ/oq/5GAurokVPleN7pcU6HHZoI+IVYhezC+6S+sy684hEB
58RljcJoBhuqhcnmGgJW3roc1xgG4cOGH/KeEZh9YjTl1nYGkcS31PAtgUmX
r3kmy7H+sBv63KcEjHu8hzp3MMhZ6iyrQe+UGq2Iwvt8p9vlr3c9BHKFutsi
vO/Rvi1R99oJ9M8K/pCF/nuOu0zwisAxI89xEXEMAh6sFvA7CVzrrKjVoZ9o
eHZHcH3Phc7JR9GbL2nnR7Ri/t7ycyXoCQMxwj8w36BBstMd39efFQoDb6y3
Lcv+cyMaiq//U4z9yTXK2h+M79PDEdTxbwiE+plF1aG5stG6gpcE9kXI7ZQK
BqXzSnivtdj/yTf7ItEusUs4ExiB4Q4L/649DET38/I98DwWec+6OoJWtEz3
sf9A4Iy1ZUZAMoOLez2WyzDuxr/R7LyPge6hwrgdz7cgWvq2GZ0bqM2LGiJw
6E6byUcl1qtQTbyrT2EsxT01B+eNTbFnQOxUCosfz6/0w7iPavyI10ycH739
A7YYF9epihLMKJiYx2nL0LOrNPt6HCgskVvlHz/A4JnI397kGwq6QfFS8SEG
L3mR+uuEON+O3LxljdYaZpucE+B7OrFm1ydc///5+C+zH/Xo
           "], CompressedData["
1:eJxdlHs01GkYx2eVUGg5XY0ptpLItMuJbttzhJDrUqo50wXlfil0NIkttdhq
VUpFpdKEyHW3ZMNTyXUwY8aMGYW07pTL+2Oyyu5v/90/nvOez3ne8zzP+X6f
8xj6hHscVWEwGLvp+O8lvUfuOfYSaHUayZltb8PyaaU7q4fANcb4oS5BG1oZ
1qbcVBBw07yUpqMlR121GN3UbAJWq7n9pV1yDHj7uWs8igDMc7eKLVRg10XL
j0XWBP6efRTre7odIy3eH567jUD/hV+WKiPbcYizeGPZWgLDrHCvvj3t2Mlr
UsunuWFC5XAvzSV7VnbYWxD44q7oVL2gwCmW5s+VdD1Gz49Bj64r0MTxpd18
VwJLhA+5Nq4KrCjQ5PHsCdz1C89gOilQO+aOa5IjARb3Ttz8QTk2RpmrnLMi
cHmAd6WVocCr1171395MIM2Fo1/3Qo4/dMVbP6D7FwTq3OhpkCNbI/KqoTGB
zE1tRgsj5Mg1PLbuMotASY8bv8lcjnp9e1+L6XySVrqRh6kcF3do7zZyo+eZ
HO3kHm3Df/CR2YcdBIyXVgtGpmSo1Zi77LEzARM/SjuhRIZU8uBh5j4CnLLK
6mC+DNWmDUoFwQRSjg9knJqV4ctY+VW3JAJx5syvmzJk6CJdVK12mYBeWa3z
xBcpXnTeEhKWQUDIO/9QsUKGT2djtj65S+tbOpkY6SpDQa+Z27w8AtrbZQ0X
V8rwu/Xd7/iFBJaRkTJfsRQTx+6P8mn/PMoMDwQIpFhLjdgWZxEw1LX/KyVQ
ioMkvr8+n8C6jWHMWRMpJuluGGGnETjx51AHNacV+VdYS/gptH7KpzvzHkuw
Iyj55rbTBEKKjM6lNEtQ+W2QDfcEgTPSgWZ9Oh+R775yxp+AlluqZbpcgs8j
VoX7cAjk5jrIzQ9JUBS+zPggl8Bv98MiBW1iXJOqMzocQNePjY62PCnGezca
gik/As8KfZbqLRDjcSe+56wLgfdn+Q+mhC1oNnzGycmSwI4V8fkcUzGaukrk
dcsJeDsyExdOizHh7ZYNLNq/AcaMdmSNGLl+s86r1AnU5Krq7rAXo513fViL
GoHlcTn7E961oDXbL0ZIc0FFlNKfZpe7yoDF9H/f1lexk+0t6G3sIeFtof0e
i4qbGRSh6tyv31jQ+5a18QnbOFOEnb4s/cGjBNhrzz4r9xWhk+oE50w8gSLj
47J7q0WYdjOsPDqTgJ1n4vbWMiEu/zHgUt4tAtnVhe62+5vR1G1c3EJz47Tj
OoVDMx5gaqwJpPX/FH6L1by9GUc3gLrXNQKdSoNdfuONqJfhlT5+iYC4KPBV
AV+AKjvflLxOJKDKqnOvyWxA7beHGqMfE/A/P+QsKqnD8pw9svoqAh2bNfZb
fK7F4fTS2PEOAraaAaHKrbV4q17/67E+AvG/8izNZ2sw+HX3i16abZPWnzjP
qMUbmRFVUzTPOXbkXB/NTU5eDM4IrU/oc5FiXx1mdfNG/MYJWET250QX12Mx
J5mqp+j5yw2SP2c14PWejKqDDAp6Kz9IBqUC9Nd405G3gIJQT58jQtUm/GJt
ExJqSMFP33dmhAQIkXIwnXlhTkGTdUJQ5R8i9He4nWqzmgJrrxYdszVi9A06
eXbvIgoqdkVl11+X4AdTO7GDDgVjwlpS3CZBVrZnpskKCson5vet9W7F5F11
ixpNKJAJnEW6w604j/3JRINNwWTCKf6UthQp9d8/VqynoN0glHdfXYbPh9hV
KkwKtLYxTbvHZPj/e/kv7TTo2Q==
           "]}], FilledCurveBox[{{Line[CompressedData["
1:eJxd1H0wFGgcB/D1MuruclfOctraWgqXMG6xNNW32N7YrrKhlNfKlqTzkk5u
U7gk25lcdTVaMuFsU5zKXdooqnMlp0aoOKJ9vPU8Lo5MmrvuuX/vj2ee+cxv
5nl+L888kqi9ATuMBQLBar7+28MOuVR17aR4Mi/t6PVJA05a+Ndd4+5JCv5F
984Ay8W5f5RyHxAkOTZx68cV3r4xFGMTcotjNgSajBmyRWEU625fezTmR3D3
5cOgKUEUn3gUz72/jiDLR5ev5vG/Zz29ahVLkLJk87dnAimcJt7726cRzBO2
JVRtprjDWvMy8gnWNCd0JysozudrNurPEMSeG3xlzZ08o7fTu5zgXWaauwm3
7xW34RTunIjbg37cYZVtv2ZzHxN61jqFUDxYcGB380UC45FoZV44hfJUXUzR
TYJrU9UpI3soqOpDdrmMwFzauXpIRWF9vvlgVSWBL/nCSpTE62kSSsv1BHqH
UzQsnqIpPH9m6SOCCtfHGQUpFBZu88ufNhK8Ftks1GZQvCtOGojoJDhqeyD3
Th5Fx75aS5vH/D6TkeE8LUV0bt+2czcIbonjBEY3KKTKt6uCqglS7w+xw208
/9hlyR4DBELXnKwNlKLksHLSvYcgub5U0jBJ8V5TXadpIegO7dV5cUcuv7VT
WEOASlPRgDGD/6XT6q1XCLZ2F5Qsn8JQSSXeI/d4v484vyiyYqjI6rraf4dg
WWx90QYRw18ZkhO7+Hkr9N/V9XgylJt9Ot/7Bc8v0k+icGbYp2p4qJ0gCKqK
+qpdxlBWXBMvMO/DvaXDo7IlDLPdPpjpYtyHtR+V9cySM1wsWK8dNulDtkpt
Z+3PcLz0x7T+1wTtp7PCtNsZbC+4b7I37YPS6ZBd6l6GxM8i96jHCc5mph58
o2L4c+NzbSW3fNrlwDmxDHKTAEXlEIEj6w3XqBmSxGgsGiU46aj6xuUMQzrz
07n1ExzfMbdtCbeJkeOYE/cTi4nn9AeGgt6d0t/6CBKF01RX8hgaVEoPB16v
RmwtCShgiLGd9nXrdYKVWV3b5Nybcrd1XOJOL1NUf87t8aZXqOcus9sSHx3B
UNJRUviY9/vwhSLn/UEM/6QtTHmhI+icvVGat4ZBlvls07OrBF2qlPYjXgxp
kfKmQT6Psxqz7NBVDKiV1ZjmENiIsh8Z8342H1x/fkxNUBhoGAtexCB4sMur
bg+BVBDlbe7CIFrcxuoT+XxeTQ35SczwVvJ7lNNuPu9A1zVVCxjWauRl01cS
KEU6gZETQ2qcXcL4CoLQ8bsLu3h8cv7P5t9zr686+3GIgPc3YGl9hD1B65wT
A5b8veyQKcrfjhoQIaoTJ49THB8Tu3l2GuBSJGtcxSjMFu8LvkkMCD5xTzpY
T2Gq2F7xZa8BE5njLV56iktvWmrsRgwofBkn9Syk8HHwzfcxIzDVudfnpFM0
hpdoxVMJtiDMrGQ/hZG/bHrohAH//2/+BTfUUIs=
             "]]}, {
           Line[{{0.88808514213807, 0.6756887332633371}, {0.8887989224875449, 
             0.6759494287074999}, {0.8885717990029518, 0.6765186193365933}, {
             0.8877352795626733, 0.676324142648762}, {0.88808514213807, 
             0.6756887332633371}}]}, {
           Line[{{0.8891484176155998, 0.6787556053987959}, {
             0.8890227395428651, 0.6785103247274903}, {0.8892485014190954, 
             0.6781294714440265}, {0.8896499916708295, 0.6786365448386233}, {
             0.8891484176155998, 0.6787556053987959}}]}}], FilledCurveBox[{}],
          FilledCurveBox[{{Line[CompressedData["
1:eJxd02tMk2cUB3CkRgXHhiIwrDdEHA6QIIjWAX+M6BgwEIrMOCh3u02usZgg
FuQyKgKiRHGMtbEZIBouK0g2QeTiGNkYY4IBdUQu2fMW4Xk6CjKtmHXvvu7D
ycnvyzknJ+fYx6eFJ5mamJh48/Ffbp76U3SulyFfXVPW3cNBZ8jf017OUJsy
/PaTCg4Bi3GOkTKGJp/ajMJ7HIo0mcflEQypnxoe+bVy2FY6W5QOBjNL31WB
jzgM2/1W3W3FsPOCS+fzOxxkV1+MqRIY2lJffTBygMP3z9aFeH7FEM7yKkO0
BGVJ20Z9eAtWOL1w5n3VSXpuN+98FnjLnbcTm44plTPItmBAvUDg/1bjsa3J
DP6C8GDNLEFVYXbO31KGvyKeKjVLBGLn8w7ZaQyn341LkfMeq1RIlIkM27/1
PL5zJYdiqdzBNoihrO5mrnae4OO19VOb/Bluq44qdQIOfb66hX0+DJvdzTbu
NuUQ2RafPraPob6mM8PEgkNXXKB9sCtDprT/V+VLgsMdl3qmvPj9rLJyFE0S
+CX3qsOEDIsF9lc+HyHIKnKdVNswNCuetWofEERNqGoPrmbQUHuRvo8AmpXC
GVOGoIZKeVQLwUT09K39ryniDnZ9Zt1JcKa3zr6ft7H0bk8pX8/arUQRRilq
88SvPacIsn+eZXmjFJJkvzN7Zwi6tqSarGin8BAbPoy8S3BHoNdVKClOlnMJ
37QTXNh+tvxBBcUfmfc32D0kmBfauSgLKJZrZDOx4wTNbg8LVFkU690dmx4P
EHS8d41KMigGY6o31v1OcIjssRHKKEIHrT2aOggsPMYDZqUUtjeGcto0fL81
8ix9CgWVmrPGegJT/UlxRQyF+FrPF+p7BBetve47n6D45f2zp4ZuE5TEdj8P
DObn14z+VNxEsFyY6yngfajFXZfF+3KErsQQRLFrdX2VgrdZ62y8xIMi17hW
7sTfh6QwpEr+CUXJMdGu7yw5jE/PZ2VHUYjUnU7VJzhYLS4XX/emsFb17hCc
4jD5RhSabEPR0xL9TgM4zFsMNh+mc7hObw5fSeKQcv6Hxf28fRNthF/z7qjJ
e5rM20FoWL/EOzpt9EsX/RwuqhT60woOONKXOHCAYtPwZrcdjRxydJbGH49Q
ePv0G0Mfc5gwjhwN1c4ho2vrExaghcQQZrdheg4RJcalpRAtLDsWvPr5fcy/
bO674arF0F5ZrM0IhXkC9+qNuRa26wzp/wQyXG74SLxGy+H///ovFn79Lw==

             "]]}, {
           Line[{{0.8955228930892886, 0.6799847585123593}, {
             0.8961511673740903, 0.680146502134659}, {0.8950460969245772, 
             0.681198462012536}, {0.8948368387752078, 0.6804874416223735}, {
             0.8955228930892886, 0.6799847585123593}}]}}], 
         PolygonBox[{CompressedData["
1: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
           "], CompressedData["
1:eJxdlH00lHkUx73tOo10tNmQLZRyVJrYTbubuhu9IUmSt1jb4URT1FhbQsYY
KvK28hLVTEKTlxFqi5IzrK0hNOvW2Gwzbb+V16SX3Qqtvfvv/vGc53zO797n
ud97v/dntSdqR5iOlpbWdnr+e+9P4r7zus7AV2Ex6gcIpeFNN1yJ+aon804Q
/y3KG3EhNpyqM84jXuP+YdCeeMdwmpVqK4JLhzAspp7BGvme0TYPBC6TP5+u
ZbD4huPpqWCKf623pKCGQZadm+3KUISONPuekkoGFc/GKstCEJbeSXVZdplB
zQxOGn8fgjhbMt+gnIHIQSXS5SFIum9HeZYyKL7z8vwA5Z983pw9p4SBz4CT
LJ3i72Zq/KKKGBjstk6tjkTolkl3VhQycPCe+Es7AsGu9OheQS6DS7ovwDMK
4ZC1f1D/jwwaj8THmcYgfMW4HGkOA6cBXu/O7xEOfCJca0ScmzCuST1G+v/Z
P2PZKQb3+uslrvEIgRyzNFU6g6KWtt6cZIRvs4aCEo8zEDy+uWxbJgKGHBVX
nGBg2WJ5zqQYYaBrYsVSEYPhA7Zd+mIEXvnNQ8XEh8y8/CcvIRhrf1awMZnB
2VGleV8VwvzvjrhrJTFQz/pV5VWN4DtwOShbQPnqfJ3xawjtQ4LRgAQGhY7m
sj+aEK7oepi1H2MQ/0h/88t2hNGmM3rBRxk8584TVvYgmA3eLUqJp34Iv1lo
r0ZYXrjysIq+737/WkjuY4SiN8V5+kIGkW9NufHPEPTCOeuPpzCwsnF7ldmP
kLd4YpZvKoPY6E/tHzxBmKyrCttL+jKCMi3MGUL+nEXNEcTlnlkHrIi3mQRa
7yfuKMmPmk9cs2FFrE8GA31fXpMGEUbW8vd9nsng9wUdpjEPEWLeXnORE4du
qvYLVyIUzr1gU3OawdaCuenRXQj2Fv2BHsRJ0UZZWzoQVPWhfT40b2ue7dUo
0jvex5+acZ5BxNPmusmfEXINvCaHz1I/JbLRaQXCRIDRD9ViBpqLMTY5vyDo
zgn7SSNhkDgiFuVTfljJyUXPyG8jfemhKEewNjG3OyijeqpXBfAp/qCjoXSs
jvwXvrpSSedjywXhvuT3uMo3Cz+mfEkTd437Teo/fwg5VF9LTdyXTrcY9BoN
vthB/Q8vK321Ws7gwsOeBUG9CFo2OepGYoWhhneQ9I4V+DguamMQuMG2LIf0
Ps1+zam9Q/sVzY9Pb0PorFnfWaGgffB6o3OOuDLwnuLru+SPvVyJRSuCa8r7
657tDK4kKD8yaCG/WGp1fSA+nNyqVy5DuCjIvwyd5MeZCqNT5C8DZc8D0/sM
atXy1/4lCDPzXO2lSgbXg7VTxNkIyeoiZTuS3vOD+b8Rt7b59657yMCkSuAx
dByhobwrjfeYQZ3G45YwASHV291YTDxc6hb5jvZD+09X4wbiCr0MdSTxGXNv
x9O9NP/Zsm4T2rduYeGjBvrfqs73ubto38SNotgRqi9itt+6L+g+MDk8q2yc
6nPYnDg16Y3gId191ZLOp6NvbZJvR+BMOCdu6mJQtSV2idSN5r/EWSglvcHz
Cg2HnBE2nii5Ukf9VOlY7lK40v3iHieavM3ANkOfyZwQ/n/f/QvtnqbA
           "], CompressedData["
1:eJxd1Gs01HkYB/DZrtuNhFKkxLpUEoeii69uilyGLmjowpBcStlq61Dj0kYl
KquoXDY1SjGJGUQ/jJJErO4pRlmMWv9LMU4jO/t2XzznOZ8Xz3Oe85zzPAb+
+zwDR3E4nO2q+C/bBPiZLcig0RmvdzTYREI67Bvk7Ydo+O8t81hVX0xGrXuQ
Ya6y0Uh0pdisiGzOv1NocJCG+GVXzWvtQrJ/ODVQuZ/G9gKRc15WLsmPYSo6
99G4pvMh91xTJvFOmv/33nAaMYKdotpdqSQkevTv8WE00qqa/+K8TCFm8XlP
+D40FGeKw6X+McS2Z0ig5khDp4BvoJ69mkxtdFDGWNEoXSuz9FZGI+pVVDLR
p9HfeFX9lnYy/jwclFQ3kUaOqUehxdmLOG+yf0PGAIUTdomrZiZmYTx727j+
K4W8t1zd5jnZ6ItXu1fYR8EmX/b9AJ2L78csqnlNFBZFRi3UGLwO7o9fKr+L
KJzOregV/bgBl1cJAXQ6BcyY3X25SQj7HoXSOJgC32/lZ495Bejfbh7e5EZh
4wb+iEIowryyMfe1VJ4R4nl4wj0R6vq+njFSmbNnm7VJmQhe3S6PrHgUlLFr
FMqgEiieX+Gd9qXQLNeN15aX4LSkcYR/mMJ1A8O09jwxlkja5SbnKaw7Fdjz
OESCk20Rt3fXUdC3nfDb4GApito9zn6UUXjUY1C1XFoGc8GLRkclBas3Otuv
nitHuZ9/VPViGqP6pp8QL63AGWH+wCtnGnllu4bC1CshnKzd1cqnUbRwQ4a9
vBJb14RYH71Ew9RDS8PyJkHtGedswyIa2wK1eXmOVbB7tzhN1ECjzXH5hbXl
VdgU5mMT+UNVHwVm7o1qNASy6jxzBoru17vST9YgwSHryKRFDGSaoUbup2ow
Z1mNSbUFg3mhKerXj9agoHjkm+ZOBhbZQdtSSqrwNCuhTpjMgJcjtv30shKP
Jmd6HXnA4FZ578ULtuXwc/LV7pcxMGfyp9TtkWBoh9d87kMGJf2JJyeOvYfn
Sxy1VkoZpPC0Hl4rKYLUNthQ+YqBfmuMe8eICFrOghsRbQyKO22m652+iTC1
X40jvjFIWBB6t/S2EGnc5cvMWQbzh7qky3xyIHYbKFSfwkIw/KUw+FoW/N8l
HkmcxsJR1mLR75IM72zPwq9WLGJ3t+nTZhfxojOwuZbP4g1nt/bTmQkYK2yv
u5TIwtn5mw4nOhxPn0weI1T5H1f5bE5qGJgw34FDKtdvMZPoloWi11QhTA1n
8ZYffUJ0Kpk4tQykOwSzSFcme8ZtuUBm7N5/XO+Qap4TD53lby4RrofWxcoD
LCZUexnJU4UkyNpCY+c+FhuTywXPLxeSovDzH7t8WTy263KLVd4lbWYG64yd
WbxzcFtuaFpM4qwOWPovZRGSw5MkOYnJaMbA1ceJxfFu9+7UBjF5O9bMXK5y
RnSqn9qa+0TTUzmiO4/F+J7eiKH5hPRF1AYcnswiCE6P2Uk1xDUtM3O0ap8/
VVklKRqryZY73G+WXQwqdJMt68dJSQCeDUx9wUDvRe+XMPtaElTwMeV4C4Oe
h+MG98TWkpYGXnZcEwOtnGNBxqm15NYKeuZRld2536mOC7WkeOomjdtZDN7f
Wu/TYSUlh7ZuehmeziBXszXefoyURJeJ9AJ2MNhl27HRZpKUrBUUxayzZ2Af
2a8omSIlIbZT0ypWMMjTn8P58Kma3JFsNDYNZcDfUTxXY0YV0ROPtHQKGMy6
GyH3inxAPK8NaHE3M2glvNWDTg/IzcyklEFVP1GvPe37RwVZ0WVpc9CMQVOE
t6FDZzkhTUYR9ZoM1rtK311dXEZKn+y783WYhndbmmmkQEK6ReZcnSEaz/1X
hL6ZKyE/K2O33nxG43PRDRfKRUKa7daH73ikuj+xzH3txFKyufuY/nup6v4W
84V5wxJyXvZY7coVGtPOWm/ws5OQelnYcJzqf886dd2LXiQh///n/wJa1RtQ

           "]}], FilledCurveBox[{}], PolygonBox[{CompressedData["
1:eJxd1Hs01VkUB/CLwnhNRAk9jMtoiVo9DbIjt1J5JEyiwo2MR0xZmPIqkaZW
CeXdiEaFTDSEsPPKdXHd63dr3GpKUcpU/M7Nm8xv+nP+OOuszzrrrHX2Puu7
9X1DXfxkWSyWK7P+27fFmKcefUTDqm1ChwdsCkPoSXZiFQ13P24Pn6RFGCsK
0ZiupMHZSGOcHhRhAMvfcK6ehgsLribkbRbhjmTtX++00nCqJ9JjeZoQ+/1L
9lF8Grg5z8oP6gmRf3SIW/2EBvXcqcp5Wt2YohJFBX2gYbg6p1SXL8DkqGNd
Ee9o4GsnBUfrCrBC6Y6puwEBxyBDa6tlApSVjHWVsgkM7QhPt2VcyPMa7l1F
oH2jDitCvhO3upVNDOgSeDjxwNcstR29smNjwjUJ3C/Y1NR/nofCg9lJMsz9
9IULFJ6z2nD9SYsnUnUCU7miZJ3fWtFiKjRaqkfAW5XKCE1sQSvTM7KjygRi
LRIsQxSa8Jqpr8MnWQIKNahd9+ghDuZfcHZbRGAicda9lFuHLdFUiWQxgV2V
97zkJh6gZ+DqZVvkCMg3VXFvn67BPTGSrKp+Gr6Ro15pHKrFX64HHDHk0RAX
OxRgZ1yNwh+2hxxi+m9c9crJTqkaFWdOu9/upuFDRdHukd33cfCuqbP2JA1i
X6sgyYr7yOfE6YypEVALtLEtF1ajx0rypZipr5+josg6XYuPjRsvb7QgYKSk
XcpbX4e9N0b8Mp0IDBtJjNXe16NL4ZimsysBCj1tx+0bUK9qTvQ6noBOedjQ
j8cbcCR0zcALFwIXD2txzio1YqD5gqt1VgRuLVvOejHQiHbxFac41gSsjw9P
VKo2o1rPPUFkFAGT0Na0LMVmjHDf+yQki8CNhdQZ63nNWPTZqMOBx5zXdjpP
HG7BYit6yQkBASfn6ZG+tBYUdXjmJzDWvB7rb5TegnkqNg2XGR/mdktYV1rQ
3tKGn9NFIOmmbajjnjaU2WlpUN9B4Oo+5KlktuPBp+YDOX0EHisKzcr8+Xji
mvq6PaMEZHM+681u6MD5GT19GopSUM7uceJLO9CxfEmM2EIKfjMZa+f6OtHt
wPlkE5DCUo3EiwGjnXiWbTR9yVMKJu/ViqamO3GpfODWl5FSKLC85D0p04WJ
diV5WvFS8Di2el+uXBdu0XqX6pApBU2DaI6jnQBNnOgeEePOSfuVkh0CXLI5
4EIJ45utfzjbeQgwK+NoXWSBFDh7z1qLa7rxqbp7ilySFN66nOzrYvLSnhnN
DvtJChq8T2ksLyHOnzcrs85eCkUbSs2MC4RoJjO3TW2xFFL/XsHVTxehQ954
gBZTH1fcGDP6VIQ2Zv4nuxWkUFYfPn7kuQjbKnxSHjHm6FzOvvlMhDvdzfNn
vxB4Zzuitk4swr++y1qryifAT1xb3Hu3BwuVb4UVlhH4WfPN+/QVFK75nuI8
vkZgsUzuq+BgCjWPWSxiXSfAUbKK33WFQou9kSl0PvM/ytwjDhkUcuzevC1j
nCxvJB+WSWHBn1F5BkEEmgf0vwxFirHdRfXe8P7/8mcazKkV4+/dKefzHAkc
iOJJ2jvFODHXwE7YScAnsX3Gr0qMyi+bvtpRrP3Vr6PdPNhA4ERdXs0ZAYWS
sc/y+csJhFzqf7Ywm8IwV72qQW0C335sPa5rSKEc/0ax8CMNPnbeazSZ9+ir
Zq9fKqAhwqdyRlaWwree7IQXYhp2taVw93tT6Lu1uDemk4aAU/9sos5RGOeq
ey6OyWd+Ib26i5mP/5+X/wKlf9Kx
           "], CompressedData["
1:eJxd1Hs01GkYB3CkltHF1BGr5ChLJ42sdrdy0rdymwpJUlFNlMupRZSUojYR
m2uUQeXWhTi1ySWyI1mSSzPGGL+5dNJ2pTTv70c5inZ/++/+8Zz3fP55nue8
z/s+FoER3kE6Wlpa/mz8d7byRnzKxDR0M6dzBV3tMA70/FDxlMbScVHun7J2
xNkVJ02pobGoYnbocOUTbLbzfWBbQCOsIMFKmtCBNQvoD7zfaLguTB06uLMT
R9sd4rRDaLz7a25HA68LVR+cu8vdaSgG4xUirW6E64Q7WtvTKGrIsjkm7cb2
2qUTJRMEwXwbFSdKDBfaXK/kBcHjO242jLkE2cGjt2PaCCwpXtmqJAmMD4g8
LCsItGJlg6r3Eqx3GF1blkGQy536ifLqQdmGyFdTjhCsXfK4266mB9Uxx7NX
7CAY9A+IeWkixRv+nEPBmwg2l8idjrhKIbpAFvhyCaInK9fk1Upx5m9Lp5Ah
Db6OmwSuP96Ltui34k1FGtxvCWtStvfCc8Qwavl5DToX5MwXQgab+EHHFay/
pO9vzmDdtni1fku5Bj83jrlWlciQo1Vm9PKxBg8Ds/wTpvWB90tofZg2wagj
13aZpA/Hams+NH1HYKDtcTZzog/WwhcDbaYEF5cL4oY85JjHOW5YyiNYtyvS
nFskxzHs4y1m+y8odDnQtagfve1JFwRuBDdLj7xTraNg4mExOeZM8Dp/36dK
CQW+8JRs5XoC22X23G0CBV4PJ8/dsY6grfZQbFyKAnen6dpXehEMeXqff/pO
AVE6P6RTQCB6mnDnGV+J72s9BwJPEITnlQ6XTSox9bLBjtOnCLxrmoPia5Vg
tqwUxJ8hKPU2OpnXqkLzWOij1AQCP+VY8DUfNXJ6s+W7WTdGqXidvmpsuvWq
KjCRwPxwykW/7Wpg9FqY2e8EMQ1vvsm2qNFuPdIXwzp6zhV+JGu9fwr3Z7K2
sPZ12866brf/SoeHBFdnhfaLZqhh83ml+2QLQQavxFBsrMYazT2f2PcEDS9r
XMKGVRD7LQnjfCNITV2XYdmpQv28Vbf1WYvec3aOd6hQd6lQdz/7Hp+Hh6U8
61Fi6KZpdIeAhm3jhmXrGQXMN3xOFfBo6By+d19TqICz70dZhxkNzW5vPu+c
Aped9oaeGyCI3GZV8LVeAdWb7hvaIgJxkP7WHLkCs5PpfGcJAW9bi97ZAAX0
SktNhzk0xNkrdgaz83Bp9BF4udCIvKMuy9mjAM49f6DxoNHvIOFlsfbmzNdu
PE9D5dsU4PCFwhcbgVFrHvv/hE2Zdi8p5POa3l+vo5E8e8jPSUrh4My0hCN9
NJLu3VgW0UxBfU2n1G6Exsb0Sf+qPygIYl8ZKg0ZXDrw8QeDIgqnbtwcS13K
wLN6/ERSJoU22ew9h/0YmJsaRmwWU8jdNLndwIfByOjprMI4CkY7jInZWQZR
88nUcC4FbYltwCrW5QvvmQyznnXtrblNHYPPHasPqPwpTCve7F6kZDDgpLjD
yaJg9cV07DbriEPDEdVsvXfVbrdKOxi43jUWXojrR+LUWfOsHjEouHyaUo7K
MTgyGrWznsHM2BkXan6Vw5mOr+BWMPhWsHHCI78PE2kL5cJbDEyPSovSsvtQ
d2PKo5YrDAKcf2w4NSDDyfAHQm4eg2LBb5a6xTKkXY8yOsP2O6K3NzT2Ui/S
v+m+rj3MIF8cnTvaLkVI+UD361AGnPpErot+L1yp7F3qSAYV0/krnldJ0W1o
f8LCn4HOsLuRvLIH0Wt6zJyc2PyO3GnO5RJUzzyh77qEQaXj6csBXmKkBCV/
tmXvOzW+r9ptazd+2iPM1PlEwzS1OJHv34mt9ulHWykawkWcq5GhT2CVzDHQ
76dxUt2VlrLxCf6/n/8FXgrssw==
           "], CompressedData["
1:eJxd1Hs41FkYB/AJWbsbTbSkFEJTSKtdl0hfrHHLJZdVCPs03SxW7i3iiTBG
5LrpQi77pFQrTRebZWq1VkmSzGxmfr9RLUqP7exmSxe1p/7cP85zns/znvM+
5/x+73mNt8QHblPhcDi+dLyfe3jPhtJEBCk6NZ4JAQpEGD5vSKG2H9BO7aYO
dbNea19A0CKZKzRKU2Dn4ZVFd3MIbHT1q3ftVSCBz0+I3UswEOPm+FehAmHx
QRGRewiMB/riz7coMLs4bDc3k+BmWO1QUrcCX2rdtZ6VQbD558y6tbcUWG5b
YJqTTjA+b1RtrF+B6MUe6iapBK3PB5X76PrA2Jbi6ykENcmSOraHru+J/zZh
M8HsdJUOfjADgdZtV8aKoDp35nPHtwy8tpzeIaMe8tig2bqQhdWGodmVhgRt
hYs/m/Fh8VDbwLuM2mFCvEjFl0Vu0HeGO4wJYjpqjv6zl8Vk2zdeV80Ieks/
lvGELMItLZ6KTAnsvmjkJJ1m0e9UPFyygOCnrsdVdcMsVk26lVgaEAibcy6l
3GcRINMSS/UJ8m2iloges5CIwhOn9AiWSjz9785TQplXKXxAnZ0n0Lino4RJ
QTIngeY7FzEyGqurxNkyo3rz1QTT+THr/KZY9KKl9JojgfJRRuLGThavok69
CnYiaHowVRsrZnFuXLX3vecwAVPW1ILfqgO2uhA0ygMtk5JZqFiYvakOINBV
Nc/kebPoNpvoq6JecSE7esaLRZ8y0eYHaj/pS49pauVpnxMTfgSx+5yjBKtY
NKW9uH3ek37voG128+1YVB/ZM7fDneD7ibIy1oCF93rLs6Ff0Xph5O0vdVg4
P8u5UUXjPt7RJrvGGazp9NT0ofm2j06b2UsYBPp96jsWTJC3qlkS3cLA5cVJ
/pMQgsRNomt91QzSnkqNQsIIBotEJ90PMbiiG1fgvo0gS/B7jXcmg1G5xp1A
6oH8IIt86nujfZWLYgj066ty6zPo/vbj081xBJedtVt7BAxSFqieEccTEDWe
4Og+BlNjqS4y6qKk3hSDPAacaJ2WtgSCyqyyOt0KBlYrxqQN1EHZDfcyqJdZ
jfOFNB8vX83/xnEGJ1LbH92k9WkiWc/toOebf6rd5S2tT111aX9jFr2vjl7i
H9RrutIyi6g/OuxaaEfr/+qhywV/2jJYN27/bzB9P2GOh/ryTRiYTZ5fdpG+
r6yKpQeVajQ+3L6FU0QQoNdwpo7aobD274piAnW2dfD61wxs1rR5OAgJrH1e
zxwpZ1BeFSkbob74o+8vZvR89RrcnnHqwYWLgpc0MYgIteOoFRJUdIo23aHx
Mv1GV+eDBKEjt25JY+l+oWV91zGCWZK83JztDJaozekIb6b15h8dWQsGvO5k
izfdBDKN1TbvTirQ42rdLRgmcHK2/XX1bgWyS1Kl8tcEXEZlpWRMjvgi8blB
6hKu9/py6vuBlnGfvCVY3iA+YNorR3+Y+Qfv3+/yweueioPTn9D/9fACP25S
Dovn9j4zXQQHVjZw+/UUuBQRbu9whaB27k5Zp6YCGu+ObS2l/cmYF+Kxkfan
//ev/wABA3Hm
           "], CompressedData["
1:eJxdlGlQ01cUxQlVEGQRGuqoVaviUmlZBGQU6hvBsoNWIB3AskqsKEmgAhpQ
KrElGihLcENqKFLBsOQfkkDI0qsCBmXRUIxodKxYsR10wAhPhSJ9/doPb978
Zs5bzj137qoU9u40czMzs3Cy/tulA8Zd67MwyjHxwqO2acHzDKOjcz9Gxzod
L7IKtRDWZCu8n4RRpbE1OvWUBrCz/oplMkbv+2zqxe4acIbuUfdUos/XszaY
1JBs/Fn9eQpGSquQZRFsNXi7vzbmpmF0zse7uk2tghdn7fOyiD6qKGo6d7QD
JOcXlwhiMdqs/cQi8Z0SvvLZP2xiYGR8s2S1MKYdJr4N8DtDOMr9A+S2tw34
tKDAV0S/dVd5Q/eMAiQxWi854bTNqgjRVgVYWW8o58Zj9NCxUNg4LAeDBvH3
EG7RTS6U3pXDrKeuJomwT12S1n9IDtwPJ+FQAkbfDB1a7XdQDrXM0ZQZwpcr
28Btnhxc+TZ7rhI/itJrUrFBBgXFOa9FxP+7K04mii2Dz8LmjjKJP3+hKKQ8
VQbF1oWM0AMYVcXt3VmskoFxkS7OnoNR9rM/mUzrVmBx4m/VZGAk4A2t9dVI
IW+a+mM7G6M++mGv8J+k0OSKuAmEl7aKkV0UBTOJx62/JPqdC8r2P52RwGW9
4ZwuEyPbHfz+l/0tsPySEN8hnO5RPcDqbYHoTD91E2GrVQEXk0dagKFMlP1N
8nWum17ikC+B+ebd2wryMMqQBOcsuiOB9RWtXcwCjJabcpdWeVMQMetQryzC
KHzeCv+RVAmMJ44w3p/CiBtXMOXlS0FIc9O61BKM7otdAm3XUGDydveUlGL0
xNf34UQcBeUpncX/VJD7PqJECzdRcCPe7yacJv6HbTfofqfAED/+43QVRgdH
ql73B0iBbqXNHbuAkfmR007VT6Vws1IY97wao8ce5XtrlVJgTkY4UiKM8iqy
2TR6KwSt0YceqMGoednY8MsnpH6KlYqGOoymtutoZeNS4C65LgprxKjfMKQs
OSqD8e3vGn8Rk3zn7tWPGGVw27UsyLEeoxT2BL1pluRjec9DexmjwUeBc7t5
cpDqOd2cWoyO/PX2Rb2FAhgPOLRkwjXiWy4xlgpYGXbMwCCcYXob8zVhsUP0
DbuLGE1mnr2UslYBFZ40yon83+eLhNrOWTm0m9RbVOdJf8tUXbFuChAa1THy
sxgx9ekndpgUMF77qIVWidFi1+/ePPBog00H3LLmk3pFvznJZHe0QeyWiHZ/
IUaRNP7GPlo7iOysqVd8jHxtvVZWh7fD7bUrygZIHsNzV3qj77ZD9IXIZ+Yk
j+XSHSw1Vwmj5/NO1JHzrfp8c/mqDpg6mSEYI+ziGPZYUEZ4YEr6nOi7flCF
X7VTweNBTU8HYWVkflACTwWmrkHzAQFGpUWoV6VUQYNNs7cLef9wz/cWnFw1
pPcHca7xSP2d4xdoZGrw3HnDN7MQo9CiTrM4Mh/6/M7s6+FilH/d1rCxVA37
hOMNvaQ/j9pbhNo5aSAh+KSgioWR2XGPTXSeBnb/+um2YNKvR07N3M7200LN
bw87NhPmx6yjf0zm0//n1b9XD5Wo
           "], CompressedData["
1:eJxd1FlQUwcUBmCkhBEQQUDIKJuAWoIUFyqMYMJiq4IKBnDDKloWRUWdFAUM
ZmQJGMAgIBgFJRYhC5gFC0XAHxdKabFRFq20Rbbce1M0LihqqU7TPvbhzJlv
zsw/c17+BXsPsxOMjYyMwg3z75YXeEWcdlbhWlfj7AwzEku2N3zmLVcjy91N
VzVAYPZGmtB+5XX0fPydliMmIKE2XEj3u44n0r630QZHZH+ptHyghnXu8AxO
LoHMts7mpvWNqAtIj4hgE3j6cE5vzqgajk2CtqxAAosU9Jqtj5Tw1d/6VGHw
q59GLHNbG7DqC31PB53AnMdyN17ANdTapzM5NAK1afkpobFK7NBfe+1iRODq
nh/XJXQp0Vg4KS3o00IjnLo0rFEg5XPx+RiFFuKpq1yzmVJ4iivtgjO00LmP
FdXwZCjwLExYzNai99Dz0vCTMuQ6ZL9cbvBF2upfVvVfgUmknp9dpsWf7lPN
eysqwSjQdT0x5Ce0/7GW9C6HN+239RJfAmsSPSbYrFLofTRHjjMJpOaIYwPa
y9AasrmhOJ5Axbm1t3vNSnHDKX9BvuG/mzVxNQGRxcjweXG7MIhA+RZB854U
Ljrli21pJQTU4/q50jOpWPGsxD7qFAFefff6oMPRSFA0h/aVESDnnF3i1RjG
kt9gcnqbCGyrCD201ODxntD/7B9inkVVLmWlCaJZA48JuGx8tTk58ACu9DOs
6aYkXku4DqmZfvj6VYfCzpFE67um6NXe8XAXHuUtnEdidt7QkUu748FcuJLZ
5UMimefa7fQhG8xAFdlmcMd7ZvA2hgDWnt5BqwNIPLu06Q4RUwQLhuVWy3AS
mu8zxz6ZL4Bx0s1+UZwh/6PIsYdzBrtt2PE9QhL3jb8tnD5xFvF3w+fViUkc
L8sfqnAW4OLhmDDnURLVJix7tms2xpL6bM+/IRHmeN9bRmYhWOmQ1GpOQbPc
dmJ+fQKcxcl1ITMprIz0yqt7ugEnXMJk7AgKD/jf5as2xbAEdQ77t2+ncLDa
52CUYxZrk7Tjm6JWCpb+KpN9xQJWDMdE13KXAu/AIfWjmwKW/4sflMJOCuPv
ejkjvgJWmsWv1XrDPYRe+XbQmMvaMZmRnNZL4WU/n3755BaW6RuN+S1Dnnti
+2AQlYjL52L95KCgHGx0qNqWiby54hwRQWHGBtGQn1MxCkfetqsnKGRnSaxc
E4uhGSQeuBvpMO6X9NfR4nIIT/drgiYpDNuc19Qvu4CXyVonvokOLS9Mdure
icCwuXdshbMOVU4X9zMWVeNyRnQig6EDX9m3aDijBoyiOA+huQ55C/xosxyl
8NhF5x/soVDqqT0m/lkCbVtDcO45CsbOIR9qT8gwNC23ijtNYY1t5aggSo4R
2VUv/10UunxTTHOPSfE8xSYp0JTCDbVDznEzGcpHT9mpKRJlUye/SqmqBXc8
cGB/C4kzLQeWCeok4DSPla0SkVCotKkiCwkYffJOLo/EnaEi/uPWeiwvSS/h
JpPY2VJjP9kvw3zQu1vcSHCrIic69tRD8bDbfoWhb9LnFpgSViqo3qfd85hF
glhXWDJlo8L0vr8HxixJ/L+f/gE0yJUx
           "], CompressedData["
1:eJxd1HlQU3cQB3ASgUI8ixxqLYIoOgmjolbw6GxRoVRFLSgociWi9eCuQPHm
CkHBiohStFHBiJpiEVAsWhavquF6JCEvCogK4wG/96KcgiB9/bd/7Ox8/tg/
dme+ay+J9N7GNzIyWsPVf923J9bcy4JArqA7M7qJRhtN5e6fOYt5NlGop/Hc
0ylb9nBe5i6yL+K8JDTii4sCAq8XHZG+3UjjT963h3U9nWAb1eR1ZRaND4cz
ahkTAlPFjz8nndHhL9E07zTTCR+L/WsWeOnQT7X0hxZ9J6SZTneV+ujw1cmx
w3dtCQQa11q6lzfiAxexZ/Eibv7osT/fCRvRSb5LNGRNIL/Kf3NTtRZnCuLX
RjgT6Fd6jpOlajF8TW9K8gQC/u3lM0Y8tDjUFapomUVA4rf3wvRCDT7Lcxn4
fS6Bxgpi5/VIgyFpEyfviCdQ5nTdbutlDYoCmt0iowmskvASRTINDlE1xy1l
BNynFk66J9ag5c28N3+EEYgZX2WtGlCjZVBTbMlZArvv9H/wuq/G8PxSt7Z0
AmeV5ZMXblDjt/wUrUBBoG1DU4SLtgH3+Qf3lL8g0JIlTGk424DfN+/ST1AT
oN5/PStqXQPKZ295pZ/BwAqP94GyAAqzSqvPFLgyINgsKg6/UI9fBY44hygY
sLDckfsipg4tD9bHfuScvjjXpCq6Drt8stuPX2JgaUCO7llsHRq2aajMOwzU
O4XEuSTWo1XGY3sen4WPiZTTodkUmm4scKq0Y6Hkc/wbtQeF7PQEk9QDLHwj
pnJS7SmcmHnQd3UAC902F7on+VDodd55b2kYC9/FJe6kfqNQIXg36KhkYf5F
atEtGYXpgUVzk96x0BygMu+LozBU+FdFagcLDpH+V65yvtU+rquNbwCRSir3
FVG4rmV2U6udAVyDblgZc/sevj1QMn+cAUKud/asz6YwpWNsa9xaA6w/tCk3
VkXho9XHSghn3p4ljubVFNo0f9lmvM4AiuDKmUtrKezdf6JN4maAt2bXvCsz
G5DOO2ThPMJC+/67XULSgMFZzIeGtyycy6kz89yqxn7HhE9l3SxYD1IJrvlq
vBfn1O/fyt0noTd0zBM1djzIPyDlPEH6Xr+NUuPyLJsF856zcOzv0fp4tRpX
Xxuk/cpYqL4Lyoy5GryPSVJTCQuGOaYyKkyDPzKLPwWIWaCJ1ajkcA3OKxTZ
xgSzcMNxdKU8UoPhofWbS1ewIMzuHHDI16CyQHI8yIWFkx+iTwn5WuxayOtJ
usfAThVWNCu16O7Y51qYxsC559MuHRjRYoRc7Z28hoEpR6YcXuvdiC1P/5EV
zmdg+a/FQw5xXF42tlfdWcKAsftBlxFDI1p5EN7OTQyYjRrLDzbRofhkX1ZM
NgOLhXIRj9VhwafJ2n2cr6xincs4h3Rcbe47wYDvqm6Br0GHL9OLRocfYcD8
xsqasok0aqY+TDVzY0B51DcyQ63DR3KF20UdgTmK05ueZdKoHFWU6VBDIH1l
r21MB42nim8ZPVESMH9+tPblaxq3T7OVbs8j8Gp/js95az26GQVFXY7g8nN+
OMdmjB4llcv4rZ4EVHtnjDe+SSOEOVT4CQlYpAnSB9/Q+P9/9S/gC5sW
           "], CompressedData["
1:eJxd1Hsw3FcUB3BEiU5mPbJCRIVZiVQsStNJNuTLWnYjmAYtsUFiRDzaeKTp
eLchURGSNrFIIg+MMWXEm9SjfrHW7nrFoCJpTBOCUFmN1P15VNtf+mf/OHPn
M3fm3DlnzrkWYbG+pzTU1NTcmXh3hh8OfL99g4ZPwtBeh7lSCJp9ypXzNHYd
FpoldJbAsLe+RdlBY1wzW7+TdQeDcrexXfdpyNhx8r6mMtih6YjueRoNr8TN
ReQOrgVFmQf70WgMvyj3uVeAvNW35/R30TA4nTGfNpwLt9AXibaEwMkz1rpW
mIRNsU9T618TOHdrWG5cOAv76C83e88TyLmcuJzxaHy6RfomZorgeNDtz1t4
yaBYRakxFIH/Hlur588lqIjUWM1/QJCoM5Uj1C6B1yk/b79agp2JO9RXtldA
p2xkPqGaoHzT3rzfLX9EcWmRKo6511D+wxUnVaOsx3uALiEw7JjaXiipA8uF
o/dFJsHZ2M5lztFGLER+l28YQMBf/bP02rNG8Fd811R8gidrhy2o583IYgdm
V9gRxD/xmuC9bMLShPi6jgXBdKXtxZD1ZtgGFVqpTAnyUrKt0xea0Z3N+3mZ
cdazmOMGcS3wDF26LDMmmLA5k5rs04odPy0ouhhL/uiomj3aCofN8kp/Jt+h
itRB8U4Kp4+c4yczVuOxNUe5FHQfFeaK9hOMJXLLpaWd0L3PCUthnBoa73CA
MTXesHv/QQKFW+gIm0XhxjSrx5yxUFns8YEeBVEVnVrkTJBhXt+V6EFhQ2qz
VMtY+E357SPuTP6igatOAoI3Ee65SeMUjl0d5Ucx1s6cly78SoE9lCAK9yB4
1Frj1SKjQNnJ3kREElhNGba59nXBipNj9lsMQVewxDJIXYrhdidNEdNfk4a5
uqwYKVyfvmd35SZBg8WFY8VjUqiPcOdyKpn3T/9wV9eiGydSbGyNWpl6tDZO
8hxlcB+Tfi1WErTenfnLTNgDj1fjPgfHCMJF7lou++T4UHOtWl1B4Jo1zTFa
USBR/stjFWPFwDb1RZ1+nG0Yyzd5wcwH6/WlPSH9QEhT824VQVSEkz3HcxB1
bZOzAsYSk7RuXcYFkemSmkUCQZ3pvh7OIKa3Tqb0rhOEZeiLVdf74XjPVJSg
TaMt8paoV6MPSU4XTg7r0diRvDnTq0EJZfr3b/OtaFy2f/pRfb0CUh29EyaH
aJQvfsWbrJHjYfVGVXQ0s1+Osy8LymRYseQvO35Lo3fSk7/tZjcmCs4vtEuY
/QqbjfvsihQDPo8TWupobHlS/DHXugvFb40FWpM0RocLRocePcSSLHDAiPEn
l2541jD27ov/z/XSbOE7LznP1AXN0AibVusJmGsHO3YqeM8rGv4c4wBfwQP0
nSmo9P6bxtpQ2XSaeRNu9enF0qwVbE3i30zjVaOibL2lzWAFYkvBARdWJf7/
f/wLJZouzg==
           "], CompressedData["
1:eJxdlHs0lHkYx5WkQksKmbNNUalstjA7Lquv1hHakhyU5NJFbIlli9o2VkVT
ySVEIxMaytah1TRbjux2mZQ9Zcemy2a9lyHdvL9XKYqpfXf3v/54znM+5znn
+9zO88xYnxQcO9rAwGC5YP/6d9Fn3oV48TjFDigSznfhd9TnX/fkQT3ZlbKq
uQvnCqZXznPmMZS9ZVHgQBfs928zSLbh0RBJ9yRYUaCyimSsNY+MrA3jHlpS
mGCZU+oicFNu8a1QWwpG+bblWeY81na67Ps6hILdwz5pghmPNvu/7j4Np1BQ
S8dHm/C4sc/JT5pOIaPjS5XEiMeSTwP3NG2hcC3584DtgwRV8/boG6opeDdJ
3KreEEwLz5Y+6aDwZLLxeH6EwK3eeoFPP4Xx4jhx3VsC33xNPTNI4Y/ogpzn
hECc2HZW2Uvh3Psh4wSG4M2muonupjTCxFXvZQJLu2eOcp1Ko3u0htzQEni4
l62EMw0vSb7S/BbB6hJDqmIhjYTw/hjlNQKLOB87DykNR2+r6X6NBGrT6qwO
Fxpb9pw6pj9PENvZUvWZhxCXvjytqSHYvSnxK1dXGm/PXE52UxJMLGj5W+FA
wyUpxjr2BMHkDe2pqUK+RHaHeWspQeqY/hEbQd/oqnqa4XGC+OsjjqcEvUPZ
7krVUUHvaaReu4jGldM7HqwqFuqJVPevkdCYvytPwucQ6A22DtQK+Wpn3VGb
FBG0svdTSubQ2JxpSHscJmhXmZaEGNFYCoP/+HTU/1yullRK4giSflwXFCbM
x1ETFLpzNsGJZaVZzW40Jv2mCC4zJdBaUQ5iJxoxMZ/YWnZz8Ll0OfRcFI0l
Gb3jhnUcvrOvGWwV+FBKiyhwiMPQ1CvGZ5JpFPR3yLUMh7UI6xkvp3H/yM4+
kxYOS4f1qZm1Qj/p6gvsTQ6Ppu8Q3W+j0Rwr0shrOCzofdkYI3Db4SmkfBeH
D2lan8evaWjy5IHOxzlYFjftPWvDYPWzvsk5VRzmWFr7pvsymPLT0aI32Rzc
Htcv3NjA4A71s6WjgsOBk8VaPcNgxsv2ey9UHJz9/Q4TCxaDkQebbS5wKLM7
Ebx8Eoso+dVqqp5DScfVlPnRLFaYv5LcFvTKXywr26ZjoRwVaztL4MVecs+M
HhayiiL3/gIOFptlhns9dGisMPM/uY3DgDpDNUquQ1rUjfcrhbi6eoxzoUIH
/sBWJuAIh5MT14lWCPxA21O6tlCYz8Uxi3vKdQh857TM7h4Hf3H8Lz3QQbQ6
b9Cvk8PFZ49yKyfo4DZ31hftPAfHO1Kt2QCL2jbZgzWhBLlHvSJi21jst19s
eElD4B5R+frPLBaTBpXf170S7kec2VQXzGL73SrvTuHeHPmgPhMzFon+w7KD
Fjxa/TQTprUwCFJU7GYceJxfkGn6jQeDCxkf7okW8uh6fCzMXy/sa+zzF/EC
e5qs/yFzmIbVa4fCbwWOi0qviRD4dndve2AAD9Vu5c20BBoNeRvDL4XwGOvu
6p0/kwY8r+lbo3nMzY5yarxI4W5fBVO7kcdTY8Wve9MoJC0fmctF8BDPDlhk
bkNBRK2vCBX+lcxM67tf1YWP/9c/BmmAfQ==
           "], CompressedData["
1:eJxdlH0w1WkUx/WmlCbpetmK6HW9dGPc2uhVetlmKaFEt9Y0pIyLhFTcbIQw
kt25xFBCsSR5a73cvmxvStJGxa7n9zy/u+zqpqSutrtK++vf/ePMmc+cM2fO
c55zvpb7Qz0Cxuvo6GwV7ItfYBbbbF7Ho2dhQbfuIEGHvKKu/RKPLMtZN7Qd
BNvJCvE8BY8tO4610S4CybPzS7rO8jgiEWcN1BFcUNhpkMVj2NuhJSyRIOdy
4PCRRB5N1jubbnoSuLmbxQ6v5mE9WJKodSSwSegx3TPCoP5cX989jmBdS5z+
ToFzV14u6BPYfYJHxY1yhmeK6iPpH3vRWf9WUpHL4PJsJNt4MkF+rDp8QjHD
7fJDZl1igrP3AkriXRjEj35P3XCcIHh7fe11DYVqtHpOaDFB3epw+zBvCiPW
2NxbSLDII2L+7GSKTHGwoeYUgedw9HcN6yk+u1WFKcoI1DG29octKDole5Mb
2ggWL7CYNcWUglU3WiifEMz4ySZ17xQKhW6ZMoQj+Hpsmzp+EoW3iyrHkhEU
raApenIOkqdJC0QvCDLfJUXK7hPIrmfVFXtxSIviU9lGgjyNer3JvxwWiipj
mqMI6k8GRzb/weGMQcKbZXKCvbLyx9xdDoGtyZVTEghu2a77IegeBx+qt0yU
RqBvsujvzeBwNkgjlmcK8f4GO3kDh83Ou51WKQiemxdUZNVzOJV56+nMcgJj
V9uQoQEOpd/PWPtaqPcxRbdipJ+D7UVZba0XAR2NfVFuT5GnPW73my2B2aOo
wWhjitjsB2+lWwlaT5d4uoynKBT573vuTHBcEfFVmJYD72U0PaaxFxeHej8Z
KCiunfik/4XXMMnYFw43+qvWcq7wzwfv+CGC4nFTXMkbKYHr4qn6h4T4L+Wj
jlFOwhzMMqT9aRQtDnHhbUUc1n8YePKnHYVSN8ltzT8cnDJnyzZKKZbodCW1
G1JkyEzMEyspPIttqgJvCnXnm0z8+T6FQx8StXco9IxSd/i8pnh6rLp05RhF
pCs22fxIMVO7sXKPhCG5w2p6gJDf0u67ZzCE4Z1q26b4YuG9q4qy70YwhCbQ
/b6GDDE+O/xenmNINz4qizVgmBPQvi2ylGFetCrv4VKGql3+08oeM7yX9+mZ
WjCkDrVdviSw0sJvdJrAyiLzwsN9DGFTD4Tu4imKN00cqmpjsJM9iA9sFeZp
1mmVM45HyZtZ0tNCfynDB5anCtzd9eu5gwL7nsPRcC2Dn2NL1NUcinTOavI1
HR5HnRqrL5wU9i4jbQwvGQ5NujYQ7Uih67ol7p2GIeiE6tu2uRT9RZ2qtSIe
V5oTsmr0KR6WHkiONOVhVzuinPuag7/aK6VjKY/3D0IwvYtDz6CHyH45jzJx
oJeBmkOQXJpk5MljqZ+/+wcVB3Fimn6cwC6t2eIkJYcMy/vO+cE83Fd4X7U+
z8GwvfBUTTqPb+5qCvZZcXjV9Ep1pVa4fy9R7plXBA6383cvE/TGT3q+hhf0
5v/68x82GKwO
           "], CompressedData["
1:eJxdlGtMk3cYxduqUYGKqAtMUVAsOi5SwElABDcIF0Ur7TowXGJxwOy4qEzG
pIsTMIrK8IIax5ChDsZQkUZh4uUggun9X4V5w/f9gw2g4opTKdJsundf9+HJ
k5PnJL8858NZmJEvzRTweLxYbv7bQ+J2v3VDBJ7WyhU3QikCP72QlTVCoLj8
l+QPIcX2dt0guUDg2K9+UDbMYsA+632M0AwnU2F//XUWa7IdZ/hPMcMyEG62
trA43zQaJF5sRkH9dxm797M4O7NYaWYINszPlr47zMI38mbvh+cJZDmmx1IV
i5FR5uCsHwlcb54YG03k/Hmir+9YCbp1U50Fy1kkNCZse5jI+c/d5B0RsDg5
9vOc708RyFeXVVruMOjhR0hmKwlO2uZNhJoYXLJvnOqWSnBOJVlH2hjc7ZPa
cgsJrOli+aMcBpVtjcP+nHa153j2c9ojwyUqLZdA8k6RKfuKQUzrgdLmzQSR
hqxfr29lYGvKs91LITD49P3+mtMDm+1bpMUEppon3kmfM/CstUxoAgiimOY/
P17JYJvvrct1SSaorh0vb9/EYFrbD14ynRGtuaHXV0sYPPyl7lqLgxEvvYee
dVcwKAicoxA2GND7VBbEVDLQrJf2WdcY8NL+Web4DQYVT5NTXer0qFZ8tFTV
wYC3x09XXqxHtNeXZfd7GbRYe7Fgux5Uc9RwaC4LP55Tg3C1Hmnf1oovhrC4
XV2y3KdDB6FNoF7E5Sne8tzqm6bDodtjKbJYFo6bGL6Ttw6dZFrRee4eGQpR
r1iHLeajg+o4FkGZAbVhdi2uKkPeSONZRIlmeLf76dCV9j5uKJtFiujtvnSB
HlNKI7IqElj4r0h40TpND3dyoMBhB4u9MR5XGo7pUKBvT3AsZNGjepsofqSF
285+UfhZFq/CjzyeUa7FHtddKw/WsLDMd790f44WzgWZ+2wdLIbZqoNVcg16
oibxZD4Us5s9xW4tGrCZOwRWJYWtzaNwM18Lkc2w2JJGgfroeMtcLZSSziX3
yinMF2vfndioRWDJxE/deylmBu8TltZo0eyQbidrKVIb+byBOB0iYgZGOgIp
VhiHVdVjOngWJ14JCaaoU2lk6/31yC/8JG50EYWP2V2rDNFDvutNQEEARajr
E5Xkqh5lnf58tTPFWqewB80OBlTuyi9qcaPY35/95PYmA2z8I2vd4ynOinbz
1V5GdOWpkp5HU2wNTg7bE2uE3zeqIucICo/Ue4LcJUYoVoUvH17F8bIC/1Fv
MKIivvHuAu7/9BK4TJdx/pwz5RF8ihb3cUvYfBOW1Xww7/1CigT/8RGZxIQX
S0XSLgeK6IBTfz/KN6Fk1bHaRleKVw9qRiOzTFBkF+XN4/ipQUs0obEEr5qE
VbYbHF/uZ3fbSfDFsoZ6n0MUv00O8TpjJrjffTpuooxCnlxNvZoI5p5ResUU
UbixnYv71ASxkwfHjydTPCy9Nen0IMHh6a+fgeuT//fLv/B7fa8=
           "], CompressedData["
1:eJxd1G1MU2cUB3CGwSEKUwaKSpkUEi1MolDY6iYClhSdwzfeasW1EGG+tjKH
oCgwtZiAihIsaMAhQ4oi0DGo1s0/DEXApW5DWi738tKB671XsCIwZFlkd1/3
4eTJL+d8+D/PkxzvJOWOvfZ2dnZirv47i3fY9J3vU1C/8YY5nkVH/cvBDwQU
WL5Rx9/KIk/jan8/kkLbrjwnZjuL3mBf0Zx0CtsWLBrz3sLiIDGgaJNRmHQJ
mXqwnsUZqdca73MU7t8JLGwUsfAxrSlIukAhMos9mezLopHv4VTLo5D/pe+k
zpOF8MC6qzlrKPiHX7sz0M/gLTu8OI1z9ooTqcOcbX+IQ6+OkMhKXJg9OMgg
ePbo7WwliUyL8OGhYwz2HNadafyORFmQvLp0NwODPvSWVEvCVhyqqE1l0HI2
QfjyLgmfK/uyCzIYhGg/cnIHiX8uqPd/k8kgZiJm8/ZqEpU7S87PbGOQYl/e
TDSTcNGKIlolXL+8zCPej4LFbHCpyeXyFfFnPh+hMNy5OGs8iEHQgZafdPb9
cB/VnGryZCDPO3e9WU/BS6NLvu3FzfMcc4OrKAwNUCfFDgx+VpWtl7RRWDn/
8LG6Hhp7PkyQm0op7JfX37tsoHGTpxer2rn/cC5OERXQuB6WEWZMpBAoiapY
lEdjXIZNFwO496syOtYn0bgyG/BFw3sUBsaGmlYradiiBG7vzJJYp51XU8v5
wVKmSiPk8rxoJ3I20vgrJt1+NXffWvLd8uqlNEIMcy1hV0gIhGTv2nEr9sWn
RCcUkUj87YT7aUcazyuVn7gdJ/FxvGtnNOcat4KInIskiqJko1FNVqh+KUyt
yOxD5TLp3MYGKxLSQmTiKQKJ/TVLpjVWyJvmPZmeJPAiYzTBo8SKH3wfWZZz
Pitd7g/O92JsX5MTBHocVF1upVY8m3B9I+Z8ydGh4glnqiJuaAPnZaUibRvn
ko7fW2ZLCfh/5rxb+dCKRwdXJpccJeDSrVf82GqF68xYWVYsgUPBw0yG1YoQ
/ko3m6EXg7Huyjou/6X88K/G1L2IGtkYvtSXhnzyqeXmtV7cXRRuXCGm4Rp3
KIDMNeORSj1n/XEaRRMmm5xnhu57edeWVBq3box03dSY4K94K/DT0nha7Tgk
murBzsCFvPNGGkmhU+H1chOWe+3yTGuj8epIYYd6ogcSl78pP0cGbsLYzdfH
e9AWmTiYFMZgyf2c7If+Jrwe79n0ZzCD+S0jmobDJvAzeZ96n2YQp/Lc4fDc
BOI10VpaxcB45IAgVWbGhsfEwWePGXTHLSn81miG+7mIrVaagaiuXnJjphe/
dr6Ka59gIHU2EAEyAsEK7fE50wxW8YP6KlsI7H3Wf8NnNQsLL00yaSMQORKt
SF/MAn0bN3RH90HSdOpBWT4LpX5Bq3otCekqq7MgjcX/98W/p+118Q==
           "], CompressedData["
1:eJxd1Ps/1XcAx3FOpiZjES0RdZYkCy1Sk/dIpYckB12Udhy3whCnGucUcovc
D6fjONL3HEISOQlJH6xCuZVbpViuWUu2xYM8dLb9uh9ej+d/8FrDCmJ40+Tk
5Pb/238Obb3eal7Hg0qm69T6bdHE6flgw7mUJPTIO/xyWC+anPtEb24L40FV
wz7n83I22eO/4VVwngAtw2Njk/WWhH/FV1PPIhe+hwoVV6X/jKn+ci7dJB3b
VxQra80Ew+2960j10ThYv2bpHbQLwfWJcDVnKRvNF+2DDBpD0Zpoufa2LYfM
V5Xt8TY6Cxm/8sPnnARi5dg1VaMdBqay14adLRlE5QJ9edgWDroeUdZln4Vk
sH3fyRcu52F9UynGhcoiIa3HcwxPxMMpKsRa50Aa0YhU1U+tTMX07vK8S9xE
IlsYTbe0y8B4h7vWQkQG8dzBmKHReTCNPmao4cAndIeIj1dyM9Cnuv5r4iEg
LjUyd80H6Tij38D1bRGQpr2kKU+SjmNHFxtI5LIJ31hB16M0HW9CFT/dNs4k
WnO5dqdol3E2xKvvzYsUEm5d59jnLoLS4NYxulEy8Zi51fy3Uy6sukzdYrYl
kWMB6hYrZ3PwrfDOAEmIJwHT1nXB6iIwzb1YeimxxKaUbHdJEULhSPJM5cEL
REGj7Svn6WyYxQ3eRFsk4dT2vLdTFuKZma63tmIC2RebK2qmUVBTN3h+zi2M
HFbRvcWIpWDV3T+/8CiAXPveqp9pdh0+ZfJCP+JD/mA/VfctuoFPCn4qs9yf
EGhvnmoou4naKulG5ng4nEr8c/JvlOOwy5q+galLiGOZG8tFVWCnlxwt4QAP
dguixkOMCnTWmvVy5WPxVyC/lLItw2xUqYTTfg5LrR50LwktRe+9kyM5TfHQ
Vor37Qy+AUn7jFqx5AyiA1KMEmX56KeF5tWM+sHFn9/5K0MMlsWOj0Wjcagf
eB1xsbsQst43xJfJg/R0d36lyTU0RrXr6LHj4f9YXbH4ngTnfTaKs1vikSq0
Gcm0oWC/2nXXJtPLeDb4jtt8WgznpIr2qIJMdC+eUL+46AoCO8waaDVZ8GDP
74jwFqGx09I2aXUeNgfVpxm0i7Gqe8kTeIpRzZ9wihZT2Nm01lLrhwJ0VEtP
BHCuIip4lRXZU4CecJ2RI2euQsJ0eitzpzDTtuKVppoAZk0D/Y4j+eDu3TU/
oc/HSoqJ+1Ni3FXY76HzXSY2jYvebXXJh/+4pHqOlomSD2mOd/kUbHQmvzGr
TcM6JcHAbw0U6uYEJzsmU/ClnLEhY0shZhmz9CfDWQhQ3ay3VL4IyYv231d8
ycfb0novilcEluUykrs6E06Rp9xHna/h9+KuiBLDZNgJSmYeKufj+HiFZzn9
AjY6WjQ93C2BcXXK0fRBLpbYRjHu1Bag3IB9yDXxILQNezRsrYsR7pA3zOtI
hLwkJ+YpsxAK4i8+KrYy8bKaczmaWYKX5189V+lkYpk0rUulqAj9Ph/WrFC+
RHT+nNwniimC/uPZtbnCJDIoc5swkBbAbVjTqE6URFiunGndkQIkqW6uOuIZ
RN6PT5weWinGD9TQ3FhVHHks1ApTYeWjy6Rq2fSIGgksdhhSWyyBtHf5ME/A
RTYnS2q6m8Joe3m49F4kbE3YPX4e2aj4kU2tW/Ah///ZP8SRY3c=
           "], CompressedData["
1:eJxd1GswnFcYB/AlDVGpGqHE1G3SpCRTJFGtVvJMSSWGjBAkIkFMBLsutY3u
iIhbGrq6uZRU0BXUJYSyKwkzLo9LyE0SrITV9923bhXnXVSCkJb0TT/2w5kz
vznnmec558PfKjTWJ0yTx+O5cevt3iqd6xS2TIHNH3edQ+wYdIyPGBbemwIq
PXLaxJLB0MY2Sv1wCrKU43eyu1V4S/f5ywh9Ape6iq3E3TR6pzR/cGItgUif
UfvyZBoFhq/O++sRGMuq+Lz+II3LVUzB7c0ERDliQcXHNOZ3Zou//5CA5NhC
UdgghdFffesZxbm2zScvknP++RRBHWc+axty5RmFejMx5b22BGRXU3LKZBSy
P2oHS3cREMw0ZN9spzBiucn8hyMEkokg/KyIwsysnjhlGIHigPlRuYTC0rgc
Z2M+AQ8/22eFpyjU8B00VcYQSOVtV5Vw51uf+PzUkkHA2FLLRZzM9evvkVqJ
CZgc+OeNJ9fPJlZmEXuZwMyL/oPJ1RR2F+qNHs4lEF4atNLzhMKWVxd1daUE
2ibro7d3Ujg2FFISWkTgl0Ms32uBQuMQhftLGQFf/9O5k+/R6KA9q7NaR6DH
sK5yUyaNvfItvk2tBC4Uzu3edZxGpxOjrW/6CcR8d0tj7yEaK7v8NJYmCfzc
FaetOEOjW6hy+s0SAeGtvKeW+2is0BdvbtRiQSG7tjj4JY3l7d46Ih0WwqT2
NVJu/i27ayp2bmTBRtmyZCil8NwdobqG84VeN79uOYXLJ6bdHW1Y6Ft5rdlx
m0LFrjTmKGeNJBO+TgOFqrL1LRc5/y2b7SvjbBE9EfGNKwtDn6SsVS1T+Ot6
UyNvbxZclpYcd6xQ6GM56FkYwEJWhjX/xjYaJcOBc2aBLBwwflAdJKKxfkBy
umYPC2dLwwKrxml8Ik25T/xZmAg2RwXnhHXt8V9z9etWN2yUP6KRNkgayA1l
ITVJ9rCJ5fxYVhB1joWRJsdjTTSNHSai6+PlLPgajSjH6mh84fDF07H7LPhf
GH7otkBjY+3rpMOL3PunE7d1DXP/1Tak6a6tBqsy/XSJsQrNOuIVXWvUwK8f
PTnsqcKd89ViOwM1nGzQEwUeUeFwZdWaAi01ZFTH7L2SoEJet2BhVlcNRlXC
8MECFfZlWxd6vKOGOuqymUmLCiceDCXE66nBPi8urWhEha610Vc3cPX7opp/
X3nJ3U+oE5p+pIaAef3SGRGDCruVuLdmLkn/880ojWSnd9VQIrfOd8xlMHV1
Mmr9cxacV14v8HIY9JnPFpojC4khmbkv5AyWDAbtEbizUOqa8FlaO4NJRyUW
A48IJKlGF2czGezl/+bxVwkB70d5+ZOnGJzN0RaOXyOw6EKK/YIZDOInurTu
ILC1V5AuiGXwRnP//tZNBJwMbM2P7mdwzCshkaecgnv3jjPJfgwa783Wu/t4
Cv7srjnz/qcMOhTIz1zn8qOoxCzTi8uP/+fJv0krf4E=
           "], CompressedData["
1:eJxd1Gs01HkYB/Ap6Uat65YtZdLloHLZLZWth0LRokRSzZEGmSiiBlGEUFZU
0zSIU4hjsyVidqkeo3FpZhCmlkZtLpWdzrH1//0HrWj/+3ZfPOc5n/ff75d9
OMI7eDqLxfJk7r9foOv0+HI7BUHcjl7WNSl2yg/cTGFsdOtsyEqBFEPuDuYk
dlIw3DRzjJcsxcrpgu77/RTEXjU4NXvnEyzd4Tgo+ETBpE3Y3jiDRvQQFhZq
aSiY1mCXNd4mwQ+RUm6MLoEQcGslOo1o6P3l66JlBGYN/xX52RLxpbbFGrUb
gbwzAs78bfWoRbE9/Bknvvd6L5DXYopdlO1hewJHbx0QZ7nVoqjj1aNgdwJ8
lw2BfWYPkANvo5dzCAS+kMfaau5jyA/W+ociCOzMrktS5t/DhLIp9h/RBDqG
PBV7oktwwZETiYv5BJLON7mre0Xo1jma6xhKIPdLtneK71VcG/ePbUAqgY0T
VKKToRlS4QdH+RcIPPW1EC/6PQwUMt0ZZYxHPNSmLEE4lLi/029nfERdFx/R
GwbCTv6907cJhP1Y5c9t8APqyRKFvoRAsnFZntUuR7xcuNZlm4qA7Rqt0AIn
Ltr5mmWNMZ5bXEEdlQYhb//y8Dl9BPaUFhw2+DYYx/X5LP8JAvH5nJygHAFa
+QhyMxbScIyorqXWnMNa2YRx33IaEofuwEetHEz2UTpE+tFg+NjkmezXeNxc
z9os5tBgyXYd8DaOwQkI/e5KOA1eWwbTelrS8YRXMVeniAZf6zqec1oCuhZK
RhrraZjXMdKpZEdj2lTDS8/nNMQMHphx2+EC9giKv3InaQgy9SkV747DPy2b
XRzZGgg8k95i9+Qi5j2ctTKGMe9+sI3MPBPPSMqzgxmP+96Yd3JBJrIhbyVf
RwNWo23GGxMEOGAk6d6toSFDBhEBAfl4+tzJoW4ZDX4B1XYTy0qw9Nx+ehrj
qC5VhbL/Dn7syohqLaOh1/6Xu2LdShw4ttShWkADa+bbN303a9CEc/H6+is0
HI/O6hB71+KsqatLNvBp6H6T62d/UIyj7kqLh9E0eBe7l8cPPkSVRRFZtY2G
LbfYJh8NGtBmZ117sRkNl8fKkoTfS3Btciy3dgYNBjrUiv4wCUbFDhVVDhPY
3sfrcSiWYFWBLTerh8CjvwOzcxsl+E5rxdazcgKV6/Vez2X65JSsXvdzC4EK
7ZjITYeasMTMNKb6HYHqQYt50i/NGNbYX/+WsXPG6lOprBYUPV08Gck4+ULc
erupZvRQ9mz1UxD4sGphnqauBdP9VCzDKgJGc9QfTPitOF8VoIgpZ/KXqv7p
WVUrTneVVjWmE9A2bd3VXCTDB3qZ1iGXCJzg7dj4aUSOQnUU/zcBgVeQnffM
oQ05i+as4OUyeY4QmbZvaUcrr09dnSICis9uFr072tHRePiKB2Mj8wQXT+d2
PO98p8A4iYB/lPW+G1ptuNdIlKXgEtj/oKKuZVKB5S/sNxzfTqBJMqk6NKZA
X05mhhUQMDU4fylUo8DxvppN0cweWArTbMxnK1D7etcbg9kEdPK6vGREjiqK
8zyFUKCXo2x6aS7HxLs1A7LXzD6Zd5jk+8hwmruD+SM5BcJ92KoreorrXEfz
X7dRQAtX632jasb/79m/lGCgCg==
           "], CompressedData["
1:eJxd1H001XccB/BbCK1JN+4tMmqraXWtVlc09lYxechVMj0gDyWRUyutkYdK
U6mYSpubEkKFDNu6hUa4ni73duM+cOMwobZJ6ff9eYj2W3/uj+/5nNf5vD/n
fD7/fBcGHdiyZzqLxRIw779qlHu4NXiKgK3R1lvur8a4uEsknksjz0NiPJyh
wpO3keT6ShoaObfAM1GJLJPokLsONNbHr98kFCmA4IFFGwQ0dnDe5C990Q6v
Mz82+frR6DEqd9Mxbcflhbe1JsJo+IhN6le5taHK59WwLJ5GuIlJSNRbOaRb
bptmnKbRl29vtMRSjgSVA78/mYZ92ZH5t7wew1ycklCcRmNxWm2qTrwMkxmX
toxepUF5sdlnt0qxKTerSj+fRlO9Uc4kSwKzeZrgTMZHV8Y2rJc2YzhL65tD
pTQujAoL+bwmHLqeF9hcQcPb5jCtm9QAn622QwYyGtyFcxbHONThYHLS3DEV
c//JZbnWwhpE3nonDO2hMZPbXzttpBoOcr8ZnF4ahZ8/1BuQVuN13bYWLmPr
s+muxYz/GixKftdIw9+Dd2rdZDVGK7iWjSU0XJe+kMz67BFaPJSH7jGepc5Y
zWMskE3jGDL3a7M7vg50qsW3/JdBITtp7JoytEn1EUNv582SL5xojN1f4uLh
V4/zNoNtVVY03FlrN8gDGhBldypQbkjDNFovwb2sEYOGnNYkHRon7GpbYpya
0eN3rFs6RmAZ2nIyTCHBldC4tOKXBI4lC/jij1tRUt474DhEkGYSWzvbtRUR
s+pc/Bmb7D3yzELQir6hiWN6zwl46bKAGxUyzF477SHVS9ApWJMYxpXjgtLc
5h7Tl//dtv1CjRwz2V/5Gw0TPHvBCtp/8AkMxssjQBGU1w1QOjPakO2pHfDB
IEG/rX7OiKwNgpiJA7s6CO41WJnZXm1Htpt0+EsJgZ2d9nzZbgXi+SV2WZUE
eyuebyzlKSEN7/k15S5BvOcxPzWlxG8W96t1Mwn2CU1moFKFTaNlcv0UAiNR
9CtNghrWWd/7X4kjWGBt1Vro0oEVV7zZYZEEU8Lxn/+p6oDY6ZN96nAmz/nu
akekGpeHhQmmmwkoXvi5ouMq2OYEGXhvIOg5LbSS66pwkRRdduUTLJr7pqkh
RYmizLi4/fMIPE5MJS7LVmB1BK+wxpjggVNWoOa8ArHOq7TX9VOImxKVL3ZX
YHJmS7pXDQVPS47DHTMFolOcj/ILKXhfL0qVOCpQuuN4Y9s1CmYPakeaHiuw
KrrJ3D6Dwh7fZ13afQosW7Ld9ZyQAsc8Z2vviALDzZwBdiKFIg+HKGG+Erkr
zN47pGDNe/85+1qhOTNf6ab2CuhWor4g9KJuKYVPP7oVlcdVoemRqOzMYwpz
hixiLcJUaIkRbOsWU0itNcs3HlCjnF2v4TP7blwb353l2wGRX0GI4xMKLTdY
nhXTO3EmT254s4rC/rpH91/+oMHFUn37mocUwkTtjj13NLgTONGc+weF1wXZ
xR/6PIUBdTN5AZM/3axbXKnVhZI4I/ZyxieSfNlC+y6k/R6jrSZMXhKhZkU9
RXqwm2ffcgKv3aLtI8UajAW773MJIvA555y7u7cT/lZj17R+IjjZHZ7kbNiJ
bmWmsUEzwebxXy4l23bg///bvyTwjdg=
           "], CompressedData["
1:eJxdlHs01HkUwD1CnkWkh8azsrJWSSm2m7dW6Yik9GCQ1hIiybOVCiu7cYwK
GZ0trM1qqfkxv/nd2Uny6rVO2ELN92elVqm2KEztb//tj3vu+Zz7OPfec+81
58dti1RRUlLy5+R/fcElISj9Fo06M0H1phoEKo3Ojn/jJUGxbP6uM91yeHL1
gdGoBoOPEyYN3AbloJfEWyVoYzD/WsN+75dykFprpPt7Ig5NCK6MfZDDo2TZ
wyKOd8WvWFZtRSAMDZVLOX/fhEg2w4LAb6lv69u9GQz85UV8ihkBK+t/VuTa
MWjh61RsxLG2u0SiGsygKu/Eu1F7AkZtgZ0FWQzydNR1m10JbC90ce1sZ7Ce
cevbHM7l9wqWljxlMHdeeXjRIQIeJ29E+ykz+K53rKH/OwJZtTVBtoUSdNlT
K6k7QGBrhInBnMUSDKmYI7wQSeCMc6r1y9U0tvI6BOw+AnM9lvSEBIpxnd1I
c+suAq9KcqUpOjTKh5jBI1x8Z0mJTlMUjX1x/UcT4gj4YURkqIzGi4laPseS
CTynfr2plizBmu6MqYEcAleSZYLpOxIsLaIrbAoIONnJNXYvZ/ChzZzXBcUE
0pzd+c1XGdy0c2h2aCXXT4xP5sBeBp+axfi8ukng8gJx2k/pErRVc74TIiXw
THFyeL+/BL1soh/uRAIHA5PSzG7SWHh/q9buTgIOrjxs1ZegsdKo+88jBE6f
TnPUCJagVOrkP6zCQp61+myVoxIUNm2ULtJnIVs5o3frOxoL2L5LxR8J9BQv
eMU7SONZ/WTBhjECZd7Gv1uvofG4sHHZX8NcvV9YGUxw9u+/Ktlhr8rCDn3N
Q2IhjVFarxWx5iyA3t7HbD2N5ddkWcSGhbG4pZMiuRg3jZbzmqxYsKv13lJh
KEZF0aWF0zwWtDxPnS+IbEGPW6Wbkxax8GK0wyQtpQVZk3z7AC4+0cc05nhe
C/J9bCyt17MgOLV0wKeyBXMyzjkU+rPgtG4qUFPUjF+PzAS94TggK16/4h6F
tgdm3R/exkKj5oMnJJjCw11HRGUBLDivpQ0kqRSufdO/Z00oC5nfPiPmZRR+
XBJjfzeGhYFa666uRgodP0k/diWzsOHRyk/Rmymc/OPu6sHDLNxYH53s97cI
N9jmrNflOH14TOHXLsLYvFi7/iQWwq46m/qOibCOXR4b4ssCannkV6hRuJ3J
/ZDCzUewonypqx6FNVt+fBuuw8K81jG+gyGF8YxpgNMkgcSFB45NG1PY7NAz
I+zm7tExpljI2S09qoL+bCBgW1LZG31EhCeeTXRjMwFqQTq/69F1PM/vXjwk
IzDi23Z76uJ1rG+qyvNoI1DVg9KVtSLUDlFYddcTOMkvc9IOFeGm8bMh5woJ
LMsMN7njyeWLUjO7d5wA73mpIiKbQqHlfXUTbv+bUmzdxBsprFwz2OHlRyBa
b542oxDh3Py26lQ3AhavA1W6EkU4+8vK7Z9sCKzrynRUthRhNV0nEy0hgI3X
ajylIsyou7vbxIiA85bTk7r7KLRQVrZv0CHgpr88cX5VMxqfFxRGzchh47m5
T/ZdbsGy9zl+/47LQaZumK3waMG6Qs2ccHMCUvfe8TJdMf4w4N3RMCqH7FnV
ETlXxBhmqdpPTckhLFw9zJ27h/lGl4TXb8hBLX21bVM7je9vRxq6c/9L/sCl
fprjDwGr+qgJOXz+//4DFL2tDQ==
           "], CompressedData["
1:eJxd1H00lFkcB3CErMLB2ki7y7RLVjhhNnHya+WsldSg1mZn9YJCot2pocXI
S9NssZuUl53ORAmtjNmYwVm53sq0BzmWGXMnbOJOXtdwNtpj2du/+8dz7vmc
e+95fr/vvc9jfyIpNEZPR0fHnz5vx4PNBv+cP0ZAJXfd2t+E0eaJmrhU6nD1
qEUTdU6PvvZn6pZH/ORi6pq6eC8hdeW7rIVS6injEf79t/Ol0s9vUY8fXuoV
U3dPp89kU382Xp7k9YBA0avJ6dzTGFlctcz/vY5ARFREH88RoxGOoLKug8BK
5xfLWxgYrYuf/dhGSSDRL7hAsahCoqxkU8NFWt9866jzSxW6c73z0NhGDRis
FzO5/6pQ7pxM/469Bs6o/b9dVanQzC1f/theDSztYOIf6X4fTcPS5gQN9K/i
crFIhe7dnApZEGjAyD9FbiZRIdwQOLeUowF9zgXD1EEVsip76iQO0oAv09FP
60r73a77AVNNwD1kNP35Tox0P7FZZ91PYN8OmSkrGyMp13dYkkfA6Q/3LqEC
I0k4+3hKPoFN8kWXG3MYbRd0z3KpvZv5JYXU3EJm8a/fE9CUn9/JW8Bo5fHI
O0MJBJomBV86m6lRHLovDokj0JOwUh+gr0bJVaFdPscJBG+1Pbi8SY3U9ez1
+9gEXg5Vm3Es1ehB5H7pX5EETu73iAydwSi2Npo1kUzg2WvrSQ7BKJMf3ex3
mYCfDftZYT9GysoIOY++XzJTcs58AKMtp+52rmURSO9h9Me0Y3T09UUBEhJg
umtcOQ8xsuO3Mx6VEGjTYycyyzBqSrFeUVQT0DriF1+JaB5LD8vFFQSmTjQk
dRTQPN7XXbxZRWAvf16ycgWj3Rssdjt0EbDbc+RUIc1LyTD6LugpAe5QUJRx
PEa+aTZpQjkBz8FvtPUJGIVZ5zHyntB+Wd7xSbEYDdSkK28jAvN9Hqse1EdN
Bmu4LQQOlMovN9H9PV2GP40/pvfPk+NzJgkjz+kr6qxWQs9fW/VDBkZLxWtu
CXdp3s65y+Y8mk+w04G6MgJ6H2UaL5RgFKp1uaFTREA0erXF9DpGDBPhSHIO
gWxl/K5zjTS/a88zxJcI2IYWiQZ/weheTKN5bDqBxkP1BvOVGI3tmhpmpRFw
K3bjTVRjlFJb1Pl1JoFt7lLhAM1vW6+Fgx61e6eMd4R+DyZko+JYCgHhmwAH
Bc17z6cnww5TG8mq82+30LzHJB8GZhD4067X0pauf8+7sCCHR/vHZ2f0ZBgF
aCpOMy4SsI96lRFGHWU/aiWgXutQ5I5IMboWdHb2b2qrQG1CRR3t1wcsXFIJ
SLtlkuBajKJfyHt7uQQMElvtB9owesNqY2svEFhQhXsZPMFo3hn6NtD7qFWy
fjOlnpC5cnkxtJ72LJFwGKP//y/+A4WbaWo=
           "], CompressedData["
1:eJxd1H001XccB3BHa5ZakdZ6uJMaOTPKtCNy9eamOvJ01Spu0xV3ddRcptWZ
ZlG6EYq75FJSKYSl1CrHKHOTHlyaJQ8Vv+/39yC2SmOpOw/77d/98T2f8zqf
z/n88T2f854fEbP2K1MTExNf8f1X1+v97f0f8qjRf01fdlE0HLhnvuc9Aedd
Pxy400HxNDG9e425gKBm260W7RRPhuo8Z4kOqfGeUfWI4t3EdbYlJgJW95ap
1mdReNtdCt/sKUCf0zeqCaRYc8PFz1otgBk5VzkJFI59lQuGVwjYmcMn1jpR
DFTvruhaJcB9r7Zf/5SgvlAeJJMIODSBvO/dTdD30VljtKuAOuvSG1mXCMwk
wcufmwn4NKU44odcgrGO/JHi2QIcHSU6ry0ETT3XtK/GeNhXPzYzeBEMngiM
GmJ5NDhkHC+3IZjy2uBpf4HHeO4gURIGmYvXbwwr5+FvO7EjtIdB89mHp3YW
8khOyL258ioD4qopW5DH40CPWbFvOoPfsqVeai0PC00beR7FwOkxOR5XwcMr
zR4ySwa+RbsUG0VnK7SJUtFn6o1HpaJNR9v3+YqeaRox10PFIz8Zdq+kDHR2
qabmHjyeGQabUxYyUNGDnktn8mhzGVLO2sfAttcjMr6Vg8W86Emtxxhsvv7m
QdkRDu+4XjE7XMYgKDmgaZOKw+And8/vuc5ATlRuPqIztWRJqugHu6zPpYpu
KjiwsEv06aLDUVf2c9BczhRijQyYh3RRy14Opd9LJ0ywJpAezV9RtJ3DLZlf
5g57gon75ekvIzk0xNRYZm8laJTpsg3x4nxG2jW5kmDPiF/CwUQOY//4+aXG
EeQu62/9MpyD2iawPGQHgUFalilbyWHHi9e5HhkEQVcfq/bN43DZdjhKdYrg
TUhc6E9jLNzaPrg1ZZTgddIUCX3Loj50v9HJnMIhOkK3to9FQW9CpHKAoChu
2PzkTRbf2Kkl49PFezpkPW2SaJeJVfplVhTDjWoHK9HBhd8eCxF9X7cp6sUl
FpOf+XspZRTBVnYz/qxnoRqoDjSJpKh6U3vh4kUWNS+MVjI1hf741tFrOSxi
flUEeJ+hcDG6ht8Q7dNl3LZadMtfKUypjoW20qY/5zSFaeP8gh/LWOjnuS96
WUdRCKPb4lpx/8p8Uw2hGEy5uPBpIwuJ4m2WdohC8Vlhf8tzFmcCgr239VNE
VJ74uK+HhWHOuDTPnkWJRq6rncbhVMjfJcXrWNw1ZvVnKzn8cfpOu4Mni87l
aXPtkjjEV3s3j85mkbZhamlCJ4cMearytthf7XO7M8zIoWp3aniMH4swRdjJ
FgmP2PtuASdcxH9xRlKTO4+8qIoVlnIWHY5HPtds4FHRF3+QRrMgmfUXvgvl
0S20zxmJZZH+yDOiVMMjaVvKL0FLWCgc75W0JfEYLpn+xfluiqUFm7uY33ns
pQ/ihsT8KHdc3DtZ9KhNR2yr6JDtSRLnVh5OwU/UyWJ+OP88UznWxsPgMnVL
XSfF//PnX4rWakc=
           "], CompressedData["
1:eJxdVHtQ1FUURhFFnNUNaQGFhOGhtIIQ6ODOLD5ARcOVNmGjqCxTA5WHmZWg
M4ipsAIui4MiCiQKg8Wi7AzGLnzxe+wCgSG6Wjy8P0EEBGVNhTTIbv/2x507
35zz3e87c885np8nK3dMt7GxCafnv/tVgqhdr2aQ1TRS63GL4IAgTS47yCDy
UoBf8zDBHt3d3bIMBuR+2J0cipNu6d87kcngK3Wr/sEDgspL26Lcshgs3jiR
d26AQBXbrVxwjMF073hddz/BvrSuh2tp/Ni2b6bi+ggSlOO1JJuBuOD6MynF
fa2Z3UE5DPaoFqvICMH+4fbXdUUM1rWu73Gm70V4vXx7aw2DQs0cxwwrwaYz
frMGWQb3wqV74x4TyO/6uwUNM6iLmuM6d5IgxnC8pdTK4MqMrLjnMwXk24ek
hc9kYWlx9DkwS8ABW3tjqR2LInPw4hUiAVcVTz7wWsGit88/ct4bAja0Dcgm
ElmULIjV9s0V8HJq7lExWCyv+DspxElA8UiEXWw3i8A/b24edRSQl6ZJCDGx
uLM9PrKe8t/M6b2R9zsL1aGAyCrK910kCfcbZFH5zpLGJpq/6vwvyfwEixSn
CtFysYCjZarQhjEWNtc2pxXReNWqpY86nTmIffvbhxwEqNtOWr3lHL50FYhq
HvU7+vPo/B0cTh/bmbuK1qNb5uieVMlhq9nZlDJbwOXQx307GzksrV4rM9gL
GFydKtNNcAhcLxsi0yhW6j5qmMNDsVLzad0MARfXuFxNn8ljY3RyhXS6AFZ9
ttzdhcddC+dk+5r+v2VIu8SNx7mxjnqO5vfLD9muC+UR/JPG7Er1o5xLugwJ
PBr0t/PKKf9HcIayRB6PonvuP6X6CWM99tYiHqFN94JhI8CnvGOi7gaP9CxV
wGVbAeOe8isLJnhIY6K1KqpnsUo6ayZ5RAw7eK+henjfJ1sx24Qhn4I/LOME
bR3LZLuf8Gi7mBG26zlB0/4tKbrHPHaZJ5UpTwkkLs0f+9uZcPlswc2njwhE
xldB/r083tLmuPk10P6Tp24wuJig+O1gSGEugecLjdB5j4fb6uGxruME4a4e
t1d28ejY/utkfSrtpyLvje+CR4m0ZqEkkWDtFyvMvV0cVJ7n94qOUL0U/Ye1
JzjMPrKvJTKDICN+cNzwLYdNFeZF+dkEn6nWfVe5n8OpT8SKvzIJ/tHWvyhb
ymFKXR2V+T2dl+o9D40Ci+wAxbUQLfUj9/haW8uiMPbCq6pTBPkxZ5Syahb7
TProJ4UEU9M0qsbzLLZMXuItGgJxmMbXIZeFMajVfaCE4Ad9tEfNYRZjovnS
imJar3+6l5eaRW5cfryE8tv6n23xXMgC1tLm8gvUb+Co0ljM4HS1ZI1fI4Gx
IE/UeZhBsN2piN3XCf6/H/4FGP9lNg==
           "], CompressedData["
1:eJxdlH801lccx3mWX0+hRwrt8VtlIU7YVHg/S1NbfoThtCGqpx+UkuQxlcOm
hjFZOONEWcqvlcQoETYjrWMx3G+L/Bz3Kfm1eMiP3f7dH/fc8zr3fc/78/nc
z+ca7j/hKebJyck5sfVubzWo1ja4RiGM8oFMmSC81fGtDuPm2fu6tssJTiYJ
E1ozKep40YlTRgTuKVtKN6RQuNt3tvvrEagruLpdvkjRuz8gdN6UYOBhwzne
JYoi9T27R7wI2oMift7F9F5jAsnBQIJE+5qw4CSK4257t3b4E8xb9BdtTqYo
+E3gduEUwUvLZpEB4+fqlSdMIgj2unoXerP7IT6PfeqzCeL0neWtLlA4Ciod
qrIIovsmzWe+pjB6nTxRnkfw/qIWAmMp7p1OPVPbSqDif/HLPWcpih1sd19p
f6dPlt2NothZGvRpZC/BSoWqX0yOUvjUCft/6GN+aCmwDaGYHuK6czQ5bDJ+
oNYSQeGwxcS2eDWHuQO+al3hFIoiyRmhKoceq0sz0ZEUURk2qjwlDjm+4TuU
WDzpFdvnxEyvYRcjEsdT8NP0K//YzGGpuixuiuWTV7Go2WrDwU7YXxaURnFM
GH/SdROHjvWjIcPZFG+jNto72HHQSvfmBeZR3GnUL5R+wGFd7rCVZTGFbNeo
+dB6Dod0rSOvllPMOd08vSTiIOlINIxroEjyU3E1M+YQpGEidmuhcFH9/cZh
dn6zpTkwq5PCXOvBXPFnHI4saOV+28H8jbdHCsUcAkTVoYo9FNIXMwqa+zg0
GkTr5w9T2JvYLhtw5lDeOrLTd4zii5jR6016HDL+HPrx1CzF423Tms6sHsXn
REtGMoqP/h41rHhDUKozG2anIMW005CN6b8EmkfGk24xHi75aZXHJIEbP6HH
nvH3MrPVywcIgq53WGQvUPTdlT5VfkZQ1qadsvY9KTxtbo/ltxGkWvPj9i1R
mGrbnG98RPBJXNegDk+KWZfD/6y5R6BXwLd+rsz0fp9/Z32Dve+QlWe2qhQG
wT0ZuvkE9I4gtmKFFJJvFl98mEFQl+GqmM9nPFgXaZJKUP/0teeBeYp8x1qd
V5kEVX3nRypYPnVfrdlmk8z6P9TSq2SOos3jalLDVoIn/FshafJSNKl4H9rI
+l9b0Jm2g/nFPpNdaxIShK0IepW+UoqSwgqPQXWC2zX5L7UFUvxV9UTh4FIX
tItyOmqZf4J//XjmVBeaNPq7KxlPXC7nJIyPBVQt+DEeL4s3uMLYPFy5Uo3V
y6Gm96xsugtv7ocq+cpJcbxWkGfBZ/Mkv65e3E1h1jDxMdi8yjaslbg/ohj7
tadwchWrf4tT78NGCnFphssyHosnJzjHs4Ri5mhMGl+TwMEva9aKzX+uWbVI
X4Xg///Df7w7HSU=
           "], CompressedData["
1:eJxd1HtQ1FUUB/AFJrNMGh6urRmy7hCjIEuCEyTylUUlJCAfgIoi7w2QRwFB
QwgaKKYgIKTpqglZUMNiCsoYj5gQ5Q0a6/52f/uLgR3d310UcRUENbr5Z3/c
ufOZO3fOOffMueLo1K1x5gKBwJeu//av3XI2M3YEkRf7m+2KGfArH7iL7QmS
ng0p7asYyIqjrhMrgi8zVYNjAwxcq5ZIN5gTiNYtPJh2i0GC2YzbiQke+cOj
2txJBuzdnfK2UR78+K3Vm58wGFQlPO6+x+Pqica3tnpoMGcvvu/TwyMwacVR
hUIDC+8q4ctKHnkL0tfYZWhgbtm+RBzHQ1m0vOPIMQ1yft3Q1xLEIz7Vw8r6
mga+KSWH/YJ5fHFz5dB7Bg1sG4Wuvt48XD3Olux+Uws3F4dzy6iDpxWCCwu0
6Oi9OBFLLXqYseVHarcXVu6iCB56iW6Hg4cWzcTH9Uwmj7VhnilPH2ngd9eU
4VPDQ2YKFfmf1CLGZi+7/xrNpySwuaVbi2caX9GpJh5tY5ZTCYtY1NSJQ5wN
9LzQfEzXxkKfHR7jaOSxquHe/r5uFsaRy2HOt3n8We5VNz9Vh/aNBR8/VvPY
a6P3S/Tk4HXxdsSQkMB/+XpJcA+Hr85tXR3uSTCv4u62kGV/o3HSyzKGmt8x
usePes4hKrhJTnDV3HZ75yCHZclm2ZKdBNpaWf2m0xycCoKGr4cThH7IrAoo
4vBcMDv5fiKBIl2akZ7IoY9RBWygrhjW5c/IOUxPWK47tI/gxmlpU0AsB35y
aliaTOCSr4jqjuRQojprHEkhEPDF3ws/4SB/mNpzkt53tSV3BjZxMJvyUm+P
Jxg8rkyrEHJo7ljzzcnPCT774P6lrCAOS8cCEz+qI7jzZPdYwUsd+urKT2e3
Enwrmi15kasDo+/VNfcRnFqfx/6g1OHt80EBqoVGqNcYLj//WQdlZPArDyv1
r9xZmr2t8g0j+nZVLpF463Co1Gl+vYGgSe3+W4ijDjJhlyFslOC1Y1ldo09Z
lNknlKVTm6Zs0muPs1ClrXi0/zlBzB2pXuHKQmKhZVXUl85EWaynbsn1ju6k
7qi5uWtYymJ3T258jolg3LH16j6TFoVZoqNRYiMGvBwP+3dp4fdwMeasjVAU
iaIDLbVwsjWGsTTedMLS+oYaDUInR8obaX3ZtfNi+XoNPo3rhfQ67Zclq/1J
xWCPh/yGE30fRZ7zzLEtDGZak0pXUr9bfju3kFo9VuAroX7R0PT0APX4YuPG
BxcIHHrUdbtSGLQv/6tl4AhB857oSnkRA5fv5GutDxLIlS5/BNQw8KxOuFIW
StBvlrTR8DuD4nPJ1VdktP8R/5xnKhkcMKv2nqXz/4usv/MdOv+vx13KNFEr
K7rHF1H//3/4F47TNQU=
           "], CompressedData["
1:eJxdlG1Mk2cUhktVqlEpuIHzg6GAWiaOgIjgkFtAQWQFMgs4p1iVCh2CRD6G
CGHO4fgIA2aYQ4uRhgGCRsUxcWBmJRvDwLRf7/saZEwRIwMKtM+DUBX37u9+
nJxcv+47J1fO6kPHPlEIBQJBKD//7ZaO010zXxKoznaYN8/TQdKtXfITz4s0
2285iHRwkl0Z7okmWNtRfld3WYcIVe3XbesInp563nfzuR4TU+XhU84EwW2/
Wju8DYhfkzZcZrbgtklbavO3AQ6vOwXery3IqjwQFiIz4ove8XYyZkG436ug
2kYjTlRZbLtNFph6RtulzQxic70Njn0WlA+u2aCTs/ARClOX8RzvZl7A8uxq
sE71v7VgV8ukc1Asi5dhG17cDyCYvlA0x6pnMNXVNXiJ70v3a9L2qhk0XBz2
khQRNFdbMiRKBnc1Rwu8yghmCvW5wkQG0sDoUJdSgkCTaA5Tw+CjG5l2QfkE
YV6+CuXPDNLl90uMOQTZ/a2PbUYY0MPnZ78tJFhVXjJob8tirzJ+qbqYoOJs
5YOqAQbnaLKsSUXwi+YZe7uPgSELS4JrCP6ZtOwWRLKIEUvWprQQmCwHMwdl
LMYn3R90dhDMb80LstOwuLpQ/qxrmMC9WZEyfp/FEQ9T9GozgVi04/Nqew4L
rHv2HHpLsDKm6crsYg7pceXSAVsKq3Jn43k3DstrhlxUQoqDR4aeMO4cXlpT
/VQ2FNW/69sSNnHYdKvH2W0FBftVYItoIQdDd6v/+pUUUv1oUngIBx8akPhw
I0V2jdj1qD8H2egZR7k/hTnr3NKuDA4OjaEHtL4Ud5Se9y4UcYj7Qzym96bo
rWvcdCadg37scobCi6J+qEomzuMQNZB4LcCHIjxMqvYs5hB4z212YwDF/si+
Os13HEwpcZKEbRSH7D0ufVbKYb3vmw1ynh81bGnYynPBYdVkXzDf92Tpy3xP
DuNmNikhnMJwuDd7/hSLdKcC0TeRFHvUqtp3TCzkZaNKi5TiSf26MUUbC4cd
7x5/G0rhcWDXaJCaRfWrU1uPhVBczPdUPyph8Wdw3+3l2ynyJrVzxZksHvok
X3vK5ylWKGPTMljkd1bp7MX8fd397B5Esfigum4wQ0SR+/2IV0oEi7ScQvdi
SrDabyBqn4BFoe2bfZEsQVTY3vqJuSzaTu5YVNpOcG1Raqk0icH1ENGWyhsE
m7US0fF0Bi7lzTOqVgJN99X3bi1lUFRd8mnFjwTO7TMvpjkjyrQ9H/Y3ETg4
y8WOu4ywWdXU78D7tSzZsSFFboT9X6dr5vF+1Ytrwn7bZwDxP3I99QTBTv/W
xQmuBjTnvJ/v/QNBhDXxzjYnPbikgZxZ3t+JZ0zux/Z6eF68Kr9ZQqCd3iJs
qdDB9fHI7sWnCApj3E672Orw///wL98JLZM=
           "]}], FilledCurveBox[{{Line[CompressedData["
1:eJxd039M1GUcB3A8vTMFIpWhocChoMKJgMqvwfEOMHGiwQlJgvw42JmNX8Ih
piyOgwQ5WIHCBDNdMLS0oK6BksSReEMYYRD3fL8DQs7yeQaCxI8M5rK+/tsf
nz177b09f7z3+TinZB1WiSwsLOTCvHrdn7y8ddWeodTunEdsmwmfDZ1u/Fzw
jUSNPlnwWenSXOhahvwNRmWUwYRCeXFR9QaGpsmZ6KYRE/b032+/K+RLY4li
K2pCTEpbb4vgjMqeJEvBPZ7RD7n1DGGX8/yM1gTPJPbK+nmKbciW/rZkwsjr
3uVXzBTWCzY682YCTVqdSysRXJ88L7IiiG+wXZnfR/FWReZV2wiC6IfXOrl2
isXg1LNaN4LQy7K9g80U7ROaYtlugoXwcLOmiSKja0C3VUswbL/vjRXXKfz3
T6gHqgm6xcqaF40URaOt3uOCf59OEEmE3On4lBMRrI4+83jjAIXId4s+/AXB
IfWPNYpxCscHfoqLyzls3faJh2SU4u++ZJ/b+zi4emYGk0GK0KO9qclKDrJO
5QW1iWJ7VF5IwzkOhvQb/o4zFKtsWvVf9HJwHuk4JZ+kmAkIfzbBOJS+E/Od
apZiuVeFXbAdj2mbqlq5iME1QHfYSsZjhl8dpHhK0RC4Ijg9hMf59/p8FwWv
22XMlyXyiCqd01hMUQRmaE6GCY5MkOr8BddukcYGCRZ17I1sXhT6C69IMGh4
lHn8oJgQ/q9+UuOQmsZDLx8USWwY7tQWW/2Sw2PWsuzAV7YMc4MSdY+Sx6m5
i2mBuxjotaahqhM8/BoTPg0RbA528bkp+LnWN/VVvukPr5JywWc+GD++3oFB
qn/U/2EkD/ORJtUBR4YSyTeNgV48ptau0qg8GQYzDWOZLjzenjI0XN/M8O10
W2PlSw5fht32GHJncLDX53UK/XifcPnV1pXB63vFDmMdhzW6584eMobepHif
gI85PDKomi/IGd60Kz0ZdJ7D2FNK18Uw7KkuuPQgiUN3fvkyy4MMP1V17cgK
47CkPTJScIjh3n2n+PJ/CCRjl1ZHJDCEGgver3uNA7czsPDKMQa3jXb96kmC
lrajK7OzGOZP135tywh8s6oT47IZyqYmLFXDBHd0f5bTdIZp2T0H1kKQXFLY
tuZdBvGyn7U59QSzBz0XSCyDk1EbEVdEkFvXKX0s9KVwv5m7W9jP0a4UMQ1m
uJXTPpwfR2D916ShXrBT5abxIW8C0UxOyHY3hv13ncX/igk66rs/yt3J0KL1
P2ZhNuH/9/sfYM3mJw==
             "]]}, {
           Line[{{0.7289654796861657, 0.35927800777781116`}, {
             0.7289831302144324, 0.3592898475042336}, {0.7289722705123444, 
             0.3593465950692583}, {0.7289731403757299, 
             0.35929922636990524`}, {0.7289654796861657, 
             0.35927800777781116`}}]}}], PolygonBox[{CompressedData["
1:eJxdVG1QlGUU3WVAky8FctLhYxLESGBkSZlAUYZg+RYWIvxYjICgiIBVQ1lQ
UrQAHZBwFBCtHQX5ThAyFDiBy2QMs+/zvrpAtc+joCEqshqCypC1+LMfd+6c
mTN3zp17zl2VmBn9qZFIJPI31EJvUBq/FzHOoXAy36vH+zYKVaXua3wJmFyx
SDnNECvPORnbT/CgtyvGkzIMHt28xPIGQZ/vw8KnkwwTdeqWFBsee92Opygn
GEQBl5751fNoVB2u4K8wmLWaOOQ08ciVnslX1DBcVQUtGxULSFm/oSJIxRBw
KvtH0ToBgx0NdGknQ/HatTFaJwHpA43541qGn65Vn/PcJGBnSfWiBwJD4Omu
8xcyBDzOvK5QFDFcrOnoXNEpwC27jFenG/T69PlOCwIuqns0Y4EMsoz4uvZr
ArZebm7ss2L4iJNb9x8QULX8ZVu8BcMuhYm5s5UAn6Ke5KhQBo/WtseVL3j0
WbCsrA8YJAqP09t4Hr32s+O/BjO8W1lOvhEJcA1fXTYSxqAO0fqs0vOIWmIm
E+9ksPN4xU128Ij3okUZ8QxjO84MSR14BI7tce0/ZdDvVHBSfp/ApeKrb7+v
ZqgscXyepCY4Vtx6rDCfIdkrRm98lOCJ7Y7fqk4w6MgXEe37CYashkviDPvt
eqfBStlKsCrY1Cw4iGGyy1o6/IzA1drdWaKnaJeIE/x5As32JXEuYxSON4Tp
vAkCy4NxyzlQeNtqXQo5ArFNrjB8iSJmozInSUdQ060eyjxLkXGiRnv+OoF0
vmJrXQGF7J8ElcqJB55c7lJvoThobhr0mZLH489vvaFbRxEW+be8vIjHlEos
Kbej8B+ZJUlphvv3lKyJn9NhXjofqNjHY/7niY37ZnRIlnamDUh4iPw+Xq9/
oINxw8pazuCniFBFsMNzHfTlZywHEwh2H3IZv2WYHzJdV1oRQ3C4KiJPIqPo
dGjUZRr86RiQ7HbflyLyff8WO3OCQFP7PcpECvm9axJWx6HgpigwNJmiZJ9p
6oZ+DuVbwttaMyk+TBWJ4s5y2Kb5Bdx+iqzgkO6iCxwe6sNqHFIonOpDXnyZ
zSHnnlHsH+kUwp/Rswt4apfHa9w+t33xCjmHprzICO4KxU3x5kibNA6Vs7Yv
vTUUlTM/vPn1OQ6xfkdK7/IU4fXhit9lHGKaekXfGTFcyHDey09x6B9YvNRo
PcMjPT1uXcXhrd7TM3oZg+uW3lsrmw38dI0uOs/AX5abRiiHKPvU6FdlDM2N
ek+P1QR7ag8kHipmCE01s3Q3Ibg7uolMtTKMzln/K7UgMNdk36ntZth9deAv
roWD2Z22kSP3DX72b0lJecThk46nkVqL2xj3uOq2kP+3p0pf5////+A/Vcld
+Q==
           "], CompressedData["
1:eJxd1GlMlGcQAGDCJYEupUCklTt0y9EixKJiCjuAqVEo1wIBYi1SQc6N1gXB
IoIIui7CghwL5SgL4i7XAnKfgxbZiiiKWIGgGCjf9yKQWqiCCtjP/uyPN5Mn
mcxMZpLX/McT3HBlJSUlN+Z9iEHi/Tz7Fnf4c2Q/f6ydwrqGHis1aSA0JKkY
UoylC3YOpu9jIEXDO8S7hUI85tYXN8qDqpSD7NJaCq3rtAK4L9PAIanAVSSn
ELS1Q5e+FYNHnv/m4iCFjXFev68tiaEt4dfiyAkKFcOm9z+LKYIGWXMU+x6F
guA69aCZQgiX3nl1poexxan5xwZF0F3NSW1n6kl0N8zcWsrB1uWN/cdMP1Ho
gdgyw2twr2K55lYHhWqWmwWrK5XgeWSf9VAjhZPbLn90WOs6dMbzg0JkFIbM
uNqHf1EPmWNqLw61UhjPjdza/qgBFMlPrxZ3U3g+6q/KZQ85aDjkvxDepnBc
wa774L4J+X+e+WViw1xFDvPKNjpqzym8O2OcsepZB6MnxerTmjS+NijbOX25
BtZHp9IP7aNRtticeGOqFmys1q6W1NEYGToWmJEjh7v3VTfFszSyip8sNYbK
IUL3k8yuNRoFp4eztfn1kF6QlzFrRnC3Codfc6Ue1nZ5v9PyJfg2lf1DLl0L
RxOUbqqfIbjqo+9T2isDcY2keTWLYEplauZChwzmhAP5adkEiUpbvEOtDD7f
cOR2Mj43nKj/ekwKMVasUgljQZul0qlxKSzOXczSP0fw520ddIfFdbB00R1e
SyWo5WH8VvTwGrTuNSlN4RH8e/fQ6aFBCfQrKVxSEwke59kMCNgSkC61rqdm
EJwyP+zUNFsCPI7DH/MCgl0LgU1h64VgzDZ/zmHyqw+mf8V5XwCW4obLqrkE
J79fjg6vz4ccQx9zB2b+atbOpzF9eRDtW3UkuITg1xPVt7a4RaBSNt2e3Unw
/IzTvJ9fEfCz3bt7RwjqlSQo1s8Wwk3tDunxcYKuzr6d6b6ZMCUw6TO7zewj
hnfjSb8QHF8ONYkYsxybVSNzhBDAV13oGiQYW2EX62eUBl41A3FZPQQfXmwT
NHsFgFBqEBUcTHCPz5eXpEvfYZKpey3Xm+DoLr1Fw/pwNJFES900CLobPbCt
pdPQtckgokeTYIUqbOeaXcC5iEd6Ra9oTMgXPBObCLHkRIC7CXPvB8pVV94l
5WLYoMcOqYTGnq1ioxF+NobocsNGRDSOdibPqRgKUTmif7z4KI3L5V6/UQFZ
qGXDCmR50DjwhuMaZCNEHWtbF+dvaIxOMbtjvHkBOU7NdK8djdqXnp0sDwlD
DnsPR8G4Z73d39k2DC1EP6Wwd9D4j+ysQXzyXjy2MtCob0SjqeeKb7RTDFaO
2+h8qk6jo5tmGim1h0ShPzyepPD//8G/Xnc29Q==
           "], CompressedData["
1:eJxd1H001GkUB3CistrRxlhpktSptbWVly3K8k1ZBlPadqfaRkyU1Mq2WNPi
kCKs4hxqbUo1OHqTXuSlaFF0eqUokWpnfvOMbY39zfOriSab9te/+8dznvM5
5z73uff+cZ0ifly9eYyJiUkwfz7cDt402mcOB5HF36YnTLV4HLqgYt1nHIbO
5/hfqSEYttqfusuGw8OeWn+vNoLKgtYKi0kc0iojO4R1BBmKcwPz+HjD/k0r
lRcJJO6i+4t4u36ylxTzLk69YJrhxKH7yPDkFUUEMU5czTczOGxIt37pso2A
Dpff3eHM4fkKY1JAEEHKxxUpJ0M4KGa6Tjw0okFx3OjZBVEcjILFtpcaNNg1
parqg70Ef9h88KVsq1eBvA/XSNpm8l537c+k6k0cJjKMxbZfNIhPdum+GcHB
tuu9udZDg2qDm8ezMA5Rq+TNDncYFMYqlMsXcch5aVNtmsNg7ZCeq+fr/Ue2
jNkdzUB82dA4VsChIbizM1LMwPlm2Jup4zhMzwue2u7NoF5yTfn0NUVvaa0s
KoRBbqb69sJeivHPJwxlvlTD069xKO82hVvgrfVnW9UQh9glX2igWCM4Zbmk
SI3V4RLB0UqKr7qzXb7YpkbGFuVGaQnFJB33eo+3Gu0pey0bd1FEfCQuyR1U
Qd+x78mZNIqiJ10o7VdBFa8Q+CsoYh5veFQ2oEKSNCt/ZCdFY2dF/+M7Klzt
j/JiZRQkKKn+/F8qtIzTDUa7UnhNiEhJH1GhJu19t4j38/5Da8TvVBB6apgt
symyjdbzxvjx/xuDPENFFD4Ou08n/qqG/JmVDcwpAsNiDmd9ysB6uDyp6pUe
0xzTG6tWM8ia6Wt2uU2PxTLl665MBqc6snvWS/XI+81btrmDgefnsxZ1UhZz
2z0eCAwMROvyhwOesqgf6MtTWmqw8u18yYxuFmLH6DotNOh5oP09tJBFaL25
r7ZEA5qzXR1YwKLMaqMo5KgGB5ISv5fwtltrP/kWb5XV8UFhLItSd2GCnNGg
dr24zCGOxYloe4VORLBVXjlS8DOL2TrR7ONSgt4BV3mBgs83aj+qSCEQSv2n
vz3JYlZfXrQolYC9Ut4Rkc/nnybt3dRMsDFgwmAs70fFzgmVvDPczWzjeBtN
M+8f5D2qc07n7rK4eMavwdBCENfkKQyy1COwpCg5/DqBPLE5cfN8PQyyFxeW
tBJ817+1MsNTD9t4jx2pIwSH1fbHhcv0SPwhwG6suxbSyJx7G3ivenI0rPFL
LWIGxbEx/Dwf9vkeszXXgrr5eG0p1aNW4ONU+4YgIih/+9UBPc7cv/hTXy6B
znDjrdGRQux2x2fvWoLmadX/ClZQPGySy5L3EZwUyPYdCaE4Jm7S5ebz/Qsd
zQojKXaO1rEHEwiUedcqXHbw8Warvj5XRhAeHDi/IIViaUId5nYRtD+18AjL
ojC58sj19DuCpoWhy89XUdhdT5eUW2vR0jZu3hwthTym+F7JXYJvWwq5dELx
xpoLn2IkmKwN9ksezyG+9QV3oId/f2JpmpbfH8aVz7gbZlr8fz/9B/encEQ=

           "], CompressedData["
1:eJxd039Q02UcB/BBQA4ByQsU+SEgbOIwIJcwQD8BySF5dIUOinCE/FASOUDD
gMxOXYwfIZvXhTgB5avSFGlICjhKgXEs4SMoE2e4+y49b1RKoBwEsj7+2x/f
+97rPt/n+TzP+3m+Pul5H2VaczicKHpevb8L2HHlAysTGCayS3gMQo46+Opa
jgkY7lOH0QaET4JY7xELC+VZwonkOoSFW2zqS6qP+DtNDp5A2Gs183Cexmet
clNVKhBsB/QLEmsTJCpajYeqEQbtUepM9Qe6yVjucYS7VWe2a2m8X2jN4rUK
hG3zdpce0PxBL7y2ptQgdPqIhKWLLMSbdb0u5AKsNESTN7fXH8qg+fiJtU1t
5Ib1cZagSoQVeww+v79kQXZ6MCTzGILnr6+3FC6wYC2t5lccQXhSnJ5/ZZ4F
2x/HmkrITJT/Y2eqd/CnNn1bjjAT1X+55V8WRnO6hlJpP7nLIm4ysywknwvd
Jz5J+5F6BslmWFg9o1rZrkQQukX8dfsFC+GchPD0Uwgf7/LfLHnOQnSgIe5v
yqtPsHw4hHzQ8X7MBcrTXZKtltP3zbFvxexsRrhRcFAvJH/J1b3xSEX9cqam
Pajfbo6SqyHfLemNM5Iz9EzS/VaE1RZjRdEcC/JJhcMJcqO59Fg0eetOm5UL
aoToA4/ab5GrRQJ+bxvV/c7/8zk5M1bAeHQi/FB71GaczDgPLaZ2IbSFaR4X
kPXr8VnLdcrz8B1HM/mkKreH8wvl1a7l1lFe17TrpvZ2I+yK3xD5M+UVo+iY
8+6h/Z717dlNeVvybffn3ERY670/vIzOwz5AIV+no/sxV9CopPOU39F2XhpA
SJF0TPXQeZf/FrtHqEX4o3Qsoozug693Wdj7/QiBOlfnILovNc+XyO1uIwiw
w+Lwmgncq2reKybnjxU6fUb+sHvVNtEQgmbZ8c5nNiYok7gXPx1GcLlxL3LA
1gSyXLHcDxF0G/V2PDsTlBrkb94j11aPPvyTnPJTg6yL5nsbDVovcnihj30J
1Udl58VLyYFJQnUMrf9imOuaw0tMkJydxx3vQxjPl/HyyN8rLycxGgTlkOCd
gKUmCGlLDP6C8v7Uw+CWRr7Qxx2rovM5svGbDTu4JtAMeyrDWhCa3y1cLqbx
T9R13q/+r4nWMtUpWq9T+lWv4HMI03xfXhQ5/mtxGnMWwWi2bhom86xy0tro
PoUeKJpmyP4dbJL6NII0YX5ET/uPj3R0UNfTeq/Pui6QL84mbJKeQSgSbXfZ
R64XYZaR+sm6NSuOks1fMX0ZjQhb+vkNpZSnRZhaKaD+/////wMR/hY0
           "], CompressedData["
1:eJxd1HtMU3cUB/COMRWK1geiOOlgWieooMAcTOJ3c8pzjIdQHiKTYqMGAY08
dKgMMJuA8tCoREHn2ORhCgzw0UJb4F5obwG1Gp4ymQrK/d1LVMYW1ARW/XN/
nJx8kpPzx8k5x0GWHCo3EwgEW03xLgueKFRnz7AI90gJX26jAxPT+t7jYw+k
75zg1PvZP7+wqOa0wbLZesg2zQmkalgoBoLOPpzSIyrZU3S4gYVxW6bHpUAG
m0fTiyU0i5hZcaGN8QxKvXpqK1pYRG/v//07JwYLZL+KPLtZXF8jnwicyyAg
yt2Ybqp3y52qksgYbFx27lL5cxZFpYu9jDSD8R0+blufsLi8S9V8JpPBlKXF
ugYrgguuVY7CKAbDr/ro9RYEfxQr9XNm9LBUN21osCNw+JBff9GeweInG+Pt
xAT9Bc1h95MM2Jv1doF+NcEVPzbx4XUDtBZtEsPXpn7H58fcizMgeObTqOEw
AspB27c7gMFtY6NrdQBBXtFSn+c6PUrT71ClCQTf7lvEu5nm8WyJVcjHKgL/
p3el9zbp4Sgbt33TQ1AZvGJQ0aTDfM0Hr2YRgrnm2TkVzTqMhF6utJ/NIS20
83WguAMu62tOGKYJgl2nEtoqaZw+stoQJOQwfaO2ynwNjYgKw0PbSA7e9jXq
tRyFcesmo5ecw1i9Z//BDBrzB46++ekQhwSfnyXXxDS23+wu6fyRw2RPvEOE
E42cnjTRzDEOlDI1pI6hsSOlXZp+lYNlzeHXuv00tFtDPE7d4pBKRbopz9MI
2padvLOSQ/bUy9HJPTRKFNOCDTc51BtImNGPxuDB6DzrHg5VOlXSkIGG6G7a
e8c1Gd5bIp7Sp5vxCJ8R+9ZpKbj7xo2etOPx7/2yyy6nKbgOz/zttJBHYaYi
cWRXKzp9E/bWCnnYfnR6TB/Sgtr8fXS1LY/AXD8bZqMWi61vPa+W8nB5OlTi
zqlxP3bp54dkPBJXiifyLNRwvljvZ5vEw1s4d6RApYLNvuyup9/zcBTqrRpl
SmRm6bP8Tbab6Mo/G6qEv0935u2dPFKPpl7NjVFis++6P6tX8eC8u6yGb6ig
eyRekv6Cw0vB3UD1vGYIgq8UHTrF4YVl4m4uVYOsm0MFj1w4xC6MtdozpIao
uH/4zjwO5wPmqMefaZCR0lrpNUqQXDx6bH+AFl/0O58s1xE0F67MfNCpwZdm
kqXlaQR7OxRr8xa0IPgtJffdSeC56JNs67wWeL51CcqPJohuP67R/NYKkai8
d0UEwaTzqm6jpg2xj6bHRqQEA+5J2s3GNuStq3Pp+4ogY1K1/MJsCuaUu53U
mSDyQH1p9WMK4fITrw4sIyj8wUt6bpBC7pZ4ybNhFkzGX8Jc2rRf5SVmObdY
pHSUviCD7TATxsj9ylh8U2bes+VaOzo6co48Nt1/ZV1kr5ztwP//xX+GtitJ

           "], CompressedData["
1:eJxdVHs0lXkUvVFJD64iUnpQSzXMTWQ05My9jUcSvYyKUF4Zcq9SN6yU0UOP
qaapS4tEEUNYXuGKc7/vC5VUhjxSvt+XPCMirJhq7vw7f5x11v5j7/3H2Wcv
2y/e7q/C4/F2Kue/XVRe7FUQQmEB/3Bwcg2Bjq//fOFvpdDm094IXgaB7Pwn
d7NfUtivPZK/7zoBpzhJU8wtCmX+DnP8zxEIb7YSVB+gMJBqUY8+TiAsPUQS
YUZhn4fP6L0wAno5MZ5JnxX42wIbg2F/Agte6JQJKAUeCD34bMseAlpn+lws
4hQYI0xwU7go9YA/LStagUtkc62anAnMFefGGdcgplW3WqAjgUJfX38vE8T1
eW5RQ/YEMgs3rq37oxL564iuk52Sb5TsKh2vwHWT/K7ajUq+/60FPnsrsLiw
RnFERGB2kLfm5KoHOKlSqCr8iUCOfmh74ZVyNCmZv3g/EDi6LTeldFyOdeDz
V5YtgYo3QmYpylFzlV+uRIl1BgNlS/zkKMgsqak1IfDDnsL7GmpyNA+07Vy7
kMBhrUtq4FaGZexMWcQoC3NiG7Mip8ixYHrwF6M9LMi2pvYOFsiRL/klr8uV
BaHANDDMvxzFR04eULNnocHu26K4ugf4MOTyqL85C57ve/yqpRXY2yZPM/2O
BZu/dyU+NajE5BOS/PJYFma3mfU2JFbimN7H8EW1LDRKHXuG9BVYci75+KtI
FsQawz+7eCvwyZlPvrsusuB6tvPdljsKBBfMmZfMwqHIHaGC1RSG6LrqCGkW
FJmChZoHKZQ6XD5d0MhCR8XSqxfzKNx2yPqrdzcL2sbj4Z7mNI7oP6+/P53A
5sS+vHvhNJ6uKvo9gE/gw8T8HbJiGsWJnQnm+gQyzB9t0hujsecCr8pgOYF4
i4aTZpYMvrYRdCz/noBIUzN4RTGDwqMrrM4p75P77Jh0McugwfWiJvEmAsGb
d5RvZhhU1TnpXiIhEHHCV9cqnUE8HzhQG09ga1pQU2oKg0aOMUnRNwk4lPFK
nVJp7Jrvnu/+lsCpGUlBDw/TGLD76TXhSg6MHgUEFIXSeMm7PdJRwEGJoWW9
7iiNshSX4vfrORCPi1bqRTGYvN9MZmDHQcXnwOABpd9uhzGm3pGDxbPkLap2
DGreZVHiwIHDMespUg8GTbK1Nlh7cODu2SN7LmHwjanze56YgxWl3dTaBAbH
oy/PiJJx0DoWtWboFoP5XNWNx8kcXMwINfS2Z3DNFWlMaKpSz7kiSThAo3qz
TOiUxsGfg9bXtE7R6CPYljSawUHh/XhDNoBGT+1LlhfiOUh3oK4+caRx/evg
hcvPcnD1mErHhDqNhbaJg/sCOEh6env6ic8UBjW3z9L14sC3VWW0UkZjUPV4
3W0RB/uqdXlcgtIvs8IwdgMHjY/vdjg70Ri9LA9SbDiISepJ+zBJodPIFL8+
aw5S+JNjbd4UThtKejtViUNE9+JT7Shsb31VMvgjB4tMjFKz+RSq3tzJG5rH
gaJSYzT2kwJ1DC2PhPI4MFeTi2ybFXhH6lrZ30/AxiIjorxKgS2RDaY3OAJT
O8+H7LahUOHcX2I3TEDWazO6SqrsH003jaoJAonRefVp+RQ6fwm47q3KQf/X
0tbF7ygcfFj9sX8mB7W/Gm+X31DmV/xO9LqXgJlHyanuoxSqOXU7DL8i4DiS
Y6w9QeGMlkxS0Engm/2jsLYNND5Xl248+IyAHzXb8OVHCgeMV5u/qCWQNSHy
6kxX/kdi13HPxwT+35f/Asxs07g=
           "], CompressedData["
1:eJxd039Q03UYB3BOqeE5JQYYP9oKD6YtIZABSsGDx0/ZOcAgAbcByVyMQJzO
EBCbCKJZNEFFfj5giB4FdwipMD0nMEwaJMNED0aLhoj9ooPcKR09+7c/vve9
172fz+f7fH58PT7at1O6wsbGJowe63utxXN0/xkz+L3+lywBESJ+7aixrTRD
beSutrFWhLgxi7uO/Eg80e7WhrDB4sS2+vLvb3dZ/TJ8OYNfZYaU1qk6rEMY
zN4qLybb1zkyhsklduMnusneo/8Ku08jGM1x//DOmuHH6gPe9iUI2+s5WSKy
7PyyZHMBQpjPZO0QmcHyz2ErEWY5xQHsc2ZYn+zy2F+KIBRHaneTn4XMlRky
EOYzz9+VkBd6s/0ndiNICkzhPWS/PbekeiHCcGbTBjX5u0GtJE1A6zG6Mjjk
lrlU5VYyY1P5n9P0vbmeb53GP6D+5+1CxeTc7dL06lSEpJBNCYvUf4e3QtdJ
8zdOFt1YR7nrgmBwSITwgjd/1YacGjjNC01DML0q63tM9YkHr6/1ESMkrvDm
Mmm/Qr9JfhbwMcLqU9KkZMrFsUb7n6n/5jyGKo/cP8B3HJMhhBtFPgtUv+U1
nu+THARRzZFAZ8r/Zoz2lO9HCOxOCpqk3G/Z19CsQOhLmXYfI3sUhdxV7kNo
7b+iKbLmuIu78QDCqpjSxTLyhag7ERMHESq2aRY15Dez4gVDeQh7lziCKXKf
gV0lpjw2J/qtr8kDjqmXkj9FYJsq1KXk1puWrIt0HrF2H3p9ae1PIXypyEfg
crTCRHK7pPamks5vRnUtLpLs5evaNEv5NVO95jD5Pj96sfoQwtGZqgY52cH3
Sth7NN8P6pY31pB1qk+OB9P4pgcex/hk48rmY1Kyw4uoh8t0P1Wa9MqEIwgx
tqbeMnJb0E+zjWTFK06XY8j3cpdSXI7T+rRPbcVki5ebknmC+l1fWsgkCx42
yDLKEJhPc0oiyer828KFowgP7gk6XciZQSflO2j894mbI/RqM7zvHu7mR/ez
992V486UO7B0zzupn0OPWBc1lAd3PHfeQflvI8yrt8l7fmEV3Cql/ZwvN+yk
+sYtLU1RXyDkehkazOT0or1ZgWR1YYH+D3J02tJ4/VcIJw36rk7yjDFYXnEW
ITv6dNdG8n0u//N2qr/Di/BcRfYsjn8yXIEgfycz3YfcAgHc2EqEbe2XWNb+
tY26fNE5mn+AGw/kNSP9+s8oV015FvaTD9tWlo/UIPz/f/8Pz8v65A==
           "], CompressedData["
1:eJxd021MU2cUB/DSakDehpa3FVAJFBFxgItz01JEcboxWiXM2KJOGLCCjK1k
SmxTpzCmQQYE19hZnAJWrYoDK/a5KB4QfBtqh0xQdHqVQa1AKVARGBRPv+7D
zc0v//PcnHPuvYGp3yWmMxkMRgxe9nvyrCUb+4cJpI1+vV3Op2HO+yZDuZlA
kogp3IuWMFuaNOjGAXFNAJo96iyJNBFQBVtu1kTTUBFlHmnoI1Ak+l3ngTm5
E3W0jsY8R3t9AnONSej13xMCoxdWfvwJmucOxVZ0Oq9IeYlHQ5pAeUf5iMCb
tG5dNvrgi8RlZzsJ5BWsM7Cw3mwuVPs9JDBhYEc6o1nn64bnPSDgwhOxG7C+
Ojh38ep2ApRLhfwmOtktor4a8/GepsJrWF94uyx5XxuB9g3f64To/ZU7uhrv
Esgvm7OnDX1u3d8yxp8ENGeCvTnYf31P2ILbNwg8M5eMl2A+qQpo1qDZV9RP
UzAPTdnCVbQQaNubnVWKXlZROS1pJKDb6nPlMdaPX5YtyblKwPXGSIEn5r2V
8kWhzQQ+8o8J4a6moeqeo7axlQCvQOtfFUNDxtwzNbM7CJzevJtOxFxTFMc7
hvPeElR9qIilYdUPyr6IxwS8PjOGau02uukzcX8Pf/IIckLzswKVO58T6HOf
hiY8v9yD5Sf/l4BDeMLxEfSjbs6BqF4CCUq9Kg/rGwQGwZAR+596oo9HD1X8
MpaJ77P7UNJkK7oqUnxqxSCBPfH1qc7oB1vaOWEW7D/3Yl8Q+nkLxXplJfBl
yI8vTWiuZf1cpxms71oj6sd5FnX+LMmYTYGrMCowFX0kZ72qZxYFn4rpDgvu
Q1RiWvCXAwWd/FKpAnPVWtuthQwK+DITU4zmFO/UeeN5ty+aw+zf38hA1ouT
eP7wq/gBLvrEprEutRMFRs7gsd9w3/7HBTZHNwqstbsE1ej02COlz7wp2E3K
B+3fEyPhn+BoHwrqBPz4oVU0KOJcLff9KGAUca/r0dLeKfV8LwpsrS8v5qMd
5V/lnvOkIG9iqWco+t4fgujlvvj8q0yX1pU0HBaPJh+dh/1qa9V6dICvuyn7
PQrOXpaEW7G+X96uTMJ+OKyyjefRKeyTW+39hnyw34mD/ThmNqdIcV5pXOxC
wDwjtvxzq41ARCqv/lvMN8+ETNdOELD5hJcUo+dv6NgxNUnA46kh/S2alW/c
FYh5pOybICnOO8T+VVv9hsDM8KViBbrttdB32xiBQtkahxW4r///3+8A414x
og==
           "], CompressedData["
1:eJxdk21M01cUxgsFBHnRwgoIlUkpbg4VoehEHAdMO0fBF1DGHGMWQoMKWBRG
h8JYEzcmahEFtlDiBoimOCYRxc3Im5OAm5vhfyGsYf6vwHixK+PNCggtO/u6
Dzc3vzzPPefem+f4pijjFNYcDicc1397/eYjD6c8KbSXtCXx1hJwWFINJiK3
NC7ej/UkwJeeiwz0ptBcX+Ob40HAKbyDG+JFIWzkmDrOnYAgpoZtRL3Xu6hb
j7rG3zskRUBB4iXOa3uNgG3rjeFTWO/jx+uG5I4EPCuvT7ng+ZQ8m95GB/TH
dl0rQZaGtcIyl8DyudR/XDwoxJb7r71sRcBmY5rC252C6ZgoZmqRgdt0feen
yJJozQvuHAOxguHJH7G+9qBXvNHEQE5JwuIksm+Bz/Qi6lFq+YPTayjcEw5c
9Z1nYKmjvWMO+7WXFqyTTTNwaXTVRA/qGZss8SemGHAbsttmxvNblDvz614w
UNGXm2HBfn4f1pmuYP1Cb1FXgRuFACH3QO8MA+atyvpCZOdS1U39BAPKkwd5
qU4UhpUR5Xys94Z57tCEPQU9J+tag5GBhiGB9SRyQ0tXtYeBAQ3vK927jhSC
1eeDr4wzcLFJGLTGgcLfI0+LFWMMCMrlz9YjV7f0y24OMuCuCHYbsaFwIn7p
O/0zBvK3PDRokf8KkHzR/pyBXacqJGkcCtMN1pH3kG+1Hn/z22UW0ku6/Q14
v3TuR4NaKwp3IuU5SZMMRLDm8DzUn+qS+xLwfXEx1fXaVywcSO/7YP8SA4/6
b5nPv2RhX4hm2xELA/ooVxuLiYWfFOYVHBsCekc/Y+UsC6Wvok1KewJfpuzM
Nk6xsDtsIVm6ksC+/VedxcgSpwdVK1YTsC8zpG9Gf1D85chhPgFnVU1SzgwL
qX6q0A4h5sFipTs9zsKN50dHBeEEauVyV1cDCz/MqMX1ewmEHuftSkG/a7bs
QuBhAlXdid/snWNB17wg/fMQAU7G/MkxMwvGpsxfhHsI/Cre88nr1piHWtv7
s+8R0H1WKwqwpXD2Z3Xy4SgC6rKgijP4f64yUd0fuwkkqMY+D7KjkChqKnoH
Oe92Lj/ehULQW8rmWRkBSVlz3vxqCju4VcVc5P5HO47mrqLQ6KIxp6F/w8ZM
8QCPgt1C4qUEKYGJUJ/+fMxHr+H3s93bCfgoOp+Y+BRGSqPez9xKIKKh964Q
+cl2vxZNIM6btrDoe8z/ncHHxdcDCHwta+sZxbxmpP2my0a+kDUwfhfnbeXF
l6pNGwgwZaNv9yBXRndmyX0J/H+e/wVta+1G
           "], CompressedData["
1:eJxdk3s023cYxo2tWlX3HOtFO3RH1xKcdjdV76SsYzFVpk6EIhXXEi07LjOa
nloWl84ibjOXpBSpVIhslH6ZneY0HdUSl6qNinWuHZJv3VL77d/98Z73fM55
z/ue93nOYx2ReC5SV0dHx52o//pwJ3DowRjEcvVuiVKK5pVGjwIIXt5qEpCG
pMhp3fh8piuGBxkLTyg2zYjanv/lHQcMV1xi2Yw5EVrR/nZTZIfhon1/0IX7
tUivys93bT8GFl1r+fe8APXXCBaX38FwN+zoSo9pDXJw1UZN7sPgF22SvHq5
Aqn8Y/TcrDG0p5W/PvljEXp1XF1acABDga1OjeYNFhQ/rGPKiX2VIQkjbtxM
6P3Owp9hisH009HuidVseM5+SYre1MDs4xutr90ioV9W7oz+0cDWM7ZZ9RkO
PJU3GW+pNOCnWFBYARdmqeMfHZnQQMhnvJFVFR94UaIDgcMa8J9JW9te5MNb
7rWHnAlmZCtT3LR8EDvQg04T7J5kuf/PHcXgtEEqeFupgYVceni9ZzUYB6ZK
3F5ooFrTzuc5CsCzTJFSOauBiIMeL8vj62BHFasodU0DZzlKSa+oFmhl4Wf0
9TAkrg8kV4beAjrjxT2qDobbT0+1y71EkM59Yt6yB0PHIS47yFwClFOdBhU2
GOj5+gXhqAX2Zt2TNFth4P3xSGXMlAGZVmK3ROiVn8E5+s2CDFYmgnm7CD1n
GsnXQzdlkGMRxLnliCFpjDrhomoDytq5jSUKhrENL+vuSRksRH9bRDqPgbKu
FvzwTApGn9iaxF8j/E1EGls/KQjv+/S9qsFA6preW8KXQIWgdInVjEH3wbZD
cFoT7BIOzl1uwlCrdyx//nADFAfY1Y22YSj5JXurwVwIVzvI1MEuDP7Yeip6
qwy6jUq/juvGEHCEbDc5yYezhr3LcdPEf7SfAn92SQen2Es7feYwyB1sWdzR
WLAvHBOdnsJwQtyYXugUgsJl+XE5Axg+ZjvlGnbloKmw3VGZCIOLmXfC0HgR
KrwWE/meGMMHPooetXcl8lCEH8utIO5LnL5QK4XIMpCWIeRieI4P/xqUVY/0
GYmkK6kYuGZdvHrrJqTVff/gSBIG97thg1kKMbIS8vAAwbHOFf0JD8Wo7vFw
qZzgPR6cvsU+Mdq8cNXA8xIG353fx0xv3kG3yZAemohhX0sjGPk3o4yN5kl3
gn+3SD1BLZCgBFawopqYz7029O7JTgkaN5HTjFkYUmZUTKZBC8ozYAd6x2Eo
p130zetoRfafb2cyIwl/eFVehYxWlJX31WpVOIb1BtJKc2IrInMM6d0RGNpu
9Egah1uRgPlXxGYohroiGXJ8U4rSzdUomeCQoWQb13gp0h6XV4cR+f7wZlgX
hcj3//P/L8D0Kj0=
           "], CompressedData["
1:eJxdlGtUlGUQx1cuKndJkSOWiBDqkVA5WKvAzkoCsumiQix4EhOUVCxQFDKM
S0c9XkAWQZbW1QRJCcxgFxNJHUXBd98LV0FZwthnQZFYFIWFyLC3r32YM2c+
zJmZ/8xv3GITN+0wEwgEn/D2n1/XWvaFMoXDoAXTM5wuEti9zMYruZzDkeCh
KRfuEyi4pqjY0sVhAFVPi58SeIdN863t51BeLrRufUGAzry+ojCIw4iyDF9L
QiDnZmSpsITFQPEDf6d2Am0vw5IPL2cxW6OBcpZAk/T7/eXxLPpV3v7L9IhA
ETtgvvcsixvLdt+NNRAY9Tyi7mhiUXz94EHjEIFia5OjzpzD/p0mc8UEgSjw
80udw+GkuDs64y2BSKmF0LmNRc3kmidmYwTkwpWXTmazWOw/+byazz+T/NTy
70kGs16uPlD6hMCIi6vo3i0GRyzs27P4+lc7VLMm+hjs7Z62q7GXwJzna+VX
7Fj8YYX0qPcrAgbjUvcXMhadHVxb+mwMEJu7WJtHM/jPlVBfjzcElp4Ikv3k
z6CgfufF94wEqvI+Va5bwmC0Q8uNiD8J+HaGyxXrGTytvaN8amuA1h/PLGqI
ZFB9uLMqcbYBNu81STNVNJbumzn/wAwD3PeRZoacoVG15pVOxMeb26XPZ1I0
HpE2mBz0BCTcNq/7ozROPDom96vi548JUgbPY9CsSIhUJoGePEmOxyoGg5xV
tdc3E3BbuMNabc9g9bQhY8x6AtsrHZ7VEBph0OdLFzGBAxaOwyt/pTHM2WL/
gA+B3HPe4yuO0xh+Iy+g6X0CS5IWOpfG0SiXaTts5vL7iZud9J0bjXMjUyrG
/AkYTRpBSrcWL+nDPzsdQ6BS9MsOVYIWxxeeynUrIPD63bB7rukUGm1vCC+f
4/srebtHMp/CUHmdA1VMYFDrGVx7jsLs6hGbgm0E+tLqkt9eo1Bs8KJyIggE
n4pf3iDRYr1TX8TDEAKJps+HZNO1aMopqN+2lMA0dcVW6xwtcvtSi6rcCSiH
Fcrf/LVYc7LqA7PpBOIcs0SzBihcWfFNfv6gHgTj1pe61BTaZURVNOr00KHS
6RRTaFxQImmJL9cDkz7WHl5A4/D2VNc3NXq4p+pRHPNk0FEX3w2UHlwrRasS
Ehn0bX4icm/WQ3N0nsCzhsGhQ69lPo/18POQpW5uKIuHHPy5tn49tIVYdUZ3
siiJ/W6Px4QeOh9bnG/ayWHvZatID1sCtY7Hjh9Sc5jddLa9yonAUfWy/oY6
DmftW/21YjGBBVRPy7xWDtNvXhClBhBwjz/SlGjkcLVyTLxxO8/blnFrjZLD
GZu6vL/aQiDgsUz7LIRDy+YNkruRBFKC5ZoZoyzavRxNlWwgcHMgKmkZz+e3
d33OWkkInAj0Kg0N43lRriqc/JjAhgTxcMwbBisW2UkWiwjkZ2fnuxUxOP92
TVncRwRapxh+f9jIYN0FmeaPQF5f75hb7pY8z11Xiw9KCVRf6+y19WMx7YHH
puX8/fU8umOem8Ti2oG0kqnxBBLsEwejdCy6+JQUWqUTiJ6wczlvz+HxXfjq
wxMEhA1tU1MDOWz0jN6aVUjg///pX/0XjjA=
           "], CompressedData["
1:eJxdk39Q02Ucx4FBIivBHKBTFgbGoU7oKxqDOcxYJnHIlgKH46dAswJEKlIG
I4UTmGEBsZLAYKsI7JaITuV5+ngHUognDwpzaoUnyyOMRsxUgoM+/dsfzz33
uvfn8zyfn6sz85XZLk5OTlI8/93dh4r/8J0jcGHBsC/4cwblbk+4Oh8K+SEN
Q+bPGIwHLgvY5U1BFHzq3ko9g/rB3oyKpRRGZmOW8FAveu3840fLKUxqR+ef
aWAg+S1xYsaLwli6uiwSuS7gPgSvoKDw4GkyP2UgECY/WSukINlkbf8H+fkt
UVEDqyjID7TJU9FeH7ThtlREYfODS/dVyPEv52WloW5MCjp3Eu0PltZcH/ZH
+/k6bqSegVallhaupMAqFVPOyIsi5nzXPCQg+Yjf50D2tB63/z1CwBhuSZZ8
wiBMe8MuJQSKqvlf76tl8Ljay5Z/kcCE6laA7GMG2Zo3uAETgc64rllBDYNf
b/zw3KiZQO6ZLJ8CHYM5pXi8YZAAv39VRjrqej9708VhAifceR7D6B/kGS8+
zwjot4e75+B/m8ka7x4LAfO5u4pq1IWc9Foh+junjdvq8T1xwGTCKBAIWTTh
zVUz0GwMKozpJnBLURC3upKB6U5l444zBPYvqM9+V8VAdfctQ+tpApfD0gdM
xxgceKdvINZA4OBMU2IWxtNla5s+bCQwaXu4re849jMltubtWgJnuSN+ctQ1
JWEuDTcJ+FwTJf6J9c109doknicgkzkSPE9i/l+1uHZspPCjumxtnZFB1VMq
uVBB4SpfENNvYLBHe7V3ZxKF9hUf5qS0MujIrG3qSqOgfCVy8dIvGUx17LBe
zqEQXv7+0Xacp2nX2FBbOgVHpPr0GM5L3v7fd7tlUxAU/PXLJdQn4wKHZBkU
tOARkdvIIKWHn1SRSqE4VedTfILBIxkpfHMnhZZ7nMW5iUF01TpdxzYKPc06
cTLyqS9yujO2U8gLF1gVzdjfzvJos5ICz+wx6Iu6ba/S5Ie84YPmouUtOC/f
WKJK5RQirvhveRfjV5D+krEQCre3HlLdQb1/faplmKMQ9mDWvgeZ765+dWgd
hZuSUnEr5mdmLwVeeYFCmevrhjbk3rEZLYf8nlt081Fk61QBfPsihfhjz4bW
Iu81RbsYkbVPl1SEYH119oXv9bgvJbnCJS0Y327eVv9APgVNkSh0GvMNTrxA
DztTyO1sjJdgPX52JET95CAQer1P5I31+v++/gs1DBTV
           "], CompressedData["
1:eJxdk39Q03UYxzlSA2MUcXpJ1kHRzImKXIQHwqOkcrcInN2BKGrofonJ5DgH
SCg/xnJZSARop8cEAQN0Q3CKu7E2cdAcT/JjnNMjndUB8eEbWlLgUnz8tz++
97nXvd+fz/PzG7JHsVXi7eXltY6+Fydvrrnd73MGJoszfkclgvDbtsX8/QyU
6c6Bx9UIncfF4nP7GOz20anqSc/V6R3Jcgb8h0kxo1qEp/61t+9LGVQF3Q19
WocQYStdfUXCQN3dMcedRqi5+vr4p8RcU75moAkhIyC0oUzMYK4rtv9oI8Ls
tqmlImLxTJh88jzCtDin41V6b/YW2r7TIegl/aEDdH/R5aLmC9cQMvVjo8Uy
Bqm+T1SrO8mvVttlxH++7Ftd/gNCQJb/8B7KjxsTef9N8Xz+bdfey2QwGa2u
jCf/mtwMdTnVq812toa1INiePVAUH2DAi3vj1hYr5eM6m9SXxeC8/qX5I1cR
NA3RDgVx2kH7R+0W0jPG84ayyd/1h7S6GyHK7hBsz2Ew8gF/vdKB0Lo+zRR+
iMERpc74Vx9CIGewyJUMBtMLkwJ7EbSdj9LiiZvr9ntGbiKwvEp9SR4DXYww
IpL8gojaU8W5lJ+kgRP0IEBFSLSB9P+CHhl51xHCreabIuIgqWubgfJJ07iW
hRG3npxXIjTT/LjNwXHElbINa293IfxU943+MbG7dDqy8EeEnhOyKWE+g+SF
9U3HKJ5tQhK/9zCDiSKTJ5X6Kx97ra2IuKc3SyeieO42U6i8gPrJHY/jqD+J
Ixvnv096+i6NdokNYdfgicJM0t8u+CzlrRsI/2hE1ndJ909Y8Kub8l+5cXLx
h6Rfeqenhm9H2HpP9HMfxXeGj1qnqV/5Eo9MQHr2kD09th8h1ZPw5c4iBuXG
FUcsg1R/cGyg5yiDmbp9SyfI39jRaA0oZnDIkhBjJj9f2tQbRfyx95hiivrb
ovKSLyql+fw+/LWO4m9i11allDBI+qRmtJ7qOWzYEVWrYuDjMvqepH3Y2W+v
KKD7G7rfG7pgQti82+Q6Q/5TAqN0Cc3fz80Sckg3bxru43UgxHj23rGRXmhZ
KB+4iPDglZXLg+m9ioeKyOTLCGWJbfJIYsf3B8wBtI+/PfNZMEP9qFLc5zRl
CMsMv2RXHWQQ4ualbP8CYVx5RriW9q8sscS5RYVQ/+Yq9KN9m5ydvvPkGELz
3dOp62hf17TEiWe+Qvj///ocg3wGSg==
           "], CompressedData["
1:eJxd02tQ1GUYBXAuhbjASrEQOKy6EKKgYMIgu0KDiNIyYGKFpEyQEiS6IVGY
weqYiDO6QEMKbAxxUbSQWbQcmCXcQ4SNprCOMVz+l4X3XSkjkOuyEiH97WMf
nnnmN+fD+XRkB7L3fGBnY2OjEO7516QYo/s2mbE05Rmiq+KwkZfOOMnMiJx1
Nq47xeFc+3ttD93NmCvP8Elaz0FkOfW7wcEMF+uLFyVSDqOxQbVH3Mz4zr7g
cPMAi0d5CuvtFopGZdfH/ZtZxPu+YQ0OpUjNsc5k1bBIWzx4P0pMMe6jvxtl
YNGk7nBe5UTRtPMXeZKeRRTz42sNyynyyya7s4pZXNu39bLHAkHak+k6nw9Z
PCwYP3bRkyJnKKmzcSsLx2verctXUhRUP5DnTTIYzvQU2wt9g8meyvorDN6W
xG1x20ahO/uKf34Vg7bPwt2cEyl8xYVXD0Uy2J4tivxzP8XrDr+W3tnCYI3c
vVSdTiEa+17j7c5gg6xq+I/1FEnvq9R1OxgUzy05aiQU2c1nM2ebBnFmXcnI
ka8IvBSiCz0eDLTJzRk0kMBpR42j3SEGCku5ww9rCZalixZsVQwazl+v0IQT
BFvt1n40y6AnuvXvugMECVnKW5cWWcjL7DSFnxDEuUZ8rsvmsOdpxkJ3HIHF
Yr4RqeGQ7nVsZadgQ2OPb2gxB31uAOsSQHBpRBGX+YCDYSlf7Cf0PyrLGSki
HOgXrPJLKUG/S58xtY1DtWLbrWoJwUKKfMXmLg5PdK4bL8sIXm46qJys5VBq
0JWVrCaIMHR2lGg5bOdVj09YhkH3/qMos+URWDjouV/w6JJePyA4YbdUPRVB
EDD2bdG8nMfXVzKncosI2gPeaTe8xaOmfNMsKgim9ob8dLSIR2if1r+3lCA3
NKjicQuPN/mwoNXlBLGJx+8N9fIwntC1dNcTVMjcWueNPHyl6o5VLQSDr9YN
OIzxCOn6JjlYcFqK9iYRbJMyYXtc8K6G6LiIcR5eqmcBT3sJPtXdbvmZ4ZGS
Kp6u+o3g/AWDeOElExbn49Nixwi89aer2l1NqMDdyhkrgfOdyHD/IBP8wq5e
P+xAoenfldzrbcLcRPuKvDUUu5+d6+QChby+pnIyhEI5MX1y2bsmzCfItM+d
vNPjP49JRu8NqSjuH90QE2LhkahVO8YYKcJEPbMxlTwW/eLzTtubcVJ8U630
5/GCvHZft7A/qtLc+EvY3//3+C/DdhMn
           "], CompressedData["
1:eJxd031M1HUcB3C6KQVCICqHJHjYyUMM0YEEhyApiBCQPKzJg3IDjsDxEHTI
IcggnHdmESRTWfMCPJmaJWA42hXvzKHSxYMIhsDv9/1+ETGinTSUR7368W9/
fPfZa5+H7bPPvi5p+XEKkZmZ2S7hrcRHoZtuX+un+K7iy0pHCUXbhxlrvhU8
Vz5h4SD4LUVPTNEVis2q8Qu/e1GUJcbKp2spqu2Lc4/bUhwP1J2/o6TIP0HS
kuwobvUkJf+dRzE7HhNWdYlg7WJoS7IvhabPw1rRTTBUcuOKv4mgKAphnmcI
fCZwcrGLwGLD6dhEI0H8Jc+2jzoJ+reIV10V6t3MBtU9dgQ1uWLnky0EP5ur
o4Pmeci+cswNTSG45VNRaNDxCFn4c+DxdoKOa8sBR2U8pE41KU8+F+b8VHF5
JoVDlKulVfZZgsINk+0umzjszuqSQ0lwvfSVVZl+DEHU12Qr5BvHDJcVgh8G
0up0wZ8Z7O2KX4zBT7371MvbBKQt+NWBmTF4NYiWJ7dSyN4WjV0I5xBWZqMU
fyDsvz/4+msaDj/oCxfqz1EkF7QOKnQcuue8NUonhj8G7JyG+zj4BSTmbHNk
iHka7/iggUOOTcD9+r8o1k2/lxr1PYcGuzhtJKEwJDQ1Sm5ymHpDdiJtiWLH
uwaV4jkH9/2pH1evZjCfbH+sIhziRnLsK10ZwksPuhf9xkHUK8n3cGaQ/jpb
3mvk0Jy+5DkayaDZLnXwnuPgo5vyF+9l+LHccq+bNQ+Hr/vd24MYtjq8n9ws
4dHkPX1PmcDQsmwbfHqZQ5poSfXPIYbxhucT6fMcTFOTcu9PGbQW6++9iODh
aLYwpGxiWB5xGS5x59Ea0hMVMcLgz0azCwWbLFP7wgUPa5/lznnwuOknKSgy
MlQ9iTy4oORxLDPSVfKMwetlbluehkdYdtz9LMpQl6XaWdnJw6bwaq/5I4an
nj61QzyPdK/+mbp2huCl1QuHRARb9Lov5DcYfono6+neRVCx5s0OWT2DOt5S
P1BFcG6xNVrdyGBdazQd3kgh3iyN0acy4c7HtG1uFE6qiyWaPIZ0w8ZvVixX
dqpWvNSxr8s9gSLN4oHhwA6G5tGB6p0VFEbNtoHRWQqsXyUrVVPU+FftaZqi
mDgvjTaepVh7JG/PXS1FoDx+PuMuRab9fMjDDIozKXWHP5mnKDj671DDOxQX
7/hq170u7J3s63xKTNHZHzE5JMztDMrcx1kI/cVHkkoYhaveKnZQSvH///of
8V0m6Q==
           "], CompressedData["
1:eJxdk39Q02UcxzcEhEHIoHL88AIVIzjSA4+BWpPJAuH4eXQYmGAHKbFSU2Jr
/aIUnIFm8zzAQ9kQTYwfNVgmde8bcsOerxq5lEaD6PkaQ7nDKfJDxdnTv/3x
3HPve70/78/nc8894W/tyi11EwgEiez8d++1+71T6MshzZCVumqaIrRjg2bu
EYFGPKZMnqMos+zQtP5AsGu/KTxsgaKrQ/exrJ1gaqUkK8pF0V9XdryliUCY
euM98SIel+syZYnnCMzRs1lrmPb59eDg/TMErjds0QnuPHT1tSb5eQJ9//rM
DqYDtUURe06yvPaj3joPHovv2Y4u0RPcq1bliRl/kJGcsozlvzq6glazPGXN
Kx8M6Aimu1tMCi8ejmNVrrVqAsGJhdVyfx4ZSsfb9iNs3uKgioolPMwPJ0Wd
DQQpbfyP1Ywnag1XzW0Ed5cWJRj9eBR+Hukw9hIkO/R9wT48TtV/k/DgIsHV
LqXHeW8e9hDhZFEPAdc28r1KxGPT3LLPLN0E19LtB3ew/tsiss9UXiB4v2D5
9heZnp5cM3Sd6dlB9XNFrN6aH2Bf6CPg66sW7WM8blXNzq9Yvz8kcV/7s7z6
+8bm10HQFntJkcH633DJvVIuEWSuuGWYYX6ldO025QDBo6fibA/m15QbjOp5
Asm1nXnH3XhYJsrKC58QmG5+dFYl5OEeWeKUPCSQD/tubXxKcSx3uWTjAsG+
cVPfAHuv5oqBGi3z69p/mhIz/+BJjaRbxOHdlKBaK+PfKU5bBSEcfDRpXutn
Ka58uv902EoOi4tVTtEMhcPUmnrlZQ7Bzr8a9IwfjtmwWZvAofKwYe9rjH95
oSuxKYmD75P8+Lq7FPmjwyFjuRw++SLOmn6HIs0R5X8znYNz9wm3mNsU5bkb
m2ayOeSsk6pVExS/BSztXZ3DoVjb+AsYj/dXmoT5HM6pOr8NZfUFuvikpO0c
WpN/vlM6ThHRe0quL2DzpjdXNt2iaI/PmZ/YymHLfEzg7T8pOH9ZUCHz/32o
064YZvP3DHkq3uQwa37GHGCjuOgZYwhg+8Sqg6fcxyiM0ga7i+17xNbi2cny
asfDS/Je4vDhFr+qQ/9QlMRelk0xrr6+zgKmD1iTRvYwLY3ebelh882FDkf1
R3IoDWxUPDtJIR0VPZYxfmAodsab6dIXwmymIA6/Px4RPu+k+P//+xcVlgZx

           "]}], FilledCurveBox[{{Line[CompressedData["
1:eJxd02tMk2cYBmAgVNQKQznEuS6iFRcMA0fHiHi4acSIWKytOBGVwUSZOwgO
ZcIi1Ka6AkqDolbGnGCtCnYyTQoyNVhP0SBxgYW332eguO/9mBWRw0okEPH1
rz+ePLlyJ8+v5573da52h4+Xl9fnbN7tgTHf/r5aCtGUWiFRESwZV1/xgGJX
TE5o8VyCA4blqSMyinb59e7sQIK4pdGdOS8EOE2xZyLDCYSZlcnbugXYrUPZ
SekE4ccjmj9tFrArXitNWEPQXvd60FYtIH2DxleTRaCUbD/ZbhdwKmndNPc3
BEXPM4f9LALqKkc+ibQRXE3/aOsllvfmN+p0rwhqc4wf9DYIyPMu3NGmc0I4
9O3gS3b/jFWv7wnjoNhoOLe+TkBHaHF9STSHBzrdTmO7gDtH7B2btnHIHYq9
9s6LZdXcFuaaxvHf8x8J6OJvbVp5mcMNvrWyfJB5akZ/3VkOpkW2PR9LKCwt
8uoPXRxuuyKy/gmj0K1NLnYLHDLNo/G2cArrdPNESxiPsmaH5ZmCIoWU7v9q
Pg/FLEdr0jIKH1tTQN4zDjMKZv2sLKQ4ddMxYPBwGDaPhSYUUDSmlirnKXkk
qpe5Ar6kuCB9dTpYy6Onds4fJcUUhrV5VlUhj1H/i39NGihO/6g9H3WDBw1+
7lp1gsJzf77r8RUex/SKDW1VFC8WPC55cpSHSeMXm2ajGDd7m1OP85hTY3df
66LQZKtOxnk/haAqFyUhIiYc0SMH3TyCAls6pzN7F/2qL2KuVwXmTmWekdGv
1jKTNfLvb84WEe4r+zsxjce+yMNbXi8R8TDhf67bzSGrey6Jihfxw59BwSm/
cVgo36sfXiACo/cUrj0czEZHn57lhebJ1RkyDr0DmoOHme/+FPIkhflNaaKt
gLlL2qHMYr4fVea6M1NEuTuSb3rjhOdYfNOAn4h/i/bVH7nsRE2m1XS2lSLf
GFThXOGExTdk4+pm9p/rhr9YFePEZzFRu/WdFEMWf3/JJMHW3Wk5yjaKQ4sa
psRRAs3+zd/JeyiODk3bfKuRwCOzb0+5TWEck/ZFqAmSqxoejrA+yH0uVfzC
+vBUPbvqP2bphKkzgPn9vrwFL8qvRA==
             "]]}, {
           Line[{{0.6502115251533035, 0.41194720912080757`}, {
             0.6502114549763476, 0.41194673757076594`}, {0.6502154653120461, 
             0.41194927650573154`}, {0.6502115251533035, 
             0.41194720912080757`}}]}}], PolygonBox[{CompressedData["
1:eJxd1Gkw3Hccx3Fn0xJRUnccmdTWmEpKlJDWF4nEObvirnSMI9matEqccSZu
Juk6uoh1rGO3ZEVZV1z9sTYmE0FnSRwjrvH7/2lK3HEUtX3YB9/5zuvZ59H7
bMDPN25JSUhIXDk+8U9IGX7+klwAhjvp0UF7jow7eGNTawvwW8gXE5rfC5Ec
d9tNSwfDwVc5zgJWH4orq1Jbc8AQOo6R04QAZVnnG4jCMKix4uYH9AXIcnbw
XGsGhjM58v0Omr3Isu7asHQphsXopvaEUz2oh5V8fbsVw/XmEdeR2G60Gitv
1tqOYWXYu/zOh2eoPilWTZCDwY5ioHjx8zZEt3jC5NIxhEzlFlx2bUEvinV8
G2gYTNgJR9Yuzeh+5pJPpBsGnYexfxmM/I6+Y1zO9DPHoLTPlveTeIr6dukf
nbQ93lfykIP4NYj6i1KTpjMG20uUlLRb1eiHSaXDzWN/zKqeX5epRi/tXG9f
CMaw/Eni2AGdjWwszGpmUzEkRQvSObmP0WC64R8VTRgs9DMuxq1koXVHnZTZ
IgxPKP1a93bDQdDU/aI6HoPlM329nZAC2Dc4IChVGBZCG92yvy2F92F0UmzV
OWWq2LqScl1TtRgoHt73NtdLoDd7tVNs9ahLdLHfmtG+oeoRID2hyxCdegwB
pp8ZLNgTMMNLVXGFMtDWDnTRCyNAAWgyjK4KMKPG8D25BEiNJr1LtuHA3Q4T
L/djV5LNDXvWHJjTjmu0rSPARW7UTvmwGgaYTyOuHvu03ziv6tiNRSnKprsE
XJV9hSn/cEF5des/R0UcLYm9nEG7ecKKhIG0LL49jwtzlJhxGSYJIxMqvusV
ZTCpFiXq6CIhbdPNz3O8EET5/PmAHRK8A5doTD8m+Es9GFU3XYTuB2ryiu/z
4MPtjrZYs0UgR1xyb7zJg8yQghN7DotgbOE6KXkmHZaHZjgaayQInXQTXV67
Qn2pjVZNAwna3FbR6fJoJNw7W5Y5REJgskOrZUEqCpSVzN16RMJ0YsmbgJ1f
0YpRBMyMkSAr+jry7+IKdF9E32orJyHMfFN3jFKL2I+MbRczSFBlBagE2dQh
M5UhYUY8CZstkcjDnI9G2Z3Go44k8HOyVkReTSjEiJE4pU7CzcrhpNDIZvSK
WU/1eUvAHZqj/kZfC/rSVIHY6CWAV+E4eb6tDaV2cf2POARYHfUfeNW2I95u
fG9rPAF7f/7IYEd2Ibb2flpQOwEx0VaGUid70KDVNnVaQMAFVR++0KMHBf/E
a1BtJqBxOiEwOKkHre8pbIw7E5CzFnQ+r7IXdRa+zhOpE1CkEe59aCxAdvaK
VpkLGDqypTm7SIAmB8+NG8ZhKPZVyGeN9SGTwlOeGtcwcBY8jG38hcg7hXHQ
/ykGp7s178KXhEiCmdQv7kEtMnIX9+D/ffgXpNw+ZQ==
           "], CompressedData["
1:eJxd03FQk3UYB/A1YqKheGZGNggnpAjLzENAwC/KChKKnHnQBEYGFVqCOKQs
mgcowRBhgqAmYKQwKepIChTHWWDQCGGJvO+7vZQa7w+QQAYUGXfrx7/98dxz
n/vd89w9v3ueVXtSlclikUgUSGM+v5Zn04rGBAS9r00LS2AwsUBssNwXUHdc
rihSM4g7qJCW/CngCCMqkjQzsE5XxWS1CGBc9cE/zzAosDP/WC8L8EgaHzQH
sni1vYWknRKQeVjLj3mz2OM94bv3GwHp1iNLu8tYGONcao6eEeC1Pml77ecs
RvoqHzYXCciwu6tfvsVC19FYrqf+yFBYG9fPIneqWDZvh2321oR5z529e69T
gP+oWZPvzMFX6daIEQHrOlHWXcWh/j7fv5Z6Z8/frSE9HH6Mkto/sArory5K
v9nFYdfJFX6nugX8tl48GP2Aw0K1hNX8LqDU/2PXSbUF46q0wtY+AVdT1gQs
KrfgRqTNyYv+T+KBd67s/84CtahVkz1M+ymkiuklVoRMO9ocewTUB15rSk20
YvZi5KNP0PezdsN1Zs6KRbJn81uWESxODsrzduaxzjSXdvdJAskXTWGZsTwE
8dKVNdRr3euWGKkN2xILFlJnNJXG6N7gcS/8J92mKALV+IzbBg2P86lPu1Yq
CSLqVM/IKnkcvTw54LCXQNec6TNTzKM9QLH/cer62xvEd6jHI9XDC6hns5w6
G6gPmPlvo3IItnq/NHSoxQrT99Waiq8IjOcisytetEIZ0DWkGiA4rtd6Xuq1
wDG0ZHesaBh1F1RJsbvp/PKs679MEZzYtTMo7ByHTzY6DXdTH347N9iLOuPh
pMlEXZrtkzP4GYeGidnNv/YRTF38VPqUnEOZ9mZK3iBBijTh31U8C4fTNbnK
XoKrjaOL7e0snutlR9s4At/zDyJ8qlkUO8vkf/QTlLskd3ypY1FduyNu5W2C
mvd+4EDtuvkR/XLqLX+tPrSGulM4c8OP1g8oXy983p3FaFhHQek1ArbNFD9m
ZGCp9POU6QlGNm1s8j9G9zncwfjKCwShKyI+bHiXgf+F+BNbqe9s8fS7RJ1h
O7kviFqoarhVQj35WP52w3ICm1lysOtNBo0hZrHEhaC5Ise5N51BvvzKjhEx
nX+ozO2tfQzERkX017MCQsML49u0DKLjPQoC6D5VrPaICab39v/7+w/Gp9xE

           "], CompressedData["
1:eJxdk2tM01cYxrkIjMsaCMGaMTTAdAR1TMRJVTbRLghYuVRxBOUurpiViaKO
RhxMitCEO/6dCA0iSCPd5f1Hxjbg8QIa3Rgsgo5lqKcTRFFMaURYYdvZ1304
OfnlOed5L+c9vuk58fvsbGxs1vP1366fith/6yVh665/Zp2/ZYA13BJoJVQI
S8eH2hj63H5ZpvIRMR6cvya/mSF95ulkeYCINzP935ltYKjvWJThHSpC//lw
RM45Bk3K9ed2ISIEuWqzez3DSoPWWaMQkRe91+FFLcPsJ/0DsZEimnbcMYfW
MBw3qUxtCSJ0IdY4ZQVD4WdixboNIk6vdr30sIzh5OCLbMtmzq9+rnYpZfCt
VqkzlCLcrFkfXT7F4CRdYV/F9WhPVZi6hCG5vOnjALmInKRjoWNf8PjTRwNk
74sYmc9zXFrEULzp5rN+mQjv6/l3ThVyv1HbjGAPEY7j3y00cF6QDIZ9/Zzw
1m/jHhLu75o2N7x6kNB/OO5KJPdv938UPtRHeGzr2lzJ9dvZN9Kk3xDE2i7t
HNcP6qj3mIFQ4yQrUPN8C02vRwaWEbor41PteT2W5b8KmnKCR+PeowU6BsHn
6o7tRYT3pIFTreUM6qyqvyiLUJ2QdKinkuc3sW+s8QChTl+RsYz3y/jlj+pt
CQRz7ofJGs6T0Yad+UmE6ZBVWlUdw921uX4fxBP87v8es8D51fqkWMk2Qtn5
5VuFswyKc/tDtfy8KeJ8sbGRQbIpppnFEXSLbEdW6hl6/9wYdSWGMJx2Qd7X
xOsPv92YmkhoMCrTXfj7N5vbZ6xRhIvClq5Ezh7KkIEx7i/0zluOXGCw91uc
emA3Qd4xc0LSwpAiG/XRKwiefg6jI60MNX8rzkxxvaqn8A0XPl/dMZ2BmdsJ
2Rt9pcVGhvgTQoKS1/dAO7nnNT6PLXPOPbM8v3lHza4tIoPZs+GMVzKhRGbV
XOX8boqi7e1Mgt2SFrN/J8NXN0pzeksIiTcvafd8z7Db9qcB2VnCZa+wqRau
K+4FGQo6CErjE9Pibt7P2oMXHe4T0iY/PSnlXBRcn35tgnD32oS3sothjXte
zfQDgpf8j7XHOQtFCje3EUK7+5Ah6AeGOqeH88rHhLzc1qxO7m95CUMQvx9V
GmuvI4b//69/AduR87s=
           "], CompressedData["
1:eJxd02sw1FEUAPBdTZvBjtSEpKndGG0PLKkxZjoptdvD5lkmFPKYEXl8IKzH
lke1HlGbCU2hzCq0WlvaYqhoVB6bojSTGW6TNju63o9p6/jah//c+c05/3Pv
uQ9OWJxPhAGDwdiD3/KYZdXQ4BBJwY3durbp+SiUJerrl73Adl23bLFJjVh+
nELyFr7praVR+D137338VgrfPBdSBUcIxHCoyptLIViyZtIxmkBZRiMzm0Nh
oGLO0rOUwDHnDX277SjwV+eSsscEph2rWd5oF0mKPg99v2vcdhDryR9bZ+gb
CfSELLK1PArjh8bdppQEhmbiJ9wxnlqhdtJhfuvnq5V5aBsjXWVoMwGWyri4
0ImCOds1pVRBYL9B0ITkIIWCHe3Tp1UETgwra3oEFExbd8QkYFwi+zFoe4hC
t9fNwaIGAsNn1Z12mG8yNRVYifPNd7xg7fKgYGaf0z1bRkBeO5DNO0xBdSBW
ycwhcMU+SO/vS2HTOe7PtigCon1mvXIvCp2hhk8fpmE/k9sVZv4URppWVRkk
EfA78W1SiT5uwTDVpBB4VDWU74f5jy6rpc0lBEKDA/c1Y71fS+q/vJsEasxH
FG98KEQrRyxDbxPwH0sXdQRQELDf9flhPMqI2Wh8jkKmKvZ8dhEBuzrJvDqO
QkXktrvrigl82azU9SdQYDu499reIjAulsX3X6Bw44kgpPM6gb+W93XFqRRS
IqzYhncIfBqQbBZnUBi79mAoEvsViIReN9BbKjuruGgjTvu8AH3q9QJkomVv
E525aKm0fwUT3W9lqGlHz57kfpTJCJxVlv8xkVCo71lpvIjr25T9kpuMce/W
pUseuB5WS8KVkCwKSeYb0vno59GGLR7ovXFas1q8Lw5a0csw/L/UIudUHtab
iXFM02VSEE4cfabB/q1djw73oYPvMT4o0GHheuFXdH5uXYAFen71+XzNRQqL
DtXOV3E/AsTa+Cis31cQ283C+Qol2rtnLlPYZqrxO4z5dsLE7gj0UBH7uwj9
yud6tbGUQmGXbwjTiUBGeGlRENbj/C5pW7+TgJtworcgiYLTydyxXy4EytdY
dHzB87BX8Dd6OeL92DMZ54Lvh3XQ5hjvxSj8/77+AfZcxcQ=
           "], CompressedData["
1:eJxd031Mk1cUBvC6os4PBpT4NRAGmwp+VATEkDEENCAYIC5jU7SKFtwCTkhd
ZWLRYqaCYLJBtVgdYlQYSNJ5poiF8FAsVIryoeJwLKJX0OmMyoqrE5Gd/bs/
3tz88uTc3HvPeX22ZH6a9o5EIgnh77912TlT14zlhGzji/s7+wSSx06fmLuC
cEjf5rnwd4E89+zy8jWEXRFdr6o5T1ubljqkIAyaD0fLOE/uM6oM6wgBhboI
Fee+vXUBhizCxfTxCs/fBC47etcX7iBYdT+83HZHYNw8v6IPviMkecn7m9kr
YyNvaLQEwxOvkTe/ChyXdFhHiwhHWt2rhm4LhGhXtUcYCE1xI95LOTcHpEjf
+5GwMj0pNZrz4pkVZkcpQbbPsLenRyCjA87dnM9bo4l9dUvAtWDBXcUZQvzp
uGnenFeUyKqCKgmLbJ0+YzcFDmjcH+ReIIQFhybEsf3b/eYPGgmRdsVNpxsC
SwaW2yfUEbwsuk5bt0BDZO3C5IsE0gzUP+9iqzZ0/NxIOGd8UVDGHiof6N4B
gkvMivjhToGTGQ9zGrl+z7FnbY+vCTi+zMqpNBGG41btM9kEuufnhBb/QhgX
vnvK1+yMnlkHc2sJHz3KD09v4/OGLbnidpYQ9bap2POqQNW9JKVzDeGpqzxo
o1VA7V+TLuXcnO1UENYqkKi/f0fJ93tsr6vxaRHQx09y7D5CcLhlbRUWAem2
gEAZW+6bFxvInh1+tV31PSFhj7LfxG5xeaC1FhCaB54NK9l5n23SReXzfDT9
6RgxC7yp3p74TS7hW4ulSsoeKzk2vWQTIbVBfnL0ssC7zhNq7V/we2/p8wsx
CRxt3mDZGU8Qs9XR9jqB2xWX5vQFE2ztHuvL2L5BV3K/+pDg01NPD7k+UxMa
NTKLkPj+LbuC/fxaVlkRO7DSf3Em7yc11u7XuhCMbnmbC9mrX6s3VzgTzowd
Sp5aL/DxFI9wqYzg1Hi8VM/++4+Ef1ZLCOqUlojgJgGPUfn4/rfn4aqc1rCX
+/H0RIz1k0mEaq/zpbrrAp+f+ol6ud5z/9JOPfc7ZXCy2s+b+z9xYpqN5yM/
5jAFziU0aAfNR3sFYv56/aQ1iHBJ1TZzDs/z//+nfwGYTPo4
           "], CompressedData["
1:eJxdU3tM01cUJh0IliqUIg2gbFItKEYEaXEO+CAURXlE8Yk2g0gaNqyQON0w
6oQIQh1KrahBiEgiPgiCweAjihLra6jFx7bzu2XGiotsBMmgQKGgePfv/ri5
Ock53/0e587dVpChE7m4uKj5+e8ePKiwpj0gpFqTLpjlDLlfh8tjnxFE5vCk
7lkMsq5fE/yaCUP5QVmbghmMudL+NW0EgzQ2XhTN8HItcxg7COk2x5sIXutS
jB/q7xIUPfFR78IYbs+051dx/KBf7j7SKhmk38+Qq54SfGbmTULBsLMzwyAx
E6QPdssnFzEcMmU06jsJxQ2lNbs5Xh/2TA+2EO6f/uAbFs5Qlqg3ahlhiUP3
PEjNcGzYo+aAlRB4tlLmxeezgn1mpQ0TqlXt7cWRDJolkRNRfYS65Cm9ZwjD
cvFhW8wXAgbUdeXTFjL4m3YVTY0QamZn9FZzfRO1oxKJq4BpEdkhVbxuLXys
H/9EEGdG5r4LZKjviVsc6CGgx5aYtlrKMJpunv7tOOF8Q4GkxJ/hzv15xmg7
wXIrOcX/K4bmoUumSBthcsw5aOB6d8T+0K96TZCwhNCcuZzPq7q92YOEMxWa
vcVzGEoeFS7b5yT0rvPO+86HoUO7KiTpOWGVSrSpwZe/v8tty3GeT1HT5a4b
PJ/+epdvVnJ/4iyVOQ3eDC21+bKtfxMO+OV0azg/5SLrYXeuvzVn/ZEdXgzx
qsKy4V5C7GJVdKiEYWpO/BEV7zfZC750dWeIWb0Af74ntFW0GCLcGMKOD8VE
8X4lW3vviStD6uU+U1c/IdssfXuHz9suLr1kmSDo0n86GSxm8NS2b37F9ehP
jMoOTQmw2p3vs7nfCkVV+VkPhsyYtA6Np4DSslPiwo8C5mtak/NlAsRF7ine
vN5Y0Ba6PUBA0Iu/VipHBBjyUg/K/+X7FOb2zxM79/2a6JyJ52187dcywPEd
el+yvOD8KnTO3xwCyrYO5K3j+/NzU9SGZeMc/8eT6j2PCSWjpcok3n+hWttd
fpPndT5r+KhTQPPYsT9mtBAS23sWdnoyVHpdiQu4Shj59LA6mfvZ+7suc38T
YV+CeucE13vqpe4izhH2N25+mhXAMLhig7jxCmHMUFt5nef9///0Gbx2rd8=

           "], CompressedData["
1:eJxdk31Q03UcxydIRiBBgjBlLCae1SCRsTYW9LbIyLoeMIiQEC6ZUMA48CBP
T40lc0dA45KgAwppgiQBxm493DjPFgy0i/DG49nv+x16l1T0/cF5PnQw++af
/fG5z73+eX8e7v2Ofqdsj95HIpE8xeu/Hp8e8lKjXETFeddmn1cEmEZjpF6p
iKH+0gx3pQBDrn7fxjAReVMtCdXHBCR84DWW32GQ7tHukN0T8P5JWYHPXwyd
TJdSG0EwFFpUMkkZZAP2fbkKgk9C6emT8wzJYbL6sacJWuOTLYoZhuK4nwel
OQRluy53F7gZetsc977PJtjiTbNNDDLYQrxfl5kJ1iqix2LPMzwbFrf3cDuB
virygeoehrDXF6eCz3H9gPiBv7sYsh6fiS5wErxrUo7MdDBMNZSu73IRHPFk
ObNPM7im3YcfpgSZ12Y3L7cytAc6Rl3/ECStGdWm1jN0eXoPZvpRvFftS3Wc
r9gCmzM492z9xR5wiuHS/HRF82MUcUc+Vot1DKuS0ps9iRQXzx6ayWpiCMm1
L+1VU3xkSrLaPmU4upC7OvEMhd+P9ijfNoain1aU3ToKw/yh4EstDFVrl1Yi
NBSqsvxw/RcMofuvVFUlUNw9N1SutTIENbp++3wbhVKzfHaY33f0gOG5RD6v
2Nj92Sr/j/6qqzOW6yl3bnw07QcGe+CZmkkVRUn2Ur7VyfcpTFXouH6K2mIN
HmN4q9mXdOyguO4zzEYmGHRJreng896Ud3rNHgbN9Zg1iVKKAe+ddSWcbx3o
C0oKpPg1r7HuT8YgN4z3Wn8n8JcXyvvuMuyyDPd7bhPcCF3nL64waPvD41OX
CHY61NrOWwxR2SbNjUkCZ/n23ZW3uT+eMK5+c4bg+GSyTe0n4gXZq0ZHMUFj
Dy3KCxAxcuLJNM0xAsXsoqZkvYjxLXPuBe4HP8um9ppgEW9fVZ14OYPgoQ11
LapwEY6GprHMTQSk5pR5nvPxmv0Pzm4guFCbU3GTs+LCi6+5QwjSp4MGp7if
Teq8qNoFAdsXn2+IjRRh/sr4baVHwHhK/VxDhIg+50JTx5yAnFglq40RoVF9
KTnYK2Dxu/zdF7eKuGzxn95mFvDhGwZ5YbSI4qH2tuVqAdceibyfH90fg/fz
8/88/QuEVrJF
           "], CompressedData["
1:eJxd03tQzGsYB/AuUrZIHdVGmuM20ygxWnf6jtg5OAfTkoxjmd2NRZK7GJvZ
dOZIdeqs2joHJWuJyW4XO4Vkc6kphBW/95elYUP7tlQuYzOR17/+eOeZz8w7
z23ed4w8WbLBzcXFZRo7P2Jz26hFtQKK/zeN/LTjA4dG/5fPqpl78y7xKczC
C0WP65gzpPU9BczGa/ouoR9Fa809j4QBDjt8ZI784RRl502xHb4EQr8nmoVD
KdRtzpLGEIJ7AkOixpWicUjcxolhBMu3TV5R9sUOS+ypzBuzCWpepHaanHaY
DwTOEWUT1D98J1H026GPrgt2FBCYtUsH61n9lA7zvvG5BPYKP7XJhzn9W/t0
LcHwV1Mkx1m9X7c8147WE4SWCqKsXhSStSuzos4SiNO4jmA3ir4/lK8DLxPk
RgnS1g/YESYUpd5uIqi0CP8Z6c7ui4zdeguB7MzjSce/2vGiij70aiNYJsh4
PteDIscZHuBtIxixqSfTwPymTPdL7HuCHNUwm2AwxdmKYd05zEKZeXHxCIq7
FhG/JJNH1EJx4dNQinzrdvd3WTw8N5Tv+cBsyGt2BGTzULvqor8wX4hpaRAy
Zxcl6apiKPLWfSvm83nM0m2u+ncVRYtrorjzKo9IrXKOfxqF0hBp/r2UR/3Y
1mv3MyhqpfJ85REejqAu8dsSigl3yMU123gQW/qCcRcp+i/VfFLH8uirS8yd
yDxKY1H9xeyXYJgazny0MNV8gLldu+Lk/lIKWXyXd8lkHtNEnhm9tRRLW5fP
j/DgkRNi3SU3Uew85/TdP4jlR9/GrCsUQeec8ySdBJ8P6m41FVNYe7TqeZkE
FVMaehpYP6oxnondMoJjzVb16nL2PqQaeWUEQcvOkHSLkeLGLFuSrp9DmFtE
YMBpipsCRcpHG4fKxpN9t09QyNf9J/Mv5qCKbKiu0rL5vA1xxnQOjuvvk/dq
KBK2PsjdcpRDaUt/b/lh1u+Az1itlEP8oKkF7nEUJr3VyyeZg2t0pbL9N4rw
FMWM6yoO9tUWzGT7fuVb1OtfyKFu99+K0AiK+KygR8YiDofOPxrygPlqeMlM
cTUHhTRywp/BFEkDMyQxTRx+/j/fAfsbuvQ=
           "], CompressedData["
1:eJxd0mtI01EUAPBt9JAoy5pUVIZYUtrLVvb29CKH2kLZEgsEtbIcptNMM3u6
UtOwNLVaD7UkZ1i+tr/7b+vMtDWdORQSs3IRlZVBtfLYA6nb1z5cDj/OOdzL
Pcc7Nilir0ggEASw8y8uTslw9jUQ/AgNU1SEt2A2Pz1uoIbAeun1EbePFozb
//Fw1TWCqNWGvdH3LDg4kO65+QyBq2nbIkmjGe/bHZkzUgl836tXjOjNOLRN
PGVtCsHQqtSS+iAzlj94YQhkzlX4imczR1QtDJIyHzn325G23ozR0rz8qwcJ
BKcClouzTRhf/LnariI4NnlciLunCTvXl8bbMgmyHk7q9Ss0omSHdZ3qNEFI
Tqtg1zITJjwJTm7JJhiet9vN1GjE6om1K/1zCTJsJ8clpxvR1dYj6sonKMwB
O9/Mo7PHZDMUEjTLsoKjs3kc7hquH2RuO8OHWdyZ8xLzh4oJ/KeGOvMvGPDd
laPq28wN3VmiJm8DyjWytyJWP6d+60FjZjM65ntd6DpP0PdHa5c/5fCm+4S6
r+z+dZNWzL0WxmHUmu3cZtYvE+b6dQo5XK5cmjK2hEA+krcvyaDHz5Uv7wkv
EUxfkjrSH6DH4udGRVMZwb7uBPVWlw45l3ENf4UgsJFvi1qqwyKJsM6TzWPV
hujK1tEmrPGQW91vEHxXld2Kna/DuaHHe3dWEiS6figix+twZ3+yMIa5vKbD
X8H8dr/tQCzz+VnznBVuOhzZ1PDoeRVBrZfDo7ZOjyEJnXvUbP4z0lpeyaXs
fa4T3xx3CTQ/7ee8yzlUnU1ZVsb2xaNA5ay8zGFW4LtpykaCX5llA18EHL5R
aTeG8wQrIyvav4zh0Dvm0WOzhUD5YnBY6aPHHOH3UK8Wgpdb3qc/5PQor45c
cqidwB5oKNDEccgt+ODT0UawISrGGsz+N+g6ySQ2Ai0aW9OEBlSXimb6snz7
pwDznVIeI+oT+zWsv+8V1Pk0G7Horl2VbiWQfD0U3ys24UVths+uDgIKVhZc
LEEc1R7WSFl+9JkgaVaQBf/f/7+tLrIA
           "], CompressedData["
1:eJxd03ss1WEYB/CDDpHLSUWFlUtyv1VLc41uDiWXU5IdnHHKVG5FhuYyZqNS
KBx/+YeKtXDi+aGHsjT3S26j/LYjknTdmTs9/u2Pd+8+e757n2fvu9dQFOMf
qcjhcI7Q2trD9WUGdioMbktyMe43Y7EhMaZSnctgiOl1k8tkvkPvdNIyYNxJ
O0c18l3u2UsWfwBXV2/5ax5mcSK8VOfod8D1vuCp7eQ5fwGafQWUh6W2HjFl
Md6VW8udBNTkZRfzyW2XtZj3vYCJjNO5bMrrZC09fNYF6G6l5u5M1tj7ucfj
LaCieqD2MPnWiseqczNgrh5XnEjOnfiSVdwA6BmotFRLdrl5r2jL/RfGFrf8
aL4vdKgeMOD+bZ4Vzesqkf/RfAXYzK/x25r/8ay7yFwKmNHnI8khny5vNZqr
A0weTWnyNGdR4rc72LIFMF1oJIi1YLH9obh8gPo3moiaf5CjM8vCfKmf1yC3
Yo28apRev0nzGkaoXdK1YrHMKMMkuhVwqK2WV0cWiOw/+bQDlm3YZneRxzgq
PjkfAG8kVG4+sGbR5Ln3O1k34NTeWP59skhdyctjAPDwQTPXBBsW7V9spPaO
AC6Fxv8UkvUVg9J2DgMKcwrzcyhv2qYqnhoFNNDq/+1E7vGNsE8fAty1fnH5
CvUr9PbvOD4OmB01zpFZsiiOu7mmxwJKOwWObeQi/YACzxnA0I/mJywovyBu
2nCdBfw7VDjlRefNnIyq2kO+lm/oUE71N9yq4W9zgBJdbWchOW2tbl72G9BW
C+RVZJ8gyeuQRcDoyX2/5HS+sGM0RXkdEBgDQQDV7xwakZ4iS6UHO15Rvbol
j8dTYFBB1dophlzQnTCxoMqgrKBzrYTcVWr8snMHg4J4sY4SORLOHKvRYpBZ
jy0dp/uPKJWenyZvhgdH5JGrr6YwjZSvcSuRB5H7FURqDRoM8t3MbCbofcfn
tFt0lBk86jcyrEf1JxU1B55S/+jN/b8qyaeSazNDFBmcGaxf6aT8///jH3nP
uvw=
           "], CompressedData["
1:eJxdk21Ik1EUx4dKpjaXbzMpMZtG5ZLCpLI0s9dJy7Y+aASKDq0tbK05IdDe
rDSV6AUzcc0aKlNqa6TZfUoPs3wrrdmzDE3rqVzpsmy5skxXx699uFx+/A//
yznnf0Mz5OJMFxaLFYVn9n6lyf4yIifwnH/LNO7BgEvI5cZmJYEDcZ3ick8G
aNpKTR4hsO3qVIS/FwP8oplPn4sI2MLMe6PYDCQ1ORe9OUUg8uTyOp43A4Mp
waxA1PNFBsdbZGnpvktq5FbXmsxl8xnI4Q1VnrtK4N6GCTHHh4Fn9q4rxTex
XlIYqZ7VdZ8SfuoIxEpkEWWo5+0yt0cjl+huG476MmA/YdskNxF40HmhINSP
AVHHk7NJrQSkvH51FzLnTuhxew+B1EHuHjPywQ+q3PU0gUAFN7jKn4EtBttu
w3sC2pTwmEFkuzC57dgHAjGlvNOcAAa06nM9vR8JVL9y+70TOdrLZj8yQmDj
ePZYKfKfucbNuaME/IYdUxXIkoG6Fldk2lFOZv2U4ZMG5XcC4QnljRouA3rR
Quu6vwRmNI6mDYE4n3ZB0Lf5FCRc1L+TIxf/+OrxApl7uGp7DtbHZWwb0y+k
4FL1SLoXMtsdHupWUFAqlRaFYX1hjdZLFkXB8a3x2gHUR33b0pwxFLT416b9
Ql2cKBRqYyncC18y6//IpH0j3EqB8SPL+AN51Tg9kSekQF3vzd6PHCJqjQhN
pWA6RBXQhywarY9vEKHflkNDcvSnXt4vtEVTkKzKEQRhv9eX5FI0nwKNcsGY
FefL3BV60q4UWJKdZY+RA4TTJhP2K1s019SD+wqw+Cx2uuH7tT2HzyMPKc7E
0iz0z2cLQpDXuvd9dbcSqF16trsB91+fn5g1OUygecccgYzDgGrlz+BeGwGL
zljRjXnq5yelu1gIpHlOb/TG/GXdUL3LaiRgla+f14T5ZJf1KX8ZMM/tElbC
PAYU9jXHYioJBIWVaJSoP3VW1H27RuB1gX5sGeqrmZKJFsxvZwd3QIH6sDqy
NQ/zP2ev2bUF/8P//+MfaxHMGg==
           "], CompressedData["
1:eJxdU2tMk2cYReQ6kcFGhoKOixJkdtAIG5GynVnNWCsYGSIirAIZUGSw0MXg
yETGRuIIUFoiFeyEYFhGOmodoYAWmGjf76uMFazbYArzwvsRIZTpWJGLum9/
9+PJ+fFczjnJeUJyPv0w19nJyUnE13+4VKFNWuskEBbo85SeHFLCv1kl7xAU
eM2MDvpzMEaWiOylBPFl7rnpwRymYr2nk2oJcoSpK24BHNL+zlkr5Pdfjaie
W97CQRW7sMvuxqD3RcniER/+nrTI96GQAWd/4Kfx5VCaqRZPuzAQBg4IB4M4
dCdIhjBOcLH+y+CeNznIN20csfUSrJi2HUmO5eCp/l4h2cAgzlDvPyLh8F6D
ttAthoHC9VwaUji8VaW2fZLJYLpBILudyWFS/lu6rYmB7aN9QWOFHLJmJtKa
o1hU/5XVa0/i0JHntZupYlE1bN4zJ+JgPSnRShZZFHnVJkt5Psxu7DkRZMGs
5gR5EshBI50Z2hFjQWi/MiLUm4PA98/T4g8sKC4ZUux24vBsTCAyJlnw+GaJ
OnONYuviMY+6SAtW1Zr20scUDsPR404vW/CKfptZx1EcenGK9V5g8btfxmvL
dyh8Mmarr/zColun7z82RjHu13FvoYaFfnm/9nMThcLiFpOQx8+/UV2jMVDs
yp5YH+bOYmdk3UupnRSapS/8bC4s9uR0FPhdodieOOVwrGMh+2O+bphQvJ61
KlI9Z3DASyEss1G0VopPtq0wkH/W6hJ8j6LLYH1361MG+9/PTyqeoajouZZo
vs9g4rnGGj9K0Sz4UXbWwsA6IVsK7aMwdCdcVl5ioDy7pSK0jaJovf7jux0M
Zu0j9Qe/pTApg0czwhlURD083qqhkK7bkHJqnuCRYzladZnCf67963gdgZfr
ZMwPFygmv/K+Iz5P4L35zGBcM8WFneNN7maCM+Iamdslivay5i7tfYJKn3z1
3X6Ko+caBeMWgpvZpW9br1M8GIjuKhcTZFs8olx+osgQJLbpEwm+yw33uXqD
QtvbMPxPE5/fxNMBEoYiN2Wv8942AodqYK5ymOeLTfX1lBKYTBO35m5TGJWq
6+eDCRadB+ebfqaoJ9HSww4zTFOH5cm/UrAjLSFVybz+a4ZnfZRCxZr9e8sJ
alsCdGF2iukE8aF23l982NVIo4PiYKyucVMPgWvaI9/5pxTpU31dKg8Gxs6L
jUvzFIG6zU9uyBnkmMrFEXw/JE6R3yJhcKt4h76Zz9f///NfmQznfw==
           "], CompressedData["
1:eJxd031ME0YYBvAO5wdqWSZqRAKRKkHnoohaBClPoSqKA4SYDfCjWC2kE1ql
mglorCHidDWG6nSQbRQb0QkCyQCJCAYKiAqRKHGKm+u9p0MQa1E3sQjz/Nc/
Lpdf3rx5Lpc8ARpDktZDIpEsE+fDvc/spayYyHE/Lr1WVuRAcdzkKO3fhGuR
o5rzZQ4UThpZ7HmWoPCvTB7pciDyjwX9my2EIr978icuB6wLh+YVZRJ+T766
SDqJYc30/ZaweEKp6XXhiUUM8llJof+sI0w1hubNz2H4LrBp2y41Ic3TGmA0
MMzo/1R3zkxIGKf8WZrPsL4hLSu/llDra1wRlstQH725OrybYIHicMIphh0x
Xub+ywSffA+P2h6GS28t+01phEp3neXpMIO6ubfksHB6Zq77lfDq2PZUn28I
CLCva19DOK8amhFUQHCWdj4qyCIsjLBK1zYSvHQ6ly2XYMuYLfOvIajlgUFP
fiF8f6B8fOstwtbfjkkjxLvUPmP76oTDrT2KjcKxF1uKG4TVN7NsScKKhl3L
9nYSflptfCNpI0SNqX/QPCR8GX8/6a8GQlnKn4bjr8S+bmBDdhfhRsHXAzOX
cCxVmR09NsLx4M7dIXKOX83ZfVuuEHZGVsy7rOToqivpya4myP7T31Vt5Shf
u0D1QvxDSOHi2M+PcrSWvcyJrRQ5mnSn/TTH8N6TU9eXirlbntYkvKrXnREj
bC9OH60TNjSnxkUJ1w83Xqqq4rjqdHtH6wmJ3oHTB1s4driuxEu2E26d2aRz
VnNMefqVUh1NeHNd/4X3NY7Es3t+TPYWeUf9P/MUDhlfbw8XnhUY3d3YxNGm
7GPaaYRxj/NOTT7D4Tx0bPjdGINfalveEgPHyZS+T0afMbRPqFzV8S2HyaT1
HehnMOt9CnNSOCJHwoJdzQxvjTUZtmCObYes8U47w4SOqju6lRx38jbmdh9k
yH9wcVAu43i+vXe5Vs8w10Mb2uTLERygULeFMUiN5ZbHnhynM2WZCSsYLixv
mfvARfA7Umpq+dcBRVeKPu4dYWVr4gF9hwMRoRWaGNGHZPnDKlbswMv/Vber
hVlj9+Ac0Y+P+/IeWByqAw==
           "], CompressedData["
1:eJxd02tMk2cYBuBmOBXIwqGCCo7AKFhRBDKJlKg3DCrlEFkXzirEIorAcAXD
UhhDDhUHVVABRXATVBQliBwCiEYB8RCsLpszY3OK9ns/xfcdIZbKEBU//Lkf
T55ceZLnx53cLqrd36R8IhKJfIWZ22Xi1lknN4q2TOPQq7cGVFb+12iwpHBx
OjAabMPBIbF3wMuKwrvlL+PBMA43x+LG/KUUB/Qnpd7ZHIbaX2WOBlDMNI4M
etZz8H7xWnE+kKI/c9FI4QkOaZbZ4uwQiolsiUn1KUF3V0XNfgVFrvJgiM6J
4HrVsCQphULT5ajkgwlM02n3fy+k8HNN7j2VTtCpeazdXUQhn5ejyM0g6G1J
Wp1URVH7ffGF7iQCwy5lRd8vFN3VmdNFOQR/x3k0XfqRQuGGpZPXCDxWxS+x
PEKhj/1BafuAYIdqsxMtoEh+F/d6voHghsL93vwSilDfyuaM9wRh8uQxxQkK
h9sV1ywseLypCWzQCv9JiDq2Zi2P7zzvXVw4TGER2nMpfRkP+vyKUk8pEsw+
VwWn8Ph2b4/Rj1Fs2G7veFzwxGf6i3LBR9nZ3w4JHn0ri8ywZ+hv32rVAh5i
48xPR9cx2P08IDFL5/Ho2YQmbwuDrOGqtC6BR2LJptr8WIbyaNmKNmse5h0v
VYlfMhTMWuZLnxNURo2XT4czrFhwrra0lWCmpGCNWQRDULvPuEZwRv0YXSw4
x+bZI5ng0PtZT3IEn6zTRfUdI5DYPczqimcY/PePw8V1BJr18dpj0Qwrp2bD
3QsISr9qrstPZHi37M8OeyH/G4a7MQtiGKx8TzvfiSTQFdus9Rfukdc7f50M
I+gzRciC0hgmp4Jty5YSLFpX8U9TKkOuaI9UP8Ohyja8v1Pw0z2x3c2CtRPb
6xU7GLQlwz49gl11UwHvtzE4ZlmbrzZwIGr1PPlyhmqX9Lz4uxx0G8qC5FIG
H4tAh8gODm2mr915Ib+X7kbuYSMHRVOceKMXw6YBk8ZqPYdtar+Pjnljnjvn
mOjyvMUiBq+mhp0bUzmoR4505e2jGNwaVe2fxcFN0nPOOZXizLjdF0MRHMSX
z5buCqUo3Fke1bmcw3nJrY99WZLsenOuL//vzwfF0bJr
           "], CompressedData["
1:eJxdkltMkwccxZsWkxmFgCibipkICtEuq/UarByNFdRogwhY1EBELlYFb9iq
ZNWgooEo1U0plhZ7IaXSSBEUagNmAzVaokKxiGA3vv/nFemECN7iWHn14eTk
5Jy38wtL35uQyeVwOPN9GnP5gMgvWsugXMZPbPl4E22qrC1BTQxalLP9jqXa
kVJXMcp/zECgS+xRhNthdmi6+D0Mhk8FuSi8EczdPqUyghA4+Pdil/IWmHlN
M6olhJVX3C9zGQc8WHblhIygWVrfnfPiFi5lSI6ZSwg5XyRpAUscsBmdPPY4
QebVb+TrGlAapv4vqYyQlaB+phA1oNmWGtPTQqjf5Rm/KP0G3IUudUsTQaDv
azT9Wo/kVfHmzm7CNq2o4k5vHZ7fC9I9ek3gTpkpYETXcdPeGh3o2//ZELEh
9uda+K/rvbaGIVT5nVx4zW3D6CTep+EvhAPVhWmCzzUQt7eNyGexsOtDpwtb
a5Cx5zRtnsni6PMPN2YJrRgVWqbnCViEbpC6l+stuCx/yIvdymKF7MHu0+VV
cFnoB1kmi6KjVpp83oJws1QVv4OFfyxTIz5kgLjswbKEEhZ9awaSjD9VYN/q
XNFYlnTSqrH8NZKTF3OAxVzNpKKCADWSL6gkTyJZaD9ED5bE/IEO13i+YAKL
Ns+P4cHV56AJjYg8+5HQvnmCvTCwDA557m+ZDwn3/woreuXQof/iVa/2NkFq
qcpWbTXAWntc+MJAyJPIf+EWGHGmo1md5OtPxtnzYt8ZcU7xu3OTlVA6bEvs
fGpClya5fomNkG3yOv19vbktWO7UE4ZW6iZ6nEZccq7bG1JOEO9fH3KvxgDS
RD1Juej7gy/NKUg2gDfUXDlVRdCp4hekNuqR/zLybf5ZwuziKCG3Uo+IxD0N
l/MJUxaJi+cEm3BQxTnokRK8ikB3aJYRI+O2Z1SKCa07THFdxWb0T6s4fGQh
YUD3jz17fRV4VPl45wrCprSpvW/Tq/H+zdKQ+QEELS8qLulbLYaV3fv+HWGw
9t2gtbO/DrtOeblyH++lipShbB/v3/P/PyLkkCw=
           "], CompressedData["
1:eJxd01lQU3cUx3EgbXFULItQtQbLKDvFomIK7XgaqdimoKCgoJQARrBuCNIw
BpuRMSK7IhlkKjsiiLXgGNzl4DIIaRA092a1IzOAC+H+r+CQtgOa3r724cyZ
z8Pv8euVlrllt4Odnd0a7v77715MLVKsIlC28Odyq9qMDYmxlulkArLhnLed
MjNWLLaeqdtAIFXo6x/5kRnpnfOfCD8jcGJ8YMsfn5jxWfyk5oGRgZLcJlFf
lAnTpuUxWw0MOKt+sBVdMaK029Io1jFwU1Ixm+hhxHr5myExxcAJgeNgWJUB
B6IuiLaPMzDk/K6mfJkBv9lxpKH3OgPp4tVft+fqcWrB4a/21TKwaUCXf/eg
HoPHTO6qSgb2Fzg6PWZ12DyzmMrjfFFEQlREh6lKa0U257CAukB7zu6RE/Y/
JTAwh+fkIP5Qh0Hxoz13whn4YINcYGNp/NPYW9i6ioH1pzpnl0tpVN30fjnW
xsDavPTSjCEK196tLqkeYaD08LQg9iiF76tnuuw9CWQ8W9O315fCS81pp5MF
BJSTWVUBDhQekAwmXo0gEFBp+Wd5kxa/aA30zBYT6PKZ112XqcVYJmwmKZWA
fsKdd/yAFo3Ct9tknIXBvJ7LnDef/DR0IJdAkyQsMlyiRd6rsuj9BQQcDxnP
6Ee1uM/lpChaw9mk5OeOaVHSfFRMDXP7ua4F0E5houahwGeKQNGdhkFBC4Vq
86Q++iWBTOff6tpGKKxxyegPcmFhtrNGM0dFoe3ISF6wPws5/IeKeRtpfHyQ
n+/hyQLfO3hvsoLG0RUJvzj/yAKV3Bcq6qBx3bjc5hbHwtn8mVEFofHbdeHk
ejYLS19E8Et6dPjrqdYHK4tZ6Jh0+16q0aHfrRSLWMnCRNZcD366HgdbHGX+
91h47no/5VqzHhf29jeE8N5A8fZXOfNbOW+8fPpzzhmZLZ7enMfVfkKllQU/
nvxRbYgBbaGuQTGNLBzbNbxyaZ8By/6qj5NuYqHFa9HFj18b0auj1+tRBAuv
Uw4taHQyYX/hsRt7LATiaH510lMTxqjc2sbUBMp3Fip+TzJj1LklkqkiAvYG
2ZfCUjO+by/+W/sdgSzrarXbbTMOSZ92N3F9nK/0tdJcH//v5V+/iso4
           "], CompressedData["
1:eJxdknlQzGEYx5cQYzYaklC2Uo1j3DKazZeadaQZJFdTadaRzT1R2qxkSLKz
S1Ejmm5LOToUGxnKrmPXYIXGUfM+P+w4p1pHa1p5/euPZ575zHPM9zm85Tsi
NvYViUTTuP3z4eGWwsNxhMeXjL9t3QyKassH7wDC2ij7fcM4QmpYT/dVD8Kh
zry0QSMInpM/rO2aQJCGXHMe3MtwcUlC4fZhhOf3lBH0hSHpgT23/S2D6c4c
lb6TYazB2ZbxksF13hSbdhBB1VuTKrMwWOVtI2NtDD0HX5nLHzF07LJvMfYw
zK+Kc1bqGZr9A+W5DobUMWdFOxoY4jIu6sKHcJ24MDb/EsPQ7vh8RR9C4FTL
zOM6hs+16dGlLoQQbbHhVA5DWNm+fH83wptj2dbW03yuH7eimoMJtX7Tpssy
GbpEEy73CyHs3eaVcjSbQXP5o2tTOOFeltTScpBB3HVOnRlNiF7qr1+pZahQ
tVaEJROSZ6ScTVcxPBk42zU0jVAX5NDoTzIsi5te5lnO9Yi3urTyfLbz+76C
K4TKSA0saXyOTQsdfWsIp54qt9ZqGHySHp9XX+f1frKHy7IYPHJuStSNhB8F
vSd60xkSfSVnXnM+E1iTvJ/XdzRWNbTcJkB45/jE+48zDR+4hrO5yEm5Xs2w
P+FwgNsLglpsqk+s53c4UD2+doCAr7/2ZOMmQ+lk3Ub38QIa7HNj6u4wrPBv
8zq2REDJDbNC18Tj1e2VjcsF+H4v/LmZc8VuyR/nCAGvJK7myGcMR9xj179e
LWC0U3ZiHf+D5UFjmh6JBKQFvxlhHUmQb7B3v3Pw/ctNrTmrCYY8w1OjjVA1
OvSkNoEgsmm+pFoJ+TcKBPdC7ufO8i3+TKD2+P76EoIyJtIz5jkhqYcm1ZgI
D1KKY1bVEdZ5/NlbzzmoqCU4knOmqrL/Xc6xF7LEUs6l8aN8vK7yvEC/gPcF
hInSIvEivjcXhaKjVEnQhXa6BWQQvhWb2zK2EWRhxigPrg/ezYuNCwj///9f
kZSjeA==
           "], CompressedData["
1:eJxd0n0sFGAcB3C7MVYLSTRt6bRedMJhktGXXpbJyxVtMuOcnOpsZ5KVC9la
rSTcjAghkTiKSmJWm7VelCn3PKertvPSbRyRHhFNT//2x7PfPvu97Nnze4Qy
5dFkgZmZmQc//yI5GlqzfIAhbHzL2slUivfB+i4n7guzg+Y2GRTlS3mByn0M
1dludcPXKNYetE9f2c/gmhBq2ltHIS0wnZoLZzA0bJ9KfkqR5pBreeUwQ0xd
Ze26aYrvP2hK/CGGoaR3mVbzFLlJlbP6YAaqyv+V7aaDyOfPLmkQw3Cjf2Ng
vg7XXu1R/bPcNd59D7d4KDP8eSRDUI/Qc/SqDuce3JDkcjeb7A90luowu8q7
fp+MoW+gYLVaqUPISvkdKwWD8XrxQ/e9OmSlru+/fZpB0TURK/pN8dXx1seq
NIaZzS+jCx5R+NoJfmZxF6aR1RoJhUwTry84z+B8UvbTxpLiS+/IJeNZhgpV
yGQXJZAKG/xCeP7kVus8rwGComNDli3ZfP5jOmFhIAhwEvnMcBt8bXs3LRCM
u9bGzWUxbGj3psZFAn0mC1jg/akvjmgc+XxBb9IhFfdmRcoHtQ+FsGTUTZjD
II7Z8i3jJkWkPr3H4QJDVGFDzrH7FKWlb8JleQzz9/qWFqt5fXuvac1lBunZ
Ca/aRoqZtw5GO25NRND5Cm7RtuOh+RUMDs53okfmCLyz3jgHVjIkx41/NR8j
UPufabLnrj/oab2N37+4cOBzXznfl1gesdxK0C0o+xNcwiApgeLiE4Il+fxY
NXe30ynx7ioCzYqbVUsxQ/SorWlYTTDY4/uD8Hxzi1Nrgh9B2I6dzz4XMZSr
ApQ2Bi3qhe6fOtUMJhcmvtujhdi1qS+N9y9diW3fWKKFaGHYpSOfYX3AxGtJ
uhYdxlJbLX8fr+AjiYvPtTC0JTePKRn6XaLapvRajEhzPQNP8H2VNVfFuhBk
ykWxHokM0zUWERfjCf7/338BlniJTA==
           "], CompressedData["
1:eJxd0mtIk2EUB3BvrSwpJJR5S0cKkXkBS0SpE3nBeRk6c9q0aTNzkqYfNNNK
pWWQmrfMmum2EPKSM61INmZemHM6TekxxXum8gqFpkvJ6bDT1z68vPw453mf
5/mfl8HPYCebGBkZuePz750+UCTSFVOwH27fN6ElUC/z4LaiQy53C6XDBK6H
HKDSSihYltYKXUYIGAsjcurRrcpEbz161b0jzB892fJIXDtK4OPM2s/gUgrs
PB+zT30h4PFDp9diXcIXhYm+EpDQleFt6JA3NWcXZwh4CXNTw7BfW2VBV3wj
cEmy02OHvlWq89tbJMArXJ9KQE/fr262XyKwqVkJN+D6OPugNb9lAnW8OJob
1l0cesqvrRAQ56c49qGviuv8Nei9fplp/BMKWFJj9W/s1z3nSLPRZFVAu4Df
azJfLS8oo2CXvk4/+J2ArFEZzkVLhM4qMZ4nsMGnPa+cgpKyFOeiBQIxzAmz
KbStlnJznCcwZkfrcqqkoLgoly+fI1ByOpjHrqLgbpS1a9Qsgbzptt0WtM9m
fXbGFIE/D307y55SUPhJPNI1QSCWKZFx0c98T75sxHwWEybpdei0Ik33kXEC
mnbRu8pqCpK37ilyME/V4ZrBAfSVfUPkW3Re80U332cUJAUqFbFjBOQRS9bD
6Ju7NuPqz5h/pqH8Pfabbh+qSMf5PnBwpKnQloy010eHCHAimpK5aL2T0GRa
Q8BiYzBUjvsfYxWmVqILfaZemKFvqzJi4gYJBESG9sfgfZhWQwwvtPd2xxYH
fb5hnlEzQMCKlTTag3l0Gl4dP6MmMNHiKZChfzEFlidUBDzP6aN1FRSUybOq
e/sI2M7OsaPR2mpewQjWszJZAV2Yv+DGECMf18eHcmTOaHVQ750k3M+cr+p3
wPlVbCg+cPH81haJrv44b/bCzrIN+v//+S9lbI7k
           "], CompressedData["
1:eJxd0n0s1HEcB/BziOK4ZTWlCSWdh4Q62o03WjWkurAlc+k8lGWrIeTpijUq
UVmFloeU8hBWrLY6Sutms66lLtud3wPZmYt8SbVxPfzOn/3x2Wevff74POzj
Kj99OJXP4/G2c2HKZpYFYhurOaRs9j2qGdBBmJO1bNm2gAST468UftYtEewd
2+TTr9dBUZmzbCHFX/ZguJ8qWUsQHCoe8M8bhYcq28uoIhix9t/5t3UUzha2
yoQ2AuZguqweFG6Ueze9aSAw679YWpJG4fq65vDQ2wTxrFr9OYNCYnwgz+IS
QXXf5SPDLRSarIWDk+UEH9c7xTo/pNCZGuUsLyPIcIzuVndQKHnV3W4oJsgv
UErODlJoG67ct+YcgWrq2TXhJIXnnc0CxQkC44sI+wlrGseGXkt3yQjCxhmj
sy8N1/Q7aTVSgpdFefOWkTRU7oZ3NzmLehXpvyNo8L3cjab6WnPPQg+unvy2
RpoSRtCsO+ydlU3jyaT5UGwwgS0lXfB7SmPxWPuiyQ/HF+ozODsx8sY4zuWC
D3vKemicjjaKviUQbNwSESJ0ZPBppnGsNYVgyqq+vzSXQUegvaboALd/nSrM
ZT+LzQtXa8fDCQKCXOKoahZ9qULbWTE3T8hcZZSOxdofHtVn/AhOyIpbEpZY
vF7xdfokZ4mNvPACZ6U+TWLqNxGZ/7x7kkV+XFnVUh6373CLfmSIBZuVK9ib
y91zJFHTbGAx+75C264guK39iHt6FnY7emV1pQQaUXhaiIaF24MinxsVBMoY
g1b9mEVDV1KmtprgZIu3JsONxaaYfI2qluCA5pR42IfBxOq75y3qCH4lCpTT
Lgx4L4SSrT0Ee6Q2ngFhDDI9RYIANcGp+xNxDnIGrxSXg658IViluM5WFTEY
q+LfYgwEelHJo3k7BvZEfNzvD3dfy4KG+C4a3SuTKtw5R8vWBPIpCrr78zNy
lzkcUu5eEdU3CslPh+/syjkEjztt8KV1+P/f/wH9L4bl
           "], CompressedData["
1:eJxd0n9MzHEYB/DTmn4SJSm/szIc/VhojEdU7lCm82MXln4phaSo0xG6NZPC
VaPrKD8urUXTaDbTc372Q67vfa+7a+tyqTYn130/nJzFLt/86Y9nz157b8/2
7HkWJ2XFpTpwOJxgtia70hRaVThgAaOXoM5DS+PIm7tni40WmFFMelMpGl+d
5triWf8SjaW4d9BoCxT9fmK1wOxxShR+l8aE66Pf1CYL1FSqnHnJNOplhZ4h
ExYYFr/8vtysxjGxdCgpggGT86O41lI1+hhmDjnuZECR0Bqw/gOFbdvLms2x
DEzJXRfo8p7C4DudP/PZ3Bi3q8zUQaFvNVX0di0DfU8yOkKyKfxT33DQ5RAD
MnrC1jLQjYr+fCKQM7AiYPe++w4Unixsul/Sy0CKcV+AeBaFv1+srjX3MVBy
MWubyJvC9Lfi+WsMDESZlK+FrB2lt4JaWEu3cHU7FlP4zWvCL2yEzX/wlPvL
Kez/XLHnwFQCBT8Hpq2XUmg8yH0aOp9AEe/MmKuTGqGxRX97IQHhld2GUxGs
NR69GbMJRH+2NkoS1GjgfHTY40/ga3fjOWJV47DUNm6YQ2Aic676cRCNJ6K0
DzN9CFw2jA3IH9KoiBTne7LzFlgf2Hn+GvRWdWrbpxMg9X6VijQNpouGZR7z
CFRWtzlxLBp0XNFQv2QZgZ2qrogbuT34+mP0+ebNBJ7vNVWJLmqRK2EEowIC
2c7JvmSDDvt0x0e+sC4P/T7PztpekXN4YxQB5zS5VpWnQ/eKmiYFn0DNEW2d
UqDDA69KvnQDgT/8X24rY3WoT2zuz4gkEGOr3WQ5q8Orq4Sla3wJPEoZLMoL
02O4ZtU/cz9tkkx6VE4uOLD7u7XmmsFJj9eyOElprgSSamIDPN/psOsmz4se
ZEB4rG6p6pkWT/Xk+W3oYGAJd1x4LlSLErf2nMgmBvjxixYdbuzB7KiIhkvs
vbNLi12dYnpwTqZseUgiA9vtgfeIXYNvome5m/gMCFzI5S0SDfILyhYK2X+1
bJUdxSsa/P/f/wIN+6yu
           "], CompressedData["
1:eJxd0ltIk2EAxvFvdTOXMZAO2iqVylJbHmhRljxoqTM1c26gMfOQ4qkyOpjS
hamQOQadlpqmuSJT0Wrlh5pItCzShKFm7KTb1KExtLT3bYKUrdsuHv787h/f
rCJJzhqGYXa69q+DEoXyqDcFP7r155DQiumP9f0vdlNwsvaW0S0W1JnOaQcC
KTLlzvSwvEnMu9t1eUEUUazuxGt2Agnx0lMZIgq76d7LxCQz0KMQ6V1eluPL
hmAzmAnsT5NQqHpNs44FIyppY3VbEsX8kVb16UgjWPsfvvIkBZt9djW8xoCZ
6csxiS5/jl2x+5cY0FLsEfU7imJpk7bY6NBD0Ogm4K6naMpZfMxcMGBu5npY
+g+CoF+e7YzGgC63N7O1YwRKr82m+EUDpE+SOd/eEaQIlVTmaQRJDeXoOghq
k/NfeTsMmBKPBQe4XJr6KUZxwIiQ7oaRuxcJYpu1N5klI5q9+CPFhQQcQded
Pq4JHlVPxy+5rL8ynzPk8pRdXj6cSSD0F2tGP5hwaJJ28vYRPHs/W7W2zgyp
uSOSB4LqUZ7l/qoZnDPR0pUYAp5X/oNw4SQehqlLSxIJjn8tGw5Ms6CG9T3v
LiPoKx9v33PYitCDfpq5AgK/7w0br2ZYsWDZVamSEqh7mxUDXVaskz932sIJ
ApIkcaVcG7aqlWLZDoKWrJ6V5VwbrqkiOrZ7EjhEb51xrA2qhCJxUwJBtrMz
orDAhtb+ihRNBUGnT+pt/TYbBjUhPrJuAvZR7sAtnRVL/KaRGw6CY1XcNmWZ
Ff//5S/oTCvK
           "], CompressedData["
1:eJxdk3tMU3cUxxFUBGmoslAfuBXByBhDBBUziQctrDwUwVIQH/hAkEYQ5oIg
xuJGQBg4lPmKKBQHRIoV1omPBD0ZEXvv797WbbiVCfb+IICTNQyNdlNBvft3
f5x888k533yTb3J89+RtznR2cnJaKc5/arKmDyQLBK0tT1+V3bNBQcD6i3JX
DgUSvLQlTIDh+LvmkTscvi31PKHrssG70TvbzF48Rm9KcwRbbFCyeH5fiYbH
2BnPAudRGzCzVw255PMIpujXRYM2MD7y6m7I4fH1pct1Ff4ChBjyBjP38Vib
15Km3ifAl39keB9K5VFi6VnhYxdgXEdfdm/g8aXSpp8lo1Bo6rsCkTwWn242
D4RTkFeU//JuKY8dHxyLnZZLIfDB8SnXCQ7PqbdnkR0UsHFLa+5NDqVRU6vb
EihMhTYal2s5lLlzkiagoN9qepUcxaFGgSGdIRTsH8dgtz+HF6b6WH0AhR+2
P+5rqybYmxrZfETMm5EkaJN3ETx13YNfuJeCNqDUbggjKPs15TtTFoU6N/s3
7isJfrb5LHdAJe4VE/9s8iTosozlJWK+5Xdz4K1JFmt2BqmOJVJoCGov8FAS
9J0vszoKKfhHjCms5QQN4T/fN9aJ9zqPRHkKwY5wY/+5Kgr5S6RbO/wJzvRL
v/btEQpBso0156UE5eann8oLKORcder8/i8Wt4z3XH3USgGcT86t1bG4Lk5G
XdopzA1e4uG5mMXh/v6mWecp3N6BpUONDHrV9bRXfEXhRb1b17LdDKYodarC
QxRuFK4DbzmDhMyOLNtPYfK4RYqsCdXPRwbjxH679Nocx78mLM4NKOpeS8Hl
aFpoehaDTQ3OfrIICkWtXb0r8hnM/DD1zScKse/qytvKYgZ/0tgNligKa5Pk
4xkip/c2/VYu8qLmNN1ZLYM5jQcf1ous/MLUOvw1g3+PZNcMif4BQ4NOUcSg
ejJBo/aj4JVd9SMZZTC+an0i+xGFNlWP0apmMeJM7swSHwqdY0xltp7FUI1S
HbSAQoIP1p7SsvhGEp/5uSuFNVfu7jcnsZhwaUxt/VMA+Rz3OScdDEollWUn
6gUIvcZVv41jMeb+zozrCgEOh8n2TvclqHpyYfSWmwDMuDF5woegd+Jux42H
Nvj//7wHQ8rKCw==
           "], CompressedData["
1:eJxd02tMU3cABfBKsUCTBcoitKsZGGC2YoFFInPCahSFacwizCAsGjAy5phF
ESbyUB5Sqzw6gnU+ho75iEUdiESKlRxJhHbgcLS9/d9/71WIyxzgikSIgjC1
fvXDyfn2+3CSs2RnXkq2l0AgWOHJu96oaV/9hcmBI6Pn/49Q8jDNmaRhaxg0
/c6uuhTEI65KG++2MLhcEl6ULuRxm2v8XunrxKyFqZmc5aCfqJ05/SWDY/+U
PhQbOPhn7Q6K3cJg5Ycqi3Yth3vCN3229U6M9MhLfP52IXzB3NSDDicOF1db
WjiKwwFDjYpuJ34eSGIPWSgqJJvKm9UEz14adkU1U0TEPgllegjU5dnbg4sp
NIKvW+/aCOr/7e99XkChH8yQ8Fkswn/bFdNnYjHbG3OnPpui2tSceyWPhTGl
9sWdTgrxq3ndgzQWyfPukJyFLhTua4vVvyF4kpvRKK+lOFqS8LkxkMX+pzEn
xvdQ6FoX6aN8WQTemrleb6SYDmuTyKwEv9znL2yqdeEvWtRaVUIQf+2Yt1jH
wTugc+yRhUAutt6o8uERWXiBfucmaEgY+/jpNI/hfe0npEaCvE+MYafUPPwO
9GtTuwnCZfoO1Q4eZ1IXf+pbRtCxcFHdLTGPpcPZi/MVBD1R5scpHv9PtW1P
pIxg8wcVNVIRhzK/qJ0KP4LSaov/D89cCFoROb5RRLBgIm2J2E3hsy7kq8kk
gvbKCuXxXIoNhpDBkzkeX7o6h4yxkBXNqAq1BKMpmq70ZBYZiRVbuq8SRI/P
T0zyBPZoh6rFi0WouUDp2OvZW50+OLeNhXx42Fx90glGVur4Q0gRqxE2pSmc
sN40lCduozig3G4o7WLQ29lfFnqNolLXeEkRwEB+/tFSyTIXbqe62z8bcQAX
RV5x51zwURle7c10gN/6a3D0kAvedX38hhE7Lse9yMsRcsh/3aC90mKHeat4
NELKYcg8qH/YYEdlSJ397EEOEp0mK37Ajphvv/moKZNDpPXM6L37dvw3cNwg
OsrBaikIzpi2IcFrR+KRLg7qtqmp8uU2KFaeW5e/m8eELNDhv8rj6VsYroZH
/vPMCMF6B0QHfyz+KYnH+/94Cyk1zwE=
           "], CompressedData["
1:eJxd0mtIk1EYB/A1XU5REyMbSjrFnOWwiwmCYnOKmqHVdDqW0pw1i8QbNFcG
oWJpYYEpJlpeQkfaKOZlntfyycsMi6kR2UJbbznxQklJmjXneuxjH14OP/7n
nOc857y+8jzROSaDweDjtzXqlHlqZxYF6QHn/dMCaRC5mNq3/IMZ/8/dq5+P
JbpQELGQb9LwaLDoSwuSHCjQerGH+9EP7dRjSiYFfptCp6m9NGwL6U0YYFNQ
oh6OPRtAw73jofdP4PrT4ctGZ3RQzeXNXfYUBJORGQ3OVxmqW25aCIRa2za5
/jRIPnLkBxgUGGbreCY/GpjTwY7kG4F5cXXJUy4NdFWnbHGOAJEZkoW+NLT6
hBZ2zRDQZb/JHMH8UlJDE+8DAbWjWT7kTUOtTSVlviZQ5/lzMcuHBrcOTvrJ
MQKxiqUrYZhnJa41M7oJlF4PKr6NZuc8lsZoCRTzR8fEuJ9nV6M+5RmB5nnj
9jW0rElv5vcRSD6kaBNh/aVrt1bOoMO0wxs2PO/ghQ3zQieBl3vsOxywn/o+
3uRuHYEiz4AqPvZra+GusLFe7dSrjEi8jxbXnl9WzOVWEjWH+VFHrkrZS2Dg
VE18Ba5ftrOKjYMEjO+/3xBgHjwpqYzTY/+cHJUNXf0lNyYf83bJTkUr+niI
rjK7h0BGg/WiBPefeDCVFv2EwHP/twoB2puubNRoCPi133V3wfdN7W/Nycf6
s9J9ki58z4rpubJadHSK3boWnftHaInA/iu8WAol2oVjMgiHCDCdU9zfoT3K
1u88wvsV8J0EEejBtB3U6DgBJRUeX44ujGRpWfg+rm7ltQlYf1EkhsAFAquy
qy9C0NOZ9R5HvhKwTkg/sXG+ihWXun+FgMWSK3JFJxweNxf9JlAQdTDMCc/7
///6FySqf/o=
           "], CompressedData["
1:eJwBUQOu/CFib1JlAgAAADQAAAACAAAAmVVvfpej5D8ywRgnG7XTv68cA9KI
pOQ/fEfiB+K307+CUCc7Sn7kP0NaNbuS0tO/DBLNsDx05D/5RDBcOULTv82E
RTXOaeQ/fNz8sfGx0r8aBuZlr2nkPyTSNFtPsNK/kEOK105z5D8SU/EXionR
vzomegtgd+Q/Rk8FCy720L/4nQF28XrkP+vx30LZYtC/SlTpCPN75D/3FVTd
GTXQv9XdLnXtqOQ/qxZtwjlAzr/K6/7SOb/kPyhtoLtIIs2/StIa2IWn5D/6
+CuFTd/Kv+frvWpnneQ/bFKfZwj0yb8/z/CTBtPkP4bA33bN5se/KKr/zpjW
5D/sgCta9MLHv2u53FUNzuQ/6xY7swuRxb8AlX/GyufkP6m/LVS6UMW/ie23
Ok4d5T9IwQ3Vo8nEv8klIXCRUuU/b4IXExpBxL/KT2cFVLzlP3+637muK8O/
WH8p19Hw5T9TBCEizp7Cv8jk4k0MJeY/MOmnRnwQwr8wog0HtIzmP1ikd96G
78C/aW2rsBa05j+x3n1jaX/Av80+9k/ewuY/LxZZssRVwL8FSz4MiMfmPzLr
NFEPesC/JRxx00rV5j8SqXZDcOXAvy0bkcse2uY/Q0L7WzYLwb+EkFlOs+Xm
P/xbbPb2ZMG/UZlI+XUG5z+/bdK9MGfCv4c04VPzJuc/P7V/cLxpw79cm4LM
AzDnP6+LITpQssO/Du6fpyXG5j9ysYvHVtXEv+wF//c4W+Y/x0URXXzyxb/j
2NkmXyXmPxLEZLHZfsa/lYiqEUTv5T/pc2p6vQnHv2PYc2EGy+U/YGEc9JZl
x79W9VWYnwbmP4A4HA39ccm/izK1dS1B5j/vPyx0UH/LvxW44qGtYOY/Z7qB
IkmezL/cmPeTtRXmPx8Fyutcg86/pCfkcHUD5j+Tzdk+//bOv0gFXMLcIuY/
anCv9W/1z7/ncQ7AC0LmPzJ2+JcAetC/tolz2Z5k5j/eGRKBRQjRv6x1chlZ
8OU/7CVCLIqQ0b8mACBrIHvlPycYjyq8FdK/Pqs86ipA5T/jQmHXLVfSvyoF
Kv/6BOU/KNSWeNqX0r/aryI3gpPkP4ZhFwUIEdO/mVVvfpej5D8ywRgnG7XT
vxx7uto=
           "], CompressedData["
1:eJxdkmtI01EYxmdaJqHgtARFzdtMm1Kj0kX5tizFwjJRw1JclmHroo5pOp2X
TTI3r128zW3djCFhag5b0lianr8XErVmN0Rox5ZOzRS1sOz0tQ+Hw4/nnPNw
nvfxSE6LTtlAo9GYZP3b+Y5zUUkZGFyoCZ33ewTrVif88wjXH2R4Cwh/6J1S
GPkY9lXjTPkUglvK0eqqdAyHVKVNTDOCxSX6l9NpGMSgyWpcRcBlH6YYRG/p
ftum+41gTO6i/Ezeu29a8nX4g8B2frSOlknun+SN+NEpeLrbaUIkxMDLfl1Z
YE/BqbhyU0oeBgPTd7OTGwXWXp2jqQUYXq2fO9u+nYJZqciSVYjBVqj3CPSj
QJ2VNHFNgqGoWXqdFkiBwJy6KCvGoOG1zjzeSwGP6a4fu4GhKlRY8cKHAjdj
xipdhqGnNTyIzaKgjZcwE1mGIcKo7tfsoqAhPj5qRIpBninOc3em4FJZTktW
OYbnVl8HSmwoSOvVC0MIB3l6CcqtKGAOr9loKwjXbrynXUegCI/9ZiBcdKBv
LZiwq8AnsZbw4K8zDjSSR1wfJ+Eh4bnLOcUrCwhiG7t/Soi/b3CF3mcWwfLU
Qkwn8R9wnVdvm0cAWoNOSPyq+HaFqo/k/JbJ8xdLMaAdUc4KCkE6I+zdIOEQ
MQg2dSFwSZ0UPSnBMOm9zLupRRB9dLBSQnR/rnJltRnBgxTuTn8x8eO2y55V
IkCsDrsukmf/m4yO41UI6MOs6RqSdzTDamtXHQLPxJJxtQhDcsCnO0iBwJwf
6RmXi6GJL1s31yOw7rGs45B53Q6zCJNoEARcWDvmlo1hP3eab3qJYIjDCV0h
81aqOvKHWhE0PGIJ5AKSb+73u9k6BI57DGZboutV9hYx5D9S+ysjEaRvfQKv
jCMDCGqQ6aqE9MfIZv8wjSP4v69/AaiObaE=
           "], CompressedData["
1:eJxd0mtIk1EYB3CdLkyrkYkgiDOlKFOcSlhKProsMY1M89bmNcOVlYribTqX
87I5XTZdrjRhzpICIy+VeQ3zktbmPpzSSux6wCyWk3AgaT197cPL4cef855z
/ufsTs+OPs+wsLDwxO/fKLJMGXIspbD0uyRLpSTgZg6rsUT7Ks8lGdDcWJJ9
HJ0R6mGeQE+1SyU2Vym41NGoWfS+Hbc80isoqO1MLX11BJbUCQEjEgrxzAi+
UEFg2PGl+mA1hVoea9EBnZjovcu3hoKweHBnjIzA43Vn4w8phT9bdXf51QTW
Yx2T7WUUvFhb5IxKAkfv8WPH0RU3I80FmC8K83itcgoRjyyDhTUERA08/7V6
Cp7G79OnMJ/iWHVzFRSSlGVHN6QETjSGHbO/RsHai2MjRwcEcOME6GernTlu
OP/hyi/X8gYKEuf5C/1VBDjsr/aK6xRKv+R9E+D/xDZuJ3VKCt19VqsPxATY
MgNT0URh2WiYM6K3TSaGi25QWGd/5IeWEVCNNWmmVNinocfBqZiA/8rM/Abm
3lT/WlBIYLZoLq+tmcKMtlOizydQOclwbUczu/qEPWjr6fG22+jN+3uEWrQ5
+oBfPs5v6c09/e4iAZcp1naK64c8WVbrswiky2Sf6hspHEmQTwSh43NFc1rc
b2Hm3pzP6QR8hKn7zXieDqZq0Ra9Hm7bWoR5YJZwYCyFgLuPV0Y55vrxNx2a
VAKalIUVLTqmd23heTIB09DTxTPYz4uSrlEnzAX9g3eWsL/ZYlPd5TQCTbaM
kPfojcOdwVG4/odm9+YV7H9gWDefeoVAkNZgEtdSiEzMLE3G87QNFJ7drKJQ
8PaVIQ774BLWIQ2+F7vYtUBOCe4/Q5fGFlMYlGpGYvD+k0Z5l/JEFPx+6n1N
crzv/97rX8KGcDo=
           "], CompressedData["
1:eJxd0mtI01EUAPBpKrp0WbocspJ8pVMsqPARcqwGJvNRk8U027SwkDRdzcxZ
qTMsaYi0csqIhHw0hR4jrWwqZpbSmlkO53//LR9x1aXLx9J9ENbd1z5cDj8O
nAfn7jtfzM13pVAoUfg5Y3ZNS6YiAcFDwwV6EJOAGevp6lrsj2X0b2nYTfc+
zEuxy5scyQLs8BCxdC0UAWwMH5oWEZBnDjLE4HzRKz//tMcElEbXnrXHIxhN
shFmCwGGlJDCPgaCMDfmOJtvhM5U32JPOgJvwVIG12IEP9/eCSq2i0QplWD/
mU2r3Y4t5CmENdirkwUxshgE1/NLWXJPEkymX7SiIATZqotUloAEuVa0QrAR
zFS9/JEjIoGZ+iK57RyCJOWCWsYhIa/VblUXIgiOkvg3SUiYtAYwxvi4//Pb
kdWfSVhOV2WlViBYlw9UjzBMcPlkQcrOEgSBi5sJiadMUG7Y0HVUIngry7ql
bjPBG/kES6pFsEzlaeK8zNAfan/dgO0zNG3jYA8mlFseaZ37caxF2PoeXmg7
Nk1j38HFnqvq6G8MmAdzc7NLM98EyNU38Cl2xN5ntH5s1petkllsj9buE2XY
1ODwune75sEn/+jdSG8T2Ns5bvQFBEqHatCwRUKizX3NXYegK76vuziXBCFF
I5bivJ7NZNtoJHzirHmGLSHIFV3qvdJjBGt2iUwzjuB9wf44qsIIXkKPKfE0
vn/sTcaq0Ag8+e4jjXjenwdczRkrBAylMh03SFyvpf7q2CgBXb9N+ohFBJm6
TU2ijoBo7h41YLNG4JH2CQF3tpSzcyMIYi3fxXXe2OsNwQ/qEWw77tAI9FNw
f1itcLpCJevIwW4jUHQDtjydP+B0y8HKa3/P4Hm+Hu48Zp6C///nP2NtYeY=

           "], CompressedData["
1:eJxdkmtI02EUh+ctFdJpE2saire8rOnSGeb9gi4SCldCmh+8Z94yRXOFYdZM
xSRQvKB0U0O8MP2/UygcP7MaE2eFZphZ9OomllH0IdBJ2tvXPrwcfjycw3MO
r0f2ZXmeOY/HC2DvXzVwIpktUYO/bR6s96VoNljGnetQIzunKyzdncLF1C/t
zlVjeEmWuudKkdZWInH1UuNgjW/CXQ+KJYWKirUE69MuozveFKNl4iJKCZq4
1s63bN723pBGt0BA79cpNv0pHgtf5zi3EGRFE8EZP4ou94SIxmYCu0yBPJ3x
l48Wt2ZYbrSaULxj/d3xltZu1QT9yyUv5Gy+zIwvKCgk0O9rOzzB/JT8bd6h
RAJPfmj4lhtFmFC3KLhOoPmimzMeoHAN16Q5ehDkbaYKTDYUkc6znieNHCxS
bvTO8Smyymutj65xyPFxUMWy/c77rZBZLQd+4XK+LduvwSJG/vUSh/6pbPtF
LwpdRr34SCCH7sTd/ZyI5Q59UsWnMajHd61oEEXZVW58PYKD7YkfT76JKZ7/
bLWS9nJQnXbQBjMu0lrVOQUSbMyeCnkqpUi515c1kUHgPb2lCw+hmFnWDCdn
EkTPKwsmj1Ecn/B56FhKoFxZEvsFU1z8mJ4UUUVQXpm7OMK4R2XA6I6CYK/Q
bH1NQrEQ88oQyfiFBbviFMYzzGanDMXsHtpfy2Us90mKtFfqCfwN9qIK5lcx
P9V48xaB+6Zovpj5/clvUgnHCM7qszaUgRRGGbmtmiQYGiiNvcZ8q6TxFj09
BG+eyWs8oyiCRJ3fS7oIfn8W3lmVUZicBhpGjAQfokKFnXKK/tqChspkNXSm
6lVJKsV7M4UsrkWNdnSO5idSPJBX76a0qyEaDBm0Yf7//8e/B9ltRA==
           "], CompressedData["
1:eJxd0m1I01EUBvA1pGyzzOWQyFkDFRopjUpbW/s7s2hjrk3rwxyhiWZGzJWZ
UdiYoBO12iiHDkXJRi/TXrYltURdtAxkvuxDTgeiYSTOlxIabUT13K99uFx+
HO6B85zLLa0qKKfTaDQeDrnTPYF0x9Ulyqwcsd8U+KkagZjuhCuzBZtdsMQ6
9NUNDyp3WwbggpzaPFLnBWJm4476qTXjmroPDvJHuxhw3ZvRicew7vqsPg2+
ECeJknpSrCpVCXsPjDe3wSeC2r52eHqj1WOCbW9vuMywYWWZ1QT37J1Ls8H2
FfvTe/DwWV3qECx/+SVM6k6Fx84W+qly3w+tAd40+UScCOeFy+01sHrbwnQW
3DYvNOjh20d8z0tgVYbxUiMc0o6Y1LD/Z3y/hfSLV8+4YN/xK9t7YY1NnEmJ
/BTT4e30kvm7Q5MJsHsf5/46TLuraFTC9RWcjOzqJeqd4szKKOm//OqbDL52
qHlwAg7f6kophqs7+wsHiOVVTVp4zM1xPoBfs6S/dPCuypThItiomVeVwe6S
RLoYXrDwDqrgni2GDhF5v1qXcAwOllqZM8gj0vDbdx62mPabe0lew8I7Evg7
f3y6Ap564fGdhMPRi0UaeM9WhiYLjh2b+sOH65OZIS6ce2qjdif8/rRJngy3
iBYbuPBnqzwpgnkZhS2949j/nMrJ/AsvXmZJP8ARWWZ+GHawc6LtcEAqkJJ8
zmmLP3XAD5X6vFWynxhp2TM4l65jkzx38NdNnbBSxnn0ET7Mc+e3wv//x39e
F00D
           "], CompressedData["
1:eJxd0mss1WEcB3AxRLUuXpRILknlkJhSTn3r4EWdDVk1zTG5nMolRIWySMol
7aSM05TLciaXYSq1LpLOOSkZqc1i2f/5P/+Rk0pymTrRk5e9+O3ZZ893z/Z7
9rWLSAiSGxoYGIjY/DvH53y6m0wpyLOeUdubHIKVldee6Hm0hXSSRi2HmkS7
SekPHu9TAixNJjjc9Wx3+DjGY01OZWb7JIclyXXXBTOK4jj7uAAvAgdD+bZW
Kwo3u51hmu0EFz/Wjm61p/ga2e8pjycw6Wjsjfam6D134GxPBsFM8v1jd9wo
wi9U+H97SVAQb1mYdphi1+/tbmMvCLQmDb4dMRSZmXIr3QjBbPfCVNV1inQn
fdqgniBm0+tx2WOKriWBnd7LeKxylPQ8a6XQ7B4m8hU8RHk2S82eU7gbP3q5
w4KHKmna/DbzScd46zl2v+lEREnQCEXZcHpk2BjBVOZia36Gov1w1i8Xcx4S
zV7TP6sFiFNcPBrqCQIeDERdWCuged10dFQ5QZe4ViHxExD7bUrpXUCg3KHr
lR0REG/rXxccS3BWL02/nCFg9rdUmptE8EpSUtSVJqCmIL8lMIzAOCvwyvdI
AZqEp8uLjhKIb9zyUcUIUEukilgnAu4D79p9nuXPiY2MbAgqVFej72UJuNSs
GEr8xaHntE1VbpSAt2XZ6/sfcggkUV6+zIpC4pHLPFfuar6SOWQP/VHJrNX1
ndJ5C9hc6uyQ0cbhTKiP+2m2X9PP9bOztzlE78tpyWce3bjAuJZ5ZKhlUsIs
Un8prma2WPTmSD/7nw0+n112qTjc+BOqC+coAvrMUkPULL9l8KtbC8XOvt5P
B9n7g8rY4w8bKPT6oJnEEg71+2VNEykU2V3v8mSpHA55+c17s/jnvI3HRc4n
4ygUW6tKq09wUBuFzvdzYEI738//+/oXoAp4NQ==
           "], CompressedData["
1:eJxdkn0s1HEcxz2veZqnwsIyu02eGVbjfPSklJujlrKxzoZmwzVF1LjpTLhT
4rp5WmPZ7g7XHebcoQ/F5OzYkoeOuJj7/iRWu0V52Lr+7Y/33nttrz9f3hn5
yZlmJiYmfsb9+7J2Ts2mQgTr1SMN5bUUGpguzJYhEQjFbXIDn8J9Di29jkjg
TpHJqFUxhRHmMQViXhfshSUe2CRR+LRQXWtf0AVcQX3F2ikK7RoXvr9hSSHb
ybFGuUfwLutjSsVzKUxNWxwJ1wiKtuQPe7QS8PPde9HcSXDXtTVouUoMv2e0
3PizBKdWPSsMjE6YYQutlq0JrjYtHnqbS2HDzM/BUqfHTxO0zu1rUhhelH6r
HtfjrEPhYXeqFBI9fMZURlYfjFiKH8hB5u/csDevx7kC/krf216g60Lls0SP
OS2a4ltJfcD6U8k72tKjoNBwRJ/vhyWvyqXYQIIxToMnzocp4PiZxwIzGsFx
z0dL08UKSNWWMgKCCBYldIfORikgbV2u44cT3I+4sc/pUIDpXHhsbQjBrLpd
NSkfgOslbF1eLEHXlcxMn40BOHdlw84mlWAIw2Jo0kMJrYelibVxBC/lN0fe
zlOCmsWUpMUTTI1aDJ4IUMH8HAwH5hBMDzgpYKapgKcRVsYLCN7jJ0cHZKtg
wT2UfsHIzvbDXsoZJWjKXHM72gmqfMPtQ2IUIKbuB+84UhjMOv0hzrYfXBxT
JjbzKRyOHEhw5/dBOGHrv7ykkCa7aMgd6wFtaVZCQxOFag+vm94OveA2WNLF
qKPQbTK69MeTHninKTLVcCn8+dXuYIcnh1f50Snv6yl83bNq4/9MBtYMl7pG
HoWfM/SjVzkyuHywvMA1+tu9bm10TjfQW9JVv0QU8uMdrlo6SyCjuspW0Erh
MXaGreWECJL6kJlj7O//Hv8COStsTw==
           "], CompressedData["
1:eJxd0n8s1GEYAPBbS7RmrCtMdkt2lbJJo3PUPX6sw7ljxA1bbHS4CXXtHOJu
8yNxq9251B1j+jHCxSnp1hGWpOxMGJa932uls86at6RjsXr92x/v3n327Hne
53n2emcWJop20Wg0X3J2bs6XUUakCEMOV6jzK0Mw7JZfwyWWZ71t5hHLVucO
C9MwzCjrOrg6BOH2jvMrQgySlLpRsxZBYtw+gTUJQ7V/55C4BwH7VbQzPw5D
9tcNZvAQgrC1ivcNXAx8ntjnyjICXqyfITUSQzBaNG3SKdA2lbsMkniJTa2m
vChol9mn+qIxOFwQsQ6wKLDo+Y9tpN7lqrCMLH8KzBZJ0N0EDHFzm1EbMRSM
MW3mBmLf5wrxNrG3uClbSzxQXvzTgUdBxsRIAjsdQ/hnyxaD5Bu7HzorcjBs
mWJclpwo6Jy+HXWwBMPYtxcqV9JfxbChyybHUHp9MFQ6jqBbFMvIrCHvewgM
k3oE951cx5dvkn14HkpitCOob0if/0Tc/0gwwGxDEMQ2RoUQB/D/bDfVIwip
bfmhuYVhD9U78y4ZAeejKZOmxJDg/uBJ624EzO99R/tJfbnmyD0LMWc5eD2p
AkNaqM58wweBY2NELasMw4juZc3SGbJfurtkQYqB/VpWppQjmOn1kc0RHxu0
eTgqEOydHep6U4QBWvXHU1UIpifZ9f0SDDr9ifjFRgRCQ4DGeBVD/G/TVJ4G
AU1M79nxHbm61Y34l7UofL4Qg/LahNSrGkGtK8s+S9wcqHq2VoXg3EXTycp8
DAu5+88GliIoOd3rEEjiKVp7flUBgo11dZtHAYZKlvvqVAaCD9ZkgSYPA8eY
Rou4hEBxar54hfipZ671r5TM+9//+wcuxFOv
           "], CompressedData["
1:eJxdkn8s1HEYx6/oIuRHfuTazJU5ldpobTlt7+4YCiURlaWVn6fSj9Uu6pr5
w+8VwkzMZEpubdf8mM5iiZBhKc4+H+2+H9nMceSMKNW3f/vj2bNne3683s/z
iC+nRyZuFggEXrz987sKhL2GnQw/jsemKW4QLE23VAWvctAYXMoyqgiCVypW
vaY5xC+07pUVEbyA+jrmOLQXZ8sCawnG7b21ZgYOIpXm63A9wZqROGRM8PV5
hTOXSgguRNVpTbMcNs3fy7V+T6CQfVH7THF4u14vlAkolMGGXinlYB3jHSW1
oOirGBDVD3G4lb4c171EkPwn3UrUz2HQz0X+c4UgXjM42aPnYKfTn97tS5G4
2mnpu8ShsbZt8tMaQWTlbKZ6K0NURNjNWD7uONcr3eD1qI7tEY3y+fHXFGGj
PH+Pk79EfISirMBVksPzFYgbi+b9Kc62yL/38v30phylVxBFmoWH/rMlQ/NR
9w/xByiWHVtTREKGX9VOuVkeFFrPupSM7QyRobbbtthQNGmC1sccGZx0wxV5
7hTRhwvk3xY5dFWYcu3DKGYUyuI5Xn+h2qrsKT+vWxt7N5/jsJ5Ey10fUYwP
zDzIXuOQdCdTo2uiaMjJsZGaM1iqQsMD8ijyT0pGtGKGyg3leuptCuMJoyZO
wvOpL851SSjekWfN/j4MZEgyZmNNIfaxexwQwTB10Nk814FC/tHU0HeKobxE
d/VMJwHa9IET5xnMQsXR+0YIBP1+3TtSGfJsa95I2wk8s9xeCpMZqoxXmIy/
d1Tpw4TwEAZn3StLTsXvu2nV9340Q8PCa63xCUF1m2LU5M9QstiRFNNE8PtQ
iLBmP4OwdPK5WwLB///2F5z4Tsg=
           "], CompressedData["
1:eJxdkn1MzHEcx49xFTIhF8nyUO6yauRhIp/VFq26uPJw2ijGdB7KZJiEy9L0
ICXpQeWSdnPt1qErO+5z1X2/56E8lJWahz4N4doxD3mI5udff3z22WvvPz6v
7fOevT0ldudokUgUIMy/7T+dywbOcqwtmvIs71sfOHLuTWy9wfF6VaDvVTHB
1GD/qtZujokzI6VWCYEyzmx594ujIa1z6wcpweKhsIRFXjbU9koiJcEE6tUT
bvlF2zDjkS5lRyzB3SUbEi1FHPV1utLfCgKJV3yu+BPDnW3Z7glCnqxxuzYj
iONIoenPvs1CPnJnwZhDHGMqzq/WJBIY3s852dzEMaQv3/FjF8EZVYy7Ypjj
wstHvxxMEe59rVAaQmw4oXF3rPthgtDKVmPfCRvqelqceo8T5G5f1y5+YcPL
YVFfJ2UTPCgcGjQ22/BboFLnqCAY1SIfHTrJhvH9cjemJXCx92zZ/YFjln+9
+U8WgWdm8QtLDcdg1Tuth8CDw9/TVyVx3H9vhvfzOgJR5obhAhlHH8dYQ1wH
QcTYz76DkzmyZ19Ux14RpKtXmDM9ON4unubo4ATVylMNxpkcP5Zs0rjqCbrU
B2N6vDnm/+zYG3SMYJbkacGgwCuPnp7PjhC8TzWEnbnP0CPleJle4G0x4vIB
YqjyXNoZXU6gXVoU7adlaFZ7HtqYT9AqyVakpzNslmtO3MwjsOSV8OQLDJ1y
2o3SJgJZ/7q3bzQM5+7QL1cIvu4Z/a6FCQyjqoNka9sIchxuLT5eDEWmruoD
gm/gE4m+uteK9aq9l0wWgvb872njSqxo9HIe72ci0MXLX55ab8WoPYXr6xoI
nJMjr9jDrVgzHHZg3jkC+9Q6Zfd0hoeLF7xsjyBw6swNilczVMvvSCmUoFSX
Zq9cw3CZYlmqaCFBrThrir2God7loum1K4EvxYUHlzHcH6dSGmTC/0QFHQFm
htEPpRk3AwT/x6mNjb4cXZIKsn8N9cH/ff4L5syOUg==
           "], CompressedData["
1:eJxdkltI02EYxqeg80JtplHBLjIy0XAWw1NUYJHakOEJZjF0ylw5MyHYtIbn
yNQhSsZmS81MRMTM8oCoPWoZaqaYoyzy+/b9ISzPeZZw9KfLLl5efjwPvBfv
zzs1Ky7NUSAQ+PDzbz+rN69JOVxZXc8XXiXYXu0/oD/GIcZeNvz9FIFPcPPL
DGcOxi/yRKuYwIQx88YOg+vo+VBfCcH+XrQqcolB3Fts6RcRKJPd1y0zDOXV
b9z/eBAczbT771oZdC9Gut9+m4NAuepwp5tB3nRRdm55DtJ3dYmBPKuUNZ1s
aQ7L/ctccxeDf4KXpZTPD35sLOqsYAh5v9mQ5EdQ6T0WXneTISZY0eZfQyC5
b3QtiGe4NGqWlAwQaPOUJYd4DlCpY3Y5gq9LcV5nghhaJdcTRAsE6oWEsqkA
hu3xW3CzEky0aB7ojjCc7toaEK8Q/Hg+w13wYmgevGfqdKVwjo4s2Ni0QWvg
oj6IKRSVRjsWbUh3av+ZE0ZRQfyE7QKG7LN9r+vzKa5VIfv2ng2qsCF922OK
st+aoHIHhlnrcNWNhxTTjb8mS3nOyX9C03h2qpfbfPl7AVUjGqOJYvBu4V6K
kMEwI9tqAUVuQ2Csm5jv1xZdbpqlcJxPjRNEMajT54dieygieuZHtQaGlRbP
GkkqRYdUVvs0lyHcHKqjWRR9TpvCjnKGQL36kTqZYi0v0+94Ov+/YofFFAuF
aFpjVpgYTu6ExIv4fGowct9lkmEgaUIRsUGgcNGGjHtw8DwR2mt/RaCrFn36
zPuScbhQKeV9+d+fv+7pWNo=
           "], CompressedData["
1:eJxd0mtIk2EUB/A5l2ZNXOEHoRTzXtbsgqXDnFgKTQdp3ojK27YizdnM8lJW
aB+y5dAyW4GOsqJYOXPRBfRflCFeMOkyfd5Xed40KcwZ0WZpZK997MPh8OOc
D38OZ02eNlUtFAgEwXwt9i+m0rLKAA5ieWS/KIkg21Dod9uLw7302hZBIgEa
C2pi/lAEGmyFklKCuCV7XIc+UgwoIzLEaQTWmY5yWSfFppvG7p7fI4gcd941
36AQuk1Kez0I3q6UDD7jXRbnbR/lHW2vEXSaKDwVM+pcbwKldsIrwUIxI3os
fuRHcDHfbC1opxjOor6j6wj2p7ulTZ6nsBcvrT4TS9CZORp4/xJFS1OJkksm
CIlnPvXVUtjWBvgP8nmTst8XXa+jCC4O1T4sIBAqVsu28vl2Orbskn8jMJ/K
tGaBouv1+uqU5QxCF2j4uQ6Knr43L2aDGGyc0k8f4vcPzjnKw3hH7j5sL++n
qBeNWYUHGPSI92qMvRRtZc6qCgsDW2Nw/tUPFBEG1aunXQyifPwbdO8oYhPI
WekIA+VQ0NzLMYqpqYE7rQyDurxhzTCl0Km8Ngf8YuDSfNQYP01hVanNcl8W
J3IcxhL+vjb9V3eTk8Hz8b7YHE8OORlO18pkFv2fJce7wzmoT5tEYYksUk56
S2UbOGxbyKuS7mOxIumyZoeCg9ziM9GmY7GqWTc/wLsu4btlu55F6k/NPzsc
4+2Ljm4Q6muOcVBIYioeaFnkxrVd6+LnT4Y8Wus1DG5dsDTpozhEzApDin4Q
yBxX3DpCOLirls27HCH4/3/+AtWaUK8=
           "], CompressedData["
1:eJxdkmtI01EYxmUVNsNYrWCKNQZNTGez0C6ivZSpRRm1S6uV6+9YUSyy7IMZ
zKAblYbiLe1DK2q2i9vYqk2n3YQprGUKs4xpnmPZ2hAdK4hBWa9f+3A4/Hje
23neI1BXSk6wEhIShHgW7rH9tQa2k4BaILMFlBTyLAWjPBcBSeouYdERCmZ+
a+y9m8CKptdxH7Iuv90l8xBIcZZa8xQUQn+af9X2EUhTceoeI6/85Eg51UuA
aDqThVIKdpjYyGA9Xs9uvwZ5MX/0erGdQNmPZU9ysF7iOYOCsRHgi7Y11mN+
tJB/WdNFwNkMkaHDFGK5d1/IUU/K3PlGinpb6HRBDXKm9e9wQE6hf8nbYIeV
wNgcx/z8EIWDieMOYiEwrcvyfUbOCHUNuVDfpNvHjckofPW4S8QmAh6DLdqK
9Rj7zystyGlsk4jBfr03p6oHMX9uTeRVO+bznMtn85GD92a4PvRnS7mFlY7z
bXezL0xjvHaR9tnCfPEN4pcl+B5/cKDhAcY3VelLTRjfP2HcW4nxFx+55KuP
YT7DYX0zEjirWutPV1G4Gt/hXYX6l4/c4XXl6H+qobimk4Ayll2oV1OYFEya
c8wEqrwhAauCwknhfLMU/VsfuKS4g3zjftKM2EFgKjzCshyncH5W4i17in4d
8MjCDIWGxmqRFPeRHTImd2D/yGZurhI5K6PnXRjn+93SN+7tJsAU1XXrUVfR
eP8A7rfeJXtYgbr+NrVoUNcuPTPyHd+3dbDNcAv3ee3DfHTPUQr//59/yq02
xQ==
           "], CompressedData["
1:eJxdkltI0wEUxk1TSjIsMJ2ITprgJQgkbytMW4qXLFOJ0ExQzNW8zCwVw3lp
hiKUl3BmJFpWipaVmrQHv+UFbS6mjHOWmC0xMruAFoKKYv9eezh8L4dzfuf7
jmd6XkKmtZWVlUSof6od6PD9foRQ2qeS0S2GpCM/ROtKGKw26tpeMc4sGHoS
TxHuuqXZ9b1gIFAx+smZoLy6Vpn0mpEwrDLbHiD0BIcseK0zGqezOmUnCBU1
44kWGzMKE5rr+oMILntq5S2fGfXFAavXThPMevWb5HmG/+G3Q1XhhFazRVJp
b8ZMmOH+SAGhwadRNCs2ozdsSVVZT5Cfd2wKWmF4rJnG1koJBztVwVcsjJ8O
1fkNNwjt4ctsZ2KkOz8YSNUQ+nOnxNuLAo+03GBjJAR5DofOdTFSY2abfzcQ
NoymtJO9wryRTe64R5iXD8XNlTFSHm64RGUQdthlKqSxDKd3F8ctOYTpl+VN
2kiGu+tEcLecYCwWefvIGM/NIrUin+B70/5LloRRVLvzQ47Av1Smb37vxDjr
kT2qUxKs/WxEj/Yzvg1OPNUcJxzqnnk85cXQuTnqtwIJLRHt8ShmZMfJTXOC
X1K35TZtEWOsXy7RSAni3NaAoyWMmuikSZ9jBO+tgMxFof9cnVq7Gincc/tS
xK4KRrR4e/2rkNedZFtPdxUjsmvxepyQh0I3/eOPklGi9s9wlhG0IRUR83mM
lcmZzakLhKjYAj99IePyurIzJYZgyH6yz6GK0VcVuvuZwPNr8uNejbDv/3/5
C4nGTRQ=
           "], CompressedData["
1:eJxd0ltI03EUB/D/Mkkx28oyJW9LZ2KRFLR102xea1jZMilZpGZZJsO0y6ik
vGT2EgbOS1oRM3PhpmlqZX1ZmVP0CKKplcb4GdKoxMSUkC6/Xns4HD4P53DO
4UhTtPvTFgiCEMDjX64aHNOptxHyjbflE2YGnamh1SonCDXOx682Mti31IaN
yAhTua8UPs0MQWuls96BBHFC0Pef3DeirPnvfAnS5JWl09wRfvZcPy+C6dJn
i7aFYSQxedHsCoJaurr7dCtDedXW7X3cG0/9mqpoY2gaL7IMSAj31SpZ9DOG
8RMyw7HFhCH1HudR7m9FPVExjoSx9bEPrrxgyDMeih0TCHFxqplJ7nR76uaP
c70YErR771kZls0v71CJCA7ahM4m7rq38kaDA6/Pc4xK6WToZpEWD1fCec9b
osI3DOz60fg1LoQ/aW6KHO7J0P67RjHBNWBd8LkOhiWG/KxMd75f4kK3fdzW
9zr3Ym/CtWCZ3uU1ww77TGCfB59n6ehkObegjBku5K5ubo8Qc/eIrUUf/Akl
c8XZXy0Mg082JHUpCKU3Nw3NtTO06JVdtnBC/R0P8+/nDAUXDfNKFQHyHxdE
Txl8KlN2e8YTnCqzNKH8XtX2I1/EakKfQhNu5vd1supnLqcSmv0OqGseM0Sf
lfu2HSQMhOl26usZphuGM0IOE16KHtn96xi85idqz2gIOb1hGT4PGSSWMnNI
EuFkpotBU8vQEGmbkOwifJJkm2xGBmVFSfmqSELBtK4/nff7/1/+AqU4SII=

           "], CompressedData["
1:eJxdkn1I02EQx5dagglir0Sk6aQaiZYbuUpdqWGN1F6gWavEyLR8GyOizDQE
iSIQZxqDggynOUbTfqdzrjy3YrCyNKjUtuxx5RzzLbW0dGjXv/3xcHy4e+77
Pe7CzhUdy/bh8XgR9P7FXmW43jkDKPodNcc3MjRYMg9PTwLaqh01n9sZ5j+H
76WjgApv3VYj5a/PXor4NAxYl9MgmCROiK/vinYBFvcV2Auo/qjQnXVyCfCj
2bbziYHhyKPBHt0AYKpcXfUNGD51piQYvIDi0LeBYa0MbzX/KkHSF7x/zE98
xjB2skk11g54fDZQEMkxfJ1VNeX7jvhIRbh/C0NjkFKqMAIG1veeKNIxFBlU
6uEKQC453RJCzNsnXjBdAFxpsi4/38yw/3In33MVMHlMqCqk/nnz5bHd+YAB
SbWyEvKzZG2zPcggfYneeo/4trK73yUFnMpVJXrpv/pN5pfYdMAmnTRqnvyk
3ZzhXDGAQ6MBL66Qf23FoGBVHKBTskP7gebdHxL/c3qBQ8kP5ilvY+h31us2
bwGcuC/YWNzBsHL70OY1ixzKDlhLtcTjPfa7uX84zCvbdSOyk/Sq11/MDiK/
ceUrYroYBju/8kYOAjZUnlnwp7y8Xzw+vwewbyal1mZmqFDmjGlSaV+Hsu3S
VwxtD1dvmMgC3Nu4uFZkYZjU2hEaXEDzzfksU71k6NGzMk0RYHTENpee+mc4
ajalXwNUF57SDFC96U5al58e8HS4cJ2D2J0gi3fTPbTofHfLkeH/9/IXsJFc
OQ==
           "], CompressedData["
1:eJwBQQK+/SFib1JlAgAAACMAAAACAAAA+bGMqVj5hT/ZjDdQWJGHv5i6TFNY
0YM/SXjopTpfib+fZ+Zg6cuDP9kZ1bnf8oi/C+KKV1Yzgz80L2hzYNuIvymk
G0fmRIM/l7YkAfXdh7/k5XX27c6CPz4FGteGvIe/4guY3/J8gj9EyGBVUPyH
v7gFbdVgcII/GQlErcZrh7+bX0GXRgODP8gKTnGls4a/rkLOJg/agz/MWfrp
rUCGv3GuL7jGToQ/cbxvQe6vhL+ZgnQV9iyEP+n9H1rZaIO/s4aHdTuogz+d
N6fIIMGBv3VqIa9F6oI//5nZaHTxgL9uHzd8Gb6CP2n4hXcrYn+/HF7Bf+jZ
gj/za/B/EmR9v6GGSQdCt4I/77hZYyUefL9U6Du6yW6CP0M2clp5vXu/hG4c
0Mfmgj+DTLQ6TsR5v39Au8ka1IM/cUOSjurneL/KE+thIduDP4pvrbdfs3m/
nl30sWXzgj8u8lTpZ+B6v9SaRK5NAYM/U0fSFWHae7+CPm9qA0+DP6bFsvc3
mny/9QUax63Hgz+OwaUSkDB8v0/1qu0VDoY/SYTi9Pn1fr/WDaUkdiWGPx8a
RqNJMoC/vRflvBauhT8yxGNWf5eBv0B9DxG4nIQ/9F8eET/Pgr96FELClFmE
P2tJ3t5wNoS/Q1GRBrWkhD9OJUvnDiWFv0Cin+xCPIU/KHJfFTp+hb915hbM
4FCGPyXKhGHXiIW/2LNh0K+Ghj+vUvzU/8uGv/mxjKlY+YU/2Yw3UFiRh78t
Ph/s
           "], CompressedData["
1:eJxd0ltI03EUwPHlyuUU8m6RSwqVLJuZmSnhaVnKlHXRyITyMrxArkyTRpqK
NaaZWoki2ShxmGEXe7CC0I7mkKyZsv/++2uRK9Qapr/f3+wpRfvbYw+HwwfO
2/luVRck5ziJRKJAYVb3ibnoxTNZBLhZH/H18wwO4DW9s5oAlTtXj2oYTHr2
h0vtJvChHx7XhjF46I5fxO4JAvW9rmNaiwVnTG1lejsBdz0/ljNqwT7HnrsV
XwnYvVIebmAtqCytD0hbIEASWjRYy6Ap3tvNoaSQ4sLXxOkY3JjfsiM8i0LS
crCRX2aw8Iiis9pAobBOL5WorDjRELtiHKUQssvlXkAaixFr1XL/GQqpL44n
VdhZVB9oWmpew0No+5dhn1wb3i4QqfOkPKgfHA3yHLThnIGvdNrGg+ub4lmQ
cLifkdft2yTcfzuo0+7lUBPQpPMTXL9zobdHcHL579ZwMQ9F66YvuXVw6D04
9M81qY7iVY+0S0pC+inYPd9mvjRyuP115s+MRgqzhVJfWS6HLbc6BsJqKHTN
eykvm214ODaGvCqi4P89Tnazz4axM+UrXicpNFcuTukIi1OBp8vcz1Kwpr+L
TOxi8eMFWaXvFgqyIPm5dB2LK1cmS+UhFIplJp1rAosGj7yhUA8KS88N5vXd
Vnz/eZ5T/SBQ4P7k/qNJK6aZTVHBvwjc6GkdiWq3YrbxaoZV+IdC6qmHTivm
e1QlqswEJJ8aZdppBsWOOpVGL/jieAM3xeCxqs2Rw1oCbdnR8THZDI4rFk6V
CH0o5OK+p0If//fyFx+JMvY=
           "], CompressedData["
1:eJxTTMoPSmViYGBQAmIQLR+i6Np264G94+TgDWWlD+3D+jd2Xbz9wH7ls89s
CSUP7S+IHu/hvP/A/vX2d/0fgXylCMuX8o8f2PcfMnbcn/fQ3outeZ3Xwwf2
mRtsjzcUPLRf/VFI4MKdB/aCa5UeHih8aG/ldOXhtXsP7GvU3n/rzX9ov8hq
w8z9dx/YJ4bY+z/OeWhvqnr4SSNQvdb36oZLQP7pR0tVPIH8ukVrn1cCzZ/g
1Xjp+tUH9lPOblKrAvK1jFOrra89sN+uFpfxB6h+s9E9KbkbD+xb/l5nFsx9
aL9NLSvbDyjPLXWayTH7ob2zMPuP6IsP7IW/ic0oAPLPZ0TEPD7/wH7tom2f
WTIf2jP5vrY7f/aB/VXF7JB4oP6LG56t/HPpgb1x2ZrdjUD7pN/sirh27oH9
mZsONq+A7t/z6YWjz4UH9u++5L3LBPpXNMP3eANQP2/b0/jDRQ/ty3nKZ7YC
7XvwJ2SbGjC8fM/unZxxGRh+mb/97lU8tL9XJ6ZQCDSfOWXird1Avt/hVTMC
zwDDY2/a37yah/avPx+/yw+0rz19g/mF2of27yLOME46+cBelfUqm0T9Q3vj
ba5y5UD772YLH74MlDdvvxYqeeqBfb3tspBzDQ/tdfe8SGoCuufu9kC35KaH
9mKeWuvMrwPtf5HTkgU0n4t7X20lMDw3342V1Kh8aP+C58cn1SsP7Hm2Ld3y
A+ge9PQAAPpTJao=
           "], CompressedData["
1:eJxd0V1Ik2EUB3C/Kue0dlGuL3UznK5Fg1lZw/xX6EYWJlpuFRMc1kZRrW5s
EUIFkTQiQsNlYCShLEduhLJgeFOONcWtheL7YPW8Im61LSsxcK16uu3icPhx
/jfnHKnxUsOZjLS0NCmrf/3jRHZSmKAwHNnxqNjDwZz3QGrnKaRNnm3mAIdU
t6JJG6A4FBwSe5hXTln3S5idArtGPc6hWiHpWc0srojqRRMcPrXaMt6/pUid
dHE+ZuXO0sEgc+VaTznPLNsddyiDFBlxTW+S2XG7zRsNU4xs17iuhDn4+urb
il5T5G6OGTdNcrjcGekXhSjGtN6nWeUECzXtMRVHcVEz1CyqJPgz32KJzlM8
TyyW3TpIMG4qqh+IUDTWakqGmdOvapW5bJ9ZRcO7yiqCAsH5meNsvjDt7FRX
EDz+ucEG5vSOkMmrIBC/Cn1/GKOoK2u3Tm8kcOwzJ8fjFPKZNyJ9PkFLKm/L
PXav1o7SZTvzt6mp4mFmd7Oxv6+aoMe/6tfZDxT58hcr908T+KquPYstUVh6
uyq2NhLol+ZGk18pJm9oE0/UBIOFE4XLixQiqeJ6lopgr0RnfrmOR/gOOSE7
QHBXcNS1XsjDcNN/wc3yP47NRuI5PASmc58tLJ9pDY7VyniM1uXoEtkEu7Qj
gd9SHl/26OSGOQ4FNY3CLgEPlc3gO+zmYFWXOC1reJhc3fpMP4f///8XYHMO
gQ==
           "], CompressedData["
1:eJxTTMoPSmViYGBQAGIQveLpms45trv2L/U7GP5L7cH+67qb9BLNd+2/kp7o
+RLIZ3rmrA/iV/G1gvmn1q+cImO5az9nVd5bbvUH+wuuHLDr19+1/9DGxzvV
gfzGB7unhuru2n/tSJxKIZBvVOim2a63a7/P7p5ph4D86Ybre+do7dqvk5hl
OQHIjzHevVxGZ9d+rxJ3aW2NB/vFPKeyN6vu2h8fm7eIF8g/Fmz50Fpz1/5W
tr0ev4HqOSseJIcC9UfdEwgIAfI7jslwXgTqlzux2CYWyGf2UXh+RW3X/n2T
XfisgPw5S7awbVTetf+na8aDNCCfJ9Wp9Kjcrv2i/Y+5ZwDNT163eOMWvl37
N/xfrzcFyG/2FTHZy79r/42yyU85NB/sNwjuk9Hm2bX/VtzuIzuB/Fe7J6+0
Aqp/uEar7TyQHxAbmmogsmv/UfEf7RpA/iXRn88myO7a/87lCCc/kG/Ybecv
CbQ/qjJ3pg2QL3fJRn83kM//rz/zM4gvKDr1nwowvArKJnFpPdgvPTvX7wKQ
v7L6UuUEoPwCidQoDaB/heUaJLOA/CX//oazAvmukQr2n4HuNRPQ4/sJDO+W
B8UPbwL54akuvuuA8eH5zSlSAMi373Eo7gXGb40H/+ffwPhDj28APXMGTw==

           "], CompressedData["
1:eJxdkVtIkwEcxddY9WANa4WbTdi05mQJCV20y0xGhlOEbJY2vDTnotlW0paZ
wx4iNEeIi1GTEAczRmb2+X1b9FAHypRm28O6ETnJ8a8QU4YkXdXWaw+Hw4HD
4cBPbjhb0cjn8XiypP75Wue5maUyDjkfZYmggqDJr27c0s3B9bktlrGVsLJw
e7B9mEP16ym7NZuwLl1o3BTjoFFF+1LlBEHYluH8xqK9ZwLNEkLLkS614zGL
Pd4Pkkop4ZG5iVduZXGsDgrLZkJFrl3ufTgCW9NCfUxM2KvsL9PMM7jQyw70
iQj7u7nxEzoGruU3T0uTfXteTWoswcCSFrV9URJODWk94bcMtottA0E1oXZ3
5+StnwxuHDTph4oJirE8Q/orBr1OrdxdSfBIfSXffQwEv6ORtCqCSH9f+GCC
gaSwI7arhtBRdKbz+HMG72da/+w4TxCaSnI3fmVwXdXjlDUTUmShuNo9gulJ
Y1b4EsHso9P+JxxmQ9ppVTL/upIl7XQFICk6vOi2EZbvNVhD24KYd1SLIxcJ
wWsGfpU/gLk7hfElC2Gw8ajipjAA6yeKeM2EcWPt5ZfJvThfSdn1hCm826dP
8rAfcAikDYQ10jHP6AqL1q7iHzm1hMxSvflkgoVbtyq/XEe423IoEpFyWHxm
oJ1aQpvIn/JilkUm3xQvKCCMrr66vm5D8u/wnL1fRfif91/e6Rub
           "], CompressedData["
1:eJxdkm0s1HEcwI/JsdZ57mHUMQ8pC0vkUr5FN1tIHkbMKcpDVJ6ah2RqHisj
alMi6zSJI6ZbRfr2cFF5+p1/8hj5/a9FM0+Llrkr62UvPvu8+Lz9mEXE+0Wq
czgc6zX+2WcpocGTYOv6kfL5bxSEwwUZVQKCCt3HcYoBCu1GMpuD2wm+EiiX
pt5ReCvtGio2JJhtdjpbJaXg8HLDaJEaQdfCrSLLGgqiTgfZItOHdbxWnCml
4NfdGcFV9qHmKZeyrhQKU8FOu3z0CbZLo3mJIRTuFtsNVu8l2JQeYGpoRiE1
+5FqEgiap7kaVxlQ4BQqV2PFBAVlRRqH+RS6I+wOrGrIUeezc/ecDQVZmmLU
3UmOmUnWtbW7KeTVeFcURMtREt7cXC2gwOZ1eKXL5BimqV2Q60HBf3jfip57
P/JvhM+3eFGwEe9/PhLYjyVNGHXfm4IzR5yvZcqgd3mvnqMJhfMZVxYWfRgc
cyt8yLOisJRo1NaRxeCLqxYL1vYUpBF1y+YTDMY9i5/mCykEZ/tzuUoGqwy9
wmY8KfRKm6MW5hhM2fTznl0MhdA6ha0tZdBe0bLFI4eCsUnlULWMQUE+z3Su
jYLaLa7LxBMGOy+sTmQOUghP1dZKesBgpc4bty+La/3YeLvVHQZ/ccumf2uw
ILFvDCof6Meocx+vjRqwUNkT2cUz6MczR9YdDbFg4Wyx3g6rGDmafphqPLSH
hfocu9BldTm+v3RydjaZhZ6NhZMlswRvCoNcfS+zEFv7PWxsnKDjHwf98XgW
Im/X6n3qJSipN9558QQLX0Ur0d0NBAcSX/tMurIg2mz0tKeCYIYwcEFiy4Jv
QnVp5nWCLF+sKtjGgu5xy4Af0QSVUblZySoK///2F2RxW/c=
           "], CompressedData["
1:eJxTTMoPSmViYGCQA2IQfdmwXlLgxEN7w2Vsdo695+3fHNoeHwnkz7unM19n
ynn7pJjTpUHHHtqf0337a9HM8/bOc2yubAXJb1rMmbLivP10voV3lh1/aH+m
olfm1erz9t+fRntcAcqvbRW9oLHpvL3IzwO3LgPlL218rrB0+3n7XZ3HNU2A
8hwHnJvdDpy3f1z9g7381EN7ZsX/y7KPnLeXeCya033yob243KqLU06dt7+i
Uvf9PFD99OPTrrw6ed7+gyGTiDNQ/mHZJOf3Z8/b/zzG8vjp6Yf222asPf36
8nn79IxWU52zD+1X5teu+QOUf+V19+21Mw/t3+2ZsebUsfP2Hac5bzGfe2iv
7NTQNen4eXuvmTGqeUD1Dk6P8nV2n7efffWkFNP5h/ZCMw9vFtt53v7swavx
vkD1RrVMHz4C3a/7SeXqYSDflmeBgN/W8/YvX35SdQKq/9vAZC8JVP9Y6Kb0
KaB8ZXHw7X9bztuLhUyzdL300P5k38MO1uXn7Q+X7W2tu/DQPi3/1jd1IL8m
5HboFCC/aYOdZM/c8/avH257Ygw0j8/tkiXjgvP22g/9r68Cmfefq/H5tPP2
2UobTkcC/d8c+1+IpeO8/dKwXdGbgeG7ivPu54rO8/bo8QkADaQJaA==
           "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ/e5R3MkM04/2m8remdTufmL/z4cvOhnIVxb7dG8+
kL/lQoyxG5B/qlHdrx3I13mvc0wbyP/++luDDJB/6c4+BXcgX+N1Ynrazif2
02y3T3lq8tFeJauozR8ov7tEdlIskO97j63FeM8T+73Hjz6VAqrP2Lbap2/H
E3vmX7EaQcYf7dNExRrSgfo117ZkfjT6aK/mmhNqd+CJfaJZlvxfIH95Rl7A
baB5QleD8yYbfrT3zH5QPANonmv2mvxKoH5T/uZFN488se8/qDJvjs5H+9aI
JNWL55/Yb5xzxu6/1kf7c1vWdCSeeWIftzzZxVD3o73t+qn/JY89sU+Jnep3
Hyj/5NiD5c9PPLGPvB4mm6X50X5hlNOOOqB5KyObJkRqAPVzbuT5dfqJ/Q72
mfxrgPpzbD7E511/Yj9hrdgtU/OP9gIdEvYrbz+x37xkooqz7Ud7rllC4a1A
+9dIVJ6Sc/5on9L3/UYS0P3Rx6c4zHT8aB/QUS8ev/2JvarG8jdRQP3Mk4s3
HwHyV6XNfpZu9tE+KuePl/DmJ/bo8QMAG5veyw==
           "], CompressedData["
1:eJwBMQLO/SFib1JlAgAAACIAAAACAAAAdgev2i9Byr/+r23Bh7zjPyy7za0p
Ccq/bMrzGZ+z4z8BXHFt59DJv2qnU5XbquM/8u3n8WqYyb/3Y006PaLjP2gV
xhK2X8m/hlG0DsSZ4z8W2z+4ZwTJv6Lhq9J9jOM/zXroLWsuyb/FAlQ/v2Lj
P8JN7qSRMsm/V4BOuFVe4z+FUe42y3zJv6X0oy3EY+M/0AH5V//Gyb/0Mfpw
ZWnjP7wODTCv0Mm/5fUIYyVq4z+S2ukXwAPKv3pbHcz0SOM/Biz1+sk5yr+I
5OC0ylfjPwhccVoNvcq/jwDDagc24z8bbQwnqoDLvwLUlMiuOuM/zE2SGgvc
y79LP6/zNj3jP59pqlG1Ecu/zyR2YdZ74z+9HRNLO7DLv1d8PNVQc+M/GSNk
W2xPzL/wmd1jLWvjP+S9IvdjZc2/fKB2mfVd4z++6oUltCrNv2H+oPiQeOM/
fBjZ+pfuzL+QdkL545LjP9UeIDy27My/1/5MQbOT4z8ia+eWR6rNv0xpig26
iOM/AtL+IBygzb/R+FwpyJzjP4PJj075lM2/AR15Nr2w4z+gM3TQVYPNvzWh
R98szeM/9NWyapQYzb+752VlCsrjPxt4U6L4rcy/jE5/PTTH4z8TVH91hkPM
vykvJjGqxOM/r0G030HZy78JqzEIbMLjP/lQvdkub8u/o6a9iHnA4z+1PKtZ
UQXLvxu6KnfSvuM/dgev2i9Byr/+r23Bh7zjP9w8Kyg=
           "], CompressedData["
1:eJwBAQL+/SFib1JlAgAAAB8AAAACAAAAdA5yVbg6yL/JvY9EPRLUPxzXl6vW
isi/a/OvinFP1D8urjY7X9nIvwG2IjXQjNQ/jidogMcwyb8JO0j40dLUP2/3
OMoNzMm/grhZ0Wqq1D+S1wCIlGjKv1CVIEWXgtQ/OC062VcGy7/WtXSaWFvU
PxTlw9lTpcu/1rn6E7A01D9XlFKdkfTLv+WwfVm/IdQ/0bL6jZ2Uy7+mBdHP
ycbUP9noN8d7gMy/gqka40Hz1D825lt+TgnNv62cWk31DdU/QBkWL6fVy7/H
H5Oj50LVPzbI072jrMu/gMLGADJK1T86k2v/IajKv5dIwvJSS9Y/fM238DY7
yr/0x+zQTbbWP/HnKBdDV8m/e5iFvjYI1z8MzTGCun/JvyMULktoM9Y/BIne
w7wsyb8aTrOxowHWPynczdd+2Mi/2YOc8hXQ1T+gS6r0RizIv0aBh5CkbdU/
Un/8Tk/Ux7/fe3WvwzzVP4SfNh4ce8e/wlCXLB8M1T+06O6S1F3Hvyt5felZ
/NQ//exacJ9/x79tehHF8oPUP+K5rHbP/8e/jjGepblv1D/Fj5krmi3Hv5G4
hdcLJ9Q/tWm5nSF1xr9Gx9aXR+nTP0UuEZta88a/wZ1dABP00z+asMRkgnHH
v8KVlLVT/9M/dA5yVbg6yL/JvY9EPRLUPwkmEcw=
           "], CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAALf/DTIW/1b/puCIlEjrev9YIcki9
2dW/EW+11bhS3r8LeetqwMXVv08qbWeoWt6/3VpgJ/PP1b+oZB4Xr2nev5c/
NYxSCta/0h3+KjIv3r/4HztwLGbWv4j9wsjEG96/nTIFC4yq1r9/p0FmLafd
vzzX7W9f+9a/Qfm2ILqI3b8AdWpszPLWv+Pywceuad2/h798KwfK1r+RDsCq
KVfdv0PFuORLgNa/iOO2IJdt3b/PjkgeymPWvyb8/9nJXN2/lymTMT5n1b+k
e8WhYLjdv0eqjpqhTNW/XFg8OBvn3b9oQ2ZWutnUvxapDtfSId6/FuTAPtW5
1L+sgtW05W3ev0sylGNdG9W/C1XWLeZp3r87rNohGD7Vv400Ch54SN6/Ep4G
uAxH1b+0pJN080PevwV2hGokXNW/wEepAxRF3r9pyrTRRm7Vv9XkZASfP96/
eODkk9lL1b8YbS1b5kLev7UyTCP8aNW/KIAs29Iw3r88wzGoEY/Vv7kpAqi9
Ut6/Lf/DTIW/1b/puCIlEjrev0YW4LI=
           "], CompressedData["
1:eJxdkFsow3EUx//ZLAoJMZcSExMPIysKk8sDHgwtRSL3SB6oRXNp2DA05Zq/
5I9/Lqk1yYOjo0ih1k8aNfIgPNiDS2lSyvHq4XT69O18v+ecmLqOskYvjuPC
qf66yVHjFEyA1uacQfsww7uMKQcbAWxqdkyfmxg+SfGbNwL6O/PTss0MUyWG
rtMeQB/B3VlBum07TLbfDygab1tUxC9fV6DsA2QtdbM68rNG76cX6QENavsF
T3wYJq+v7wa0JLbLKkYYakSP0joIeKZVrSeNMoy3xFqyyG/nAxNaxxg+BP6Y
GwYAJ80RV4UWhmKMtyerF1DDHZd/E0tc1ygaAMO18aGV4wyzZ4K2Kkl3C96u
TeLLHlFhmwR8P+F3z2l/aYmQaV8ANEkCDnTEw22RBQU8oF+y8eiG8uc1XFzU
MmCQ50nvpHvOVtnjnAD42lj4tkS8p/spVm8AztfmzgXSfEp1FO9aAyz9lNVo
id3Bl0xD+rNy4l5B98nlK6u1NsCqgQPnO81/XUv1IZTH5fm6F4cY/v//L3dc
4lY=
           "], CompressedData["
1:eJxTTMoPSmViYGCQAGIQ3bx4f+hu4/f2upXn6o+F37PvXM4jslftvX1rUmm1
nu89+2czH22dovrevv7Ee52WnHv2p7o8ttyTe2+f+JahsTrznv3KUu8J6krv
7W/Up4QWGt2zn5u9dWOS1nt7YZbdNwOBfEXP/w+C7d/bn5h65c7SX3fttwQb
b+Zze28fnWc1c7X7XfvOk8GsaQ7v7ZtUYutzwu/a8wn/kVlh+d7eaH33Si3b
u/ZapvvjF9sCzTP36XLgu2v/ojXVYgvQfVMWrcm6ceuOPdfdlRl2v9/Z71o8
+cSV93fsVyje/fCM6b291+r971IF7tqH3tz4ZPLXd/beZ19nrgm5a3/b32dh
IcN7e+drW17zdd+1n9E5333/o3f2rR0F50t33bX3ms8imQE0b8K1s8G3I+/Z
f//4/7zNs3f2y6VPr2JIv2/fYXd0ojWQbxrM0coP5Kvn2RhVcb63Zy8S3D1v
6j17J+aDgb5S7+2DvjM0f624Z+/pX7rli8V7ex/rorvsTffs0cMbACCPxLM=

           "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQffvdx1PLio7ZK223LN3h/8L+V/+JBat3HLM/WVt1
SsTxhb1gwYmf1f+P2X+c9vbEAcMX9o375sXr7Txmr99Uvmq++gv7mbaT723U
PWb/363NNMjyhb2CM+dP28NH7e86R94Sdnthn9OscULs3VF7rwmH/bKB+o8s
3nVo8f+j9rLZb7pWaLyw17T/rViVdcxe7peY40fJF/ase+P2/gs8Zl8UKnVL
lu+FvfqUD2m/LI7Zc1kvlEpnemE/SSnDs1vjmP2+2tU6z349t9/00PZL9I2j
9tO++9xfDVS/+VlF4MH1R+0jn3zpjJJ4Yf8mt4HvUttRe7G2PwbPFF/Yb+zK
7dgVftT+3AadL/N0Xtjv+Od0vbf6qH2l0iTRJRYv7Cenib45Pe+ofZ/Wl6/n
XV7Yv/J5obtw+VH7ZOcZ/q/dX9ijhxcAUZmq9A==
           "], CompressedData["
1:eJxTTMoPSmViYGCQAGIQ3c+z/M3qGw/3V3s2V9g/fGC/7EGausf5h/tNkt27
Jtx+YD9xhkBGmNCj/XKb3T8dmPHAflc4F/fV2w/3N2gn5ro+eGCveLqo5LzB
o/1v4+0utPQ+sNf2N4moKnm0v2TXCqGlyx/Yf194UdbC8NF+6y9fPs469cD+
wD69TUJmj/bPeMGRXrH/gT0Xx5sV7HpAPttVV+9jD+xjQifKtWg+2p95/fDh
T4ce2BfxuMf80X60v3rHqor2Iw/szXYuPeCl+2j/8c1/mDcD+SeqTLZvAKpP
tGdWnHzwgf3kU28l9+s/2v9T4f4OywMP7F9pTO6ZCTT/3OTHy3N2P7D3lUpx
EwbxG+/yLwXa3z7hg2ua1qP9MR1MDw4D+V96jynuUXu0XzNYu7VqzwN7Wcl/
apwqj/Zz6m85Xw3U/0Zoa+UzpUf7G1oUZUWA8orrWze++fJw/1F+hZOr3jyw
b9oXurXy2MP9UqLn81fKPLQ3kX90xevQw/3TVnJlv1N4aI8e3gCdwdKO
           "], CompressedData["
1:eJwBsQFO/iFib1JlAgAAABoAAAACAAAAyBaUIMiIyL+bdAJMQIjeP6jM5X78
iMi/WKEVr8R83j/8zKZxLCHJvxs1mRAfqN4/sezu3CE/yb+wQ7Sh17DeP8WI
1Mxuwsi/zDKHpknA3j+TX440dnjIvzES16I1a98/Bj2LbTttyL+6nLtoQ4Pf
P59x7YeYQMe/4aH4dXMp4D9nv8/8Q3LGvxWrI8vDLuA/OtU7u88Lxr8AAAlE
xjHgPyPxP6XYpcW/QQ5jcAQ14D8iXc/AU37Fv2kDGVRXNuA/yNIUy90Sxb+H
eQm7OBngP+yDu0MZ3MS/tMxleccK4D/wAMCYpKTEv10cyXvV+N8/q32ona0z
xL/h3oKn4L/fP7qtIP//A8S/5MFbT3Co3z/OObDfFY7Ev/qpYNgbet8/hxvg
VpsZxb8Gd14OWkzfPylHLc7jNMa/3dDDHJTy3j9o0HWfD4XGv3ukQlHo2d4/
0HbX+FARx7/b8tQ7LAjfP0F/zWq2m8e/tH6wzGw33z8ZGgsCT7PHv7GekAal
P98/WErEx8Cfx7+jUpXbgc/eP8gWlCDIiMi/m3QCTECI3j/ZseIb
           "], CompressedData["
1:eJxTTMoPSmViYGAQB2IQLX8iZYKm47b9pku37eO49WC/kfxn1cm22/arH72X
5Xj7wf7sVS9fGjtv2z/Vc7684Z0H+5nuTj5w33Tb/q+5dQkZDx7st+T6Y6Kn
uW2/wor+5bMfPth/q9n3v73Stv3mCrtumD1+sN80x9srVXXb/nCTynkmzx7s
9/nCVJUqv23/CSXlpfOeP9i/zv5gzzvlbfv9P9kIXX7xYP9t/yyLSNlt+z+y
lwutePVg/6PQS1PfGWzbP7fMeUrD2wf78y+vSzzgv22/kbMWK4hvzj5Xhj9j
2345p6btQa8f7O9i/2akU7Nt/83C8rvVQPMdZsof1Oretn9j7MSb+UD7HbxW
xa5p3rbfOZfd8+bTB/vn8n7imNK4bf+G5i7pG48e7PdkX3SYpWTb/v/Ptfaf
APrvbTcXq3Xetv2+G0w7We892C8591TY/9ht+z1m29puB4aP40utqUwx2/YL
7Zgoznvzwf7oI4FWHGHb9j8/el/s3o0H+9HDFwBv+MzD
           "], CompressedData["
1:eJxTTMoPSmViYGAQB2IQXXVn+ySVli37G7evm7cp6/H+yt9p5bnbtuznl554
7H/+4/0X0y9vmvt8y36zvbdnZQL53cueXHh6c8v+p+oB03kLH+/fmxtwzPTe
lv01Uk2rs4se72dvNJA992zLftXDaVlXgOpr1rPuZv60Zb/8UelzzkD+pIsJ
xftebtl/hPdMXxdQ/9p2h7ofjFv3q5fVXtEEyu/oXj3RSWbr/olJh76/AJpX
wC6uUyy/df95x7We6gWP96tz+4tfUti63+Wdn20/UP/7aw8zTJW37p8UPp/r
N5D/+IVG82LvrfvDN/h/bQSqj3CokbvLvnU/U3CJXFD24/16VXO91KS37n8g
ZXZ7eerj/YUC6lF7gO5p07Y8URrxeP9Lr2cB5XO37I9akuP4MvDxfufjJ92z
Yrbsn8I5f+uT4Mf7H62Y6Fgfu2V/tXhBqGfi4/0S3ceaPpVu2T9dUf3PcyCf
xahHOi9/y/71rw13bk1/vB89fAGXztAQ
           "], CompressedData["
1:eJwBgQF+/iFib1JlAgAAABcAAAACAAAAxKZ1kpOapr9m+4AV29Div3ZJoIti
p6a/xhOVWbfK4r/qxFYL84GmvzI4jgIJyOK/rskN7XREpr8ZeBl5l8fiv9Yy
p+rw/KW/h4IPHDzL4r+ZYisw4OSlvwFv7BYf0OK/PvEZNdyTpb8Eo/eNcNfi
v7S756TzBKW/6fRILfnc4r+1Re7ilu6kv47USj2O3OK/JKC+35LOpL+zzomn
EN/ivwREytxGmqS/LfCyvong4r+AnZ9eoa6kv0VQ43nP5OK//lhTofHopL/X
6SOZLOniv/tGBqcMR6W/CIyf9l/s4r8FKVUAv16lv31R7CJi7uK/0zxjmdaT
pb/8lwvlRO/iv8YHKh6GvaW/7nPqnI/s4r9X+hV3dlqmv4VPfqpS6uK/S4qg
/3tUpr+M0UH1o+jiv9XdgdMuh6a/IuSFWQnn4r+6Ltcaxnamv5Ds54Fe5uK/
V2BbvxWVpr/bnhrmKeHiv8SmdZKTmqa/ZvuAFdvQ4r8chd+b
           "], CompressedData["
1:eJxTTMoPSmViYGAQB2IQ3VI74wzb7Yf2n6Z3ik3d/NBe+43GvsKXD+27pJUO
W118aN9pbKBme++hfe5Zt6KPFx7ax/49tlLz/kP7H3fi5OqvPbRf8ur/lOU3
HtpvCtZ18rv50P758/4QSyC/6+nCK1vuPrR/+1q1VPr9Q/ttPoHVoY8f2r94
v0Eg8vlD+/Opi3fFXQHqE57y1uXtQ3vFSO6v9ucf2u9fZLyk/OtDe5Vg/c2h
1x/aW8zoVIj8BxT/9O/jUaD6HIcl0598fmjf1yd57MHZh/bN+iwMF/ke2Z/j
inQRmv/QXkg90Z6B7ZH9I53IR9xND+2VSiTN8pQe2X+6rTr3X/ZD++4X0RV9
io/sQ5j2XwqLfmg/2036gxLvI/uVKQk/V1U8tA+XnlI48cNDe4fdYixL0h/a
X/zRIpYIDI+Hie037aoe2vc4ZTG5Xn5ov/CW18o7ZQ/tJ/PZuYY9eWhv9vLt
wedA+yb0JDyaAJSX8bVbumjmQ3v08AUAGvbGdw==
           "], CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAd131f3ng5L80nYcPyzDVP159JRmO
/eS/aAfm8Ifo1T8uKONwhRXlvzvQms/CidY/4R1qpVXq5L9+Tt10jn/WPxFO
VBDh1uS/0cauJ36P1j9YPj5J18vkv+isxyOiqtY/BE2lFHkV5b9+UmCQQ9bW
P1nyyiLzD+W/WpAwA/Su1z8laLiaPg/lv792jzN2xdc/Ubo/6Nfb5L9lqMt0
l6fXP8qnJtBy6uS/ruymYpBo2D/ctLqeSPbkv+GGURvyG9k/z4DZmXal5L/C
4bjYtSrZP7E65Fst1OS/xwKVNNlr2T9nWQyjDLvkvyuG4SBI49k/vJ/B6wuv
5L/yD8A+nIvZP+h939qdouS/ymF3LBQ02T8FNgaxwpXkv4hs+Iex3Ng/hyPJ
sHqI5L+2GpnsdYXYP1S7px7GeuS/NOkQ82Iu2D+KlgZBpWzkv2y7dTF619c/
eNLC0eFr5L8rf/rW29LXP6Bhf6uZl+S/6mUQan/l1j88r6zV3cDkv+9/qzlO
9dU/d131f3ng5L80nYcPyzDVPwRp5bE=
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQveeRxaJfcTv2pwUpL3Ga+mD/4RkrnAzNd+yfrcfE
nDPrwf7Ku47GuQY79q/uKpu7dOaD/ctVeZWYVHfsz30Z+qcMKB+8V3TKLrUd
+zUvPBNZMffB/h4bF60Ihx37d25uUGgC8sVNCptNvHfsf5lZWuw5/8H+vsQ7
R4KDdux/P0ukmxMozxy/1C3UY8f+TrXPUxSA5tXm9glUB+/Yb69Rdad4+oP9
Hbr5bi+bduyf4Zv44NKUB/vPrL74MaF5x/4fp1aXbpv8YP/V+03ld+ft2C/O
v3ixFVC+YeICzvO3duxn5t/Fcmgi0L1Lk+SqdXbuv8vCf+dB+4P9oQYZl96r
7Nz/WLTmk33Lg/2fRWatdRfeuX/f0RcXypse7P9jFPnC4e2O/Q+XZGzb0vhg
f1D90r73j3fs527amO/W/GD/getTauRPA8NHXNDhK5Af9pK3K2nijv3Oxovq
ZLoe7EcPTwAhCsa/
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7TVRbdXzly/sF3HaLjoZdH//mtitvc9FXtrP2zD/
6GSB+/sdWb52uIq/tO9P6Y3/LHR/f6Nf8Fl5oZf2zY+F3qlL3t9/7LHR5VdA
Pt+CjmO8ivf3x2/yXOsI5C80fPK1V+n+/uxrS7VfC760D/6ba38JKN9rtnme
NlB+bQ3jhBsK9/eXqqRdYADydX+GTxUH8mcn6FccAqrfsPr065/y9/fzhYSq
5wL56Y4HHogD9d84+uEJE5D/Yt2Rks9A9RMXeS0oAPK71Jz87IDye4wmCR0B
8l/n6W9SAspzcxc8FQOav+JKztI1QD7HP31bD6C820cGg9dA9YLsnbf/C7y0
5zg3K3+dyv39FmZbC/cB5e+czMqtVbu/38Xjuc8f0Zf2LqZb7N+I39//lVX/
zXEVoP+WTq79BzRv0fUb27XVXtpf6nPNM/G4vx89PAEi6Lac
           "], CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAA0zNFToDhwb/P4zbSMt3iP8lD1lbZ
IcK/avVLh+Wm4j9Sth/yiD/Cv9n4sGx1i+I/dLrzDI1bwr+PGYny1W/iP3HR
NyKrdcK/HSXMBUZU4j+ISn8rhJ3Cv8Z15Yf6XuI/9VvaOuPEwr8mV2Pzvmni
P2L2q8bH68K/NZ/mCZN04j/jTdtHMRLDv017z4x2f+I/pRyYGpFdw780SBXc
apXiP21kpWqGgsO/jjf4KXug4j8GMRat/qbDv46+TueZq+I/yVZlInbuw783
k8uwAcLiP6oWX4/rEsS/mXLxZcTN4j+vVhGfYN/Dv1+yyIOi8OI/Lj24naKZ
w7/lFwhUKe7iP7DqtWQEVMO/+TFxtdzr4j+vmsUv0O3Cv7+MfDLL6OI/lE3w
fHHxwr+csABWl/riP0NJU+wV9MK/6UB4qlMM4z9w5WtSbPbCv3Y8olCaL+M/
QytDOUf2wr/5B4vmMj3jP/pk5jne2MK/nZ0CNyky4z8SK3A09rrCvyotNtkp
J+M/op5udo+cwr9yzQMQNRzjP33+RFCqfcK/SZUjHksR4z+cBCIbZj7Cv7FD
dMqY++I/voADuwcewr9z1Evt0PDiP06zbVAs/cG/SF3A8BTm4j/TM0VOgOHB
v8/jNtIy3eI/lRcHiA==
           "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPdG4mS380oH9zcbrdgY/vL//hdNKjV9PD+zv7Dct
/Hnv/v6j4u6L7B8d2L/oxTdGeaD8+vLU56eeHNifkPBERvbx/f2fmKQecP49
sD+Ea3Gj3d37+1eEbvi07t+B/Rvevj9efv3+/kbNIsEi4YP7vW6nm3y+dX9/
nFxQTJLCwf2zTpx/YHL5/v7NYUd4le0O7r80Seim/MX7+z1VMp3nch/cH/vA
/MviM/f3N0hO3PkXaP7hgxs6XC/d3x9yPrzp/K8D+1cbqIlnXLi/f9LyXSxM
TAf3LyoM3yN79v7+Z3847bVYD+5flaf1zfb0/f2TV+7QnMZycH/KXGM+RyD/
2anETN9bB/Yzx2aqNF27vz9oISvrzwsH9k+tSLuueef+fodX7Oe6rx3Yv0D8
4SNOoP9T5R6r/ThzYH/DzXeO4UD/Na06bvDi5IH9/17Fi/EA5dHDDwAk2sZS

           "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQrfyu/MBZ/bv2aa9eaqSUXrJfZSatfA/I5z7dEFME
5CcEf76yWfOuvcDnop+Hfl2yt7/9OtBj8l17E42cN1KRl+1ZTUq/2nPfs+/Z
8z7FVP2y/UzWFVuni92z3xw+V9/p4SX7T1P4fTIN7tnzHi499EX0sv0L6f83
o3Lu2SsJnLz48vMl+yvTWXunmd2zz9jrLjLn6yX7rAfCyip19+zvfj2blHry
kv3Ui38d77rfs2fxnNSj73XJvpBjphOIv4SnFcy3XXjW/ZzuPfu1/Mo900Qv
2XtvefneTOCefXFs/p4Ak0v27w9N0Dm9+a796dyMVDnnS/bZZUeOBJ29az9b
6YrO9CcX7adpzTliuOauvYg781TlExfti5/ctH8md9f+6p6HKWnXLtqvenMy
5ofdXXvDhp8RTpqX7HPO/1xTLXzXvkNmdbSt2iV79PADAL4Iq+A=
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ/bzUj/V20if7wj8/1UXNr+1PCjlhlRn/yb6gToUl
wP/a/v8en7a9j/xkz+tWueS8/bX9xxNVJG4Ef7I3+S0XuTDp2n4e9TPPDPw+
2f/5fy9fIfba/mTG3gl6oZ/s008u+Ouuf3X/J5ZXk1iA8iWfDJ01OK7un590
PL/B65P9qiLHlofbruz/8X+fSjOQn9h68k8qkL/0/ITuuUD1sRUnbp48c2X/
ySDeze+jPtn/mqOb47rryv7AaKHorROA7hVdw3b29uX9ri5Pn61b8Mm+g02N
rWDG5f1WweUTPgL5bdzJ6b7TL+8/Ub38usvCT/bHeff9mwTkt27ZZnl1HdD8
/m2fv8pe2Z9YH9GsveeTPTPj/SVbl1zZv6/6xMOSA5/s9S7vPz/9wpX9AR2f
Xlt3fbIPy0vSFV9/dX/mkR6eI9mf7NsvdlUEa17bH/G+Hhx+K54c0wCFH3p4
AgBGRsPA
           "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQLVTj8DjN+Lb9wf8l/3b9uWq/VlNDTtXmtn1nw+Tz
/i+v2u94cNLsiNJt+39LmpulVl61v2X6x7PK8rb9qX05HulHr9r/SVF2vBYA
5IdvKlw//ap933vR2WYOt+3FM/ITXzdetdcMDJWeqnPb/pF9cKvG0qv2Sx9m
Zd1SvG1fu36jxPy5V+3Pvu4WK/G8bf+wpfeuRcpV+8R05mZn59v2q89rHim0
uGq/bP9cjRfSt+13FTI/u+xw1V5wjr1mm9Ft+xdcWsFmeVftt73in5LFcNu+
8ugqzojUq/Zlbpr3+rhv27POOZtxou2q/fkauzKlJ7fse01eGzoA3fPjR8pv
0xu37FmMDHxXAt3DW3iw8zbLbfuq3+tLzs+4av/pz0T5E19v2evWXioT0r1m
P3HF1O9iQP9vqc5dduvBVXv08AIAMISlmw==
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQfcQ1/7/h7sf27YWXfaR679uLrnFIVgPyxbW+rdQE
8ut0lNPTWh/bx0uXHI3SfWBvPGviluK8x/Y6cbdymsMf2Mf/78x4kvvY/qfd
/LU+EQ/sc344HTLIf2zvtetPomvUA/uzokZv7YD8Ryf5ZpkB+fO3v1y/s+ex
fUH4o/xohQf2515uFuWreGwv8fz6cfOKB/ZrAmM2fCl/bN9y9mJnDJB/b0Z2
xvZ1j+3//An6WTD9gf1Lw3tvDbY9tre9fulu6IEH9pP/xr5KfPDY3v86Z0X0
kQf2wtynEm79fGyv4fxC124pUP2zbV+dpJ7Y6xx5PW353Af2mV7t27qA/Dea
jKyrgPzAo+YsfkC+T/yMeH0gn7XgB5sB9xP7z7eKnp8E2u+byvJg9+/H9om+
32L6Qh7Y+yz9ofjp9WP7B0dmWdYaPLCvULsXf/n2Y/svD8K/TuN5YI8engD/
AbwP
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQPcehYeKRnNf2aXLuJ3b737YPOp727pDRa3vNB/OO
BGrfsZ9+98N20T+v7O92XTnIYHDHXpn59p1rv1/Zb5idyOwA5F8r0PxQB+Qn
X9Z/MgfIn6iQObH40Sv7z9+Ei1f237F3Ejv5IhzIZ+0pP/no6x37tgnaHOtf
vLLfccNkY6j6XftjEyqCp3K+tj8bNVVK2e6u/boEf+9rvK/tr657sun38rv2
nY/39t4A8ot3Smt+BPKTxCxybKtf269QvTTtwcW79tNtr86fvfi1/eajIuvk
Ht21F4y6Fioz47V9blz/qciKu/a7uZsZ5Xpe2z/Tzel5wHfXPuNZ5kHe+tf2
PtuiPn5ZcMf+nJ8gU/601/Y9BhFi1+Tv2M85FFilt/a1va/+j5z/c2/be91e
atR44rX9vTdBBRx/btl/zMrxkQCa/2/SP1bfO7ft+/okbt4Fhh8rl9LkHcDw
Qw9PAM2Zuo8=
           "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQbR+q77lV6629b4/LCgG3p/aurzmiNsi9tf+peC5J
O/upvTFDkiWv3lt7aZtrbw8VP7WfH/rkS7jVW3uGU5kWB3Of2ktKd15gMn9r
f74uYMGX2qf2M3vYOmPd39rb7zPfy9L91P5eeuX1Nou39vWJLmdfbnpqf0c2
xHiS51t785abETc3P7VvXLxQtzzsrf2/ep3KByuf2q9Qji5MS3hrv/T20vkX
9z61b1rhs1Nz3lt702+PRHfveGrv1n4v2QXIj+hPvr0GyHdWPFmrA+TLXPxS
0Qbk2506sM+g9639o0+/tZwKntqXPW+uewl036rkX+ckgP6TUDqhesfsrf2u
E5lcCkB+S47wz0Wmb+3ZJqz5kgTkW7Zt8zLUfmtvErrq4VPXp/bB0isZGIH8
6jzloq9APnp4AQBQ7Z/6
           "], CompressedData["
1:eJxTTMoPSmViYGAQBmIQ/cs1pO5A0YH90xw3fi+zf7D/54Vc653uB/YfcF2x
+KXDg/1z+rc25/Ue2J9wJmS7utuD/Q/VH6ttXHlg/8J99y3euT7Yv7SGeXP/
mgP7VZSiupQ9Hux/PNV/A8/eA/ulVgtxX3F5sF9b2Llx7q4D+3cbrDVb4f5g
/9QrPW0ZRw/s1w4467AcqL+u/gDHw8cH9n+/wq3CBdQ/23XZjascB/crvzbm
9ASq/7ssSnXdnwP7pzrMmfPG+cH+ns6iSfcYDu7fLPv3g47dg/03g26nXf12
YP+a3/V6StZA+UO/zz6+f2A/r5u8z3WbB/t/a4b8vb3vwP6LLxUvpVk92M93
59ib7VsO7JfvfTn1PlD+BxP7xJNrD+wvcDbgOguU/3RrQuvTGQf2+8qXJkcB
/Y8ePgCYYrJ+
           "], CompressedData["
1:eJxTTMoPSmViYGAQBmIQPeFpLZ8r70v7aztKn37svWZv+TxMw1L4pb3Tsiv7
tDdds4+IrDn1UfGl/V8pzuVvV12zdz16pv+S10v7Y2qXl08/es3++xHFjdci
XtqnV4hKPbl/zf7X8fzE2MiX9le3NrzYde+aveCi6aXrgfwPLHyv9YF8lk3Z
rJsTX9qf/L5S2O7iNXuryqyuityX9tN+cO/Sv3bN/nRfFZifUHJvJ4jP76HL
la/y0j7cwdpKa9k1+3tXXix/IPrS/tDBQyZ1Pdfsg0/1Tnwu/9Ler9JsPks/
UP/RyRNbgO59qOh6SLfrmv303At7Cx6+sPdsyjZzNLxmr/KC/8a/2y/sD8b5
GbiZX7PvSly/SlnipX2BWtFqranX7NlT1I/5AMOj2ki18y0wPNDDBwC5Rp52

           "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPW/pajWhqsf73xo6pc0wemb/agLnp6s+j/dvq5lx
fkLBM/uJ3YfEhOQf79cSMs8KcXxmbyfmtzHJ+PH++vUneLWcntnLTtl10d7o
8X6Dn6w6UqbP7OWWScjPCHy83/67c4KH8jP77WZbxB4EP96fprJ2gqjiM3sv
03idfSGP998/m/KsSfaZ/b/JO0/GRzze/7Hut7CN+DP7ZSf585uB/COpGuGm
Ys/sr28UK0wF8luZZKoeigLdw1J4II/r8f5fG/dMjrB7Zs8jtjyg7+2j/RKP
Uja1izyzvyLfW3GU5fF+xmy2tZFvntpfY4mNmC79eP/zhW/srh9+as+4fEql
lsrj/Y8slr6P2PLUPuft4vWnLB/vT3+rwPLj0lP7P9KfwmT9H+9nX1Tu8uzj
U/vuQGarqxWP94ccjOJfb/DMHj28AD5PpEQ=
           "], {{0.6915673888957179, -0.43155670535752133`}, {
           0.6890741534607313, -0.42761733622094494`}, {
           0.6906703563239552, -0.4239445375725682}, {
           0.6928108120572818, -0.4253019833061961}, {
           0.6923961842394762, -0.4267071659319858}, {
           0.6951373433885635, -0.4271034641315315}, {
           0.6959082741713772, -0.4260063160302018}, {
           0.6958325563886645, -0.4266317970259689}, {
           0.6961012759052664, -0.42703025499056346`}, {
           0.6980304653396587, -0.42380627133617926`}, {
           0.6992362133682511, -0.4248091161284468}, {
           0.7023016485111881, -0.42166751281946857`}, {
           0.705344746328728, -0.42111935916483806`}, {
           0.7053473007152028, -0.42112031997635996`}, {
           0.7057513536660628, -0.42244296372320234`}, {
           0.6919402891886195, -0.42942779896296135`}, {
           0.69156738987173, -0.43155670630907}, {
           0.6915673888957179, -0.43155670535752133`}}, {{
           0.6920434762425123, -0.4213424471413668}, {
           0.6920434761738483, -0.42134244682051597`}, {
           0.6925516531982644, -0.42107464346575135`}, {
           0.6925577061271039, -0.421075208212913}, {
           0.6926716358308534, -0.4210211220367926}, {
           0.6926694905062213, -0.4210159317417369}, {
           0.6989520283782303, -0.4177549292043367}, {
           0.6989586801447538, -0.41776903700844625`}, {
           0.6993439247002121, -0.4191874210971037}, {
           0.6972054153926662, -0.4200107749170668}, {
           0.6976633761341858, -0.4225094270724228}, {
           0.6964790236472946, -0.4217591419919456}, {
           0.6970456811971633, -0.42354938092577055`}, {
           0.6954891007231818, -0.4245247975893636}, {
           0.693812081216354, -0.4247466102752013}, {
           0.6939426655088743, -0.42327974339972674`}, {
           0.6925667118262557, -0.4230894593507554}, {
           0.6920434762425123, -0.4213424471413668}}, {{0.382522108247747, 
           0.3831328766869483}, {0.38266425621863653`, 
           0.38357538774917754`}, {0.38367659170521773`, 
           0.38301131866563687`}, {0.3815794062871042, 0.3829522233468496}, {
           0.38100132076253934`, 0.3832278429604741}, {0.38089776094824407`, 
           0.3835742934944902}, {0.37897245395527795`, 
           0.38422716449611327`}, {0.37914597258076266`, 
           0.38505958188831757`}, {0.3793807605702694, 
           0.38504740528840514`}, {0.3793831917172567, 0.3846632469559034}, {
           0.3796602519765678, 0.3849392728549603}, {0.3796892876315225, 
           0.38415537390998783`}, {0.3810711354249549, 
           0.38491071831916895`}, {0.38148056733661057`, 
           0.38449808328849555`}, {0.38071470450403455`, 
           0.3842434771808111}, {0.3823980867393296, 0.384035933807163}, {
           0.3818731020055054, 0.3831577680055953}, {0.382522108247747, 
           0.3831328766869483}}, {{
           0.6956851847935545, -0.44318265109637417`}, {
           0.7006588255924855, -0.44019818061987837`}, {
           0.7029417764415905, -0.43722560952770106`}, {
           0.7048912988861855, -0.436344697782098}, {
           0.7055166395244417, -0.43791045390859706`}, {
           0.7037058372607528, -0.43763313314171526`}, {
           0.6995939052362135, -0.4426967485957335}, {
           0.6989113820591383, -0.4416702417919961}, {
           0.6984500383546907, -0.4416465737882471}, {
           0.6982644961324681, -0.4424760253580616}, {
           0.6990118144257529, -0.4421538225581543}, {
           0.6989858011200474, -0.4427556202292576}, {
           0.7011789946035772, -0.4428317314884044}, {
           0.6998201526183419, -0.4432956268067081}, {
           0.700468333210123, -0.4435710543622071}, {
           0.695703426203389, -0.4431900927121027}, {
           0.6956851847935545, -0.44318265109637417`}}, {{0.9397390039366221, 
           0.3659279065145228}, {0.9405752065343806, 0.3701010853754018}, {
           0.9397528012919747, 0.37198001831402844`}, {0.9399263613289378, 
           0.3727428738151243}, {0.93952879107367, 0.372960471449361}, {
           0.9396168059336683, 0.37343367372664676`}, {0.9433595488607203, 
           0.36762268421988203`}, {0.9390959687845637, 
           0.35374320455738506`}, {0.9373946880049382, 0.3484483393281666}, {
           0.9347375347567615, 0.3499270558662663}, {0.9276235465240794, 
           0.33832659827034134`}, {0.926617270925079, 0.3367236687124432}, {
           0.9251236360724777, 0.3365931267554424}, {0.9207593826985493, 
           0.3438975494763018}, {0.9285442922507635, 0.34707142592885587`}, {
           0.9320686304303897, 0.3528705365699412}, {0.9355432145074023, 
           0.3587088491638012}, {0.9397390039366221, 0.3659279065145228}}, {{
           1.032071912949708, 0.4427974651169213}, {1.0320719125388171`, 
           0.4427974663224585}, {1.0308962631541563`, 0.4456652373511509}, {
           1.0288419958494828`, 0.44961664045796523`}, {1.0288419957376738`, 
           0.44961664064599477`}, {1.0299092699891705`, 0.4501891181755852}, {
           1.0300304361743544`, 0.4500876967676015}, {1.0302891446415867`, 
           0.449612578021896}, {1.0306075711768785`, 0.4482241718135516}, {
           1.031597559417005, 0.4459186152250228}, {1.0319409786840428`, 
           0.44540037968940577`}, {1.0330126143710656`, 
           0.44477093970544507`}, {1.0338035932236018`, 0.4424911644994327}, {
           1.0338056905188626`, 0.442470856582353}, {1.0337194712622162`, 
           0.44249462979033843`}, {1.0325648296371976`, 0.4428316555329718}, {
           1.032071912949708, 0.4427974651169213}}, {{0.1586728796141855, 
           0.48650138618906236`}, {0.16426938436698932`, 
           0.48680999992734447`}, {0.1666295965422362, 
           0.48696820703738997`}, {0.16512048221492137`, 
           0.48582362285297837`}, {0.16156550497151742`, 
           0.4854323057244998}, {0.1606610967828468, 0.48487488566022524`}, {
           0.1583679483594532, 0.48432629919727865`}, {0.15687669545621327`, 
           0.48362827727218377`}, {0.16196418315539068`, 
           0.4848413255719996}, {0.16704503238994678`, 0.4861362561813548}, {
           0.1689086737589058, 0.48663234020949775`}, {0.16663518787011888`, 
           0.48552828680708043`}, {0.16435240286460265`, 
           0.48444130513297784`}, {0.15975959533907744`, 
           0.4823187435508829}, {0.1557206017923171, 0.4805217351924284}, {
           0.15599845984521002`, 0.4847524422741904}, {0.1586728796141855, 
           0.48650138618906236`}}, {{-0.2798975406545536, \
-0.40914398760897713`}, {-0.2740434049924238, -0.40586841639391974`}, \
{-0.2760763841653428, -0.40246809457729366`}, {-0.2752813221565611, \
-0.4029713581240644}, {-0.2758485273958148, -0.4023386484269695}, \
{-0.2748357694971886, -0.40204825665305527`}, {-0.27439806626398594`, \
-0.4024916014598315}, {-0.2731975477775804, -0.40215956774131423`}, \
{-0.2728550405899184, -0.4024173374378411}, {-0.27341036820614445`, \
-0.4056195644763459}, {-0.276076237700655, -0.4082676521431913}, \
{-0.2788349894960033, -0.408843405242018}, {-0.2798127400352759, \
-0.40989674252741176`}, {-0.28169466700148155`, -0.4104562757790477}, \
{-0.2798975406545536, -0.40914398760897713`}}, {{0.017188766869335816`, 
           0.39607209589762965`}, {0.023268833470769627`, 
           0.3940314670234758}, {0.02428842489531206, 0.39369990762751245`}, {
           0.027319136584049247`, 0.39066919734580785`}, {0.03039673971307864,
            0.3876585975143652}, {0.032806088421664055`, 
           0.3853469586568352}, {0.02996630123683048, 0.3831329932807388}, {
           0.027092781780676062`, 0.3809371992301859}, {0.022695531614962197`,
            0.37766052421114304`}, {0.018007895599899584`, 
           0.38061239756220766`}, {0.023611588830876044`, 
           0.3813612947676468}, {0.02380320610360933, 0.38380938417518506`}, {
           0.01757165683803255, 0.38458291336059974`}, {0.013584847061123204`,
            0.3851259574134608}, {0.017340748151355324`, 
           0.3849394421996449}, {0.013713343437652998`, 0.3874932813492684}, {
           0.017188766869335816`, 0.39607209589762965`}}, {{
           0.21490228239751613`, 0.6738430842572289}, {0.2147168855671856, 
           0.6773684115219247}, {0.21451879162763765`, 0.6801349186648294}, {
           0.21691794096912417`, 0.6811862279072647}, {0.21930966253239007`, 
           0.6822680315541791}, {0.22190275767444553`, 0.6834795852181426}, {
           0.22492523781784546`, 0.681080060207345}, {0.22791872226530538`, 
           0.6786314796056949}, {0.23267947609455183`, 0.6745836830058677}, {
           0.22757583361002962`, 0.6759900186929176}, {0.22709064181986455`, 
           0.6775157915903461}, {0.22714781043350818`, 0.6756810236770594}, {
           0.22718592226711792`, 0.6738429079714117}, {0.2272047556902712, 
           0.6701572591466654}, {0.22719924867452068`, 0.6694121171734052}, {
           0.21952117139804803`, 0.6742617239882777}, {0.2158413618700683, 
           0.6726614994621157}, {0.21490228239751613`, 
           0.6738430842572289}}, {{-0.1705810318721651, 
           0.6089421745474863}, {-0.16845769013590453`, 
           0.6084812491249687}, {-0.1663361407250161, 
           0.6080426697365892}, {-0.16442240878935938`, 
           0.6076658248255657}, {-0.16499114987693506`, 
           0.6051758012807744}, {-0.1655248265162003, 
           0.6026694136170744}, {-0.16575477264088004`, 
           0.6015297855957301}, {-0.16814505247324923`, 
           0.6017379422570195}, {-0.17054086687666845`, 
           0.6019713882769366}, {-0.171266046293815, 
           0.602046939945017}, {-0.17143910515135152`, 
           0.6053577633391474}, {-0.173893550308169, 
           0.6047811351068421}, {-0.173990705216949, 
           0.6077392130728694}, {-0.17770098549473068`, 
           0.6091879468974131}, {-0.1769945067105004, 
           0.6104438491423475}, {-0.17272492665308772`, 
           0.6094217294953957}, {-0.1705810318721651, 
           0.6089421745474863}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQrXehYf2OrD3772Y1TVDTv2sfMkvpbgrX3v26Kxkz
eezu2m/+eT28bOXe/dvyciusfO/a1/Z4z56muG8/o5+o2OuIu/aPFM+su39k
734JZREZRs179uGxv6QOrd27/6Khg35n2D37byWLo7MUgfpv+EgedLxnr2mY
uF5kyp79cUk8f01079kXfBG0Pcy6Z/8qiSNxTyXu2Z9RWm1QUbZ7/y+DMwcv
sdyz//RXf7fps137jSv6Vvz9cNc+rn2F0L+QXftnM7dOSbt7117IkN9z95Wd
+/20WBenn7lrz2guW1cetHN/X8UHb33Xu/Z8s+cu2c21c/8z3+VyXxju2tev
DLGz3rxz/8aqzo8+nHftW+7JZLZG79p/hid47RfBu/bRooKG05l37xd20/Z9
LXXX3idn9cLc1bv3e/jInDZQuWuPHl4A3wCfuQ==
           
           "], {{-0.31452988578998603`, -0.3266598056911543}, \
{-0.3138535920939991, -0.32693047226978833`}, {-0.3137757139807453, \
-0.3259019533852927}, {-0.31655027612069964`, -0.3247248831564655}, \
{-0.3160937696393859, -0.3236352182931971}, {-0.31892272567560165`, \
-0.3188844407067686}, {-0.32017331169345514`, -0.31914852481044603`}, \
{-0.32312061368482425`, -0.31745327613568586`}, {-0.319365683746214, \
-0.31828742688570166`}, {-0.31197557696836176`, -0.32658388021002427`}, \
{-0.31721790900374536`, -0.3379196604772363}, {-0.31969927507236956`, \
-0.33447572035901296`}, {-0.31603406408104856`, -0.3327129739039476}, \
{-0.31452988578998603`, -0.3266598056911543}}, {{-0.3027407410521805, \
-0.35449721357637826`}, {-0.3044314082849324, -0.36266402396662195`}, \
{-0.3069323750509378, -0.3582910964275027}, {-0.303979816496197, \
-0.3588607327839418}, {-0.30299545299228525`, -0.3540087193538229}, \
{-0.30526360711029865`, -0.35116204329376194`}, {-0.3056338218067655, \
-0.34991532173181816`}, {-0.307817344136966, -0.34888583359573005`}, \
{-0.3091519207084096, -0.3470067659230928}, {-0.3121343415921515, \
-0.34694832110949897`}, {-0.3108010773358169, -0.34453678021767725`}, \
{-0.30568057007761, -0.3494108298955237}, {-0.3026191531215043, \
-0.3536201968720597}, {-0.3027407410521805, -0.35449721357637826`}}, \
{{-0.24473655150731163`, -0.4209195253568257}, {-0.24416123573159476`, \
-0.42112201587509}, {-0.24364142683546064`, -0.42138024706830673`}, \
{-0.2435120307846039, -0.42148962707958443`}, {-0.24370359736605982`, \
-0.42258212405540013`}, {-0.24291748351813866`, -0.42341336630603366`}, \
{-0.24362004122575734`, -0.42396236272610416`}, {-0.24473007114770795`, \
-0.4222933166436766}, {-0.2441461274618617, -0.42181148288096704`}, \
{-0.24405298554741794`, -0.4213259780607021}, {-0.2449157564358444, \
-0.4221697396003827}, {-0.24572687910745122`, -0.42167381645704927`}, \
{-0.2455475860115578, -0.4209411045121249}, {-0.24473655150731163`, \
-0.4209195253568257}}, {{-0.13033080736374203`, -0.4975138601363975}, \
{-0.1296728553441959, -0.4975312576171278}, {-0.1295818914965429, \
-0.497256851278026}, {-0.12872349346673667`, -0.4975198574014279}, \
{-0.12822897059930372`, -0.4979211678789275}, {-0.12876536173352626`, \
-0.497893539898936}, {-0.12872887562681287`, -0.4976059201560135}, \
{-0.12916586305795358`, -0.4977495246369319}, {-0.12887188718814327`, \
-0.4981776254948201}, {-0.12899292840979232`, -0.4985681634912686}, \
{-0.12972145137547167`, -0.49806004678472}, {-0.13048043753947197`, \
-0.4981654034977333}, {-0.13058912892594363`, -0.49777544777577853`}, \
{-0.13033080736374203`, -0.4975138601363975}}, {{-0.10250261737717366`, \
-0.5047580438845016}, {-0.10273933657927785`, -0.5045850663473099}, \
{-0.10262909188268947`, -0.5044170403077408}, {-0.1022641275288982, \
-0.504515335624886}, {-0.10204640827391279`, -0.5043795233787725}, \
{-0.10207942994255227`, -0.5045859436197783}, {-0.10171437307698658`, \
-0.5046995746838243}, {-0.10199468020321964`, -0.5047338634360427}, \
{-0.10217585627277298`, -0.5045376457449527}, {-0.10238865353970802`, \
-0.5046603081784562}, {-0.10240537304024337`, -0.5047456979271192}, \
{-0.10240752592124323`, -0.5047499116146761}, {-0.10250261651244463`, \
-0.5047580446211738}, {-0.10250261737717366`, -0.5047580438845016}}, {{
           0.8554310482200728, 0.23198702041778296`}, {0.8552954345909916, 
           0.23142183776434636`}, {0.8551785440185621, 0.2313904974014796}, {
           0.8552249884065939, 0.23116543627050593`}, {0.8547818957880071, 
           0.2307815015306986}, {0.8546416587039698, 0.23088344443746556`}, {
           0.8543432124338286, 0.23059632102127103`}, {0.8542642103718808, 
           0.23081025526427076`}, {0.8538566940956055, 
           0.23102910925614023`}, {0.8542581247731313, 0.2319206151905307}, {
           0.8547168550912354, 0.2320357918422579}, {0.8549752297237011, 
           0.23233880133683574`}, {0.8554595434043992, 
           0.23233026250545652`}, {0.8554310482200728, 
           0.23198702041778296`}}, {{-0.11469539785757793`, \
-0.25944658065735743`}, {-0.11464614921653624`, -0.25919992660050784`}, \
{-0.11472907933085293`, -0.25898845968477535`}, {-0.11459313481054052`, \
-0.259018867893148}, {-0.11455073869643326`, -0.2589401335533313}, \
{-0.11447788003701832`, -0.2589149070480679}, {-0.11449485829141881`, \
-0.25902760819780957`}, {-0.11439199252266291`, -0.2590187528661703}, \
{-0.11443267282163985`, -0.2591001297088432}, {-0.11437567762848165`, \
-0.25915339458101366`}, {-0.11454519698189457`, -0.25920232261153003`}, \
{-0.11457865023329095`, -0.25941477882429687`}, {-0.11469539785757793`, \
-0.25944658065735743`}}, {{0.011810052274281953`, -0.012414204608463054`}, {
           0.011739928184973696`, -0.012494237309578002`}, {
           0.011920537469602586`, -0.012383499552275646`}, {
           0.01205662740270362, -0.012672047720913585`}, {
           0.011617160754727029`, -0.012827601846347271`}, {
           0.011523440169522866`, -0.012640181202167835`}, {
           0.011199168771723955`, -0.01292756585797644}, {
           0.011135326223057556`, -0.012726252017440706`}, {
           0.010966098424147573`, -0.012670561597110616`}, {
           0.011526022312619446`, -0.011895929810523106`}, {
           0.011868801323983337`, -0.01178161583594101}, {
           0.01201039555893803, -0.012104628482832861`}, {
           0.011810052274281953`, -0.012414204608463054`}}, {{
           1.1101727228258802`, -0.40306871320804805`}, {
           1.1097272258688742`, -0.40180490341909114`}, {
           1.1102575775323602`, -0.3992951248720861}, {
           1.111157558890843, -0.39732886453047284`}, {
           1.1126233394894554`, -0.3966457951373746}, {
           1.113683703545699, -0.39754489734888193`}, {
           1.1138257140679313`, -0.3987907916556279}, {
           1.113201128390333, -0.4020254248930477}, {
           1.1121561916029317`, -0.4035008471638743}, {
           1.1122686821632555`, -0.40444530504931403`}, {
           1.1116859265417243`, -0.4052247146239471}, {
           1.111327993459377, -0.4038843992188759}, {
           1.1101727228258802`, -0.40306871320804805`}}, {{0.755978475254377, 
           0.2429609258138877}, {0.7633639437893728, 0.24005624129336872`}, {
           0.7689921528195895, 0.23274963819723918`}, {0.7745722738541888, 
           0.22540478078903792`}, {0.779068544504199, 0.2194118511298484}, {
           0.7741192290496521, 0.2150653509893207}, {0.7752915201638007, 
           0.20594181674179562`}, {0.7687474137549665, 
           0.20770903331843008`}, {0.7621753642976224, 
           0.21836872966646176`}, {0.7475862391350919, 0.2271202888832566}, {
           0.7454926657549446, 0.2283760545097912}, {0.7498248981290968, 
           0.2309545598416937}, {0.7493756858720534, 0.2432278762344164}, {
           0.755978475254377, 0.2429609258138877}}, {{0.8329769543320311, 
           0.27018557631344675`}, {0.8351254846643904, 
           0.27547206940510904`}, {0.8415673209229527, 0.2595074484738057}, {
           0.849871423528676, 0.25624140511112353`}, {0.8528407503051034, 
           0.24873453145603483`}, {0.8409525202093021, 
           0.24313544781081156`}, {0.8349809580953018, 
           0.24041087372593783`}, {0.8289917897851287, 
           0.23773624458714884`}, {0.8182183570106478, 
           0.23306883150737517`}, {0.8154467690797266, 0.2414182492287506}, {
           0.8204197719016638, 0.24553961784820688`}, {0.8253618358592953, 
           0.24970631441403324`}, {0.8257263386696168, 0.2500164787009114}, {
           0.8305583964520995, 0.26326207229861387`}, {0.8329769543320311, 
           0.27018557631344675`}}, {{1.2770235890575867`, 
           0.3635437515725921}, {1.276697933776805, 0.36168558855904964`}, {
           1.275818875157935, 0.3651309202090337}, {1.2751973970696768`, 
           0.3651984858685374}, {1.2750526039588983`, 0.3644709999933351}, {
           1.274704446428708, 0.3642075815886225}, {1.2745988952602525`, 
           0.3642708998934202}, {1.2758080896480932`, 0.3662031614351484}, {
           1.2788555927075773`, 0.3649682297445335}, {1.278562753473442, 
           0.368406093208171}, {1.2806965778226624`, 0.36883285124122484`}, {
           1.2785319408569102`, 0.3612856321931241}, {1.2770235890575867`, 
           0.3635437515725921}}, {{-0.5856009456576137, 
           0.505491328880651}, {-0.5828436611705107, 
           0.5021578050934743}, {-0.5885642913117813, 
           0.49166080047449157`}, {-0.5928869535476051, 
           0.4852456483863447}, {-0.5918117324793966, 
           0.49036580378078576`}, {-0.5967198365161428, 
           0.4894744341578932}, {-0.5953286249966191, 
           0.48219150231346564`}, {-0.6045147471989063, 
           0.47678779429992746`}, {-0.6028358852757378, 
           0.4827991440253774}, {-0.601093135009665, 
           0.48877713157977815`}, {-0.5998039106395794, 
           0.49304422228675954`}, {-0.5932543062992209, 
           0.493573009500336}, {-0.5856009456576137, 
           0.505491328880651}}, {{-0.18175553670349856`, 
           0.5931820035957527}, {-0.1854851450223549, 
           0.5948718615902002}, {-0.18903787279003811`, 
           0.5965571577881045}, {-0.18547347147244622`, 
           0.6033377074211433}, {-0.18457912476253985`, 
           0.6049623434981332}, {-0.18132805446438782`, 
           0.6029814367549856}, {-0.1796927116017757, 
           0.6020144161876708}, {-0.1780510769423646, 
           0.601063035932476}, {-0.17474967076175785`, 
           0.599207243157035}, {-0.17218761625059884`, 
           0.5978187297870802}, {-0.17676718610435013`, 
           0.5985895568064613}, {-0.17850210491073798`, 
           0.5989059860445187}, {-0.18175553670349856`, 
           0.5931820035957527}}, {{-0.24234292237299537`, 
           0.4518418351172663}, {-0.232111384180514, 
           0.45799627873906845`}, {-0.2317037743656056, 
           0.45396124983011293`}, {-0.2312420090122271, 
           0.44991655821167226`}, {-0.2301557110897384, 
           0.44180039727154646`}, {-0.2289230961889723, 
           0.43406481506490274`}, {-0.23290888443906793`, 
           0.4335369307527547}, {-0.23691222116692884`, 
           0.43304381302406614`}, {-0.24050889867490485`, 
           0.43263221385755657`}, {-0.2421349363392624, 
           0.43563976791753883`}, {-0.24372407307791635`, 
           0.4386528345772999}, {-0.24679148827971484`, 
           0.4446941808758605}, {-0.2482696985462729, 
           0.4477217958963041}, {-0.24971087154559682`, 
           0.45075359433892653`}, {-0.24986066331743648`, 
           0.45107348449821977`}, {-0.24234292237299537`, 
           0.4518418351172663}}, {{-0.2476932732008885, -0.4227348528556156}, \
{-0.24735971106938248`, -0.4230864854996312}, {-0.2483239571008926, \
-0.42384640578647925`}, {-0.24948443298407708`, -0.42346874976983023`}, \
{-0.2500496036221286, -0.4238498739994327}, {-0.2505581138921529, \
-0.42294107098443556`}, {-0.2504943519223478, -0.4234398044272276}, \
{-0.2511142680734137, -0.4235089787652982}, {-0.2511962582794327, \
-0.42334394763909156`}, {-0.25056689607802013`, -0.42157526165673614`}, \
{-0.2491962109443671, -0.42318457845337737`}, {-0.2476932732008885, \
-0.4227348528556156}}, {{-0.08071565889048804, -0.5117226618251944}, \
{-0.08053621218689971, -0.5115610400963823}, {-0.08016002998157544, \
-0.512040015738307}, {-0.07968562978303365, -0.5120973491689673}, \
{-0.0788957608215236, -0.5130489518816729}, {-0.07873464307363466, \
-0.5147828620613967}, {-0.07931902612609555, -0.5147484242117433}, \
{-0.08025419506244098, -0.5138912053169283}, {-0.08091633138071021, \
-0.514012227998014}, {-0.08075813070667633, -0.5128615953762857}, \
{-0.08129511060106284, -0.512066331407772}, {-0.08071565889048804, \
-0.5117226618251944}}, {{0.37236861734331234`, 0.39594961851912486`}, {
           0.37243609764629587`, 0.3962483323176337}, {0.3736156107242135, 
           0.3955757734146148}, {0.3745964885041636, 0.3957128757372677}, {
           0.3746455281943879, 0.39513367750785316`}, {0.37396498019385466`, 
           0.39510914955066495`}, {0.37538116040056035`, 
           0.3946815655006467}, {0.37412922187764597`, 0.3945366184583932}, {
           0.3749589971794596, 0.39391006141822027`}, {0.37394107783501457`, 
           0.3941936954050844}, {0.37370422166969447`, 0.394899572470619}, {
           0.37236861734331234`, 
           0.39594961851912486`}}, {{-0.1358758214203143, 
           0.5781124523081992}, {-0.13450924673747347`, 
           0.5812179975234254}, {-0.13379661620413222`, 
           0.5794830899013441}, {-0.13306093824482707`, 
           0.577748996960689}, {-0.13152037378157994`, 
           0.5742841346084429}, {-0.13071546087270797`, 
           0.5725538049957574}, {-0.12988744771629945`, 
           0.5708251696139172}, {-0.12885778179465224`, 
           0.5687423161013899}, {-0.13460063102797667`, 
           0.5669128667338051}, {-0.13750491879147647`, 
           0.5660408335501281}, {-0.14043061678914415`, 
           0.5651975714108619}, {-0.1414072053430881, 
           0.564923845923378}, {-0.13761809319256194`, 
           0.5741314683189401}, {-0.1358758214203143, 
           0.5781124523081992}}, {{-0.15898270715822965`, 
           0.5190664779534376}, {-0.1625719638856818, 
           0.5136433455800478}, {-0.1647688103977201, 
           0.5144940536261301}, {-0.16696027324837212`, 
           0.5153623984592242}, {-0.16713524108129477`, 
           0.5154325830633018}, {-0.1691415365700024, 
           0.5202624693509101}, {-0.17009625226023015`, 
           0.522678839829095}, {-0.1710186998640551, 
           0.5250957478698364}, {-0.17125764815403857`, 
           0.5257360256485956}, {-0.16759871154614786`, 
           0.527067699731919}, {-0.16396804252721947`, 
           0.5284335330000312}, {-0.15799589528522245`, 
           0.5307790645136108}, {-0.15838000271938246`, 
           0.5269204511491553}, {-0.15870724158012878`, 
           0.5230443499106697}, {-0.15898270715822965`, 
           0.5190664779534376}}, {{-0.09367423592825187, \
-0.5196409842727563}, {-0.09315687286346609, -0.5198713906464458}, \
{-0.09298486534162707, -0.5201147067886417}, {-0.09290994774606136, \
-0.5207450126549982}, {-0.09318818094118717, -0.521350173105989}, \
{-0.09402563614708234, -0.5215076174661211}, {-0.0944124712078568, \
-0.5212422823211857}, {-0.09453633776918625, -0.5208264455309515}, \
{-0.09443238335459372, -0.5202725395684811}, {-0.09411227669409322, \
-0.5196659796245477}, {-0.09367423592825187, -0.5196409842727563}}, {{
           0.5581376708697009, 0.24858188649985946`}, {0.5579667436183426, 
           0.24862180187389368`}, {0.558003513915094, 0.24873380090076277`}, {
           0.557847753598387, 0.24894366409187715`}, {0.558239267461717, 
           0.24890855412185078`}, {0.5583146821515744, 0.2487507667268841}, {
           0.5582086265405151, 0.24865463636850163`}, {0.5582975389281211, 
           0.24840068257278092`}, {0.5582481831025383, 
           0.24830032803673327`}, {0.5581431006905487, 
           0.24834794591375664`}, {0.5581376708697009, 
           0.24858188649985946`}}, {{0.5765563025675075, 
           0.4280731050776918}, {0.5788042573796688, 0.42673553814436394`}, {
           0.5780504593053551, 0.4234384031663413}, {0.5730404766871204, 
           0.42117704559481184`}, {0.5721875794605951, 0.4212834169848544}, {
           0.5719969386985395, 0.4213507908841572}, {0.5717816835627284, 
           0.42148975657477317`}, {0.5727230041262854, 
           0.42298086905136784`}, {0.5711177333560592, 
           0.42273957373710236`}, {0.5710660705583208, 
           0.42492429241475965`}, {0.5765563025675075, 
           0.4280731050776918}}, {{0.5627198412952659, 
           0.49524195335087523`}, {0.5641998302782898, 
           0.49267490401430386`}, {0.5671469355237103, 0.490501822890604}, {
           0.5752178411770223, 0.48145881490673537`}, {0.5754758067879855, 
           0.48032244755047176`}, {0.56912371371313, 0.4842845799756384}, {
           0.5659728225186208, 0.4896509054847335}, {0.5604147168628605, 
           0.4954587082748721}, {0.5597957486248935, 0.49646979999056656`}, {
           0.5596709840850965, 0.4972364895786396}, {0.5627198412952659, 
           0.49524195335087523`}}, {{-0.4046371071483426, \
-0.43070301233119274`}, {-0.4032981375750372, -0.43064590629144656`}, \
{-0.4032983359503312, -0.4297547307825711}, {-0.400391971549286, \
-0.4311519140668131}, {-0.40101240544928174`, -0.4318023722338875}, \
{-0.40544327838547606`, -0.4310482749708557}, {-0.4055854285550159, \
-0.4288750030387795}, {-0.4047724785628262, -0.429082067551941}, \
{-0.4050607750804991, -0.4302825162047864}, {-0.4046371071483426, \
-0.43070301233119274`}}, {{-0.3322250321000282, -0.36706533161525023`}, \
{-0.33058541853477896`, -0.3667026357094716}, {-0.3284487829947253, \
-0.3641663381643403}, {-0.32803855513618846`, -0.367997303503401}, \
{-0.3312245512679163, -0.36831240834402834`}, {-0.3292318538045853, \
-0.36839766412580555`}, {-0.3295957620363712, -0.3694068145639242}, \
{-0.33074804283517517`, -0.3698906470494139}, {-0.33118178813767474`, \
-0.3697943419958313}, {-0.3322250321000282, -0.36706533161525023`}}, \
{{-0.12803739679955822`, -0.4970652374686104}, {-0.12914588601408614`, \
-0.49701477864181026`}, {-0.12845559563743977`, -0.4968614977091107}, \
{-0.12782502440222335`, -0.4960266719034948}, {-0.12636160480351977`, \
-0.496086997752588}, {-0.12629201928412362`, -0.49636125792690483`}, \
{-0.12674137298352078`, -0.4967982922446547}, {-0.1273720093016284, \
-0.49650455701197704`}, {-0.12738678079682095`, -0.49685703111812324`}, \
{-0.12803739679955822`, -0.4970652374686104}}, {{-0.12411170548071923`, \
-0.4962658352906006}, {-0.12408946219074045`, -0.4967144769167328}, \
{-0.12447669240427692`, -0.49678147746646967`}, {-0.12441311094489466`, \
-0.496236492323865}, {-0.12389256986515648`, -0.4960893819459853}, \
{-0.12389150762246835`, -0.4955063049114508}, {-0.12333922527499147`, \
-0.4958116507608515}, {-0.12287895503662913`, -0.49562335819799247`}, \
{-0.12225824146186506`, -0.49564824311013805`}, {-0.12411170548071923`, \
-0.4962658352906006}}, {{-0.07173595185419594, -0.018998224263912858`}, \
{-0.07832296539869302, -0.018997099322086142`}, {-0.08662961979961466, \
-0.009728845992112987}, {-0.08116948751348922, -0.0040466834878121844`}, \
{-0.08357587447446105, -0.010256820648348201`}, {-0.08123552643849011, \
-0.014622493886330128`}, {-0.0692595058002612, -0.015607163766332163`}, \
{-0.05781343202170086, -0.01640366534022434}, {-0.06508297667847493, \
-0.024362772307087197`}, {-0.07173595185419594, -0.018998224263912858`}}, {{
           0.17775984762510996`, 0.4753962177265302}, {0.1811741530228566, 
           0.4756223221835414}, {0.17564914505151566`, 0.4745468151871407}, {
           0.17012743192611568`, 0.47356239275185774`}, {0.1701043809874332, 
           0.4735584718256116}, {0.1645068485537646, 0.4778177030792966}, {
           0.16737979945970682`, 0.4779878957537179}, {0.17025858175993477`, 
           0.4781823702744223}, {0.1760325832467345, 0.47864456561515883`}, {
           0.17963884916438455`, 0.4789820438328489}, {0.17775984762510996`, 
           0.4753962177265302}}, {{1.1153933303037904`, -0.368596235153886}, {
           1.1145201428955134`, -0.3692767495953141}, {
           1.1140400131807766`, -0.368611874875672}, {
           1.1145201646321123`, -0.3681243731048309}, {
           1.1141577442581254`, -0.36674277861741855`}, {
           1.1150630270957096`, -0.36569716877911934`}, {
           1.115482626830009, -0.3658063636496159}, {
           1.1150829546460865`, -0.36678062779655646`}, {
           1.1157513757830353`, -0.3665355983085427}, {
           1.1153933303037904`, -0.368596235153886}}, {{
           1.119108017588878, -0.3146777427670598}, {
           1.121716427820821, -0.3126166688833036}, {
           1.1228919857253248`, -0.31369981630898647`}, {
           1.1224101546996244`, -0.32464304275570255`}, {
           1.119026632480327, -0.32657697461639124`}, {
           1.1179133773175316`, -0.3255839051446124}, {
           1.1178255915220483`, -0.32329097991790184`}, {
           1.1193440310190654`, -0.321738212536491}, {
           1.1185213369394977`, -0.31804022276892907`}, {
           1.119108017588878, -0.3146777427670598}}, {{-0.5705502755796249, 
           0.5287612965075149}, {-0.5681337946863576, 
           0.5370670202106504}, {-0.5720631812242619, 
           0.5322387084864757}, {-0.5744536989353811, 
           0.5339605363186596}, {-0.5641374696513294, 
           0.5450385033357852}, {-0.5620607964553782, 
           0.536388047787987}, {-0.560967510437154, 
           0.5321065325962945}, {-0.5645710508541861, 
           0.5394336867848598}, {-0.5705502755796249, 
           0.5287612965075149}}, {{-0.6220373804166645, 
           0.47842643171928495`}, {-0.614863451076878, 
           0.4732804041031179}, {-0.6241286693987075, 
           0.46995702618160207`}, {-0.6114048375168448, 
           0.4687273325850391}, {-0.6107968846620472, 
           0.46867356288027395`}, {-0.6265330317896263, 
           0.46432303457218277`}, {-0.6295553270826149, 
           0.4634970605656098}, {-0.6263062876701854, 
           0.4700698815898207}, {-0.6229888005317136, 
           0.47659034213038487`}, {-0.6220373804166645, 
           0.47842643171928495`}}, {{-0.22760820304802706`, 
           0.527920829724867}, {-0.2274079250261649, 
           0.5313601838111006}, {-0.22716146792087885`, 
           0.5347842821971558}, {-0.22707234904759535`, 
           0.5358830625010153}, {-0.22323925022897845`, 
           0.5329060936202353}, {-0.22130362172437068`, 
           0.531440953761389}, {-0.21935549088065365`, 
           0.5299914653364433}, {-0.21713501161499477`, 
           0.5283693857065724}, {-0.2282698113216674, 
           0.5223507606405381}, {-0.22889328352625124`, 
           0.5220208684960008}, {-0.22760820304802706`, 
           0.527920829724867}}, {{-0.14051456432321988`, 
           0.5622352192753218}, {-0.13670237666101862`, 
           0.5624477874260085}, {-0.13549880205845719`, 
           0.5610186278953488}, {-0.1342780274946526, 
           0.559596192159228}, {-0.131785088177561, 
           0.5567720833163656}, {-0.13075791619607796`, 
           0.5556384729745332}, {-0.13540561679919252`, 
           0.5537262173686984}, {-0.1364770151608583, 
           0.5554294708563043}, {-0.1375262748040424, 
           0.5571368885424107}, {-0.13955830306978928`, 
           0.5605633987913649}, {-0.14051456432321988`, 
           0.5622352192753218}}, {{-0.33590515605792404`, \
-0.3201376138902069}, {-0.3339558675412757, -0.31792517201940546`}, \
{-0.33126858683164734`, -0.31982550780428043`}, {-0.3272290126733559, \
-0.3205913446731178}, {-0.3272163760125153, -0.31980399378062213`}, \
{-0.3249648488533675, -0.3194336373394279}, {-0.3247679930283911, \
-0.3199864205805107}, {-0.3262147643034783, -0.3213419195558244}, \
{-0.33590515605792404`, -0.3201376138902069}}, {{-0.11419811657382432`, \
-0.25890321989199916`}, {-0.11424627262558498`, -0.2588948552786959}, \
{-0.11395950450258191`, -0.2586217703369591}, {-0.11393869685287243`, \
-0.25866346011978675`}, {-0.11399392730303762`, -0.25874926945518056`}, \
{-0.11397520087575055`, -0.2586780736540482}, {-0.11411702273969203`, \
-0.2587732234581289}, {-0.11413334927850667`, -0.25890921220440355`}, \
{-0.11419811657382432`, -0.25890321989199916`}}, {{-0.11170506634863776`, \
-0.257997684320278}, {-0.11182625144134478`, -0.2579832939361522}, \
{-0.11188352810145447`, -0.25803137819718747`}, {-0.11178337665870705`, \
-0.2580941936773109}, {-0.11220316704196716`, -0.2582283071157481}, \
{-0.11155445132792621`, -0.2577834475568595}, {-0.11138686690468542`, \
-0.2580043354680032}, {-0.11155804285413616`, -0.25794158209203955`}, \
{-0.11170506634863776`, -0.257997684320278}}, {{-0.07711258457753462, 
           0.041912809641695345`}, {-0.08264826584210483, 
           0.045550380209752696`}, {-0.0721896582722472, 
           0.040179350165112065`}, {-0.06691244415000987, 
           0.037542194364992884`}, {-0.061603702542821305`, 
           0.03493759251498393}, {-0.051472124940229624`, 
           0.03009849808088643}, {-0.0571375156175739, 
           0.030844696859448545`}, {-0.06279481707702704, 
           0.03162746598373367}, {-0.06580600409945618, 
           0.03205949620933363}, {-0.07539650305227488, 
           0.04039234298024336}, {-0.07711258457753462, 
           0.041912809641695345`}}, {{-0.09857852641650895, \
-0.506582584950239}, {-0.09841924546303266, -0.506645445797633}, \
{-0.09842282660815528, -0.5066590261892}, {-0.09851538660600842, \
-0.506683391663475}, {-0.09855937098108523, -0.5067413057250824}, \
{-0.09854887570505708, -0.5066425332821214}, {-0.09868438600196101, \
-0.5066392261427978}, {-0.09865829649224848, -0.5065856733880625}, \
{-0.09857852641650895, -0.506582584950239}}, {{-0.07644983591273265, \
-0.6002756448675548}, {-0.07754634474326193, -0.6005484022496759}, \
{-0.07723487001645679, -0.6001754392153944}, {-0.07749837259332452, \
-0.6000240279758471}, {-0.07749318610357146, -0.599852101900209}, \
{-0.07681113497179598, -0.5998135804453144}, {-0.07639579469515174, \
-0.5990333714249833}, {-0.07608884095206964, -0.5995355083343227}, \
{-0.07644983591273265, -0.6002756448675548}}, {{-0.06849200015230737, \
-0.5363499562148106}, {-0.0683243231655566, -0.5360477182673686}, \
{-0.0668301520821826, -0.5355647312634664}, {-0.06687184667258153, \
-0.5356222573700113}, {-0.06681296877181248, -0.5356462313533789}, \
{-0.06683360608575531, -0.535674006734698}, {-0.06676457331054507, \
-0.5357378265250944}, {-0.06678247777992462, -0.5357732957981897}, \
{-0.06849200015230737, -0.5363499562148106}}, {{0.1777903848842387, 
           0.439426590828691}, {0.17565681559612883`, 0.43949949380140574`}, {
           0.1733638322140878, 0.4376849442849624}, {0.17105007282500348`, 
           0.4358850653541034}, {0.16723581037173846`, 0.4329841520403039}, {
           0.16874954939974393`, 0.4361557609695367}, {0.1702197709184304, 
           0.4393307543150575}, {0.17302950496241895`, 0.4456892158941649}, {
           0.17421517352495428`, 0.4485010213128061}, {0.17995270254172216`, 
           0.443591274668867}, {0.1777903848842387, 0.439426590828691}}, {{
           0.3708093078048412, 0.38919155305518804`}, {0.3709993543908441, 
           0.3901468174997192}, {0.37308347739524306`, 0.3900150654157961}, {
           0.37332045084499904`, 0.3894680750302468}, {0.37274678464155037`, 
           0.38833974865525084`}, {0.3711692632442545, 0.3880612046375049}, {
           0.37168464507645854`, 0.3886092738084433}, {0.3700100196245068, 
           0.38865805904119555`}, {0.3708093078048412, 
           0.38919155305518804`}}, {{0.3764200426211834, 
           0.38862414783762567`}, {0.37860765493841836`, 
           0.38897799847189685`}, {0.3786282608004295, 0.3884728456507872}, {
           0.3792742791502817, 0.3879486958722534}, {0.3788242715308199, 
           0.3877225703564322}, {0.37775997575254766`, 0.3882153666322883}, {
           0.3773180339248809, 0.387527299558485}, {0.37573514765926536`, 
           0.38837268099333544`}, {0.3764200426211834, 
           0.38862414783762567`}}, {{0.4485872147453055, 
           0.3188238169912563}, {0.44736099017510367`, 0.317470412398497}, {
           0.44727328544001227`, 0.32048138452623287`}, {0.4444520258017937, 
           0.31898693172816683`}, {0.4436487195154613, 
           0.32005737039192983`}, {0.4502155008619756, 0.3220835419950016}, {
           0.45055974042401986`, 0.319048419012041}, {0.4469526946024105, 
           0.3152985398174753}, {0.4485872147453055, 0.3188238169912563}}, {{
           0.5559771808855155, 0.2542484445143481}, {0.5561591038500387, 
           0.2543502155617528}, {0.5561497416331337, 0.25381314768775926`}, {
           0.5558564839924215, 0.2534613274360222}, {0.5557615716793762, 
           0.25378115865434586`}, {0.555849490319034, 0.2541204828214186}, {
           0.5558667526762248, 0.25396374820383577`}, {0.5559972663311795, 
           0.2540340370841832}, {0.5559771808855155, 0.2542484445143481}}, {{
           0.43308682198116105`, 0.3950614558783065}, {0.42990864992903915`, 
           0.39884657533382245`}, {0.4267691473595279, 
           0.39685689464022117`}, {0.4284329612269875, 
           0.40029854255814507`}, {0.42460690563284387`, 
           0.39974423459071484`}, {0.4243674491014713, 0.4036560228544672}, {
           0.4271447709700407, 0.4001569771833555}, {0.4284591826765867, 
           0.4027105473346395}, {0.43308682198116105`, 
           0.3950614558783065}}, {{0.8551914220859512, 
           0.16477429471437033`}, {0.8549945929142421, 
           0.16469568011082789`}, {0.8555163222305674, 0.1649517313513935}, {
           0.8570049973451639, 0.16505552684712343`}, {0.8574760120673158, 
           0.1654279288539118}, {0.8579753124687932, 0.16500547890892403`}, {
           0.8584077755375981, 0.16087245623870564`}, {0.8554538099172779, 
           0.16082466693921896`}, {0.8551914220859512, 
           0.16477429471437033`}}, {{0.7336502963168132, 
           0.34610683627248423`}, {0.7340708165033941, 0.345822102009864}, {
           0.7346075035492208, 0.34638580055029494`}, {0.7351206498154723, 
           0.34605736681973714`}, {0.7361341471154449, 
           0.34624749857394865`}, {0.7364828067301856, 0.3461089648909964}, {
           0.7326265497257065, 0.34335621466588295`}, {0.7309774652378943, 
           0.3465527852832788}, {0.7336502963168132, 
           0.34610683627248423`}}, {{0.3875769838086024, 
           0.7800313907076201}, {0.3880910117851691, 0.778603833508173}, {
           0.38160378127958233`, 0.7777719874330035}, {0.37832217555721304`, 
           0.7796519670436347}, {0.3875769838086024, 
           0.7800313907076201}}, {{-1.2294571521090936`, 
           0.43721227735172496`}, {-1.2261725503237288`, 
           0.44230965144176887`}, {-1.217825728796618, 
           0.44467747276543085`}, {-1.2209926133963362`, 
           0.4341729456271816}, {-1.224060353654257, 
           0.4236307873302166}, {-1.2257802024375615`, 
           0.41754927154751376`}, {-1.2310438491339522`, 
           0.4215476601147083}, {-1.2362698311526388`, 
           0.425587993565003}, {-1.2369178742967708`, 
           0.4260939975314221}, {-1.2294571521090936`, 
           0.43721227735172496`}}, {{-0.22827237782289883`, 
           0.6013216108604467}, {-0.22503272386625459`, 
           0.6010448954728649}, {-0.2217993649284991, 
           0.6008034258154625}, {-0.22070351051418294`, 
           0.600729463976814}, {-0.22023841980204087`, 
           0.5993995896009047}, {-0.22617435484549614`, 
           0.6002515354638877}, {-0.23212432114676065`, 
           0.6012332026956432}, {-0.23226213146488225`, 
           0.6012574580350573}, {-0.22827237782289883`, 
           0.6013216108604467}}, {{-0.19749555656593576`, 
           0.29717655952291105`}, {-0.20225800804716024`, 
           0.29513307229683083`}, {-0.20705415288517817`, 
           0.2931249276444011}, {-0.20782151543207877`, 
           0.29280820790440926`}, {-0.21232758277195496`, 
           0.2994731293878225}, {-0.20386138029961448`, 
           0.30565215511893445`}, {-0.20020294835204439`, 
           0.304170514864986}, {-0.19653122407604115`, 
           0.30271436559505877`}, {-0.19341638103482112`, 
           0.3015030550354399}, {-0.19749555656593576`, 
           0.29717655952291105`}}, {{-0.1340378757040665, 
           0.3639027820167717}, {-0.13014178908266402`, 
           0.37075688705199134`}, {-0.12629023889803126`, 
           0.3776226237673863}, {-0.12622540807152755`, 
           0.37773897721126487`}, {-0.12030314271376523`, 
           0.3748925345047207}, {-0.11634535974086417`, 
           0.3730516134786242}, {-0.12198669452960019`, 
           0.3608588078912374}, {-0.12855452198687697`, 
           0.3624760203896499}, {-0.1340378757040665, 
           0.3639027820167717}}, {{-0.07282802860349114, \
-0.5420717354653335}, {-0.07172968852608562, -0.5410214051600946}, \
{-0.07099141888444122, -0.5414251755311394}, {-0.07035754876738132, \
-0.5423813283997176}, {-0.07053400347811277, -0.5428627032730156}, \
{-0.07186461980987445, -0.5433857078293951}, {-0.07262084765420129, \
-0.5429992246473118}, {-0.07282802860349114, -0.5420717354653335}}, \
{{-0.06475947991387386, -0.6210655363317127}, {-0.06361672404004173, \
-0.6202258071565778}, {-0.06047938017013624, -0.6195460093719667}, \
{-0.06112823283776451, -0.6210742937594538}, {-0.06447947070145779, \
-0.6219655091052282}, {-0.06532506872651749, -0.6227173171988493}, \
{-0.06640540007263626, -0.6224859794842802}, {-0.06475947991387386, \
-0.6210655363317127}}, {{0.710520384005372, -0.460287731455357}, {
           0.7090901360315042, -0.4597185160873002}, {
           0.7108418972057963, -0.4579628703388094}, {
           0.7105889815671494, -0.4569065575881136}, {
           0.7116313103653914, -0.4566694898008539}, {
           0.7119811234246454, -0.4584597253621631}, {
           0.7106253561554922, -0.45884020166336026`}, {
           0.710520384005372, -0.460287731455357}}, {{0.3731370087448364, 
           0.3960087057766707}, {0.37260151741934777`, 0.3965166377721416}, {
           0.37201916897463805`, 0.3965561486351686}, {0.3724621982281541, 
           0.3968618162664383}, {0.373760523416977, 0.39608035452653734`}, {
           0.37413221530833723`, 0.39644971305737725`}, {0.3741892379877909, 
           0.39590351181819894`}, {0.3731370087448364, 
           0.3960087057766707}}, {{0.735601834892792, 0.24815308007085146`}, {
           0.7298314332409861, 0.25072065306612823`}, {0.728701840462929, 
           0.2661029498898684}, {0.728568149342314, 0.2676798951187453}, {
           0.7405319363076651, 0.25769763581845107`}, {0.7479489979454983, 
           0.2445593160122774}, {0.7422403187641989, 0.2425942044805912}, {
           0.735601834892792, 0.24815308007085146`}}, {{0.5606627609273767, 
           0.5151904879742331}, {0.565717911309866, 0.5124530484151234}, {
           0.5708770722582854, 0.5014240779839747}, {0.5685094566668939, 
           0.5045800623567721}, {0.5606913978481903, 0.5070849547251776}, {
           0.556536995761185, 0.5156132529714728}, {0.5591453814540648, 
           0.517790266551533}, {0.5606627609273767, 0.5151904879742331}}, {{
           0.8076823823428951, 0.3600063778949296}, {0.807685820228352, 
           0.3599848919356023}, {0.8076833427905026, 0.35998387613754934`}, {
           0.8076799992208735, 0.3599986814752219}, {0.807680369766858, 
           0.3599990485222852}, {0.807682264258019, 0.3600051682849}, {
           0.8076823392730638, 0.3600058849138604}, {0.8076823823428951, 
           0.3600063778949296}}, {{0.21325256078131097`, 
           0.6731375685770746}, {0.20811569040097289`, 0.6727812457940777}, {
           0.20903638215340636`, 0.6742057763489097}, {0.20994391660869235`, 
           0.6756409266145319}, {0.2108381499335081, 0.6770866166333155}, {
           0.21171893878470305`, 0.6785427651084656}, {0.21182795577868252`, 
           0.6787252983299117}, {0.21384937129691664`, 0.6776758876763632}, {
           0.21364468452265045`, 0.6760080808874679}, {0.21342306611207526`, 
           0.6743407767157986}, {0.21325256078131097`, 
           0.6731375685770746}}, {{0.8849922057759007, 
           0.41556024437862626`}, {0.8838869042396527, 0.4107662891511988}, {
           0.8812307180371736, 0.41390126405740846`}, {0.8822540521949459, 
           0.4104397971128744}, {0.8814661333229462, 0.4091335798860715}, {
           0.8796085229969464, 0.40843402905533005`}, {0.878809193365631, 
           0.41690217942264585`}, {0.8849922057759007, 
           0.41556024437862626`}}, {{-0.5789153303148384, 
           0.5253820945364082}, {-0.571587341984118, 
           0.5325138630046626}, {-0.5708238250710086, 
           0.5257507054717045}, {-0.5787365479430973, 
           0.5209051003056088}, {-0.5866182457362741, 
           0.5160087915060111}, {-0.5908170302533897, 
           0.5133717079663936}, {-0.5849098776311168, 
           0.5193978681587563}, {-0.5789461506806972, 
           0.5253516586467342}, {-0.5789153303148384, 
           0.5253820945364082}}, {{-0.6331309968581235, -0.7022307304234844}, \
{-0.6408575458842566, -0.6892653191677848}, {-0.6362557870925015, \
-0.6880135030364457}, {-0.6326765137353904, -0.6966606315001993}, \
{-0.629050275937416, -0.7052858990264549}, {-0.6283622459135829, \
-0.7069075561307918}, {-0.6406903766124897, -0.7063137461322221}, \
{-0.6331309968581235, -0.7022307304234844}}, {{-0.2889474639001056, \
-0.39695800806842935`}, {-0.29406051695589874`, -0.3902492238341184}, \
{-0.2917611998438551, -0.39188728470301476`}, {-0.2919405430109699, \
-0.3921691796447107}, {-0.29136354399374587`, -0.3924316252404182}, \
{-0.2942469009596134, -0.3812537205976052}, {-0.2889474639001056, \
-0.39695800806842935`}}, {{-0.27465145963785237`, -0.4333173675694366}, \
{-0.2741457298483624, -0.4302274520755546}, {-0.26931727876065786`, \
-0.4290201506732642}, {-0.26591302876702033`, -0.4309205141511773}, \
{-0.2628588315932556, -0.4285557395635794}, {-0.266226858974964, \
-0.43431325292358325`}, {-0.27465145963785237`, -0.4333173675694366}}, \
{{-0.26814968913407905`, -0.4699491082543191}, {-0.265818776143683, \
-0.47117420618757566`}, {-0.2654500835578833, -0.47349962632745746`}, \
{-0.2720098446789091, -0.47004741947897877`}, {-0.2732208333405986, \
-0.4682701852434602}, {-0.271395467341929, -0.46785510441627}, \
{-0.26814968913407905`, -0.4699491082543191}}, {{-0.07460022787669202, \
-0.5964104117025768}, {-0.07482126276158468, -0.5962009551799078}, \
{-0.07431860072084932, -0.5961913315641052}, {-0.07441902313380581, \
-0.5956660759477803}, {-0.07404300325656837, -0.5956786036412142}, \
{-0.07398916293387202, -0.5960006479178019}, {-0.07460022787669202, \
-0.5964104117025768}}, {{-0.07273272608063461, -0.5911857279989289}, \
{-0.07278668524168795, -0.5910600134950993}, {-0.07198248638939897, \
-0.5906213752924163}, {-0.07246824652633507, -0.5915836228157367}, \
{-0.07347426241014834, -0.591502786636328}, {-0.07277447818584269, \
-0.5914338848510321}, {-0.07273272608063461, -0.5911857279989289}}, {{
           0.5383300081093774, -0.42391596030479}, {
           0.5399137676783214, -0.4225215674003518}, {
           0.5424248664496051, -0.42365192894236287`}, {
           0.5397179667441112, -0.42783488116023294`}, {
           0.5378636407348457, -0.42873048923716334`}, {
           0.536227952609289, -0.42657846223607837`}, {
           0.5383300081093774, -0.42391596030479}}, {{
           0.6795119070570642, -0.3801136718490333}, {
           0.6795339952394933, -0.3800875193635516}, {
           0.6795341129031339, -0.3800876868589436}, {
           0.679862388764388, -0.3809373583657577}, {
           0.6801691821372765, -0.3822203803316464}, {
           0.6795119077476761, -0.38011367384304884`}, {
           0.6795119070570642, -0.3801136718490333}}, {{0.563432424998219, 
           0.4135645053148637}, {0.5644880267103333, 0.41355161498410675`}, {
           0.5645898097152455, 0.4140376391416479}, {0.5617858049927773, 
           0.4133844742854665}, {0.5665701368192189, 0.41488888860511414`}, {
           0.5648533860475512, 0.41288263105878986`}, {0.563432424998219, 
           0.4135645053148637}}, {{0.7338428059386499, 
           0.34053160524920867`}, {0.7344219028846648, 0.3416842967991237}, {
           0.7313358806055227, 0.3420779173512644}, {0.7306234476621541, 
           0.343414957553134}, {0.7347149776354333, 0.34249951005001444`}, {
           0.7398123831726735, 0.33885146195876775`}, {0.7338428059386499, 
           0.34053160524920867`}}, {{0.8076823823428951, 
           0.3600063778949296}, {0.8076811804615724, 0.3600138884358491}, {
           0.8076817850176772, 0.36001367552785707`}, {0.8076823134433413, 
           0.36001363655362517`}, {0.8076827476872862, 0.3600107673163927}, {
           0.8076826547189292, 0.3600094956242581}, {0.8076823823428951, 
           0.3600063778949296}}, {{0.5240280742301024, 0.5483694011192041}, {
           0.5237672810237669, 0.5480851480613261}, {0.5232098503284643, 
           0.5485692992630814}, {0.5227662653240217, 0.5485718289427529}, {
           0.5238525246525833, 0.5490157994625656}, {0.5245132755062198, 
           0.5481508600481337}, {0.5240280742301024, 0.5483694011192041}}, {{
           0.5281318106243784, 0.5463674600772398}, {0.527723515753729, 
           0.5464223953026887}, {0.5281395975341169, 0.5456628949104136}, {
           0.527939976123644, 0.5455784500280413}, {0.5273406663792354, 
           0.5465370357953478}, {0.5279263798881287, 0.5472057365413343}, {
           0.5281318106243784, 0.5463674600772398}}, {{0.6071645776537301, 
           0.5107787505203013}, {0.607164577610266, 0.510778750581336}, {
           0.6003396682721586, 0.5158395334171454}, {0.6054241550655737, 
           0.5134010117820635}, {0.6073230544644707, 0.5110194126620786}, {
           0.6073230547115265, 0.5110194124043315}, {0.6071645776537301, 
           0.5107787505203013}}, {{0.5307623408188856, 0.5504887999736775}, {
           0.5307428108918392, 0.5506056730016345}, {0.530053289682284, 
           0.5503108833216351}, {0.5304108704691489, 0.5510193039232558}, {
           0.5303252010726491, 0.5506001357864372}, {0.5307292083165199, 
           0.5507827047066755}, {0.5307623408188856, 0.5504887999736775}}, {{
           0.8792762505365468, 0.38136583845975036`}, {0.8918591859954534, 
           0.37896409867771785`}, {0.8857044993066895, 
           0.37670754719447774`}, {0.8795320170096459, 0.3744999598073625}, {
           0.8723003679717024, 0.37198340905986726`}, {0.8704422045720501, 
           0.36730414419467805`}, {0.8698105207054002, 0.3756375079841508}, {
           0.8792762505365468, 0.38136583845975036`}}, {{-1.4620302762993915`,
            0.23096341762143546`}, {-1.4614742698585046`, 
           0.23224409361072992`}, {-1.4611722323549425`, 
           0.23156466826987576`}, {-1.4612233417580223`, 
           0.227645256554744}, {-1.4637121998490512`, 
           0.22025762148343944`}, {-1.4620302762993915`, 
           0.23096341762143546`}}, {{-0.16683118694328336`, 
           0.5838957453116139}, {-0.16953439830203085`, 
           0.5784707700321043}, {-0.170265368188428, 
           0.5742869020283817}, {-0.16925775298144585`, 
           0.5801793179126166}, {-0.16827230336454932`, 
           0.5851164702524055}, {-0.16683118694328336`, 
           
           0.5838957453116139}}, {{-0.24252780400945562`, \
-0.42309101302714835`}, {-0.23985872940500988`, -0.4239896539632571}, \
{-0.23953915980888746`, -0.42570974582021626`}, {-0.24038577215173626`, \
-0.42469076913340104`}, {-0.24249146472954197`, -0.42470921776747594`}, \
{-0.24252780400945562`, -0.42309101302714835`}}, {{-0.14082453174631235`, \
-0.500662860507026}, {-0.14338765908765072`, -0.5009608978376474}, \
{-0.14411657080079124`, -0.5002171054053808}, {-0.1410058987144633, \
-0.49978520093462736`}, {-0.13878888293379163`, -0.5004732547378379}, \
{-0.14082453174631235`, -0.500662860507026}}, {{-0.1224458842859803, \
-0.4919987661124296}, {-0.12339079255047916`, -0.4918394249524466}, \
{-0.12366898822012165`, -0.49150840076663144`}, {-0.12209449766607591`, \
-0.4915299169093103}, {-0.12124602195144144`, -0.49255320340903885`}, \
{-0.1224458842859803, -0.4919987661124296}}, {{
           0.5441892073608343, -0.4267904626263874}, {
           0.5452069519944952, -0.42755467502385053`}, {
           0.5434267775195527, -0.42894137894207207`}, {
           0.5415961302069554, -0.42874623291173103`}, {
           0.5431653405246457, -0.42639351782321233`}, {
           0.5441892073608343, -0.4267904626263874}}, {{
           0.5741726032137966, -0.4507220646718859}, {
           0.5701855934675752, -0.44954092326417333`}, {
           0.5695503984152183, -0.44474966564057367`}, {
           0.5760006177965076, -0.4480215838606191}, {
           0.5756622476848798, -0.4501820814386525}, {
           0.5741726032137966, -0.4507220646718859}}, {{
           0.5785218849987607, -0.44313090552861256`}, {
           0.5786295670309427, -0.44106472173953054`}, {
           0.5797164996281172, -0.44102190771000477`}, {
           0.5808517866162826, -0.4432599215601524}, {
           0.5791495476534796, -0.444720829866196}, {
           0.5785218849987607, -0.44313090552861256`}}, {{
           0.5806622667623685, -0.4285515675200043}, {
           0.5789149661064045, -0.4280292853691505}, {
           0.5788140964319484, -0.42466990757288875`}, {
           0.5823186549813993, -0.42365048165201025`}, {
           0.5834016336310655, -0.4259865668101444}, {
           0.5806622667623685, -0.4285515675200043}}, {{
           0.6794586387322624, -0.3794718659801006}, {
           0.6795339945797707, -0.38008751842443156`}, {
           0.6795339952394933, -0.3800875193635516}, {
           0.6795119070570642, -0.3801136718490333}, {
           0.679507709631871, -0.3801015526408018}, {
           0.6794586387322624, -0.3794718659801006}}, {{0.3745782929422198, 
           0.3963687786445216}, {0.37453881324943, 0.3969086254265984}, {
           0.375081358926487, 0.3968128312759691}, {0.37510494888723434`, 
           0.39565002554511086`}, {0.3744362788699562, 0.3959989236336511}, {
           0.3745782929422198, 0.3963687786445216}}, {{0.48469570074159135`, 
           0.29454759448767476`}, {0.4846785832930246, 0.2945069479169758}, {
           0.48452607317775004`, 0.29460503841837343`}, {0.4846827003947441, 
           0.29488332105404225`}, {0.48477643192548403`, 
           0.2945833273749825}, {0.48469570074159135`, 
           0.29454759448767476`}}, {{0.676024636334464, 
           0.18963761901252923`}, {0.6767605061595089, 
           0.18937688412524956`}, {0.6765592334134782, 0.1890310658900133}, {
           0.6761892404462394, 0.18894623586360138`}, {0.6759769687299642, 
           0.1895930967307235}, {0.676024636334464, 0.18963761901252923`}}, {{
           0.5618759107389872, 0.3508134261647326}, {0.560814955472002, 
           0.3534875943906479}, {0.5618427638212551, 0.35343746650475005`}, {
           0.5629769346221482, 0.35087112064451437`}, {0.5627623575307314, 
           0.3500763080732339}, {0.5618759107389872, 0.3508134261647326}}, {{
           0.5603141641079277, 0.3593501416598025}, {0.5613011733836785, 
           0.3619720446614128}, {0.5616436236272155, 0.3622199987161679}, {
           0.5618274979826801, 0.3620960737410279}, {0.5604033070379986, 
           0.3580045019420432}, {0.5603141641079277, 0.3593501416598025}}, {{
           0.5782761175845396, 0.4279693459746793}, {0.5744119851775137, 
           0.42900005621021586`}, {0.5739599498419904, 0.4287467592200651}, {
           0.5776805417837375, 0.43144680114698797`}, {0.5808542804872681, 
           0.4268560452609722}, {0.5782761175845396, 0.4279693459746793}}, {{
           0.7448127902872331, 0.3427462292180822}, {0.7478845936234617, 
           0.34337066805450905`}, {0.7483394980497029, 
           0.34314415883014826`}, {0.7475129068434074, 0.3415898701045933}, {
           0.7397619233590336, 0.34211687871703717`}, {0.7448127902872331, 
           0.3427462292180822}}, {{0.7750206529615994, 0.3464264135765336}, {
           0.7728870077269269, 0.34325169854547}, {0.7710137078420892, 
           0.3419539153686782}, {0.7715805174791154, 0.3445201920915623}, {
           0.7768715614719673, 0.35014456044441755`}, {0.7750206529615994, 
           0.3464264135765336}}, {{0.5276669482687489, 0.5486773826206797}, {
           0.5277730357476187, 0.5488556725832489}, {0.528150183804962, 
           0.548335043754496}, {0.5280008375400319, 0.5475301970351177}, {
           0.527281698960847, 0.5482810148737154}, {0.5276669482687489, 
           0.5486773826206797}}, {{0.5556696557474509, 0.552930488480893}, {
           0.5520568033888267, 0.55345694548657}, {0.5501965588216943, 
           0.5510030107955733}, {0.5494227234887874, 0.5570941650079261}, {
           0.5547185917699486, 0.5584942974181117}, {0.5556696557474509, 
           0.552930488480893}}, {{1.0737110993331287`, 0.6483895039677467}, {
           1.0734322609187423`, 0.6477608190665941}, {1.073156500514668, 
           0.6477302493118777}, {1.0726410577966905`, 0.6488424449373985}, {
           1.0732381098123873`, 0.6493194077479122}, {1.0737110993331287`, 
           0.6483895039677467}}, {{-1.499924873051775, 
           0.2448742523160224}, {-1.5000186701961837`, 
           0.24526091190910002`}, {-1.5000311774535453`, 
           0.2454820211246099}, {-1.4998048639128967`, 
           0.24539719800620527`}, {-1.499924873051775, 
           0.2448742523160224}}, {{-0.6427128323967548, 
           0.33551602420455046`}, {-0.6423598105714534, 
           0.33501700523561984`}, {-0.6423622150540024, 
           0.3350148942241378}, {-0.6427220466386875, 
           0.3355022820502879}, {-0.6427128323967548, 
           0.33551602420455046`}}, {{-0.424896014837641, \
-0.3852157710457811}, {-0.42147836974876446`, -0.3785858921972647}, \
{-0.4156488894157186, -0.38393381724200876`}, {-0.4172458136399557, \
-0.3874562819818506}, {-0.424896014837641, -0.3852157710457811}}, \
{{-0.44559889397110647`, -0.6265308212484761}, {-0.4444194422871433, \
-0.6278547571420249}, {-0.44924729111123307`, -0.6237252881204883}, \
{-0.44644114574569116`, -0.6217829135296123}, {-0.44559889397110647`, \
-0.6265308212484761}}, {{-0.38091428178253833`, -0.43010392976860745`}, \
{-0.38300173074811106`, -0.43036691223277995`}, {-0.3834840682713534, \
-0.4302111247927607}, {-0.38256684661464213`, -0.42984264984236176`}, \
{-0.38091428178253833`, -0.43010392976860745`}}, {{-0.379872061738354, \
-0.4307880942182703}, {-0.3774746146377335, -0.4302153631655789}, \
{-0.37687971792680464`, -0.4303788397519818}, {-0.37747948173366125`, \
-0.4307526885706584}, {-0.379872061738354, -0.4307880942182703}}, \
{{-0.18178534575636815`, 0.2876420735320856}, {-0.17775292250949018`, 
           0.28372329229620363`}, {-0.18581050142634936`, 
           0.27400973552896}, {-0.18751789724414344`, 
           0.28083863157442646`}, {-0.18178534575636815`, 
           0.2876420735320856}}, {{-0.30327233542736526`, \
-0.471207576923531}, {-0.3028966528433679, -0.4713332518935719}, \
{-0.3028756773104355, -0.4716261249544851}, {-0.30312355118739903`, \
-0.4715687019899322}, {-0.30327233542736526`, -0.471207576923531}}, \
{{-0.26510388206837115`, -0.45017222593364525`}, {-0.2622847670354712, \
-0.4501996695598084}, {-0.2594833714827953, -0.45229855730943486`}, \
{-0.2607292847250002, -0.4520592608553399}, {-0.26510388206837115`, \
-0.45017222593364525`}}, {{-0.2535568614955917, -0.4252509031453416}, \
{-0.25309632341304217`, -0.42406884874714035`}, {-0.2527348311224813, \
-0.42389186133741513`}, {-0.25235127094253473`, -0.4239455809079684}, \
{-0.2535568614955917, -0.4252509031453416}}, {{-0.23852780332149917`, \
-0.4254674374342893}, {-0.2367952606598404, -0.42638683129890165`}, \
{-0.23686808461445993`, -0.42761046133080494`}, {-0.23865239046768436`, \
-0.42605692451062144`}, {-0.23852780332149917`, -0.4254674374342893}}, \
{{-0.1970838890417797, -0.49428054278552747`}, {-0.19857469136922842`, \
-0.4928244597256618}, {-0.19500962364429972`, -0.4944408344412479}, \
{-0.1963113466646009, -0.49412585497166206`}, {-0.1970838890417797, \
-0.49428054278552747`}}, {{-0.20017688936790945`, -0.5936017778787852}, \
{-0.20027808713914502`, -0.5920569332523409}, {-0.19700943884276886`, \
-0.593981933241662}, {-0.19794357219895573`, -0.5971006742257255}, \
{-0.20017688936790945`, -0.5936017778787852}}, {{-0.12983819390500273`, \
-0.4960454684619371}, {-0.1301789256317864, -0.4959941726330158}, \
{-0.12970872873501296`, -0.4957830892572135}, {-0.12914610668990237`, \
-0.496126893123402}, {-0.12983819390500273`, -0.4960454684619371}}, \
{{-0.10395852821700723`, -0.500763633114501}, {-0.10425968693403398`, \
-0.5009436153981207}, {-0.10443277797552603`, -0.5008005273686933}, \
{-0.10430464105212929`, -0.5007134789001784}, {-0.10395852821700723`, \
-0.500763633114501}}, {{-0.09956808253850069, -0.5037342749856685}, \
{-0.09962730949877847, -0.5038713604208274}, {-0.09990236854008798, \
-0.5039260852240218}, {-0.09972947995718708, -0.5037273769999933}, \
{-0.09956808253850069, -0.5037342749856685}}, {{-0.09866697093477922, \
-0.500989023264006}, {-0.09919743562575323, -0.5012240624036133}, \
{-0.09927712463163767, -0.5011829350082853}, {-0.09900193044699876, \
-0.5008685019247079}, {-0.09866697093477922, -0.500989023264006}}, \
{{-0.09764923742587164, -0.5071377160172743}, {-0.09773645472485662, \
-0.5071483870469413}, {-0.09773386238990635, -0.5070890162553766}, \
{-0.09760450482859541, -0.5070439051589337}, {-0.09764923742587164, \
-0.5071377160172743}}, {{-0.0783433037025518, -0.5433813157272268}, \
{-0.07806299282612637, -0.5430052738515654}, {-0.07770581458498013, \
-0.5432906916833992}, {-0.07805084888812236, -0.5435391402066484}, \
{-0.0783433037025518, -0.5433813157272268}}, {{-0.07632275503438529, \
-0.5981134955321922}, {-0.07677408339416586, -0.5980202299539802}, \
{-0.0765973414746564, -0.5976542093662183}, {-0.07582644996649385, \
-0.5978614408319586}, {-0.07632275503438529, -0.5981134955321922}}, {{
           0.5616707211401387, -0.45750175601475496`}, {
           0.5590684075684729, -0.45656441264481307`}, {
           0.5607039952988943, -0.45354212534144867`}, {
           0.562884454228712, -0.45568669517819105`}, {
           0.5616707211401387, -0.45750175601475496`}}, {{
           0.5556393753815123, -0.4280569328288177}, {
           0.555239665049196, -0.42966399476200284`}, {
           0.5529943016569077, -0.42738845493228284`}, {
           0.5599439376989754, -0.42615666316769163`}, {
           0.5556393753815123, -0.4280569328288177}}, {{
           0.5764811055727327, -0.41732751261132517`}, {
           0.5749775979206275, -0.4155569743861432}, {
           0.575929721006268, -0.4143130270698457}, {
           0.5776689247089497, -0.4184376921433038}, {
           0.5764811055727327, -0.41732751261132517`}}, {{
           0.6920434761738483, -0.42134244682051597`}, {
           0.6920417030048048, -0.42133416129203427`}, {
           0.6925516516257508, -0.42107464331902944`}, {
           0.6925516531982644, -0.42107464346575135`}, {
           0.6920434761738483, -0.42134244682051597`}}, {{
           0.7043115734253135, -0.454099380846989}, {
           0.7046169169808892, -0.4532544133351952}, {
           0.7067523467721176, -0.4518156070372764}, {
           0.70680748549525, -0.4534841533677138}, {
           0.7043115734253135, -0.454099380846989}}, {{
           0.7078856360941365, -0.4577209123293147}, {
           0.7083119731350829, -0.4560944653347575}, {
           0.7097961567542483, -0.4561249793547961}, {
           0.7093672552995512, -0.45729494866978565`}, {
           0.7078856360941365, -0.4577209123293147}}, {{
           0.7052256704942713, -0.4462490889225224}, {
           0.7064791347445478, -0.4464310100203873}, {
           0.7040979008311669, -0.4480081484609216}, {
           0.7041017401480723, -0.4456662422867221}, {
           0.7052256704942713, -0.4462490889225224}}, {{
           0.6992775978134518, -0.4175856289215764}, {
           0.6992777579908983, -0.41758525966588755`}, {
           0.6992921409938702, -0.41757039307699684`}, {
           0.6992926318547892, -0.4175778548478454}, {
           0.6992775978134518, -0.4175856289215764}}, {{
           0.7103534018367261, -0.45200916239033373`}, {
           0.7122957724521234, -0.4501776614499727}, {
           0.7128402958819188, -0.45109049564442294`}, {
           0.7109595079985547, -0.4526219573587317}, {
           0.7103534018367261, -0.45200916239033373`}}, {{
           0.718901181958931, -0.445006174407001}, {
           0.7182090930681566, -0.44739371659236105`}, {
           0.716712093459228, -0.44770471004672335`}, {
           0.7188120814762814, -0.44451248660871384`}, {
           0.718901181958931, -0.445006174407001}}, {{
           0.7303805210473455, -0.4490371572908003}, {
           0.7304002071082449, -0.44892547984651066`}, {
           0.7304045972617975, -0.4489271424182923}, {
           0.7303806726430321, -0.4490374546031839}, {
           0.7303805210473455, -0.4490371572908003}}, {{
           0.7304196566744496, -0.4488150982918438}, {
           0.7305205626839264, -0.4482874632365593}, {
           0.730527933768081, -0.4482855862515946}, {
           0.7304252020396683, -0.4488136873258051}, {
           0.7304196566744496, -0.4488150982918438}}, {{0.37218393037890735`, 
           0.3945279764669715}, {0.370897782965532, 0.3952208757377643}, {
           0.37357447451935155`, 0.39412979037669016`}, {0.37314865091380156`,
            0.39394297785179644`}, {0.37218393037890735`, 
           0.3945279764669715}}, {{0.3735581329832642, 0.3946583719580008}, {
           0.3723611108952706, 0.395023925971426}, {0.37162249453922297`, 
           0.3957594725070518}, {0.3728881291056541, 0.39535328961083543`}, {
           0.3735581329832642, 0.3946583719580008}}, {{0.676166010999878, 
           0.02855507026502908}, {0.6769852762209008, 0.0282713411285498}, {
           0.6769851372373842, 0.02827054968482403}, {0.676166011773203, 
           0.02855506999614573}, {0.676166010999878, 0.02855507026502908}}, {{
           0.707803888615514, 0.04151137740195955}, {0.7078050122968069, 
           0.041515437362173155`}, {0.708528736006593, 0.04100524399490092}, {
           0.7085278955864248, 0.04100091078182242}, {0.707803888615514, 
           0.04151137740195955}}, {{0.5567992366359248, 
           0.24866701027190316`}, {0.5568168096043451, 
           0.24879714385126458`}, {0.5570587249877641, 0.2485690849877654}, {
           0.5570248032057146, 0.2484941447648819}, {0.5567992366359248, 
           0.24866701027190316`}}, {{0.5846253712479746, 
           0.33159908863315124`}, {0.5846268573221584, 
           0.33162093867914944`}, {0.5846461299416591, 0.3316168208685088}, {
           0.5846487706305916, 0.33160717529211936`}, {0.5846253712479746, 
           0.33159908863315124`}}, {{0.5848531438632305, 
           0.3317702020382218}, {0.5848596298530259, 0.33178145651676305`}, {
           0.5848800212711248, 0.33177412470682466`}, {0.5848713342151364, 
           0.33176090958896903`}, {0.5848531438632305, 
           0.3317702020382218}}, {{0.5849090021149789, 
           0.33176720970976054`}, {0.5849049277482932, 0.3317900584949475}, {
           0.5849239717856299, 0.33180799565050434`}, {0.5849332528327295, 
           0.33178925691039807`}, {0.5849090021149789, 
           0.33176720970976054`}}, {{0.5849090021149789, 
           0.33176720970976054`}, {0.5849049277482932, 0.3317900584949475}, {
           0.5849239717856299, 0.33180799565050434`}, {0.5849332528327295, 
           0.33178925691039807`}, {0.5849090021149789, 
           0.33176720970976054`}}, {{0.584880631343336, 0.3318525583939401}, {
           0.5848820202269976, 0.3318716140473818}, {0.584891090868223, 
           0.33187000307385717`}, {0.5848883924262182, 
           0.33184886186039575`}, {0.584880631343336, 0.3318525583939401}}, {{
           0.584861553739245, 0.33208558546495187`}, {0.5848636304232099, 
           0.33210542571175405`}, {0.5848936199927172, 0.332108465822114}, {
           0.5848832462045425, 0.33207647323793243`}, {0.584861553739245, 
           0.33208558546495187`}}, {{0.5847948267259068, 
           0.3325661380666185}, {0.5847943244162864, 0.33256979429273265`}, {
           0.5847989347112938, 0.33257267079289027`}, {0.5848042444111313, 
           0.33256273142295745`}, {0.5847948267259068, 
           0.3325661380666185}}, {{0.584879752724668, 0.33253475871880894`}, {
           0.5848617419447585, 0.3325885196437129}, {0.5848697339315378, 
           0.3325952123993105}, {0.5849154571604138, 0.3325326676219431}, {
           0.584879752724668, 0.33253475871880894`}}, {{0.5848017635638084, 
           0.3326449524501464}, {0.5848063700745098, 0.33265953005266186`}, {
           0.5848328987852937, 0.33265501680291465`}, {0.5848311687822092, 
           0.33263953950234526`}, {0.5848017635638084, 
           0.3326449524501464}}, {{0.5847926092764733, 
           0.33269842606705274`}, {0.5847928561782045, 0.3327095502427793}, {
           0.5848100618364526, 0.33270733406307207`}, {0.5848093313588861, 
           0.33269772384045904`}, {0.5847926092764733, 
           0.33269842606705274`}}, {{0.5847930257052084, 
           0.3327283218733552}, {0.5847896172081914, 0.33274911465833706`}, {
           0.5848120981594386, 0.33274346781466524`}, {0.5848102948175421, 
           0.3327251916837736}, {0.5847930257052084, 0.3327283218733552}}, {{
           0.5849303798612934, 0.3326169697176554}, {0.584939792076875, 
           0.3326330213807365}, {0.5849546816316069, 0.33261688200991485`}, {
           0.5849471034717975, 0.33260547532515145`}, {0.5849303798612934, 
           0.3326169697176554}}, {{0.5849673715754197, 
           0.33258339448579155`}, {0.5849727591354735, 0.3325905239303154}, {
           0.5849733770272555, 0.332591375318847}, {0.5849793029629716, 
           0.3325822567259092}, {0.5849673715754197, 
           0.33258339448579155`}}, {{0.5850044187715261, 
           0.33255693849727325`}, {0.5849810929347415, 0.3325797071115894}, {
           0.584989505413378, 0.33259107998038245`}, {0.585017163070967, 
           0.332566080982548}, {0.5850044187715261, 0.33255693849727325`}}, {{
           0.5848321384706952, 0.33272060558448413`}, {0.5848347196152331, 
           0.33274291310550996`}, {0.5848518268516528, 
           0.33273856554763137`}, {0.5848477253791147, 
           0.33271171597854465`}, {0.5848321384706952, 
           0.33272060558448413`}}, {{0.5848168341097123, 
           0.33275702430229087`}, {0.5848690808118728, 0.3329397954827479}, {
           0.5849159932740003, 0.33294329935747874`}, {0.5849222929675648, 
           0.3327622280661321}, {0.5848168341097123, 
           0.33275702430229087`}}, {{0.5850395609340586, 
           0.3325648303118412}, {0.5850477263873505, 0.33257689022222114`}, {
           0.5850664615108612, 0.3325582624419806}, {0.5850598105693258, 
           0.3325469620676049}, {0.5850395609340586, 0.3325648303118412}}, {{
           0.5849928096486464, 0.3326260694903213}, {0.5849996309078186, 
           0.3326353634554293}, {0.585018858812246, 0.33262210496179007`}, {
           0.5850113528244828, 0.3326100519440298}, {0.5849928096486464, 
           0.3326260694903213}}, {{0.5849358588123318, 0.3327332858560533}, {
           0.5849387638963484, 0.3327409561985772}, {0.5849671724316311, 
           0.3327193199323597}, {0.5849633153888023, 0.33271503801958513`}, {
           0.5849358588123318, 0.3327332858560533}}, {{0.5849911908356511, 
           0.33268965047957333`}, {0.5849989973482942, 0.3327060912343025}, {
           0.5850029904316227, 0.3327037024640212}, {0.5849951941402197, 
           0.33268729911236633`}, {0.5849911908356511, 
           0.33268965047957333`}}, {{0.5850036379017901, 
           0.3326922259819962}, {0.5850104426201506, 0.3327072085225265}, {
           0.5850075057002232, 0.33272199454854506`}, {0.5850293292449684, 
           0.33268913675480366`}, {0.5850036379017901, 
           0.3326922259819962}}, {{0.5849248291786612, 
           0.33276852592235323`}, {0.5849287541450029, 0.3327809246168326}, {
           0.5849355871598845, 0.3327774084401518}, {0.5849316734948586, 
           0.33276505502196246`}, {0.5849248291786612, 
           0.33276852592235323`}}, {{0.5848300545649011, 
           0.3328802866757959}, {0.5848391843702674, 0.332901870232421}, {
           0.5848465105766955, 0.3328970507110327}, {0.5848375635558706, 
           0.332875503001123}, {0.5848300545649011, 0.3328802866757959}}, {{
           0.5849639603420473, 0.3327735473698713}, {0.5849625295902955, 
           0.3328288414573883}, {0.5849864021572287, 0.3328359526274319}, {
           0.5850044437313865, 0.3328204659200305}, {0.5849639603420473, 
           0.3327735473698713}}, {{0.5848450246228856, 
           0.33295254009057934`}, {0.5848488131297547, 0.3329608428828025}, {
           0.5848650029868787, 0.33294242837305643`}, {0.5848632054505014, 
           0.33293945554391186`}, {0.5848450246228856, 
           0.33295254009057934`}}, {{0.5630464586556435, 
           0.36392280511070685`}, {0.5619119254488063, 0.3627623182476382}, {
           0.5638598379409402, 0.3657973982019317}, {0.5638766667811796, 
           0.365593868586001}, {0.5630464586556435, 0.36392280511070685`}}, {{
           0.6033971227813548, 0.3331817010957049}, {0.6035339692107169, 
           0.3334274891394728}, {0.6036362850177179, 0.33339335302994244`}, {
           0.6036989802690583, 0.3331587685545297}, {0.6033971227813548, 
           0.3331817010957049}}, {{0.6047898821669462, 0.3330609295150332}, {
           0.60477971224484, 0.3330768468684616}, {0.6047944862866735, 
           0.3330853928164331}, {0.6048069015650346, 0.3330694142715629}, {
           0.6047898821669462, 0.3330609295150332}}, {{0.6047898821669462, 
           0.3330609295150332}, {0.60477971224484, 0.3330768468684616}, {
           0.6047944862866735, 0.3330853928164331}, {0.6048069015650346, 
           0.3330694142715629}, {0.6047898821669462, 0.3330609295150332}}, {{
           0.6599513088175656, 0.3185365797158881}, {0.6599056582683446, 
           0.319219530671165}, {0.6603482161637633, 0.3190715275546585}, {
           0.6601142235345393, 0.318561041853491}, {0.6599513088175656, 
           0.3185365797158881}}, {{0.6853425561115507, 
           0.30005300575251465`}, {0.6851384763088821, 
           0.30037090363835595`}, {0.6852265208223426, 
           0.30045564666010727`}, {0.6855007932784946, 0.3001767704586873}, {
           0.6853425561115507, 0.30005300575251465`}}, {{0.5697007836600593, 
           0.41963802387120575`}, {0.5699150062268435, 0.420190032644559}, {
           0.5669107110772971, 0.4250942893163473}, {0.5720769011134592, 
           0.4184402292015176}, {0.5697007836600593, 
           0.41963802387120575`}}, {{0.8556164224703802, 
           0.2319979684063115}, {0.8556824552646427, 0.2321702713780058}, {
           0.855918996801683, 0.23214423364672798`}, {0.8557871158998351, 
           0.23179497232413757`}, {0.8556164224703802, 
           0.2319979684063115}}, {{0.5851952910981326, 0.4554516315475605}, {
           0.5827006082834473, 0.4579103842430573}, {0.5877178863565217, 
           0.4589341903859531}, {0.5888390324757771, 0.45726675460913807`}, {
           0.5851952910981326, 0.4554516315475605}}, {{0.650209309528579, 
           0.4119460466077277}, {0.6502154653120461, 0.41194927650573154`}, {
           0.6502114549763476, 0.41194673757076594`}, {0.6502094520755434, 
           0.4119458624441516}, {0.650209309528579, 0.4119460466077277}}, {{
           0.7289654796861657, 0.35927800777781116`}, {0.7289731403757299, 
           0.35929922636990524`}, {0.7289722705123444, 0.3593465950692583}, {
           0.7289831302144324, 0.3592898475042336}, {0.7289654796861657, 
           0.35927800777781116`}}, {{0.7700333205758677, 
           0.3469786283103837}, {0.7713723284103657, 0.34855323652733117`}, {
           0.7724302531736685, 0.3490708112537462}, {0.7694762054940228, 
           0.3438363846049505}, {0.7700333205758677, 0.3469786283103837}}, {{
           0.80768318266153, 0.35998381048179684`}, {0.8076788302751647, 
           0.35999752357089504`}, {0.8076799992208735, 0.3599986814752219}, {
           0.8076833427905026, 0.35998387613754934`}, {0.80768318266153, 
           0.35998381048179684`}}, {{0.7827438927990062, 
           0.3790617487383961}, {0.78267651483682, 0.37953156846812813`}, {
           0.7829373442717579, 0.3794786707849359}, {0.7830571980041298, 
           0.3791481393489302}, {0.7827438927990062, 0.3790617487383961}}, {{
           0.6157297668478066, 0.49166780605597327`}, {0.6157297668386265, 
           0.4916678061120051}, {0.6158493434897043, 0.4917069794960213}, {
           0.6158493436110146, 0.49170697851931855`}, {0.6157297668478066, 
           0.49166780605597327`}}, {{0.5273815169722305, 
           0.5467386830704882}, {0.5269609158436274, 0.5473457505970688}, {
           0.5269194507674381, 0.5478552822441349}, {0.5276126951801776, 
           0.547216420356026}, {0.5273815169722305, 0.5467386830704882}}, {{
           0.5273233933810443, 0.5475788749552339}, {0.5269811811215707, 
           0.5478885891364412}, {0.5272186050878276, 0.5483625904333748}, {
           0.5278440179001747, 0.5474021291390988}, {0.5273233933810443, 
           0.5475788749552339}}, {{0.524140602724988, 0.5521352525885956}, {
           0.5250411721809821, 0.5521411037741613}, {0.5252072297300191, 
           0.5515221017533904}, {0.5245157971791975, 0.5514093114850077}, {
           0.524140602724988, 0.5521352525885956}}, {{0.5231239951467844, 
           0.5526699093084211}, {0.5234727441261136, 0.5523886555047346}, {
           0.5235890457930732, 0.5518901572620761}, {0.522699432778149, 
           0.5525092461042441}, {0.5231239951467844, 0.5526699093084211}}, {{
           0.9314465724767248, 0.4109702441426282}, {0.9368467558268778, 
           0.4049634459913339}, {0.9373695439524371, 0.3987962298787505}, {
           0.9335426422204556, 0.400677394087559}, {0.9314465724767248, 
           0.4109702441426282}}, {{1.414437905746216, -0.03523628717185578}, {
           1.4145857528314303`, -0.034885664287841824`}, {
           1.4147744662375166`, -0.035391952585764885`}, {
           1.4146229084114423`, -0.03547627598557875}, {
           1.414437905746216, -0.03523628717185578}}, {{0.88808514213807, 
           0.6756887332633371}, {0.8877352795626733, 0.676324142648762}, {
           0.8885717990029518, 0.6765186193365933}, {0.8887989224875449, 
           0.6759494287074999}, {0.88808514213807, 0.6756887332633371}}, {{
           0.8891484176155998, 0.6787556053987959}, {0.8896499916708295, 
           0.6786365448386233}, {0.8892485014190954, 0.6781294714440265}, {
           0.8890227395428651, 0.6785103247274903}, {0.8891484176155998, 
           0.6787556053987959}}, {{0.8955228930892886, 0.6799847585123593}, {
           0.8948368387752078, 0.6804874416223735}, {0.8950460969245772, 
           0.681198462012536}, {0.8961511673740903, 0.680146502134659}, {
           0.8955228930892886, 0.6799847585123593}}, {{1.071820677431366, 
           0.6492532113009027}, {1.071948169416034, 0.6500849194611521}, {
           1.072850175762156, 0.6474820863780347}, {1.0720144610870583`, 
           0.6483756185007822}, {1.071820677431366, 0.6492532113009027}}, {{
           1.0807020647482863`, 0.6482073460644577}, {1.080904666911244, 
           0.6491663853371051}, {1.0817982847455416`, 0.6495254759545458}, {
           1.0813375204251456`, 0.6475482677425863}, {1.0807020647482863`, 
           0.6482073460644577}}, {{-0.343052479394438, -0.7752219484836631}, \
{-0.34306252920430647`, -0.7752277848704517}, {-0.34309241178800404`, \
-0.7752137725488616}, {-0.343052479394438, -0.7752219484836631}}, \
{{-0.343052479394438, -0.7752219484836631}, {-0.3429746917201402, \
-0.7751767714417985}, {-0.3429698293714986, -0.7752388676260308}, \
{-0.343052479394438, -0.7752219484836631}}, {{
           0.6794586387322624, -0.3794718659801006}, {
           0.6785827476697867, -0.3724450253098567}, {
           0.6788981841492062, -0.372488219413753}, {
           0.6794586387322624, -0.3794718659801006}}, {{
           0.7049404055654, -0.43632246223969784`}, {
           0.7048912988861855, -0.436344697782098}, {
           0.7048627927325974, -0.43627338944083544`}, {
           0.7049404055654, -0.43632246223969784`}}, {{0.45535506082032573`, 
           0.29037083764274185`}, {0.4551241090383946, 
           0.29205924325516786`}, {0.45535646338036967`, 
           0.29037011379982736`}, {0.45535506082032573`, 
           0.29037083764274185`}}, {{0.6423784552670179, 
           0.030491080874070035`}, {0.642495266704636, 
           0.030367424125253065`}, {0.6423693504670108, 
           0.030478430946379323`}, {0.6423784552670179, 
           0.030491080874070035`}}, {{0.4551241090383946, 
           0.29205924325516786`}, {0.45500162397997107`, 
           0.2929361304242171}, {0.45500235912724013`, 0.2929357114894954}, {
           0.4551241090383946, 0.29205924325516786`}}, {{0.6741265396483429, 
           0.03247312921307211}, {0.6740777437003401, 0.03243317605511201}, {
           0.6741262543242404, 0.03247343337076574}, {0.6741265396483429, 
           0.03247312921307211}}, {{0.6742868542337264, 0.0325548944350666}, {
           0.6742888017967149, 0.03255542168170295}, {0.6742868383560064, 
           0.032554835376918924`}, {0.6742868542337264, 
           0.0325548944350666}}, {{0.5854238500631508, 
           0.33223910866448886`}, {0.5854311612538957, 0.3322334068260531}, {
           0.5854266168993347, 0.33222707093069104`}, {0.5854238500631508, 
           0.33223910866448886`}}, {{0.585038251402245, 0.332639400187538}, {
           0.5850248667662986, 0.33265424976633906`}, {0.5850414215828407, 
           0.33264599377721227`}, {0.585038251402245, 0.332639400187538}}, {{
           0.5850414215828407, 0.33264599377721227`}, {0.5850452942604962, 
           0.33265449916749157`}, {0.5850513431606332, 0.3326398867798886}, {
           0.5850414215828407, 0.33264599377721227`}}, {{0.5847878855346058, 
           0.3328905511392036}, {0.5847843988916619, 0.3328951096658386}, {
           0.5847985717304021, 0.33290146038561486`}, {0.5847878855346058, 
           0.3328905511392036}}, {{0.605375176915696, 0.3318203644633035}, {
           0.6053823922113738, 0.3318193593197624}, {0.6053771309781407, 
           0.3318167307342527}, {0.605375176915696, 0.3318203644633035}}, {{
           0.6048069638799546, 0.3328752206154432}, {0.6048589885001795, 
           0.3329404677355238}, {0.6051967178932673, 0.33215204556835287`}, {
           0.6048069638799546, 0.3328752206154432}}, {{0.6043830959151227, 
           0.3336598077868336}, {0.6045257935732544, 0.3336901853062047}, {
           0.6044417863914732, 0.33355128745519463`}, {0.6043830959151227, 
           0.3336598077868336}}, {{0.6733433725031277, 0.333539249066784}, {
           0.6733434187194053, 0.33353899044661617`}, {0.67334326446021, 
           0.3335392245424775}, {0.6733433725031277, 0.333539249066784}}, {{
           0.8424778768700152, 0.34308685991463844`}, {0.8424499038702405, 
           0.343055707710134}, {0.8424645044095727, 0.3430868556604823}, {
           0.8424778768700152, 0.34308685991463844`}}, {{0.7216294978825569, 
           0.45853257328272246`}, {0.7216054072813135, 
           0.45856144861890125`}, {0.7216353901895587, 0.4585414069301543}, {
           0.7216294978825569, 0.45853257328272246`}}, {{0.7215780348386107, 
           0.45859425455249186`}, {0.7216054072813135, 
           0.45856144861890125`}, {0.721562166467341, 0.45859035065480863`}, {
           0.7215780348386107, 0.45859425455249186`}}, {{0.5742824670327393, 
           0.5616397760363102}, {0.5742824672638627, 0.5616397758579508}, {
           0.5742824670942744, 0.5616397754814784}, {0.5742824670327393, 
           0.5616397760363102}}, {{0.9857403227827841, 
           0.31643241973125613`}, {0.9857372412368042, 0.3164475599189782}, {
           0.9857406276795059, 0.31643878157998057`}, {0.9857403227827841, 
           0.31643241973125613`}}, {{0.9857345188755917, 
           0.31646093443435774`}, {0.9857312055025564, 0.3164772113132373}, {
           0.9857336307948547, 0.31646821202122427`}, {0.9857345188755917, 
           0.31646093443435774`}}, {{0.3754270370858695, 
           0.6756269571205812}, {0.37620731748343905`, 0.6736000792788837}, {
           0.37620371527624286`, 0.6735995293706677}, {0.3754270370858695, 
           0.6756269571205812}}, {{0.3754270370858695, 0.6756269571205812}, {
           0.3745018187343372, 0.6779760821181459}, {0.37450735824293546`, 
           0.6779733347909488}, {0.3754270370858695, 0.6756269571205812}}, {{
           0.6821140542060168, 0.589227890252985}, {0.6821531624764908, 
           0.5892341385734606}, {0.6821652190757087, 0.5892257139549808}, {
           0.6821140542060168, 0.589227890252985}}, {{0.7830270749332968, 
           0.6267300107818471}, {0.7830270753686924, 0.6267300103659887}, {
           0.7830270749088905, 0.6267300106252404}, {0.7830270749332968, 
           0.6267300107818471}}}]},
        Antialiasing->True]}},
     Annotation[#, "GeoBackground", "WolframGeoGraphics"]& ], {{InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.18033193378689988, -0.07307576737200092}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.18033043390469167, -0.0730738695697541}, {Center, Bottom},
        Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.1803325005699747, -0.07307618060425854}, {Center, Bottom},
        Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613070138955, 0.2872077791493198}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607171575714, 0.28720927043307903}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542622763870446, 0.28720615906271735}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608875919004, 0.28720865782250266}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542598179057924, 0.2872099084813295}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542602771065112, 0.28720846456652904}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261524256659, 0.2872053945516162}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542626787181857, 0.28720755872940545}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542614718748629, 0.28720774135500565}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613827998294, 0.28720762129311317}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542617873430657, 0.28720728125635897}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554262404615484, 0.28720663702889127}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613537564631, 0.28720917441682947}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609205817, 0.2872089300629065}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261471624905, 0.28720811061369517}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542627236928093, 0.28720697255708716}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542620948101458, 0.2872079213086822}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554262031598541, 0.2872078812323437}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613799955147, 0.2872087005146502}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611629069709, 0.2872093168546242}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613208920554, 0.28720871754708793}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607731536382, 0.28720771925814736}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542626348670278, 0.28720648323582626}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613361093234, 0.2872092086486583}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542588293284232, 0.2872107957259141}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542624431437755, 0.28720791808046003}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616508642858, 0.28720827270005894}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542604656130683, 0.2872102464571461}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611126458841, 0.2872085249583115}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616790317981, 0.28720801198136675}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542623029313926, 0.2872082985272194}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542593571512416, 0.28721058532492555}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542617386349046, 0.28720725643132916}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261304169733, 0.28721044199614026}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612303518362, 0.2872092294103961}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554263778499288, 0.28720626053427084}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542631072281373, 0.2872055018654819}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542615169391654, 0.28720855418047275}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.16686270372909975, 0.003153221542714162}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.16686440408469533, 0.0031530528176147055}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.16682922253653806, 0.0031511562945789064}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.16686044431198613, 0.0031519346357596375}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.315248736519859, -0.05555490158604502}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.31524666942013446, -0.05555100637924961}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.31524500236508035, -0.055554966604376275}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.3152474609014348, -0.05555579587766425}, {Center, Bottom},
        Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.31524656484463065, -0.0555529996203471}, {Center, Bottom},
        Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->
         None], {-0.31524435764301084, -0.05555201489953284}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.315251869165099, -0.05555135327301038}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.315248638955323, -0.05555232695378146}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611877174777, 0.28720789125176444}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542619534182759, 0.2872069807950761}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542594797549893, 0.2872086554870604}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542606403183733, 0.2872079227012089}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612762025249, 0.28720735083375293}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542604947836226, 0.2872085087057624}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542606906151429, 0.28720713097159334}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542620548180415, 0.2872072721834117}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612622889722, 0.2872079960623734}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542618181543935, 0.2872077095720967}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613740836435, 0.28720824559296787}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613271793614, 0.28720861858089686}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261088122205, 0.28720799767670907}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609401575872, 0.28720910901462643}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554259747729463, 0.2872079078971488}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554262051799297, 0.2872071370370934}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542584737437909, 0.2872107913294363}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261612551547, 0.28720820601753505}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554260801034531, 0.28720941142358836}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542620050204164, 0.28720732539589383}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610297331808, 0.2872084905595485}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542592818669654, 0.2872100046651452}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611868777885, 0.2872076000305953}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611310070253, 0.28720896657676287}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5952938614640617, 0.3518238963522237}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5952932166176135, 0.3518246538420151}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261852640849, 0.28720576625920957}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612445168711, 0.28720821492353504}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542619808363467, 0.28720782785289906}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608570310079, 0.28720786024866723}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608667113476, 0.28720734254076213}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611335616983, 0.28720825661409716}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542618611995567, 0.2872069102162504}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609493380026, 0.28720932982378783}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542615795614939, 0.2872079337769218}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542601022251773, 0.28720799033095024}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542617237567701, 0.28720779506827937}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613005106659, 0.2872066637474486}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181026899554289, 0.31353078843732884}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181010225527664, 0.3135301325823281}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607814948562, 0.287207648846305}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542626750161889, 0.28720536410307784}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542624291400476, 0.2872071643112331}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613487200301, 0.2872074270899984}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542619817099228, 0.28720653544669417}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554262461630267, 0.28720817506997715}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612624139276, 0.28720781143305224}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542623071990807, 0.2872065873787699}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542606480344651, 0.2872087754354752}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612541975965, 0.2872076972155777}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542618597357054, 0.2872075421420984}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605841964905, 0.28720965850501246}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608399734118, 0.2872085549600754}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608853230607, 0.2872074149007276}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542615157599019, 0.287207233220634}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613227317593, 0.2872075317337374}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610840140557, 0.2872079405679832}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613112469662, 0.28720765162871975}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542622497755206, 0.2872071868541718}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609497489007, 0.2872071923101307}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542621251565752, 0.28720750451483107}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542614871269302, 0.28720664882987507}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605403823739, 0.28720699938805444}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611328471108, 0.2872077807636704}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542615624139614, 0.2872072294912667}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607237303963, 0.287207218582782}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611477250918, 0.2872072421269113}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611422778292, 0.28720763231433905}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542623694460644, 0.28720652086312876}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554260902005429, 0.2872072740770127}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611219863036, 0.28720697751193996}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613723679325, 0.2872092467768001}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612767924543, 0.28720801131362356}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608417770994, 0.28720895277284825}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613726541831, 0.2872072938918766}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542623652131663, 0.2872066483838686}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542621399097802, 0.28720715050717166}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608549769245, 0.2872078316943078}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542617706606383, 0.28720742208013567}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542614771974163, 0.28720753579689334}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613557220248, 0.2872078039743285}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261540533907, 0.28720739124378125}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616006019954, 0.2872074808031849}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610686708828, 0.2872076340955958}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611636582019, 0.28720820907913047}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616594887736, 0.2872062494021396}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542632264161371, 0.2872101406484059}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542618368909717, 0.28720759730271767}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542621118674161, 0.2872072265965633}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554260409610903, 0.2872117976302023}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542602775702623, 0.2872093096748047}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605182529988, 0.28720753039905245}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610527036358, 0.28721281701442053}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542606686175372, 0.2872120435982736}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261077648106, 0.2872112067845621}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554260181154615, 0.28720778299169536}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542601543770183, 0.2872105790344289}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261131382567, 0.2872084126890121}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542617668920476, 0.28720839471016596}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542624221027853, 0.2872083710543393}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542593250393206, 0.28720902068223036}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611582970896, 0.2872099982626692}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542623169743832, 0.287212034918594}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542622139817999, 0.2872125600843278}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611713737018, 0.28720906181359734}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261252232333, 0.2872090676580451}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607727788074, 0.28720827314591735}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554260627957565, 0.2872093350004614}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542593861580573, 0.28721061582733876}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609083826434, 0.2872085741075751}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611652116297, 0.2872089761505335}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542595451080555, 0.28721012311221084}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542623306401621, 0.2872117589489632}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542602503666929, 0.2872096769848619}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607503978108, 0.28720917341507957}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613108341351, 0.28720978914249934}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612944022037, 0.2872095607076902}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542619649120786, 0.2872114271498464}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542614058192951, 0.28721036412581036}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261234879292, 0.28721171525219596}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542584516515697, 0.2872097387170023}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616279384933, 0.28721149511179755}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542595730630208, 0.28720864802819385}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542618209682775, 0.2872111965996532}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542612355090838, 0.2872107921067883}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605628173469, 0.2872090817407511}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542626054450926, 0.28721315649849966}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261909033364, 0.2872082274472297}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181012036519705, 0.3135284567384799}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5180999558234834, 0.31352952318886074}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181020408126673, 0.313530980412037}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181006432763392, 0.3135314975320035}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542611474754859, 0.28720761138559414}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542620249359514, 0.2872085340867664}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542614121068652, 0.28721026515968356}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542599027468627, 0.28721015606332545}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609362999759, 0.2872086826474988}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542620711734048, 0.2872106678715766}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542603736458589, 0.2872098066203141}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616253799331, 0.28721220507380435}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610151045781, 0.2872086599375488}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542601394963739, 0.28721111767014246}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.6964238142972038, 0.2851166991882384}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542637311756036, 0.28721333729261955}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542619276449373, 0.2872082998072537}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605104641627, 0.28720984491532286}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542602984863098, 0.28720904133080405}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554260454378954, 0.2872099970938007}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554262419334491, 0.2872078666491453}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610483447451, 0.2872085629195072}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542609185276681, 0.28720890150855594}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613855685528, 0.28720812569801324}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613734988989, 0.2872121513599393}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542597352037698, 0.28721108844805276}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610616334187, 0.2872088408374367}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542603788435768, 0.2872097856915994}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542602758533001, 0.28721031085752347}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542622334766301, 0.28721134004026655}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542601646863528, 0.287209138181949}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542606438012011, 0.2872089029559664}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542613052989727, 0.28720878033328784}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542603420828202, 0.28721048607974464}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605958069892, 0.2872093539810497}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608458454787, 0.28721059350638656}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607483437884, 0.2872091448607351}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542604651506736, 0.2872094013490702}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542607558459802, 0.28720878322798304}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542600784647903, 0.2872109215192764}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542598150982064, 0.2872109877008361}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608306676274, 0.2872085187801034}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542597099689061, 0.2872100853178652}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542620527700304, 0.2872118098784407}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542598658600831, 0.2872110410801098}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542605161633256, 0.2872090854701151}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542608610142156, 0.28720810198665137}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554261172838923, 0.28720842988839684}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542600826128258, 0.28720939500407316}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542610548821171, 0.2872080946947846}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542614777490662, 0.2872097799027822}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542599638171729, 0.2872087685900958}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5542616282696136, 0.28720795860195447}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957558815071, 0.28798296248451366}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554494874461524, 0.28798319631420366}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544949528317098, 0.2879828824903314}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960071751045, 0.28798272520902807}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954001594673, 0.2879840939733273}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544947433356506, 0.2879829523932201}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544948419178691, 0.28798339986893934}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544953437520391, 0.2879832945224718}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958625217656, 0.2879835241679618}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544952680831224, 0.2879827919119721}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544963566083911, 0.2879826442303341}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957473804552, 0.2879825570977135}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554595277062887, 0.28800347990790776}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544963751292852, 0.2879857558873933}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544956027930932, 0.28798383183826365}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545723206033081, 0.2872409340821022}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545716355661692, 0.2872406356828648}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554573040644572, 0.28724031875128364}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544969122126948, 0.28798463055329965}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967498537522, 0.28798242443072325}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544962112668077, 0.2879842881758806}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554497057489673, 0.28798251082514287}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544961451637195, 0.28798316136304714}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964772187096, 0.287982454212973}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181020310601064, 0.31353047146589635}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181039465084021, 0.31353093870862037}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967659704646, 0.2879826528455744}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544951600028575, 0.2879834444195156}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545026284870073, 0.287985396322947}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554495080060066, 0.28798402087072084}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544982576987572, 0.287984515858513}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.55449586409395, 0.2879832615403731}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544944039755019, 0.2879831761314516}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544962988914939, 0.28798401053412753}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544988336270039, 0.28798517575397525}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544965438301629, 0.28798434798769207}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544975362954795, 0.2879845483456817}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959286050773, 0.28798161168713476}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554496361718172, 0.2879847110385323}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954264614782, 0.2879823774181382}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959307532127, 0.2879825918029964}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544995405518868, 0.2879851280076522}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544968510237247, 0.28798414320283633}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544982385646163, 0.28798576426357475}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554499433223041, 0.2879854113104758}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967533263896, 0.2879842780854123}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554498505092634, 0.28798517304471544}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554498882728215, 0.28798549179383043}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544955513648209, 0.2879841476311559}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964196320715, 0.28798477208049184}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545723991111078, 0.2872400661314149}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545718103928697, 0.2872386808862641}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545711664796423, 0.28723998363132275}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554497384713085, 0.28798467928981625}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957948452806, 0.2879826599827792}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959283622285, 0.28798274785355343}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544977866408306, 0.2879832529291241}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545003432868175, 0.28798586839315804}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544996046937081, 0.2879836627548084}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544961464904454, 0.2879840349013932}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.6023032364262897, 0.2923612785764622}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.6022979311090612, 0.2923591276306168}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.602299143754984, 0.29236026832680867}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.6023060099541273, 0.29235866747470063}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.6022995269690271, 0.29236057720526043}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5630087919525069, 0.2972943123767778}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5630094105197729, 0.297294261231836}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5630084199517247, 0.2972947420803515}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5630096963866082, 0.2972938451444562}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5630106521832378, 0.2972929478139674}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967251881932, 0.28798435414152307}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5394166001302105, 0.28184144104706155}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5394143424466344, 0.28184063791936625}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5394120694594244, 0.2818428625164384}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544998529708592, 0.2879849023021429}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544961296205885, 0.287984175691402}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554499163670572, 0.2879844400528594}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544998300572621, 0.28798495743666463}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554500995949096, 0.28798600131253854}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554497019669698, 0.2879852988141649}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545006614341983, 0.28798638872923865}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544970449105332, 0.28798461184731083}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365527223066562, 0.3394161824711721}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365453744040007, 0.33941922179126116}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636548002870936, 0.3394218046451204}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636550056562501, 0.3394209167395102}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365502869129356, 0.33941820635378556}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365491634708945, 0.3394180390841425}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365479599434753, 0.3394231039823025}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365499560680296, 0.3394187817277197}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365438354364392, 0.3394266584972571}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365474867733646, 0.33942189631235475}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365487660863883, 0.3394186151379231}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365518777633614, 0.3394169478008352}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365504154496766, 0.3394133907530224}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365472154707711, 0.33942309371266977}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365476975780893, 0.3394187154302178}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365489679234136, 0.33941886928093823}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636550574972016, 0.3394166214891189}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365465143055851, 0.3394225437802194}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365513423216229, 0.33941748653685455}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365505167362473, 0.33941704512166754}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636549875476469, 0.3394168014263586}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365487869011667, 0.3394179803701808}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365510236262704, 0.3394173199818123}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636549198935655, 0.3394221380057896}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636548791357499, 0.3394195682015978}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365465128489227, 0.33942380694241997}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365506028476126, 0.33941859041377576}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636548200109211, 0.3394227797834952}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365500723367152, 0.3394170168917952}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365488318556364, 0.33941709510842255}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636548224558169, 0.33941898710428636}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365483462124021, 0.3394190960890251}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365497332722458, 0.3394214711810518}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365466326354502, 0.3394222684920081}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636543806681416, 0.3394265545221569}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365484339518049, 0.3394192203159775}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636546828004948, 0.33942159619320805}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365482734053441, 0.33941908789557246}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636547887682765, 0.33942262210225}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365479044328436, 0.3394211591803857}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365487747517088, 0.33941872229811}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636547851898422, 0.33942098990690284}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365419188383197, 0.3394240713611989}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365473138919917, 0.33942266371346613}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365467161408991, 0.3394227979225782}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365477151113104, 0.339419847319725}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365242437014875, 0.3394335230203875}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365470504940204, 0.3394224489284204}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365504146744826, 0.3394195575758349}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365498590735361, 0.33941687309322705}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365479188014525, 0.33942067343591054}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365479742580591, 0.3394193918443018}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365493253495339, 0.33942029263311874}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365490247108606, 0.3394197088157361}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365471466804273, 0.3394206872832821}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636549240618534, 0.3394240948669198}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365503061186675, 0.3394200681166478}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365491332661826, 0.3394191982752108}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.63654772010832, 0.33942096146213097}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365382790221115, 0.33942211257225685}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636546832844761, 0.3394250191545513}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365437247718234, 0.33942137765984914}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636548212407644, 0.3394197290316173}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365481512076322, 0.3394194525979503}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365494472199542, 0.3394223946539619}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365495673855183, 0.33942161587375413}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365481710035779, 0.33942406706271605}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365504530574299, 0.3394222056329971}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365492560971479, 0.3394237372136137}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365377360029811, 0.33942159678278766}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365472301466915, 0.33941906578573616}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365477899725626, 0.33942134505561866}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365464421652796, 0.3394186776148534}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365494106705551, 0.33941924310714405}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365540566148614, 0.33941639525662115}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365467321039192, 0.33941874019242385}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365488507031744, 0.3394192726613251}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365479999432149, 0.3394232555090613}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636548840454239, 0.3394238129577354}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365497921034136, 0.33942380025943164}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.636544700961779, 0.3394229495942232}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365463646047133, 0.3394206237758027}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365499900036314, 0.3394198419525727}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365470411013882, 0.33942297334999433}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365486979804594, 0.33942433873896455}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365498799941525, 0.3394216156597968}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365467156088145, 0.339424347070986}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365438311641614, 0.3394238373215293}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365456076624676, 0.339424897609941}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {0.6365466763056219, 0.3394214130375661}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544976887609085, 0.2879849997607763}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544974882682047, 0.28798624201089246}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544986027902672, 0.28798503816229976}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544966386289027, 0.28798360219426095}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959146363968, 0.28798236338828037}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544965871351893, 0.28798344220541033}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5239612697075342, 0.26426410787169824}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544963107817559, 0.2879827544994857}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959556313662, 0.28798512873107046}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964979382453, 0.2879839824749255}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544952085306761, 0.2879825177160325}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.55449580133168, 0.2879830368177456}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960923416372, 0.2879821278356058}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544952234520188, 0.28798282415585874}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544952182273432, 0.2879828450774547}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957549960456, 0.28798238012555766}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544990359478055, 0.2879855740044104}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954393682645, 0.2879826553061991}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554496119350648, 0.28798260558672373}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545721407601204, 0.28724029595285205}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545706753213413, 0.28723967801812894}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545700252606762, 0.2872408950806821}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545703484131579, 0.2872388587300918}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545704379375535, 0.2872396394538423}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545704256443716, 0.2872394680906315}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545695766742524, 0.28723931404149466}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554570006207153, 0.2872389475016552}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545728056413369, 0.28723872482146195}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544961058229869, 0.2879836484671156}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967362603915, 0.28798299152955154}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554496011137882, 0.2879823065307517}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958100764782, 0.2879823060384591}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544961088348092, 0.28798217164792483}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958978990945, 0.28798345574206047}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544952910626291, 0.2879832125590604}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960007549149, 0.2879828241559093}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544953255545082, 0.2879825617743906}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964611018942, 0.2879822257981548}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544961097203784, 0.28798275400706064}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957131320508, 0.2879820717164838}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544953710710229, 0.287983111889274}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957787948271, 0.2879829073499507}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544948060980429, 0.2879831771156164}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544956883370616, 0.28798304986293616}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959311958898, 0.2879828829825002}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544969142092915, 0.2879816198099213}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544981173844813, 0.2879847115365757}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5239599950152808, 0.2642628897193904}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954148167026, 0.28798249728660275}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544983274496386, 0.2879858843787076}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544978870531052, 0.2879853409069298}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544966714322473, 0.2879853017666937}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544955024405368, 0.28798221964461496}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545715053731429, 0.28724012901550416}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545716139738592, 0.28724042812903394}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545728349848467, 0.2872323130180448}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545705098185354, 0.2872392398135431}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545703149941321, 0.28723914041691034}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5547979951726836, 0.28757106344536426}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545726173017741, 0.2872346979827582}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545710728581827, 0.2872391457861037}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960279591622, 0.2879847292519541}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544970614678575, 0.2879851314415103}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544965921614439, 0.28798199393750323}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544962997752722, 0.2879845928929265}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964388935748, 0.28798447524000964}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544976831588726, 0.28798520528479515}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544968656821012, 0.2879825465146707}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554495809700178, 0.28798249064085873}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544959382550209, 0.28798450256022345}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554495679769482, 0.28798216869429044}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544963822890071, 0.2879822484426726}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960823351698, 0.2879824608584049}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545037364490396, 0.2879894184651659}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545003906878395, 0.28798549549604857}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967682950198, 0.2879820210126909}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544956488643696, 0.28798258540341004}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544990170630071, 0.2879856862426492}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544955764716399, 0.2879825091011071}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544968539042201, 0.2879817148186625}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545703731590576, 0.2872390167927003}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545700968356632, 0.287239650173547}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545722280878203, 0.28724001818465317}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545731572945528, 0.2872397021747452}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545706592490548, 0.2872390802060528}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545697726026835, 0.2872393353862974}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545705958822661, 0.2872392247608426}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545699604948007, 0.2872390578252384}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545726488005857, 0.28723906146298317}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545701529517945, 0.28723949798885234}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957847722891, 0.2879825172236009}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958262595859, 0.2879830102350174}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544963520873869, 0.28798485945875707}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958260792147, 0.28798462218231463}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544968651252751, 0.28798434306573084}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544950750136752, 0.28798242984542954}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954181592157, 0.2879833993765765}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544955736378753, 0.28798237397217386}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544957538005912, 0.2879824581508353}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544968788497003, 0.2879847275309824}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544946826540942, 0.2879832320041018}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544966576911974, 0.2879818780071629}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958462728583, 0.28798234418962343}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545056989559187, 0.28799064130618235}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544950529859539, 0.2879830673386718}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544987021886816, 0.2879855922165736}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544971813244319, 0.2879853106292809}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544956404296218, 0.28798265579844523}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545060621667324, 0.28799142058348354}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544965362785222, 0.28798500074149946}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544993242572204, 0.287985481458771}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958965714505, 0.28798258220366196}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.55450612142312, 0.28798931586347454}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544956781977852, 0.2879824313219591}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554496060568022, 0.28798500147880646}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544977523408114, 0.28798533106087354}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544966367925523, 0.2879819616936289}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544952802367088, 0.2879834390045138}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964256755276, 0.2879848577359742}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960955038151, 0.2879846418736701}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545020902645291, 0.28798707546533014}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544969759208253, 0.2879859134166496}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544972742384847, 0.287985487847889}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544960976328338, 0.2879825826960119}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545699302286858, 0.28723929002087306}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545701423887511, 0.2872397245137949}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545729296756291, 0.2872403604048677}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545723947069592, 0.2872391637417054}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545002197159358, 0.2879849717152878}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545000808486525, 0.2879869924980556}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544982075933212, 0.28798570519063027}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964551380733, 0.2879856552178724}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554496779579287, 0.28798512504107077}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544945728696129, 0.2879831955760323}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544972967107545, 0.287985141533927}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545729833028863, 0.2872298022593965}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545724311072459, 0.2872402318242275}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5543980807285253, 0.28813740291722295}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181019175132057, 0.3135314561457678}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5181128056511929, 0.3135189296386754}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544969592999689, 0.28798491804085735}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545024529187844, 0.2879866119930272}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545009273939993, 0.28798759406403573}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544998976021409, 0.2879848700584992}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954969060351, 0.2879829009503609}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544967044697352, 0.2879828258795524}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544970304964705, 0.287985072368654}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544963775848334, 0.28798607561844397}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544972045508438, 0.2879845951105176}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544999249857073, 0.28798516320777906}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544956021520315, 0.28798211331359774}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544958720862339, 0.2879828999658913}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545010757682902, 0.2879844732941015}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544985268739543, 0.2879856717177426}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544951285887085, 0.28798309416750334}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544955201957262, 0.28798266121345745}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544974551551936, 0.2879852028225151}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544966276052186, 0.28798240129373864}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544949868401671, 0.28798754332419946}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5648815874961469, 0.3080905837987598}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5648907784930645, 0.3080936611159229}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545005917491596, 0.28798549598988926}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544990881320313, 0.2879848890060474}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544521442261838, 0.28797523885302545}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544955563255246, 0.2879822235827759}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545018390300844, 0.28798778852160245}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544997916585916, 0.2879865026835728}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545015325302843, 0.2879871483160601}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544989138257225, 0.28798650243125284}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545030170122108, 0.28798596441211577}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544964290670773, 0.28798319631475444}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545718518365715, 0.28723991270193844}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545707643786244, 0.28723979813821043}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545721915149574, 0.2872403493627323}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545713649353832, 0.2872394795453775}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544954571231495, 0.2879830968749535}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545300789798244, 0.2880082527048171}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554513913367983, 0.28800022488191995}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545336762063553, 0.2880018690265984}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545291767896097, 0.2880055308411895}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5546130003926807, 0.28795851732059125}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545090919133853, 0.2879962791545617}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544997582906577, 0.287983560362659}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544220803531312, 0.288102731048914}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554485174503727, 0.2879954895498776}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545185228443521, 0.28800392081739284}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545681238852707, 0.2880035586350025}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545378743967602, 0.2879900399499915}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545221172650295, 0.28800681113481574}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5546123145979995, 0.2879573450311769}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5546043352654483, 0.2879658226449056}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545180312077705, 0.2880055962580668}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545214170459086, 0.2880011570521772}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545088564986481, 0.2879983567927691}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545712035181242, 0.28724031305725756}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545074646501952, 0.2879938238964201}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545183568243734, 0.2880045122802295}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545130358213143, 0.2879990884351861}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554501664215159, 0.2879886349845678}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544763885711887, 0.2879592995836858}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545263322958696, 0.28800681405632556}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545293851288088, 0.2880015480634124}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545327695042721, 0.2880027897851808}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545091551561953, 0.2879972708433595}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545468384142264, 0.2879964761791389}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545632533151151, 0.28800870578060495}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5546174104770013, 0.2879483650885134}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544802374438909, 0.28801536670642613}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545252768308054, 0.2880080008823075}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545524966450491, 0.28800022070281817}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545469326100022, 0.2879975269716333}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545116237038981, 0.28800034861479196}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545563092017964, 0.28728360164645683}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545642481468301, 0.2872388557050164}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545734462281324, 0.28722672482224276}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554583518765983, 0.2879872512493326}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545239643668792, 0.2880086789257922}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544424142656399, 0.288079102008261}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545978923058632, 0.2879730917913048}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5546030184822294, 0.28796757978531123}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5545018220030201, 0.2880356346514867}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.554534348592056, 0.28799800539118553}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544974392039616, 0.2880326796662258}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544778494269834, 0.2880169461241015}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544782445075813, 0.2880068702612183}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544948293391875, 0.2879885401740199}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544866283543445, 0.2880210459883934}, {
       Center, Bottom}, Offset[24]], InsetBox[
       GraphicsBox[
        {RGBColor[0.790588, 0.201176, 0.], 
         PolygonBox[{{-0.4, 1.25}, {0, 0}, {0.4, 1.25}}], 
         RectangleBox[{-1, 1.25}, {1, 3.25},
          RoundingRadius->0.6]},
        PlotRangePadding->None], {-0.5544866020284237, 0.2880187717326412}, {
       Center, Bottom}, Offset[24]]}, 
     TagBox[{},
      Annotation[#, "GeoGridLines", "WolframGeoGraphics"]& ]}}, 
   TagBox[{},
    Annotation[#, "GeoScaleBar", "WolframGeoGraphics"]& ]},
  CoordinatesToolOptions:>{
   "DisplayFunction" -> (
     GeoGraphics`GeoGridPositionDisplay[#, {
      "LambertAzimuthal", "Centering" -> GeoPosition[{47.495242, -57.159275}],
        "LongitudeDetermination" -> -57.159275}, "ITRF00"]& ), 
    "CopiedValueFunction" -> (
     GeoGraphics`GeoGridPositionCopiedValue[#, {
      "LambertAzimuthal", "Centering" -> GeoPosition[{47.495242, -57.159275}],
        "LongitudeDetermination" -> -57.159275}, "ITRF00"]& )},
  DefaultBaseStyle->"GeoGraphics",
  ImageSize->{575.4545454545457, Automatic},
  Method->{"OriginalInput" -> HoldForm[
      GeoGraphics[{
        GeoMarker[CompressedData["
1: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
         "]]}, GeoBackground -> "CountryBorders"]], 
    "BasicGeoRange" -> {{41.483031, 53.507453}, {-122.98814800000001`, 
     8.669598000000002}}, 
    "GeoGraphicsOptions" -> {
     GeoBackground -> GeoStyling["CountryBorders"], GeoCenter -> 
      GeoPosition[{47.495242, -57.159275}], GeoGridLines -> None, 
      GeoGridLinesStyle -> GrayLevel[0.4, 0.3], 
      GeoGridRange -> {{-1.0821107905324232`, 
       1.0821107905324232`}, {-0.520529882463507, 0.6521949265649769}}, 
      GeoGridRangePadding -> None, GeoModel -> "ITRF00", 
      GeoProjection -> {
       "LambertAzimuthal", "Centering" -> 
        GeoPosition[{47.495242, -57.159275}]}, 
      GeoRange -> {{17.32367520833333, 77.66680879166667}, {-129.5710353, 
       15.252485300000004`}}, GeoRangePadding -> Full, GeoResolution -> 
      Automatic, GeoServer -> {Automatic}, GeoZoomLevel -> Automatic, 
      MetaInformation -> {"Software" -> "Wolfram Language"}}},
  PlotRange->{{-1.0821107905324232`, 
   1.0821107905324232`}, {-0.520529882463507, 0.6521949265649769}},
  PlotRangeClipping->True,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.7706495779470882`*^9, 3.7706496240443163`*^9}, 
   3.7706497027881355`*^9, 3.7706497770381765`*^9, 3.7706498278241215`*^9, 
   3.770717675288731*^9, 3.77071813595942*^9, 3.770718291516328*^9, 
   3.7707183342325783`*^9, 3.7707255033016253`*^9, 3.770762636825903*^9, 
   3.771603827700162*^9},
 CellLabel->"Out[16]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJyUvQmUpedZ33m76tbSmzZLlqzFWiwvYAzGlrwmGIxtDAxLIBAWDxizxA6L
E0JIICEkhHOyMZOQnBlQd+3LrbpVt+rWvldXV3V1V1ev6lZLLVlyC9lyhDV2
cEhwwgxzen7P83+Xrz6X4zM+5dZdvvt9z769z/u8P/Bzv/HJX/zVn/uNT/38
zz30Pb/+c3/3k5/6+b//0Ec+/et81HqgUmn5rUrlwN+6p8Lrm5WK/j904ys3
K63NmdmXrm/d/M9XKrfYP61/8Z/O9/f321d/27//zP/1lz09PWeefK7S6u8v
fOYLT3/hz+3lTf75EXtRGfRvljdOXTm7Yje5ze+0ODdx9ukX0506rr/yF/xX
fy98+a+eeOKJzQtP+11+1O8y4Hc5deGpzbVZu8Htfpcv3dgZbzS4vvIx+77K
XSZnZudXTgBYh/9i+/KzfG0vW/z9ueuf00MKEDpCbcA+0N939ezS3FSd+4Yn
gP703Lw94acLT1jZ3OUJbf7J7jN/0tPX39c/yCd2z5/I9+wYHBoaHOwf7O87
fWJ6oL9nZnIUCgYKTDfHeKRd9kP2z2HuzPtTl5/lb2nj9PTcwkRzan5l/dk/
/eqJnctPfe7PKgcdg/n1U8ePH1/dvuAY/KQ/rdf+vQUooem1z39lojkNHjzl
lc9s9/V2f+HZU3/5xUt/9aXLfHLl7NKfvXT28H4Q3Do1tzhWr81Pj59Ysd+/
+NQGv9xamxkcGu7r71/e2gWIudXN2eUNUK049q0nd69s7F49c/X5AjTdkaPb
l64jHjymPt4Ym2g2GyOVFnvyodHawPBQX9fxY/19PTypt6erp7sLno+PDr30
zKZf0wq8PJ6/Sov9Y++Ba3F9s/I+fzLYNppTV/7kS5Uj/n7j3NUge1V/v7J1
9tLOot3K73f4zz9/7nPPbJ7dnId6IMI1wD4+Od3d0zPaaK4Fer4ucvnM1RcW
1zZH6/VW4GqBFf4E6GWceL/j2eV4gmR3T+/KQlMAQ+/1pYlKqz2z/bNXNsSI
L904M14f4q3D0oY4gCov+c1Mc7RSHRrsq1QhxtBAb09PFyx8j8skOPYNDGyt
TTca4yBXOeSYrW6fh1zLm2fFg4MzCytLcw3IzB/IIXQQ5sTOpcyl889+vt5o
Rqm/w14cQszWTl/gjxdoJ79C/EHj6fMriL/B73Svnt6Y5b4jtaG5pVWnfOW4
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
aIALwU+wTy957qq2IePTga216QMISKXyg25nUkXxpk8CQJjbS5m1uryRDPHg
mQurqetuadbGjiJSLtMH56fHz28vokK1ekNlIa96dptWZJxz7UL2kpsgkfby
/dHWEKHkqWIr841gL61SegBhj7An6sn1Nadnk41EpVKXU2fa6+Ziv6o+i52N
mV91wuMeyJHkJ9RRmjKNRnN668K1AuzlFf2sid9d8kxe1Q1wplpdpEhPRwnO
10U+h5qIIABcVP+rr1yo/FqEVHLEM9SELk4gmKS7o7XBMOsrzb7as3cl5zTf
HSUWyTA+FGAtYCgYcl1GtM1Vfa0S5pkxv2n/HIZ74KdSj1ZF8Lggdu38WmHC
cWf0QmGdP3UuhMzmw4Hz42iMvXy0AGH24HGSTlxzF4R5rVQQ5vqVQ9hBOjk5
PY8ebm/MQQNtBQv3unHtJN49ruN0lp5XLdHxI6JQ4vkbClDmFVnd2bZhbe5m
KHMPg6DM+zEFJV9CRE2RPrnSJCCBmbkDO/RxGZTluKZawlpQvnx9qzbUZ9wu
QlneGSgtcrMXdTWsYtxTktDf9kfxSJiG0qM1qX86dAV8fdjyXb7nZog+zsjv
PpLtbnuSxKQ17aXc8J5IjbD69Hv+Pq/z51lCGYK2QJ3Rq5qJKQiOp+mbD2cI
Cqsg5alp1X11Icdi/zxaMtKtaPHLtEiTTkNtUZDkyEqQ/PDX0EJdy237yjo+
P3RO/zMnt3ww8Xfwu6JG3jOnWlauY0hWcn5fhCHRPXmKtpIkq36Rc2rxwzZe
N+o268VmrGoved4X9f9GOeM2FuF0Rp42tPoliGYmR0INpAhR4s/NGGKmKVnB
w4gquQr8+/4edZXz1ByATmkZP1dZVJP9sXr/QzROK6jlFQbBtrVKRjVZhi3V
C2/69ErYXi3JlGA7f2o+1E7+rT9Cvl5jCgBuyIfkT07P/UUp6jgUbVGwvrKY
uYemCEvyBDd9Q1WtVttffnOn2R9GuoUdGf+1lDUoa4cS6C0+j7DnQ0Gz4yy8
4vNTRx5/WsPX8/NadtkG/mFJk/9rKSY5GvmIqNrUSj392LFjoTb4UOHp6Sk3
4/Q5PV1dwllufTZN937Y/zc9PfUVqsfR6z+TY6NDwPzBku4Wn5+6Um/6VGaC
Xj0/r7Ok/TFBSvX85/7gk6Hbofz8sJJ/cZUY1uTwu6IWB8/9ULbwtkN8rDHZ
U5g8nD1RmgISvLC4kPt5/73j+dWLjQvvCqvxd0T9Ctr7Ygmy26McBd/znf4+
ZwaC7Afcwfik2Z6zm/OXdhZzhTr3SKaJh3usfZZRh67t+sffee6dlf809q/q
9VHrz9BchrGJSdL2rw8hMrOmlQhBSKQRqmIFCAvReXVf2Mr6k9eUBdvF9x0E
tms/9VaNJ9LsnKqs04mVGSB8sWTFb4/PCVUUQZdjrCJ0WXsEXd7NIujyCrHk
S/tME3Qdf/niCaDjD+7ygcIoTTZqS1ZKYFY+W7Jdd0QrHTyv4Mx7I4tw5n1e
+8OZI071AV47RxbYa7MHVPH6zN/76M3CWmvnZz793YKbP2RTbU4IsWZppupC
Av6FUtVBsOc6l7QnzxfyHLryv5Q8Sdu+sOcatyq81j09OjgxVkMOVFk891jl
ykfuStAfufjXDyfokV0+QzjQP5vUu3EaDoDJoVJ23BKePRNk+jP+fV6RSnsC
ghcXN/IO7QJGbUmfQMUqBqH+k2Jo4XXc2ZioFXI9It3nLq2JK436UNzjCCaV
Knopn4qtsyxV/ThJxnTVkfPvaRNrbrrHRn55chH7VFnkkz37DgiG06SHZ2P2
FCphwh8VIgXaT2uK+EsOdjYXIK/NBRf++YyFllIFRhppO1z6eqyG61ztSLYa
4TQEH6tglCotdqxLa31kMFYnvFrBK+Cw6c+yEi/93k8EmrT6P9DoZmESfEei
Sxr34auuBtetyxuncBtAC7JyHrApTRJREANiimAq1/bjZSF+KWttgU5W8YXF
GoopDW3Zl1LZi6aZ+kQgpK14Rc+vq6nH+9xjB1wKWp/8gQduFlccX3zqpMZJ
Bwpd+sAteyj07CffH67X/gMNiFE90H1pOyAhHUXSaCoBtESHFErpMAasImL2
ZClylQTliqEog3sNluv1BcqQMGoq6g0/1AIh2p8ypWjF4gVFS1Dj0/5JmsNy
/p3Sj1ZeBEwVmedTAdJsU/DRMUKqzP6XjePmZh47UOnQHR5vufpDzsiDJaja
91IK28Gt4qx641u9ZrHm0trJy6UMNnW5hepn2asXqNMq85iokGuHKiTkU/5C
HFtYpeohD6z8ur9//skTq5/6vigBjsmRtO8B3BHHkytTqCQf4oKmGzVcBpZH
OH/+D34+yM+hSBMpWdj1OzU5Nr9+SlPyfT5MVaN4Mb2Ihz453tWlSf/Yd1EI
BPoGBodrNjDwUsyeQ6ey1n/zJIYP+PtSpV8raW3JZ+yhSPY0h6K0EF1qdfE3
5Ene1Vq0pa3PfeLxICte3+mYqNuwcWhCMuujPMZffnYrWE9uQpY5PTmCZrQn
y/zYATfK0smPvLaok23qHzux3JRJV+XROiQwCcA6v7KOsTWr4Hs901a2UGUF
QZTONpget7NtwNSmw10qyZXsUV7vllzl6UyimqLoVIlIhFMUnVchO7Mk9VpO
4HUU06g9VMNUF21Jq8ZMZI07vzUHCYmtg23KsnSUf8q9H6pbXzm7golEekCS
xDpZH6iABUinZJ25+oIfZzYovwAJQy/G+VIt5o6SfilC6evtDtbqgQJdijmw
ujuqJevTHj04sih5EmW+1P87e6xstj2u7zbzX7XotDuZSLZAi0rrl5t/EH6R
aj/Bs6jj6Ma1k41GY/30efVSq4VrzNb7a42J5szCkmS/A+KBaaMxbp2dExMD
Q8NWgbtQig6V9RAdhh555Vx5tmmBKm2p2+ymj7sO1aycS6ROl6GBXjuvQhTB
L5knB7UO+6f1wmOVz/2rn0kUab942maBkB9te9q9/V2vuXVfOuT6lsuY1URJ
c3TOEpa33pjE/OgMr3PbS9YB3VKosKQZc8j4xVLcfWuJzqrkoupYwzINilVn
o0F7KbKplmT5H8jKuFHItlPBa5JK20NNdnhiaRKOXfreeyr7U4BHHC+cRtUB
II3mNFa/OTM71ajhWC1UarESTCcmIjkNeWQUHXW/XOK/cH9yZ6k5UeD/c5fX
QtZcxL2Yc2fc873K8ircwTXgLpuIhgSs1Afz5Pff+3XkX7Ts7e0OPTea7als
gWBBIybxu9471wEdUgGMYKTZGEUqwkyaSy+8Mr+6YXXyVC8EATufbaEkw9IH
z7XnspXI0VyRHinS2UOPnBOlWTV7ZCHbTtFj97GW/1/0QDevFPeNEnIsrG9q
Yf1QzJ9CjcNXPtvmltdHxxo6VNRsgOuFnXKJTUALdOaKGhAq8yXduC1KXuiz
l3zkGO7+gtVMWsCfpK2tdLfySutvBu3YS5FsM/enyO5/+K09FMl1B1GEh527
/hIuYWXrrCiydeEaBjNRpH1qbmlhzaoHINKcnomTWNsRJj9uyTb/af6D6JH7
bEUP8o4lrVZ8sORVRI8fKvke4Z13hzpd2lMOwR+KNTI88A95dWvJo+5Pg+bv
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
2yLZkjYVb2/Ul8rFxmord+mVN78GRS/9XzvByL0=\
\>"],ExpressionUUID->"bcdae57e-ef69-4018-87d5-df6478aaa7cb"]
}, Open  ]],

Cell["\<\
The next plot provides real evidence that those cold winters do cause my \
running distance to go down! It seems like there must be some correlation \
there.\
\>", "Text",
 CellChangeTimes->{{3.770650050719679*^9, 3.770650119803225*^9}, {
  3.7707182171351585`*^9, 
  3.7707182460141325`*^9}},ExpressionUUID->"e57f576a-a3d0-40ca-877c-\
b62dd722832c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Query", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Date\>\"", ",", "\"\<Distance (km)\>\""}], "}"}]}], "]"}],
     "@", "runningDataWithGPSandTemp"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Date\>\"", ",", "\"\<Run Distance (km)\>\""}], "}"}]}], ",", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770579968094187*^9, 3.7705800312838745`*^9}, {
   3.770580203911298*^9, 3.7705802388775997`*^9}, {3.7705802911103945`*^9, 
   3.77058029363758*^9}, {3.7705803308823094`*^9, 3.770580354433823*^9}, {
   3.7705804376840153`*^9, 3.7705804901904235`*^9}, {3.770725628936221*^9, 
   3.7707256312885785`*^9}, 3.770725703454068*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"768aa3dc-3dfa-4294-9800-5f133bb4dc7b"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxVWnlcF9UWH/ZFQNk1U0epNMkyLV+uDWlqViamLWY6brmRab7S55KjmZZm
aeKSaUzpe+Z7JrIIiICDIIssbiA7DooIMiA7qCBv7pUD5/z+0M/Xc+/Zz7nn
3rH//C+mL7IUBGGn+Qf72/wFSicr/Wb/fKFx0GwLSRDUIwEmnh7V97tKf8HE
4otHTPw8X+DB8HTNxJ/xH6Mra+tN/ISVLcOtvf+u9BvOf+5s/eNxJl7vcWpS
yTq+vmapiTn7KHuGe+41MSd7sPXSllgT92PkvlYm1n3vmnisY87RlWMtGb+Z
A09V+mWks5+1iQWvcadAX8ZPn7LWxJzdqUevm/StW0+BPg5M3oGEzv2tJl3x
fHAK7GH7xfLBwaCfE9Nnrn8w0WfZEhNPZuwncX85/RQM+j02+ek1kWS90O9W
J/Zk8l/xOo3lS+qI00C3M+lyv0Um5uxLmL+1f+wyseHPNOrG8OaY02APWy+u
Lz4N8rn/F7iHgD1MHy1hool5eH9m9ql954RAvFqY/BUHQsBfPRm/prMhwM+F
6f9zYQi2T8q1Ca304+p+x/wpubwcCvIemnS1blYo5AuTJ/8zMBTiz7A0OCEU
4s3iqUTcDwV7mD/lnZZhII/x0y3eMPGxlexf2H6h2/wwbJ9wdnMY5C/XZ0N8
GOjnxdZbl4eBPj0Y/2m9wsG/bL9i+Wo44TdqLsUhiokTmPsuMH8LDWEmPvQr
+zF9hWeKwyGePL8/sT+DsT5v5Bmwh/tj1HQTM+SY087kV247Q+L1mXYG8o/l
t1pzxcRNTHwj46decI6o9OPsHFl+abdeiAD9XFn85n4cAfF0Y/q5b40g9lQd
jQD+zL/S55cjID6ObH1NcwTEh9dX9PBI8B+3Z9fMSIgHw4LPukjQh+WrEqZG
An9uzx+XIiG+zF55TSPhpy4YGoX7jfrpW1Egn8vL/zoK54/a688oyF8u/9mU
KPAv9/+IOkKXdvU5W+m3ii9g8RLtJ5/F8iW7VQTr6w6fhfjw+rZOOgv1x/wt
76k5i+Mnj+8VjeVrV8dHY/3Vw18QLBr7o4n8vKvROD/05c1kvTKj9zmMhcUT
z2H75JMrzmH54urfzpH+vf4i2a9Pukf2C928Y6Cf2bD1n/vFYLpetiwG66vI
gTHQT7h96vkY4n9XI4bYO8szFteDuGlcLOQr86+0c3ksXq8tC4zF/tW/j4uF
+LWx/jK1IhbrI3zoEUf8/bFfHM5PZfCSOGLvW0fiiD2JMZ37eX+6WErWK5ed
z4O9rL+qliPPg/5MH7Fy0XncH9W+u89DvjC6tDX8PLZHja8+T/xz2UXD8ZK3
vKphfwqHP9WIvvt/1KAf8PNzebgG9c76m/J8oYb1V7dZxZN8yhoaj/mr62bH
4/NTtNsZj/XR3gkh+8XUwnicr0oP6wskv5YPvkDyMfdDgqXyLWS9oITS/cPz
yHrdzTqB+MPdNwGvl1ZuTCD1u/EEwULVdYLFxUIioS8Zkkjyp94/EfKNnSdC
1DpK732cYHn4NcJP3WJzEcdDO/DiRYgXP0/H+l8k9vjuukjyJyniIpxnbH5R
ajMu4v4t/9RyEfotyyctf0AS2d97WhLkJ6tn3eFfSZB/rD/rw44l4flCnZmZ
hPu1GvMgicgb6ZMM/YHPTx9NSSb1vndtMvH/iD+S8Xkt90ml9N7WKaT/SX1S
SL4pE1NI/tisIutVjyMp4F9mvxiYlAL1xs87rzqyX67zSiXn7e3pqXj+lM59
nkr65daDlL4vPhX6F8Pa2tpUiD/331zvS/h8EraMuwT9gs9LlgGXYD3374oD
l0AeO1+V3+MvYf9LdlWXyHkd2DMN/M/7yTfj0kh8/BelYXnqc3vTSL2lx6UR
/wVZpOP5UyxzS8f2ivtHpxN/HV+cjv2tTN6VTupVjCbr1X230sn5tNolA/cX
ZcuYDLxeGrckg+jXY08G3q+5hmeQes/VyX5lo3Mm3i9PeTUT6yvYLswk/Xzx
r5lE3/+Gk/3S2uJMHG99rMNlUu/lL10m+t2fR/ELOy/j+Vf5K/Qyvg/pYwov
4/lTLvG8Qual/i9fgfmSrVdt5lzB8dZDtl0h/aPmJKGL4XlXSD/4xeoqPq/U
uS9dJfel6FlXiX/ddlwl/bfs9FVsj/haLsGKvdU1Mp+VvXCNnCfVH17D67Ws
TdfwPC6uPX4Nnyfa6WvXcH1pv7QRunJk8HXwFzuPtVEzrmP+0raN18n8EnD8
Ouxn8oTQG510Xq8Jjzoxv99++2wWvg9qztOy4D7Rh9GTdmSR+nINygL7GX9p
eEoWnqeU1Los0JfFU0num43vg1Luu9nkvvXUpmzIF35+bAvKBv58vt+Tmg38
ndn6cQ3ZkE+MLhX0uQH5w/th8+Qb4E9H3o9X34D85/k45fcbcD6x9eLSpE46
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}}, {{}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{3.714188448*^9, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Run Distance (km)\"", TraditionalForm], None}, {
     FormBox["\"Date\"", TraditionalForm], None}},
  FrameTicks->FrontEndValueCache[{{Automatic, Automatic}, {
      Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
      Charting`DateTicksFunction[
      Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, {{
     Automatic, Automatic}, {{{3.7237536*^9, 
        FormBox[
         StyleBox["\"2018\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7552896*^9, 
        FormBox[
         StyleBox["\"2019\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}}, {{3.7237536*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7552896*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}}}}],
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{586.0909090909091, Automatic},
  Method->{
   "NoShowPlotTheme" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{3.714188448*^9, 3.770436884*^9}, {0, 19.12}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.08090169943749476]}},
  Ticks->{Charting`getDateTicks[Automatic, {Automatic}, 
     (Map[DateList, {
       SlotSequence[1]}]& )[
      SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, Automatic]& , 
    Automatic}]], "Output",
 CellChangeTimes->{{3.7705799849712863`*^9, 3.770580003699128*^9}, 
   3.770580360002988*^9, 3.7705804940091577`*^9, {3.7707256182183795`*^9, 
   3.770725633234166*^9}, 3.7707257156283693`*^9, 3.770762651190124*^9, 
   3.7716038192491713`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"038c6354-ce3c-48be-b466-bcbe0901af28"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distance as a function of temperature", "Subsection",
 CellChangeTimes->{{3.7707311656045513`*^9, 
  3.7707312294098644`*^9}},ExpressionUUID->"832211ad-333b-4a1b-8861-\
11a75d2d00f8"],

Cell["\<\
This is what everything has been building to! To visualise the data, all that \
needs to be done is pair the temperature at the time and location of my run \
with the distance of my run:\
\>", "Text",
 CellChangeTimes->{{3.7706501684795284`*^9, 3.770650293182789*^9}, {
  3.7707312339531965`*^9, 
  3.7707312683242087`*^9}},ExpressionUUID->"9c43d51f-1d91-4e54-a88c-\
a3232e1cd492"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Query", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Temperature\>\"", ",", "\"\<Distance (km)\>\""}], "}"}]}],
      "]"}], "@", "runningDataWithGPSandTemp"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Temperature (\[Degree]C)\>\"", ",", "\"\<Run Distance (km)\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770724228232006*^9, 3.770724266369935*^9}, {
  3.770725652259965*^9, 3.770725707511691*^9}, {3.770739210830971*^9, 
  3.7707392451043444`*^9}, {3.770752875835925*^9, 3.7707528804515734`*^9}, {
  3.771603848798214*^9, 3.771603849449193*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"751cb31a-c8ab-4919-a863-6fe6efc2a21d"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
BIc=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}}, {{}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Temperature (\[Degree]C)\"", TraditionalForm], 
    FormBox["\"Run Distance (km)\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{591.1818181818181, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-28., 31.}, {0, 19.12}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.08090169943749476]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7707256579099407`*^9, 3.770725709364729*^9, 3.770739214437167*^9, 
   3.7707392518786683`*^9, {3.7707528776586165`*^9, 3.7707528820789714`*^9}, 
   3.7707626614940023`*^9, 3.771603851856331*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"a08f036b-0814-4c64-91fb-8dbcb05d4b3c"]
}, Open  ]],

Cell[TextData[{
 "This ",
 StyleBox["ListPlot", "Code"],
 " shows how my run distance increases with temperature, just like I \
predicted. Looking at this data, there doesn\[CloseCurlyQuote]t seem to be a \
strong correlation between the temperature and how far I run, but it\
\[CloseCurlyQuote]ll still be possible to make a predictive function!"
}], "Text",
 CellChangeTimes->{{3.770725746724037*^9, 3.770725787255932*^9}, {
   3.770725926953144*^9, 3.7707259436409326`*^9}, {3.7707310192210784`*^9, 
   3.770731035538748*^9}, 3.770731638637359*^9, {3.7707419734715424`*^9, 
   3.770741990602933*^9}, {3.770742022168788*^9, 
   3.7707420454641294`*^9}},ExpressionUUID->"35cc517c-8968-4c49-b3ec-\
261c180a2856"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["How Far Will I Run in the Cold or the Heat?", "Section",
 CellChangeTimes->{{3.7707313847866216`*^9, 3.770731418144972*^9}, {
  3.770731555744948*^9, 3.770731576735669*^9}, {3.7707420781265244`*^9, 
  3.7707420800733657`*^9}, {3.7707532079263687`*^9, 
  3.770753208847887*^9}},ExpressionUUID->"024d6b31-6368-4903-968e-\
2d73a733e266"],

Cell[CellGroupData[{

Cell["Making a Predictive Function", "Subsection",
 CellChangeTimes->{{3.7707420636957464`*^9, 
  3.7707420676440516`*^9}},ExpressionUUID->"7b2b0c48-4eec-4f0a-a533-\
036cccaedee9"],

Cell["\<\
Now that all the data is together, we can train an algorithm on my running \
data, and answer the original question. We just have to feed in the data to a \
prediction algorithm as a nice, clean list of rules.\
\>", "Text",
 CellChangeTimes->{{3.7707318410388007`*^9, 3.7707318527240596`*^9}, {
  3.7707319431435103`*^9, 3.77073194586732*^9}, {3.770732019423493*^9, 
  3.7707321183305235`*^9}, {3.7707367761956787`*^9, 
  3.770736828501829*^9}},ExpressionUUID->"78144a61-3669-4598-abcc-\
dd92fbfb956c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tempdistassoc", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"runningDataWithGPSandTemp", "//", "Normal"}], "//", "Values"}],
      ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"__", ",", 
        RowBox[{"Quantity", "[", 
         RowBox[{"distance_", ",", "\"\<Kilometers\>\""}], "]"}], ",", "__", 
        ",", 
        RowBox[{"Quantity", "[", 
         RowBox[{"temperature_", ",", "\"\<DegreesCelsius\>\""}], "]"}]}], 
       "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"temperature", "\[Rule]", "distance"}], "}"}]}], ",", 
     "Infinity"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7707264729148717`*^9, 3.770726473850995*^9}, {
   3.7707265072803345`*^9, 3.770726588165256*^9}, 3.770726624611556*^9, {
   3.770726668204628*^9, 3.7707267731307883`*^9}, {3.770726809106825*^9, 
   3.770726814430027*^9}, {3.7707268899061627`*^9, 3.7707270309616556`*^9}, 
   3.770727237378067*^9, {3.770727370766385*^9, 3.77072737617959*^9}, {
   3.770727537998041*^9, 3.770727539294239*^9}, {3.7707276170162086`*^9, 
   3.770727638657632*^9}, {3.770731074004552*^9, 3.7707310858711205`*^9}, {
   3.7707392883021135`*^9, 3.770739290284974*^9}, {3.7707626702852955`*^9, 
   3.770762673167458*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e15d4364-5693-4a0e-99e0-6e79d0bcaaa6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"distpredict", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", "tempdistassoc", "]"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7707276521174784`*^9, 3.7707277266584315`*^9}, {
  3.770739624448329*^9, 3.7707396331814137`*^9}, {3.770740370699766*^9, 
  3.770740393131489*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"f5594e9d-fe7a-48fa-b95a-2bbeb58e260b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["619", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 619, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 619, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.9289176090468498`}, "Method" -> "Naive", 
                   "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.9289176090468498`}, 
                   "StandardDeviation" -> {12.440804739903703`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.9289176090468498`}, 
                    "StandardDeviation" -> {12.440804739903703`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 1, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0441504, "MaxTrainingMemory" -> 90152, 
                  "DataMemory" -> 5240, "FunctionMemory" -> 21752, 
                  "LanguageVersion" -> {12., 0}, "Date" -> 
                  DateObject[{
                    2019, 7, 8, 15, 44, 36.9115484`9.319737154735963}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12., 0}, "ID" -> 
             4026204838636604962]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {1.9289176090468498`}, 
             "StandardDeviation" -> {12.440804739903703`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 555916400263098432]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1594110942329843211]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {3.4131502423263314`}, 
             "StandardDeviation" -> {1.9750928720019887`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8272830053416788964]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3248148415192941787]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (3.4131502423263314` + 
       1.9750928720019887` #& ), 
      "ProcessorFunction" -> (-1.7280960762451147` + 0.5063053055253967 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.9686381179570198, 7.952461365400469}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1: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
            "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 100,
       "DistributionData" -> {NormalDistribution, 0.8513199875079887}, 
      "TrainingOutput" -> CompressedData["
1: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
PZCLM4Lv2O3O4V3C8piOplqBv1n/X3D/B8T0toM=
       "], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 100, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[7265], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0.6806154210459763, "PreprocessingTime" -> 
      1.7302568`7.689655558212219, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[1.7161036477331892`, 0.04926344739275085], 
         "StandardDeviation" -> 
         Around[1.6445477151632624`, 0.11750326056054572`], "EvaluationTime" -> 
         0.0001925585130451993, "TestSize" -> 696, "ModelMemory" -> 12816., 
         "ModelUtility" -> -1.204813809836124, "TrainingSize" -> 495, 
         "TrainingTime" -> 0.06095233747813536, "TrainingMemory" -> 
         1.7102514285714284`*^6, "ExperimentCount" -> 6, 
         "MeanCrossEntropyHistory" -> {
           Around[1.7988452564535728`, 0.12167676776793605`], 
           Around[1.7592844956120237`, 0.1204406790064097], 
           Around[1.5991375452112442`, 0.05576778705799458], 
           Around[1.791187958160059, 0.1090086911600598], 
           Around[1.6249385335281301`, 0.06935640819472347], 
           Around[1.723228097434106, 0.11642972963322425`]}, 
         "StandardDeviationHistory" -> {
           Around[1.8637279528862538`, 0.27591504693039703`], 
           Around[1.7870432853612948`, 0.31075964231010134`], 
           Around[1.3398602790438363`, 0.10186091092679252`], 
           Around[1.6540337966826382`, 0.14133729464222589`], 
           Around[1.3659395330313606`, 0.1335312370943725], 
           Around[1.85668144397419, 0.4883384622667343]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 619], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 114632851196521]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.8804100728376216`, 0.18267692443911174`], 
              "StandardDeviation" -> 
              Around[1.9724987022770333`, 0.4717936734307723], 
              "EvaluationTime" -> 0.0001258925411794167, "TestSize" -> 100, 
              "ModelMemory" -> 6432, "ModelUtility" -> -1.4191872634264788`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 155824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8804100728376216`, 0.12917209203719845`]}, 
              "StandardDeviationHistory" -> {
                Around[1.9724987022770333`, 0.3336085058038105]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.8145065600293904`, 0.10168260369609272`], 
              "StandardDeviation" -> 
              Around[1.7182008690728952`, 0.21920414568363275`], 
              "EvaluationTime" -> 0.0001258925411794167, "TestSize" -> 300, 
              "ModelMemory" -> 7240., "ModelUtility" -> -1.2596313367290215`, 
              "TrainingSize" -> 80, "TrainingTime" -> 0.00845746176043211, 
              "TrainingMemory" -> 164440., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9053089086367472`, 0.1603737537861046], 
                Around[1.8920120661550548`, 0.17998274064725953`], 
                Around[1.646198705296369, 0.06473462277536594]}, 
              "StandardDeviationHistory" -> {
                Around[1.944788002249671, 0.32717562584437376`], 
                Around[1.8840818107552413`, 0.27863271676229817`], 
                Around[1.3257327942137733`, 0.10779854344256612`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.7161036477331892`, 0.04926344739275085], 
              "StandardDeviation" -> 
              Around[1.6445477151632624`, 0.11750326056054572`], 
              "EvaluationTime" -> 0.0001925585130451993, "TestSize" -> 696, 
              "ModelMemory" -> 12816., "ModelUtility" -> -1.204813809836124, 
              "TrainingSize" -> 495, "TrainingTime" -> 0.06095233747813536, 
              "TrainingMemory" -> 1.7102514285714284`*^6, "ExperimentCount" -> 
              6, "MeanCrossEntropyHistory" -> {
                Around[1.7988452564535728`, 0.12167676776793605`], 
                Around[1.7592844956120237`, 0.1204406790064097], 
                Around[1.5991375452112442`, 0.05576778705799458], 
                Around[1.791187958160059, 0.1090086911600598], 
                Around[1.6249385335281301`, 0.06935640819472347], 
                Around[1.723228097434106, 0.11642972963322425`]}, 
              "StandardDeviationHistory" -> {
                Around[1.8637279528862538`, 0.27591504693039703`], 
                Around[1.7870432853612948`, 0.31075964231010134`], 
                Around[1.3398602790438363`, 0.10186091092679252`], 
                Around[1.6540337966826382`, 0.14133729464222589`], 
                Around[1.3659395330313606`, 0.1335312370943725], 
                Around[1.85668144397419, 0.4883384622667343]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001925585130451993, "ModelMemory" -> 
             12816., "StandardDeviation" -> 
             Around[1.6445477151632624`, 0.11750326056054572`], 
             "TrainingMemory" -> 1.7102514285714284`*^6, "TrainingTime" -> 
             0.0888104599744382], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 114628556229225]], "MaxTrainingSize" -> 619, 
      "PreprocessorEvaluationTime" -> 8.35146484375`1.*^-6, 
      "PreprocessorMemory" -> 39272, "InputDimension" -> 1, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.7715894805815992`17.329099404927106*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.04232837285207379, 
          "ElapsedTimes" -> 0.4879388, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 80, "TimeBudgets" -> 0.21164186426036907`, 
          "ElapsedTimes" -> 0.2197052, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 495, "TimeBudgets" -> 1.0582093213018449`, 
          "ElapsedTimes" -> 1.0113503, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[114637146163817]], "ID" -> 
         114641441131113]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {17}, "ID" -> 
           4635246341379078022]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 4.4265404, 
      "MaxTrainingMemory" -> 29805224, "DataMemory" -> 59600, 
      "FunctionMemory" -> 126664, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 8, 15, 44, 41.2353912`9.367844996400038}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7707276577763076`*^9, {3.770727689513262*^9, 3.7707277310115447`*^9}, 
   3.7707393036272097`*^9, 3.7707396404131355`*^9, {3.7707403768238163`*^9, 
   3.7707404016511106`*^9}, 3.77076268811306*^9, 3.7716038813630824`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"68520036-1047-4378-92c2-2eaad7375408"]
}, Open  ]],

Cell["\<\
Using the predictor, it\[CloseCurlyQuote]s easy to make an interactive tool \
to predict how far I will run based on a temperature. Try it out! \
\>", "Text",
 CellChangeTimes->{{3.770733322330202*^9, 3.7707333242298098`*^9}, {
   3.7707351458995056`*^9, 3.770735146999476*^9}, {3.7707365203326063`*^9, 
   3.770736535912854*^9}, {3.770737505425885*^9, 3.7707375714014916`*^9}, {
   3.770763225358517*^9, 3.77076331463408*^9}, 
   3.770934459445445*^9},ExpressionUUID->"83120ded-a36d-49d9-93b1-\
8b24a01acb98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"StringJoin", "[", 
    RowBox[{"\"\<Predicted Running Distance: \>\"", ",", 
     RowBox[{"ToString", "[", 
      RowBox[{"distpredict", "[", "x", "]"}], "]"}], ",", "\"\< kms\>\""}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "15", ",", "\"\<Temperature (\[Degree]C)\>\""}], 
      "}"}], ",", 
     RowBox[{"-", "30"}], ",", "30", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}], ",", 
   RowBox[{"AppearanceElements", "\[Rule]", "All"}], ",", 
   StyleBox[
    RowBox[{"SaveDefinitions", "->", "True"}], "Input"]}], "]"}]], "Input",
 CellChangeTimes->{{3.7707277205560603`*^9, 3.770727721015867*^9}, {
  3.7707277542684836`*^9, 3.770727789141161*^9}, {3.770733329509466*^9, 
  3.770733330348739*^9}, {3.7707334245447598`*^9, 3.7707334959084125`*^9}, {
  3.7707335298572025`*^9, 3.7707336018044586`*^9}, {3.7707336462689266`*^9, 
  3.7707336541023855`*^9}, {3.7707338577376943`*^9, 3.7707338663245525`*^9}, {
  3.7707343690616293`*^9, 3.7707344078128586`*^9}, {3.7707356551042213`*^9, 
  3.770735687659197*^9}, {3.770735731941656*^9, 3.770735754870063*^9}, {
  3.7707358885504537`*^9, 3.7707359053009405`*^9}, {3.7707393167320623`*^9, 
  3.770739333191371*^9}, {3.770739677183444*^9, 3.770739677316208*^9}, {
  3.770752849803027*^9, 3.7707528509528975`*^9}, {3.770934371373945*^9, 
  3.770934371874458*^9}, {3.770934423126442*^9, 3.7709344458040433`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"bef3fa19-b844-471c-ae2d-072fc3759839"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = -30, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`x$$], 15, "Temperature (\[Degree]C)"}, -30, 30, 1}}, 
    Typeset`size$$ = {296., {3., 10.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`x$308531$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 15}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$308531$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      StringJoin["Predicted Running Distance: ", 
        ToString[
         $CellContext`distpredict[$CellContext`x$$]], " kms"], 
      "Specifications" :> {{{$CellContext`x$$, 15, 
          "Temperature (\[Degree]C)"}, -30, 30, 1, Appearance -> "Open"}}, 
      "Options" :> {AppearanceElements -> All}, "DefaultOptions" :> {}],
     ImageSizeCache->{370., {70., 77.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`distpredict = PredictorFunction[
         Association[
         "ExampleNumber" -> 619, "Input" -> 
          Association[
           "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
              Association[
              "Input" -> Association[
                "f1" -> Association["Type" -> "Numerical"]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
               "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                 Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
               True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
            "Processor" -> MachineLearning`MLProcessor["Sequence", 
              Association[
              "Input" -> Association[
                "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
                 MachineLearning`MLProcessor["ToVector", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
                 MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 619, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {1.9289176090468498`}, "Method" -> "Naive", 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.9289176090468498`}, 
                    "StandardDeviation" -> {12.440804739903703`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.9289176090468498`}, 
                    "StandardDeviation" -> {12.440804739903703`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0441504, "MaxTrainingMemory" -> 90152,
                     "DataMemory" -> 5240, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {12., 0}, "Date" -> 
                    DateObject[{
                    2019, 7, 8, 15, 44, 36.9115484`9.319737154735963}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                   "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector", "Version" -> {12., 0}, "ID" -> 
                   4026204838636604962]], 
                 MachineLearning`MLProcessor["Standardize", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.9289176090468498`}, 
                   "StandardDeviation" -> {12.440804739903703`}, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Version" -> {12., 0}, "ID" -> 555916400263098432]]}, 
               "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], 
          "Output" -> 
          Association[
           "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
              Association[
              "Input" -> Association[
                "f1" -> Association["Type" -> "Numerical"]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
               "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                 Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
               True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
            "Processor" -> MachineLearning`MLProcessor["Sequence", 
              Association[
              "Input" -> Association[
                "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
               "Processors" -> {
                 MachineLearning`MLProcessor["ToVector", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Version" -> {12., 0}, "ID" -> 1594110942329843211]], 
                 MachineLearning`MLProcessor["Standardize", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {3.4131502423263314`}, 
                   "StandardDeviation" -> {1.9750928720019887`}, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Version" -> {12., 0}, "ID" -> 8272830053416788964]], 
                 MachineLearning`MLProcessor["FromVector", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], 
                   "Version" -> {12., 0}, "ID" -> 3248148415192941787]], 
                 MachineLearning`MLProcessor["FirstValues", 
                  Association[
                  "Info" -> Association["Type" -> "Numerical", "Weight" -> 1],
                    "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
               "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
            "InverseProcessorFunction" -> (3.4131502423263314` + 
             1.9750928720019887` #& ), 
            "ProcessorFunction" -> (-1.7280960762451147` + 
             0.5063053055253967 #& ), "Name" -> "value", 
            "Quantiles" -> {-0.9686381179570198, 7.952461365400469}], "Prior" -> 
          Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
          "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
          "Model" -> Association[
           "NeighborsFunction" -> 
            MachineLearning`PackageScope`NeighborsFunction["Nearest", 
              NearestFunction[
               Hold[
                Nearest[CompressedData["
1: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
                  "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
            100, "DistributionData" -> {
             NormalDistribution, 0.8513199875079887}, 
            "TrainingOutput" -> CompressedData["
1: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
PZCLM4Lv2O3O4V3C8piOplqBv1n/X3D/B8T0toM=
             "], "DistributionSmoothing" -> 0.5, "Processor" -> 
            MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
               "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
            "Method" -> "NearestNeighbors", "PostProcessor" -> 
            MachineLearning`MLProcessor["Identity"], "Options" -> 
            Association[
             "NeighborsNumber" -> 
              Association["Value" -> 100, "Options" -> Association[]], 
              "DistributionSmoothing" -> 
              Association["Value" -> 0.5, "Options" -> Association[]], 
              "NearestMethod" -> 
              Association["Value" -> "KDtree", "Options" -> Association[]]]], 
          "TrainingInformation" -> 
          Association[
           "PanelCell" -> CellObject[7265], "TrainingFunction" -> Predict, 
            "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
            "ProcessorEntropyShift" -> 0.6806154210459763, 
            "PreprocessingTime" -> 1.7302568`7.689655558212219, "LossName" -> 
            "StandardDeviation", "BestModelInformation" -> Dataset[
              Association[
              "MeanCrossEntropy" -> 
               Around[1.7161036477331892`, 0.04926344739275085], 
               "StandardDeviation" -> 
               Around[1.6445477151632624`, 0.11750326056054572`], 
               "EvaluationTime" -> 0.0001925585130451993, "TestSize" -> 696, 
               "ModelMemory" -> 12816., "ModelUtility" -> -1.204813809836124, 
               "TrainingSize" -> 495, "TrainingTime" -> 0.06095233747813536, 
               "TrainingMemory" -> 1.7102514285714284`*^6, "ExperimentCount" -> 
               6, "MeanCrossEntropyHistory" -> {
                 Around[1.7988452564535728`, 0.12167676776793605`], 
                 Around[1.7592844956120237`, 0.1204406790064097], 
                 Around[1.5991375452112442`, 0.05576778705799458], 
                 Around[1.791187958160059, 0.1090086911600598], 
                 Around[1.6249385335281301`, 0.06935640819472347], 
                 Around[1.723228097434106, 0.11642972963322425`]}, 
               "StandardDeviationHistory" -> {
                 Around[1.8637279528862538`, 0.27591504693039703`], 
                 Around[1.7870432853612948`, 0.31075964231010134`], 
                 Around[1.3398602790438363`, 0.10186091092679252`], 
                 Around[1.6540337966826382`, 0.14133729464222589`], 
                 Around[1.3659395330313606`, 0.1335312370943725], 
                 Around[1.85668144397419, 0.4883384622667343]}, 
               "Configuration" -> {
                "NearestNeighbors", "NeighborsNumber" -> Automatic, 
                 "DistributionSmoothing" -> 0.5, "NearestMethod" -> 
                 Automatic}, "FinalTrainingSize" -> 619], 
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                "TrainingTime", "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "StandardDeviationHistory", 
                "Configuration", "FinalTrainingSize"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, 6], 
                TypeSystem`Vector[TypeSystem`AnyType, 6], 
                TypeSystem`Tuple[{
                  TypeSystem`Atom[String], TypeSystem`AnyType, 
                  TypeSystem`AnyType, TypeSystem`AnyType}], 
                TypeSystem`Atom[Integer]}], 
              Association["ID" -> 114632851196521]], "Configurations" -> 
            Dataset[
              Association[
              Association[
                "Value" -> "NearestNeighbors", "Options" -> 
                 Association[
                  "NeighborsNumber" -> Association["Value" -> Automatic], 
                   "DistributionSmoothing" -> Association["Value" -> 0.5], 
                   "NearestMethod" -> Association["Value" -> Automatic]]] -> 
               Association["Experiments" -> {
                   Association[
                   "MeanCrossEntropy" -> 
                    Around[1.8804100728376216`, 0.18267692443911174`], 
                    "StandardDeviation" -> 
                    Around[1.9724987022770333`, 0.4717936734307723], 
                    "EvaluationTime" -> 0.0001258925411794167, "TestSize" -> 
                    100, "ModelMemory" -> 6432, 
                    "ModelUtility" -> -1.4191872634264788`, "TrainingSize" -> 
                    15, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 155824, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[1.8804100728376216`, 0.12917209203719845`]}, 
                    "StandardDeviationHistory" -> {
                    Around[1.9724987022770333`, 0.3336085058038105]}], 
                   Association[
                   "MeanCrossEntropy" -> 
                    Around[1.8145065600293904`, 0.10168260369609272`], 
                    "StandardDeviation" -> 
                    Around[1.7182008690728952`, 0.21920414568363275`], 
                    "EvaluationTime" -> 0.0001258925411794167, "TestSize" -> 
                    300, "ModelMemory" -> 7240., 
                    "ModelUtility" -> -1.2596313367290215`, "TrainingSize" -> 
                    80, "TrainingTime" -> 0.00845746176043211, 
                    "TrainingMemory" -> 164440., "ExperimentCount" -> 3, 
                    "MeanCrossEntropyHistory" -> {
                    Around[1.9053089086367472`, 0.1603737537861046], 
                    Around[1.8920120661550548`, 0.17998274064725953`], 
                    Around[1.646198705296369, 0.06473462277536594]}, 
                    "StandardDeviationHistory" -> {
                    Around[1.944788002249671, 0.32717562584437376`], 
                    Around[1.8840818107552413`, 0.27863271676229817`], 
                    Around[1.3257327942137733`, 0.10779854344256612`]}], 
                   Association[
                   "MeanCrossEntropy" -> 
                    Around[1.7161036477331892`, 0.04926344739275085], 
                    "StandardDeviation" -> 
                    Around[1.6445477151632624`, 0.11750326056054572`], 
                    "EvaluationTime" -> 0.0001925585130451993, "TestSize" -> 
                    696, "ModelMemory" -> 12816., 
                    "ModelUtility" -> -1.204813809836124, "TrainingSize" -> 
                    495, "TrainingTime" -> 0.06095233747813536, 
                    "TrainingMemory" -> 1.7102514285714284`*^6, 
                    "ExperimentCount" -> 6, "MeanCrossEntropyHistory" -> {
                    Around[1.7988452564535728`, 0.12167676776793605`], 
                    Around[1.7592844956120237`, 0.1204406790064097], 
                    Around[1.5991375452112442`, 0.05576778705799458], 
                    Around[1.791187958160059, 0.1090086911600598], 
                    Around[1.6249385335281301`, 0.06935640819472347], 
                    Around[1.723228097434106, 0.11642972963322425`]}, 
                    "StandardDeviationHistory" -> {
                    Around[1.8637279528862538`, 0.27591504693039703`], 
                    Around[1.7870432853612948`, 0.31075964231010134`], 
                    Around[1.3398602790438363`, 0.10186091092679252`], 
                    Around[1.6540337966826382`, 0.14133729464222589`], 
                    Around[1.3659395330313606`, 0.1335312370943725], 
                    Around[1.85668144397419, 0.4883384622667343]}]}, 
                 "PredictedPerformances" -> 
                 Association[
                  "EvaluationTime" -> 0.0001925585130451993, "ModelMemory" -> 
                   12816., "StandardDeviation" -> 
                   Around[1.6445477151632624`, 0.11750326056054572`], 
                   "TrainingMemory" -> 1.7102514285714284`*^6, "TrainingTime" -> 
                   0.0888104599744382], "Index" -> 1]], 
              TypeSystem`Assoc[
               TypeSystem`Struct[{"Value", "Options"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
               
               TypeSystem`Struct[{
                "Experiments", "PredictedPerformances", "Index"}, {
                 TypeSystem`Vector[
                  
                  TypeSystem`Struct[{
                   "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                    "TestSize", "ModelMemory", "ModelUtility", "TrainingSize",
                     "TrainingTime", "TrainingMemory", "ExperimentCount", 
                    "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                   TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Vector[
                    TypeSystem`AnyType, TypeSystem`AnyLength], 
                    TypeSystem`Vector[
                    TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
                 
                 TypeSystem`Struct[{
                  "EvaluationTime", "ModelMemory", "StandardDeviation", 
                   "TrainingMemory", "TrainingTime"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Atom[Integer]}], 1], 
              Association["ID" -> 114628556229225]], "MaxTrainingSize" -> 619,
             "PreprocessorEvaluationTime" -> 8.3514648437499`1.*^-6, 
            "PreprocessorMemory" -> 39272, "InputDimension" -> 1, 
            "OutputDimension" -> 1, 
            "BaselineLogProbability" -> -1.4189385332046727`, 
            "VariableBudget" -> True, "CheckpointingInfo" -> 
            Association["Checkpointing" -> False], "UserStop" -> False, 
            "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
            3.7715894805815992`17.329099404927106*^9, "RoundPartitioning" -> 
            Dataset[{
               Association[
               "TrainingSizes" -> 15, "TimeBudgets" -> 0.04232837285207379, 
                "ElapsedTimes" -> 0.4879388, "ExperimentCounts" -> 1], 
               Association[
               "TrainingSizes" -> 80, "TimeBudgets" -> 0.21164186426036907`, 
                "ElapsedTimes" -> 0.2197052, "ExperimentCounts" -> 3], 
               Association[
               "TrainingSizes" -> 495, "TimeBudgets" -> 1.0582093213018449`, 
                "ElapsedTimes" -> 1.0113503, "ExperimentCounts" -> 6]}, 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                 "ExperimentCounts"}, {
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer]}], 3], 
              Association[
              "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
                 Dataset`DatasetHandle[114637146163817]], "ID" -> 
               114641441131113]]], "Log" -> 
          Association["Example" -> MachineLearning`MLDataset[
              Association[
              "f1" -> Association[
                "Type" -> "Numerical", "Weight" -> 1, "Values" -> {17}, "ID" -> 
                 4635246341379078022]], 
              Association[
              "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
               0, "RawExample" -> False]], "TrainingTime" -> 4.4265404, 
            "MaxTrainingMemory" -> 29805224, "DataMemory" -> 59600, 
            "FunctionMemory" -> 126664, "LanguageVersion" -> {12., 0}, "Date" -> 
            DateObject[{2019, 7, 8, 15, 44, 41.2353912`9.367844996400038}, 
              "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
            "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
            "SystemWordLength" -> 64, "Evaluations" -> {}]]], 
       UpSetDelayed[
        Length[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        MachineLearning`file68MLDataset`PackagePrivate`global[
        "ExampleNumber"]], 
       UpSetDelayed[
        Dimensions[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], {
         Length[
          MachineLearning`MLDataset[
          MachineLearning`file68MLDataset`PackagePrivate`features, 
           MachineLearning`file68MLDataset`PackagePrivate`global]], 
         Length[MachineLearning`file68MLDataset`PackagePrivate`features]}], 
       UpSetDelayed[
        RandomSample[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        MachineLearning`ShuffleData[
         MachineLearning`MLDataset[
         MachineLearning`file68MLDataset`PackagePrivate`features, 
          MachineLearning`file68MLDataset`PackagePrivate`global]]], 
       UpSetDelayed[
        RandomSample[
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`x, 
          Blank[MachineLearning`MLDataset]], 
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`n, 
          Blank[]]], 
        MachineLearning`MLPart[
        MachineLearning`file68MLDataset`PackagePrivate`x, 
         RandomSample[
          Range[
           Length[MachineLearning`file68MLDataset`PackagePrivate`x]], 
          MachineLearning`file68MLDataset`PackagePrivate`n]]], 
       UpSetDelayed[
        Alternatives[Keys, FeatureNames][
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        Keys[MachineLearning`file68MLDataset`PackagePrivate`features]], 
       UpSetDelayed[
        FeatureTypes[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        Part[
        MachineLearning`file68MLDataset`PackagePrivate`features, All, 
         "Type"]], 
       UpSetDelayed[
        Weights[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        Part[
        MachineLearning`file68MLDataset`PackagePrivate`global, 
         "ExampleWeights"]], 
       UpSetDelayed[
        Normal[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        Transpose[
         MachineLearning`PackageScope`LazyValues[
          Part[
          MachineLearning`file68MLDataset`PackagePrivate`features, All, 
           "Values"]]]], 
       UpSetDelayed[
        Values[
         MachineLearning`MLDataset[
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`features, 
           Blank[]], 
          Pattern[MachineLearning`file68MLDataset`PackagePrivate`global, 
           Blank[]]]], 
        MachineLearning`PackageScope`LazyValues[
         Part[
         MachineLearning`file68MLDataset`PackagePrivate`features, All, 
          "Values"]]], 
       TagSetDelayed[MachineLearning`MLDataset, 
        Delete[
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`dataset, 
          Blank[MachineLearning`MLDataset]], 
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`elem, 
          Blank[List]]], 
        Module[{
         MachineLearning`file68MLDataset`PackagePrivate`newdataset, 
          MachineLearning`file68MLDataset`PackagePrivate`elempos}, 
         MachineLearning`file68MLDataset`PackagePrivate`elempos = 
          Map[List, MachineLearning`file68MLDataset`PackagePrivate`elem]; 
         MachineLearning`file68MLDataset`PackagePrivate`newdataset = 
          MachineLearning`file68MLDataset`PackagePrivate`dataset; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 1, 
            All, "Values"] = Values[
            Map[Delete[
              Part[#, "Values"], 
              MachineLearning`file68MLDataset`PackagePrivate`elempos]& , 
             Part[
             MachineLearning`file68MLDataset`PackagePrivate`dataset, 1]]]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "ExampleNumber"] = Length[
            Part[
            MachineLearning`file68MLDataset`PackagePrivate`newdataset, 1, 1, 
             "Values"]]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "LogDensityRatios"] = Replace[
            Part[
            MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
             "LogDensityRatios"], 
            Pattern[MachineLearning`file68MLDataset`PackagePrivate`l, 
              Blank[List]] :> 
            Delete[MachineLearning`file68MLDataset`PackagePrivate`l, 
              MachineLearning`file68MLDataset`PackagePrivate`elempos]]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "ExampleWeights"] = Replace[
            Part[
            MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
             "ExampleWeights"], 
            Pattern[MachineLearning`file68MLDataset`PackagePrivate`l, 
              Blank[List]] :> 
            Delete[MachineLearning`file68MLDataset`PackagePrivate`l, 
              MachineLearning`file68MLDataset`PackagePrivate`elempos]]; 
         MachineLearning`file68MLDataset`PackagePrivate`newdataset = 
          MapAt[Hash[{#, 
              MachineLearning`file68MLDataset`PackagePrivate`elempos, 
              "Delete"}]& , 
            MachineLearning`file68MLDataset`PackagePrivate`newdataset, {
            1, All, "ID"}]; 
         MachineLearning`file68MLDataset`PackagePrivate`newdataset]], 
       UpSetDelayed[
        Join[
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`data, 
          BlankSequence[MachineLearning`MLDataset]]], 
        Module[{
         MachineLearning`file68MLDataset`PackagePrivate`newdataset, 
          MachineLearning`file68MLDataset`PackagePrivate`datasets, 
          MachineLearning`file68MLDataset`PackagePrivate`joinedvalues, 
          MachineLearning`file68MLDataset`PackagePrivate`ids}, 
         MachineLearning`file68MLDataset`PackagePrivate`datasets = {
           MachineLearning`file68MLDataset`PackagePrivate`data}; 
         If[Length[MachineLearning`file68MLDataset`PackagePrivate`datasets] == 
           1, 
           Return[MachineLearning`file68MLDataset`PackagePrivate`data]]; 
         MachineLearning`file68MLDataset`PackagePrivate`newdataset = 
          First[MachineLearning`file68MLDataset`PackagePrivate`datasets]; 
         MachineLearning`file68MLDataset`PackagePrivate`joinedvalues = 
          Part[
           MachineLearning`file68MLDataset`PackagePrivate`datasets, All, 1, 
            All, "Values"]; 
         MachineLearning`file68MLDataset`PackagePrivate`joinedvalues = 
          Merge[MachineLearning`file68MLDataset`PackagePrivate`joinedvalues, 
            Apply[Join, #]& ]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 1, 
            All, "Values"] = 
          MachineLearning`PackageScope`LazyValues[
           MachineLearning`file68MLDataset`PackagePrivate`joinedvalues]; 
         MachineLearning`file68MLDataset`PackagePrivate`ids = 
          Part[MachineLearning`file68MLDataset`PackagePrivate`datasets, All, 
            1, All, "ID"]; 
         MachineLearning`file68MLDataset`PackagePrivate`ids = 
          Merge[MachineLearning`file68MLDataset`PackagePrivate`ids, Hash]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 1, 
            All, "ID"] = 
          MachineLearning`PackageScope`LazyValues[
           MachineLearning`file68MLDataset`PackagePrivate`ids]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "ExampleNumber"] = Total[
            Part[
            MachineLearning`file68MLDataset`PackagePrivate`datasets, All, 2, 
             "ExampleNumber"]]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "ExampleWeights"] = 
          MachineLearning`file68MLDataset`PackagePrivate`joinWeights[
           MachineLearning`file68MLDataset`PackagePrivate`datasets, 
            "ExampleWeights"]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "LogDensityRatios"] = 
          MachineLearning`file68MLDataset`PackagePrivate`joinWeights[
           MachineLearning`file68MLDataset`PackagePrivate`datasets, 
            "LogDensityRatios"]; 
         Part[MachineLearning`file68MLDataset`PackagePrivate`newdataset, 2, 
            "RawExample"] = False; 
         MachineLearning`file68MLDataset`PackagePrivate`newdataset]], 
       TagSetDelayed[MachineLearning`MLDataset, 
        Condition[
         MakeBoxes[
          Pattern[System`Private`T, 
           Blank[MachineLearning`MLDataset]], StandardForm], 
         Refresh[
          Not[BoxForm`UseTextFormattingQ], None]], 
        RuleCondition[
         Replace[
          Unevaluated[System`Private`T], {HoldPattern[
             MachineLearning`MLDataset[
              Pattern[
              MachineLearning`file67Formatting`PackagePrivate`features, 
               Blank[Association]], 
              Pattern[MachineLearning`file67Formatting`PackagePrivate`global, 
               Blank[Association]]]] :> Dataset`MakeDatasetBoxes[
             Dataset[
             MachineLearning`file67Formatting`PackagePrivate`features][All, 
              Delete["ID"]], 
             MachineLearning`file67Formatting`PackagePrivate`makeSummary[
             MachineLearning`file67Formatting`PackagePrivate`global]], 
           Blank[] :> Fail}]]], 
       TagSet[MachineLearning`MLDataset, 
        MessageName[MachineLearning`MLDataset, "usage"], 
        "Specialized dataset used inside machine learning functions.\nAlways \
contains variable type information.\nToMLDataset is used to create a \
MLDataset from various WL format.\nMLProcessors are used to transform \
MLDatasets."], MachineLearning`file68MLDataset`PackagePrivate`joinWeights[
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`datasets, 
          Blank[]], 
         Pattern[MachineLearning`file68MLDataset`PackagePrivate`key, 
          Blank[]]] := 
       Module[{MachineLearning`file68MLDataset`PackagePrivate`weights, 
          MachineLearning`file68MLDataset`PackagePrivate`lengths}, 
         MachineLearning`file68MLDataset`PackagePrivate`weights = 
          Part[MachineLearning`file68MLDataset`PackagePrivate`datasets, All, 
            2, MachineLearning`file68MLDataset`PackagePrivate`key]; 
         MachineLearning`file68MLDataset`PackagePrivate`lengths = 
          Map[Length, 
            MachineLearning`file68MLDataset`PackagePrivate`datasets]; If[
           Or[
            MemberQ[MachineLearning`file68MLDataset`PackagePrivate`weights, 
             Blank[List]], 
            Apply[
            UnsameQ, MachineLearning`file68MLDataset`PackagePrivate`weights]],
            MachineLearning`file68MLDataset`PackagePrivate`weights = 
            MapThread[Replace[#, PatternTest[
                 Blank[], NumericQ] :> Table[#, #2]]& , {
              MachineLearning`file68MLDataset`PackagePrivate`weights, 
               MachineLearning`file68MLDataset`PackagePrivate`lengths}]; 
           Apply[Join, 
             MachineLearning`file68MLDataset`PackagePrivate`weights], 
           First[MachineLearning`file68MLDataset`PackagePrivate`weights]]], 
       Attributes[MakeBoxes] = {HoldAllComplete}, BoxForm`UseTextFormattingQ := 
       TrueQ[
         Or[BoxForm`oldfe, 
          Switch[
           Internal`ConvertFormTest[], InputForm, 
           BoxForm`$UseTextFormattingWhenConvertingInput, OutputForm, 
           BoxForm`$UseTextFormattingWhenConvertingOutput, 
           Blank[], BoxForm`$UseTextFormattingWhenEvaluating]]], 
       BoxForm`oldfe = False, BoxForm`$UseTextFormattingWhenConvertingInput = 
       True, BoxForm`$UseTextFormattingWhenConvertingOutput = False, 
       BoxForm`$UseTextFormattingWhenEvaluating = False, Condition[
         Dataset`MakeDatasetBoxes[
          Pattern[Dataset`Formatting`PackagePrivate`ds, 
           Blank[Dataset]]], 
         Refresh[Dataset`$UseNewDatasetFormatting, None]] := 
       Block[{Dataset`Formatting`PackagePrivate`rowCount, 
          Dataset`Formatting`PackagePrivate`boxes}, If[
           TrueQ[Dataset`$CompactDatasetRendering], Return[
             Dataset`Formatting`PackagePrivate`MakeSkeletonDataset[
             Dataset`Formatting`PackagePrivate`ds]]; Null]; 
         Dataset`Formatting`PackagePrivate`rowCount = 
          Replace[Dataset`$DatasetTargetRowCount, {PatternTest[
               Pattern[Dataset`Formatting`PackagePrivate`n, 
                Blank[]], NumberQ] :> Clip[
               Ceiling[Dataset`Formatting`PackagePrivate`n], {1, 10000}], 
             Infinity :> 10000, Blank[] :> 20}]; 
         Dataset`Formatting`PackagePrivate`boxes = If[
            Not[
             TrueQ[Dataset`$DatasetInteractivity]], 
            ToBoxes[
             TypeSystem`NestedGrid[
             Dataset`Formatting`PackagePrivate`ds, 
              Dataset`Formatting`PackagePrivate`rowCount]], 
            ToBoxes[
             TypeSystem`DynamicNestedGrid[
             Dataset`Formatting`PackagePrivate`ds, 
              Dataset`Formatting`PackagePrivate`rowCount]]]; 
         TemplateBox[{Dataset`Formatting`PackagePrivate`boxes}, "CopyTag", 
           DisplayFunction -> (#& ), 
           InterpretationFunction -> ("Dataset[<>]"& )]], 
       Dataset`MakeDatasetBoxes[
         Pattern[Dataset`Formatting`PackagePrivate`ds, 
          Blank[Dataset]]] := 
       Dataset`MakeDatasetBoxes[Dataset`Formatting`PackagePrivate`ds, 
         If[Dataset`$DatasetSummaryBarEnabled, 
          Dataset`PackageScope`DatasetSummaryData[
          Dataset`Formatting`PackagePrivate`ds], None]], 
       Dataset`MakeDatasetBoxes[
         Pattern[Dataset`Formatting`PackagePrivate`ds, 
          Blank[Dataset]], 
         Pattern[Dataset`Formatting`PackagePrivate`summary, 
          Blank[]]] := 
       With[{Dataset`Formatting`PackagePrivate`contents = 
          If[Dataset`Formatting`PackagePrivate`summary =!= None, 
            Dataset`PackageScope`AttachSummary[#, 
             Dataset`Formatting`PackagePrivate`summary]& , Identity][
            Dataset`DataFormBoxes[Dataset`Formatting`PackagePrivate`ds]], 
          Dataset`Formatting`PackagePrivate`style = Dataset`$DatasetStyle, 
          Dataset`Formatting`PackagePrivate`typestr = StringJoin["Dataset[", 
            TextString[
             TypeSystem`PatternForm[
              Dataset`GetType[Dataset`Formatting`PackagePrivate`ds]]], "]"]}, 
         TagBox[
          
          TemplateBox[{
           Dataset`Formatting`PackagePrivate`contents, 
            Dataset`Formatting`PackagePrivate`typestr}, "Dataset", 
           DisplayFunction -> (TagBox[
             StyleBox[#, Dataset`Formatting`PackagePrivate`style], Deploy]& ),
            InterpretationFunction -> (#2& )], False, Selectable -> False, 
          Editable -> False, SelectWithContents -> True]], 
       Dataset`$UseNewDatasetFormatting = True, 
       Dataset`Formatting`PackagePrivate`MakeSkeletonDataset[
         Pattern[Dataset`Formatting`PackagePrivate`ds, 
          Blank[Dataset]]] := RowBox[{"Dataset", 
          RowBox[{"[", 
            ToBoxes[
             Skeleton[
              Length[Dataset`Formatting`PackagePrivate`ds]]], "]"}]}], 
       Dataset`$DatasetTargetRowCount = 20, Dataset`$DatasetInteractivity = 
       True, TypeSystem`NestedGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
          Blank[]], 
         Optional[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`rows, 
           Blank[Integer]], 20]] := 
       TypeSystem`NestedGrid`PackagePrivate`iNestedGrid[
         TypeSystem`PackageScope`toDataAndType[
         TypeSystem`NestedGrid`PackagePrivate`data], 
         TypeSystem`NestedGrid`PackagePrivate`rows], 
       TypeSystem`NestedGrid`PackagePrivate`iNestedGrid[{
          Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`type, 
           Blank[]]}, 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`rows, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`shape, 
          TypeSystem`NestedGrid`PackagePrivate`sparse}, 
         TypeSystem`NestedGrid`PackagePrivate`shape = 
          TypeSystem`PackageScope`chooseShape[
           TypeSystem`NestedGrid`PackagePrivate`data, 
            TypeSystem`NestedGrid`PackagePrivate`type, 
            TypeSystem`NestedGrid`PackagePrivate`rows]; If[
           Not[
            FreeQ[TypeSystem`NestedGrid`PackagePrivate`type, 
             Alternatives[
             TypeSystem`NestedGrid`PackagePrivate`$entitiesPattern, Entity]]], 
           TypeSystem`NestedGrid`PackagePrivate`cacheEntities[
           TypeSystem`NestedGrid`PackagePrivate`data, 
            TypeSystem`NestedGrid`PackagePrivate`type]]; 
         TypeSystem`NestedGrid`PackagePrivate`sparse = 
          TypeSystem`NestedGrid`PackagePrivate`tooltipPathSetters[
            TypeSystem`NestedGrid`PackagePrivate`shape[
            TypeSystem`NestedGrid`PackagePrivate`data]]; 
         TypeSystem`SparseGrid[TypeSystem`NestedGrid`PackagePrivate`sparse]], 
       TypeSystem`NestedGrid`PackagePrivate`$entitiesPattern = HoldPattern[
         Alternatives[
          Blank[Entity], 
          Blank[EntityClass], 
          Blank[EntityPropertyClass], 
          Blank[EntityProperty]]], 
       TypeSystem`NestedGrid`PackagePrivate`cacheEntities[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`type, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`entities, 
          TypeSystem`NestedGrid`PackagePrivate`names}, If[
           TrueQ[$DynamicEvaluation], 
           Return[]]; 
         TypeSystem`NestedGrid`PackagePrivate`entities = 
          GeneralUtilities`DeepCases[
           TypeSystem`NestedGrid`PackagePrivate`data, 
            TypeSystem`NestedGrid`PackagePrivate`$entitiesPattern]; If[
           Not[
            FreeQ[TypeSystem`NestedGrid`PackagePrivate`type, 
             TypeSystem`Assoc[
              TypeSystem`Atom[
               Alternatives[
                Blank[Entity], Entity]], 
              Blank[], 
              Blank[]]]], TypeSystem`NestedGrid`PackagePrivate`entities = 
           Join[TypeSystem`NestedGrid`PackagePrivate`entities, 
             Flatten[
              GeneralUtilities`DeepCases[
              TypeSystem`NestedGrid`PackagePrivate`data, 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`assoc, 
                 Blank[Association]] :> GeneralUtilities`DeepCases[
                 Keys[TypeSystem`NestedGrid`PackagePrivate`assoc], 
                 Blank[Entity]]]]]]; 
         TypeSystem`NestedGrid`PackagePrivate`entities = Take[
            DeleteDuplicates[TypeSystem`NestedGrid`PackagePrivate`entities], 
            UpTo[TypeSystem`$NestedGridEntityPrefetchLimit]]; 
         TypeSystem`NestedGrid`PackagePrivate`names = 
          CommonName[TypeSystem`NestedGrid`PackagePrivate`entities]; If[
           ListQ[TypeSystem`NestedGrid`PackagePrivate`names], 
           TypeSystem`NestedGrid`PackagePrivate`names = 
            DeleteMissing[TypeSystem`NestedGrid`PackagePrivate`names]; 
           If[Length[TypeSystem`NestedGrid`PackagePrivate`names] == 
             Length[TypeSystem`NestedGrid`PackagePrivate`entities], 
             AssociateTo[TypeSystem`NestedGrid`PackagePrivate`$EntityCache, 
              Thread[
              TypeSystem`NestedGrid`PackagePrivate`entities -> 
               TypeSystem`NestedGrid`PackagePrivate`names]]]]], 
       GeneralUtilities`DeepCases[
         Pattern[GeneralUtilities`General`PackagePrivate`patts, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]]] := 
       GeneralUtilities`DeepCases[
        GeneralUtilities`General`PackagePrivate`expr, 
         GeneralUtilities`General`PackagePrivate`patts], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`DeepCases], {1, 2}], 
       GeneralUtilities`DeepCases[
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`patts, 
          Blank[]]] := 
       Cases[GeneralUtilities`General`PackagePrivate`expr, 
         GeneralUtilities`General`PackagePrivate`patts, {0, Infinity}, Heads -> 
         True], Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`DeepCases]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 2]; Fail], 
       TagSet[GeneralUtilities`DeepCases, 
        MessageName[GeneralUtilities`DeepCases, "usage"], 
        "\!\(\*RowBox[{\"DeepCases\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\",  StyleBox[\"patt\", \"TI\"]}], \"]\"}]\) is like Cases but \
looks for \!\(\*StyleBox[\"patt\", \"TI\"]\) arbitrarily deep in \
\!\(\*StyleBox[\"expr\", \"TI\"]\).\n\[Bullet] See also UniqueCases, \
DeepUniqueCases."], Attributes[Developer`Private`LHS$] = {Temporary}, 
       Attributes[Developer`CheckArgumentCount] = {HoldFirst}, 
       Developer`CheckArgumentCount[
         Pattern[PacletManager`Manager`Private`head, 
          Blank[Symbol]][
          Pattern[PacletManager`Manager`Private`args, 
           BlankNullSequence[]]], 
         Pattern[PacletManager`Manager`Private`min, 
          Blank[]], 
         Pattern[PacletManager`Manager`Private`max, 
          Blank[]]] := 
       With[{PacletManager`Manager`Private`hcargs = 
          Hold[PacletManager`Manager`Private`args]}, 
         ArgumentCountQ[PacletManager`Manager`Private`head, 
          Length[
           If[
           Options[PacletManager`Manager`Private`head] === {}, 
            PacletManager`Manager`Private`hcargs, 
            Replace[PacletManager`Manager`Private`hcargs, Blank[][
               Pattern[PacletManager`Manager`Private`a, 
                BlankNullSequence[]], 
               Repeated[Developer`$PossibleRulePattern]] :> 
             Hold[PacletManager`Manager`Private`a]]]], 
          PacletManager`Manager`Private`min, 
          PacletManager`Manager`Private`max]], Developer`$PossibleRulePattern = 
       Alternatives[Rule, RuleDelayed][
         Alternatives[
          Blank[String], 
          Blank[Symbol]], 
         Blank[]], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`Assoc]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], TypeSystem`Assoc[
         Pattern[TypeSystem`Constructors`PackagePrivate`k, 
          Blank[]], 
         Pattern[TypeSystem`Constructors`PackagePrivate`v, 
          Blank[]]] := 
       TypeSystem`Assoc[
        TypeSystem`Constructors`PackagePrivate`k, 
         TypeSystem`Constructors`PackagePrivate`v, TypeSystem`AnyLength], 
       TagSetDelayed[TypeSystem`Assoc, 
        MakeBoxes[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          PatternTest[
           TypeSystem`Assoc[
            Blank[], 
            Blank[], 
            Blank[]], TypeSystem`HoldValidTypeQ]], StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[
          TypeSystem`Summary`PackagePrivate`t], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`Assoc, 
        MessageName[TypeSystem`Assoc, "usage"], 
        "Assoc[key, val] represents a variable-length association whose keys \
are all of type key and whose values are all of type val."], 
       TypeSystem`TypeApply[
         Verbatim[GeneralUtilities`AssociationTranspose], 
         Verbatim[{
           
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 3], 
             TypeSystem`Vector[
              TypeSystem`Atom[Real], 3], 
             TypeSystem`Vector[
              TypeSystem`Atom[Real], 3], 
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 3]}]}]] = TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], TypeSystem`TypeApply[
         Verbatim[Map], 
         Verbatim[{Append[#, "GeoCoord" -> $CellContext`GPSData[
              #["GPX File"]]]& , 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Activity Id", "Date", "Type", "Route Name", "Distance (km)", 
              "Duration", "Average Pace", "Average Speed (km/h)", 
              "Calories Burned", "Climb (m)", "Average Heart Rate (bpm)", 
              "Friend's Tagged", "Notes", "GPX File"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[DateObject], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["Running"]], 
              TypeSystem`Atom[String], TypeSystem`AnyType, 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType,
               TypeSystem`AnyType, 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 651]}]] = TypeSystem`Vector[
         TypeSystem`Struct[{
          "Activity Id", "Date", "Type", "Route Name", "Distance (km)", 
           "Duration", "Average Pace", "Average Speed (km/h)", 
           "Calories Burned", "Climb (m)", "Average Heart Rate (bpm)", 
           "Friend's Tagged", "Notes", "GPX File", "GeoCoord"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[
            TypeSystem`Enumeration["Running"]], 
           TypeSystem`Atom[String], TypeSystem`AnyType, 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`AnyType, 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], TypeSystem`UnknownType}], 651], 
       TypeSystem`TypeApply[
         Verbatim[Map], 
         Verbatim[{Append[#, "Temperature" -> $CellContext`tempDataAssoc[{
               #["GeoCoord"], 
               #["Date"]}]]& , 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Activity Id", "Date", "Type", "Route Name", "Distance (km)", 
              "Duration", "Average Pace", "Average Speed (km/h)", 
              "Calories Burned", "Climb (m)", "Average Heart Rate (bpm)", 
              "Friend's Tagged", "Notes", "GPX File", "GeoCoord"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[DateObject], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["Running"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[
               Quantity[1, "Kilometers"]], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[
               Quantity[1, "Kilometers"/"Hours"]], 
              TypeSystem`Atom[
               Quantity[1, "LargeCalories"]], 
              TypeSystem`Atom[
               Quantity[1, "Meters"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[GeoPosition]}], 651]}]] = TypeSystem`Vector[
         TypeSystem`Struct[{
          "Activity Id", "Date", "Type", "Route Name", "Distance (km)", 
           "Duration", "Average Pace", "Average Speed (km/h)", 
           "Calories Burned", "Climb (m)", "Average Heart Rate (bpm)", 
           "Friend's Tagged", "Notes", "GPX File", "GeoCoord", 
           "Temperature"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[
            TypeSystem`Enumeration["Running"]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[""]], 
           TypeSystem`Atom[
            Quantity[1, "Kilometers"]], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[
            Quantity[1, "Kilometers"/"Hours"]], 
           TypeSystem`Atom[
            Quantity[1, "LargeCalories"]], 
           TypeSystem`Atom[
            Quantity[1, "Meters"]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[""]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[""]], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[GeoPosition], TypeSystem`UnknownType}], 651], 
       TypeSystem`TypeApply[
         Verbatim[
          GeneralUtilities`Slice["Pirate"]], 
         Verbatim[{
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Pirate Name", "Favourite Foods", "Allergies"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 20]}]] = 
       TypeSystem`FailureType[{Part, "NotApplicable"}, 
         Association["Type" -> TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Pirate Name", "Favourite Foods", "Allergies"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 20], "Part" -> "Pirate"]], 
       TypeSystem`TypeApply[
         Verbatim[
          GeneralUtilities`Slice["Pirate Name"]], 
         Verbatim[{
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Pirate Name", "Favourite Foods", "Allergies"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 20]}]] = 
       TypeSystem`FailureType[{Part, "NotApplicable"}, 
         Association["Type" -> TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Pirate Name", "Favourite Foods", "Allergies"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 20], "Part" -> "Pirate Name"]], 
       TypeSystem`TypeApply[
         Verbatim[
          GeneralUtilities`Slice[All, "Food Name"]], 
         Verbatim[{
           TypeSystem`Vector[
            TypeSystem`Struct[{"Food Name", "Type"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 40]}]] = TypeSystem`Vector[
         TypeSystem`Atom[String], 40], TypeSystem`TypeApply[
         Verbatim[
          GeneralUtilities`Slice[All, "Pirate Name"]], 
         Verbatim[{
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Pirate Name", "Favourite Foods", "Allergies"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String]}], 20]}]] = TypeSystem`Vector[
         TypeSystem`Atom[String], 20], TypeSystem`TypeApply[
         Verbatim[
          GeneralUtilities`Slice[All, {"Date", "Distance (km)"}]], 
         Verbatim[{
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Activity Id", "Date", "Type", "Route Name", "Distance (km)", 
              "Duration", "Average Pace", "Average Speed (km/h)", 
              "Calories Burned", "Climb (m)", "Average Heart Rate (bpm)", 
              "Friend's Tagged", "Notes", "GPX File", "GeoCoord", 
              "Temperature"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[DateObject], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["Running"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[
               Quantity[1, "Kilometers"]], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[
               Quantity[1, "Kilometers"/"Hours"]], 
              TypeSystem`Atom[
               Quantity[1, "LargeCalories"]], 
              TypeSystem`Atom[
               Quantity[1, "Meters"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[GeoPosition], 
              TypeSystem`Atom[
               Quantity[1, "DegreesCelsius"]]}], 651]}]] = TypeSystem`Vector[
         TypeSystem`Struct[{"Date", "Distance (km)"}, {
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[
            Quantity[1, "Kilometers"]]}], 651], TypeSystem`TypeApply[
         Verbatim[
          GeneralUtilities`Slice[All, {"Temperature", "Distance (km)"}]], 
         Verbatim[{
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "Activity Id", "Date", "Type", "Route Name", "Distance (km)", 
              "Duration", "Average Pace", "Average Speed (km/h)", 
              "Calories Burned", "Climb (m)", "Average Heart Rate (bpm)", 
              "Friend's Tagged", "Notes", "GPX File", "GeoCoord", 
              "Temperature"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[DateObject], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["Running"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[
               Quantity[1, "Kilometers"]], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[
               Quantity[1, "Kilometers"/"Hours"]], 
              TypeSystem`Atom[
               Quantity[1, "LargeCalories"]], 
              TypeSystem`Atom[
               Quantity[1, "Meters"]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[
               TypeSystem`Enumeration[""]], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[GeoPosition], 
              TypeSystem`Atom[
               Quantity[1, "DegreesCelsius"]]}], 651]}]] = TypeSystem`Vector[
         TypeSystem`Struct[{"Temperature", "Distance (km)"}, {
           TypeSystem`Atom[
            Quantity[1, "DegreesCelsius"]], 
           TypeSystem`Atom[
            Quantity[1, "Kilometers"]]}], 651], TypeSystem`TypeApply[
         Pattern[TypeSystem`Inference`PackagePrivate`head, 
          Blank[]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[]]] := (
        If[Increment[
           TypeSystem`Inference`PackagePrivate`$typeApplyCacheOccupancy] > 
          256, 
          TypeSystem`ResetTypeApplyCache[]]; TypeSystem`TypeApply[
           Verbatim[TypeSystem`Inference`PackagePrivate`head], 
           Verbatim[TypeSystem`Inference`PackagePrivate`args]] = 
         Block[{TypeSystem`$ThrowFailureType = True}, 
           Catch[
            TypeSystem`Inference`PackagePrivate`apply0[
            TypeSystem`Inference`PackagePrivate`head, 
             TypeSystem`Inference`PackagePrivate`args], 
            TypeSystem`FailureType]]), $CellContext`GPSData = 
       Association[
        "2017-09-12-070048.gpx" -> GeoPosition[{51.093478, -114.159931}], 
         "2017-09-13-080357.gpx" -> GeoPosition[{51.093563, -114.160081}], 
         "2017-09-14-114137.gpx" -> GeoPosition[{51.092006, -114.158533}], 
         "2017-09-15-074105.gpx" -> GeoPosition[{51.093361, -114.158575}], 
         "2017-09-17-114956.gpx" -> GeoPosition[{51.093758, -114.159204}], 
         "2017-09-18-074449.gpx" -> GeoPosition[{51.093572, -114.16159}], 
         "2017-09-19-081044.gpx" -> GeoPosition[{51.090788, -114.161895}], 
         "2017-09-20-073532.gpx" -> GeoPosition[{51.093509, -114.162087}], 
         "2017-09-21-074314.gpx" -> GeoPosition[{51.086898, -114.164683}], 
         "2017-09-22-072519.gpx" -> GeoPosition[{51.087311, -114.164686}], 
         "2017-09-23-195521.gpx" -> GeoPosition[{51.097523, -114.160792}], 
         "2017-09-25-175847.gpx" -> GeoPosition[{51.091606, -114.161869}], 
         "2017-09-28-191452.gpx" -> GeoPosition[{51.08842, -114.16461}], 
         "2017-09-29-233529.gpx" -> GeoPosition[{51.060033, -114.114405}], 
         "2017-09-30-212826.gpx" -> GeoPosition[{51.060859, -114.114555}], 
         "2017-10-01-103503.gpx" -> GeoPosition[{51.06287, -114.116914}], 
         "2017-10-02-075933.gpx" -> GeoPosition[{51.091783, -114.160469}], 
         "2017-10-03-074927.gpx" -> GeoPosition[{51.090268, -114.162738}], 
         "2017-10-04-074912.gpx" -> GeoPosition[{51.090148, -114.1633}], 
         "2017-10-06-075338.gpx" -> GeoPosition[{51.091528, -114.161916}], 
         "2017-10-07-102043.gpx" -> GeoPosition[{51.093603, -114.159267}], 
         "2017-10-08-090918.gpx" -> GeoPosition[{51.085597, -114.164431}], 
         "2017-10-09-120326.gpx" -> GeoPosition[{51.09004, -114.1646}], 
         "2017-10-10-072305.gpx" -> GeoPosition[{51.090232, -114.162663}], 
         "2017-10-12-184238.gpx" -> GeoPosition[{51.091765, -114.160097}], 
         "2017-10-13-075949.gpx" -> GeoPosition[{51.091032, -114.162097}], 
         "2017-10-14-163602.gpx" -> GeoPosition[{51.09112, -114.161781}], 
         "2017-10-15-121441.gpx" -> GeoPosition[{51.091441, -114.161912}], 
         "2017-10-16-075536.gpx" -> GeoPosition[{51.091635, -114.155347}], 
         "2017-10-17-072450.gpx" -> GeoPosition[{51.091737, -114.159014}], 
         "2017-10-18-075946.gpx" -> GeoPosition[{51.091679, -114.160485}], 
         "2017-10-19-074941.gpx" -> GeoPosition[{51.091672, -114.161208}], 
         "2017-10-20-163235.gpx" -> GeoPosition[{51.091702, -114.159755}], 
         "2017-10-21-190658.gpx" -> GeoPosition[{51.060637, -114.115133}], 
         "2017-10-22-202732.gpx" -> GeoPosition[{51.091818, -114.160147}], 
         "2017-10-23-071019.gpx" -> GeoPosition[{51.091423, -114.161202}], 
         "2017-10-24-191631.gpx" -> GeoPosition[{51.091726, -114.161256}], 
         "2017-10-26-073120.gpx" -> GeoPosition[{51.086779, -114.16466}], 
         "2017-10-27-194746.gpx" -> GeoPosition[{51.08614, -114.164662}], 
         "2017-10-28-174256.gpx" -> GeoPosition[{51.091609, -114.161619}], 
         "2017-10-29-214539.gpx" -> GeoPosition[{51.090346, -114.161621}], 
         "2017-11-01-083416.gpx" -> GeoPosition[{51.089651, -114.164603}], 
         "2017-11-05-173823.gpx" -> GeoPosition[{51.091643, -114.161181}], 
         "2017-11-06-074627.gpx" -> GeoPosition[{51.092654, -114.158315}], 
         "2017-11-08-222702.gpx" -> GeoPosition[{51.099228, -114.160919}], 
         "2017-11-09-075133.gpx" -> GeoPosition[{51.091621, -114.158551}], 
         "2017-11-10-182733.gpx" -> GeoPosition[{51.09173, -114.160028}], 
         "2017-11-11-120958.gpx" -> GeoPosition[{51.086157, -114.164786}], 
         "2017-11-12-132825.gpx" -> GeoPosition[{51.091279, -114.162026}], 
         "2017-11-14-075312.gpx" -> GeoPosition[{51.090961, -114.1621}], 
         "2017-11-15-083802.gpx" -> GeoPosition[{51.091687, -114.16062}], 
         "2017-11-16-074048.gpx" -> GeoPosition[{51.091346, -114.162266}], 
         "2017-11-17-174136.gpx" -> GeoPosition[{51.091775, -114.158222}], 
         "2017-11-18-125615.gpx" -> GeoPosition[{51.060599, -114.11509}], 
         "2017-11-19-094456.gpx" -> GeoPosition[{51.060599, -114.115204}], 
         "2017-11-20-074116.gpx" -> GeoPosition[{51.060635, -114.115069}], 
         "2017-11-21-073230.gpx" -> GeoPosition[{51.060596, -114.115152}], 
         "2017-11-22-075435.gpx" -> GeoPosition[{51.09174, -114.158296}], 
         "2017-11-23-172549.gpx" -> GeoPosition[{51.091582, -114.158934}], 
         "2017-11-24-073821.gpx" -> GeoPosition[{51.091766, -114.158684}], 
         "2017-11-25-093103.gpx" -> GeoPosition[{51.091686, -114.158908}], 
         "2017-11-26-100709.gpx" -> GeoPosition[{51.091731, -114.158745}], 
         "2017-11-27-074544.gpx" -> GeoPosition[{51.091698, -114.158971}], 
         "2017-11-28-074140.gpx" -> GeoPosition[{51.091738, -114.158172}], 
         "2017-11-29-082058.gpx" -> GeoPosition[{51.093205, -114.154701}], 
         "2017-11-30-083057.gpx" -> GeoPosition[{51.091698, -114.158591}], 
         "2017-12-01-075018.gpx" -> GeoPosition[{51.091661, -114.158735}], 
         "2017-12-02-083327.gpx" -> GeoPosition[{51.416902, -116.210349}], 
         "2017-12-03-081117.gpx" -> GeoPosition[{51.417168, -116.209514}], 
         "2017-12-04-082339.gpx" -> GeoPosition[{51.091962, -114.158479}], 
         "2017-12-05-073243.gpx" -> GeoPosition[{51.091702, -114.158258}], 
         "2017-12-06-074518.gpx" -> GeoPosition[{51.091775, -114.158498}], 
         "2017-12-07-084005.gpx" -> GeoPosition[{51.091756, -114.158198}], 
         "2017-12-08-070153.gpx" -> GeoPosition[{51.091788, -114.158199}], 
         "2017-12-09-163314.gpx" -> GeoPosition[{51.09175, -114.158603}], 
         "2017-12-10-135543.gpx" -> GeoPosition[{51.091603, -114.158702}], 
         "2017-12-11-102124.gpx" -> GeoPosition[{51.091751, -114.158238}], 
         "2017-12-12-105136.gpx" -> GeoPosition[{51.091732, -114.158168}], 
         "2017-12-13-094611.gpx" -> GeoPosition[{51.091675, -114.158667}], 
         "2017-12-14-111433.gpx" -> GeoPosition[{51.091762, -114.158441}], 
         "2017-12-15-110913.gpx" -> GeoPosition[{51.091851, -114.15848}], 
         "2017-12-16-080519.gpx" -> GeoPosition[{51.091787, -114.15846}], 
         "2017-12-17-093312.gpx" -> GeoPosition[{51.091715, -114.158291}], 
         "2017-12-18-093953.gpx" -> GeoPosition[{51.091766, -114.158212}], 
         "2017-12-19-091535.gpx" -> GeoPosition[{51.091665, -114.158646}], 
         "2017-12-20-085116.gpx" -> GeoPosition[{51.091727, -114.158895}], 
         "2017-12-21-092733.gpx" -> GeoPosition[{51.091629, -114.158937}], 
         "2017-12-22-104428.gpx" -> GeoPosition[{51.091784, -114.158445}], 
         "2017-12-23-101337.gpx" -> GeoPosition[{53.506493, -113.286239}], 
         "2017-12-24-093801.gpx" -> GeoPosition[{53.507401, -113.286314}], 
         "2017-12-25-111538.gpx" -> GeoPosition[{51.101497, -114.161511}], 
         "2017-12-26-103046.gpx" -> GeoPosition[{51.060585, -114.115213}], 
         "2017-12-27-102823.gpx" -> GeoPosition[{51.060168, -114.114573}], 
         "2017-12-28-104821.gpx" -> GeoPosition[{51.091779, -114.158483}], 
         "2017-12-29-111712.gpx" -> GeoPosition[{51.091814, -114.158167}], 
         "2017-12-30-125333.gpx" -> GeoPosition[{51.091799, -114.158446}], 
         "2017-12-31-105828.gpx" -> GeoPosition[{51.091832, -114.158458}], 
         "2018-01-01-171136.gpx" -> GeoPosition[{51.091764, -114.158583}], 
         "2018-01-02-110612.gpx" -> GeoPosition[{51.091738, -114.158797}], 
         "2018-01-03-095138.gpx" -> GeoPosition[{51.091656, -114.158675}], 
         "2018-01-04-091228.gpx" -> GeoPosition[{51.060546, -114.115141}], 
         "2018-01-05-094701.gpx" -> GeoPosition[{51.06057, -114.115256}], 
         "2018-01-06-111953.gpx" -> GeoPosition[{51.060657, -114.115021}], 
         "2018-01-07-112021.gpx" -> GeoPosition[{51.060649, -114.114978}], 
         "2018-01-08-080242.gpx" -> GeoPosition[{51.09173, -114.158233}], 
         "2018-01-09-171037.gpx" -> GeoPosition[{51.091793, -114.158504}], 
         "2018-01-10-112441.gpx" -> GeoPosition[{51.091821, -114.158511}], 
         "2018-01-11-092539.gpx" -> GeoPosition[{51.091661, -114.158942}], 
         "2018-01-12-081424.gpx" -> GeoPosition[{51.091808, -114.158367}], 
         "2018-01-13-105756.gpx" -> GeoPosition[{51.091803, -114.158404}], 
         "2018-01-14-093732.gpx" -> GeoPosition[{51.091795, -114.158232}], 
         "2018-01-15-081404.gpx" -> GeoPosition[{51.091685, -114.15823}], 
         "2018-01-16-063741.gpx" -> GeoPosition[{51.091768, -114.158527}], 
         "2018-01-17-082404.gpx" -> GeoPosition[{51.091823, -114.158388}], 
         "2018-01-18-091357.gpx" -> GeoPosition[{51.091741, -114.158194}], 
         "2018-01-19-114249.gpx" -> GeoPosition[{51.091585, -114.159368}], 
         "2018-01-20-092910.gpx" -> GeoPosition[{51.091738, -114.158219}], 
         "2018-01-21-101329.gpx" -> GeoPosition[{51.091711, -114.158646}], 
         "2018-01-22-083412.gpx" -> GeoPosition[{51.091804, -114.158421}], 
         "2018-01-23-062327.gpx" -> GeoPosition[{51.091667, -114.159501}], 
         "2018-01-24-081353.gpx" -> GeoPosition[{51.091751, -114.158206}], 
         "2018-01-25-084346.gpx" -> GeoPosition[{51.09179, -114.158486}], 
         "2018-01-26-114816.gpx" -> GeoPosition[{51.09174, -114.15861}], 
         "2018-01-27-094919.gpx" -> GeoPosition[{51.09179, -114.158192}], 
         "2018-01-28-101239.gpx" -> GeoPosition[{51.091652, -114.159425}], 
         "2018-01-29-082352.gpx" -> GeoPosition[{51.091731, -114.1582}], 
         "2018-01-31-071514.gpx" -> GeoPosition[{51.091681, -114.158226}], 
         "2018-02-01-081855.gpx" -> GeoPosition[{51.091811, -114.158177}], 
         "2018-02-02-082720.gpx" -> GeoPosition[{51.09178, -114.158427}], 
         "2018-02-03-094529.gpx" -> GeoPosition[{51.091739, -114.158201}], 
         "2018-02-04-112136.gpx" -> GeoPosition[{51.091743, -114.158183}], 
         "2018-02-05-080901.gpx" -> GeoPosition[{51.091788, -114.158239}], 
         "2018-02-06-072032.gpx" -> GeoPosition[{51.091765, -114.158152}], 
         "2018-02-07-083541.gpx" -> GeoPosition[{51.091766, -114.158401}], 
         "2018-02-08-090635.gpx" -> GeoPosition[{51.091818, -114.158347}], 
         "2018-02-09-141757.gpx" -> GeoPosition[{51.091806, -114.158399}], 
         "2018-02-10-134014.gpx" -> GeoPosition[{51.091757, -114.158242}], 
         "2018-02-11-092248.gpx" -> GeoPosition[{51.09174, -114.158207}], 
         "2018-02-12-192824.gpx" -> GeoPosition[{51.060648, -114.115007}], 
         "2018-02-13-190837.gpx" -> GeoPosition[{51.060532, -114.115152}], 
         "2018-02-14-081924.gpx" -> GeoPosition[{51.060639, -114.114965}], 
         "2018-02-15-083355.gpx" -> GeoPosition[{51.06062, -114.11502}], 
         "2018-02-16-083742.gpx" -> GeoPosition[{51.060657, -114.11497}], 
         "2018-02-17-102221.gpx" -> GeoPosition[{51.060612, -114.115015}], 
         "2018-02-18-093927.gpx" -> GeoPosition[{51.060536, -114.115229}], 
         "2018-02-19-101239.gpx" -> GeoPosition[{51.060585, -114.115185}], 
         "2018-02-20-101053.gpx" -> GeoPosition[{51.060656, -114.115013}], 
         "2018-02-21-105221.gpx" -> GeoPosition[{51.060621, -114.114991}], 
         "2018-02-22-102827.gpx" -> GeoPosition[{51.091667, -114.158229}], 
         "2018-02-23-084348.gpx" -> GeoPosition[{51.091748, -114.158192}], 
         "2018-02-24-110148.gpx" -> GeoPosition[{51.091731, -114.158638}], 
         "2018-02-25-100855.gpx" -> GeoPosition[{51.091748, -114.158202}], 
         "2018-02-26-085051.gpx" -> GeoPosition[{51.091682, -114.158243}], 
         "2018-02-27-182431.gpx" -> GeoPosition[{51.091669, -114.158721}], 
         "2018-02-28-084242.gpx" -> GeoPosition[{51.091684, -114.159209}], 
         "2018-03-01-081046.gpx" -> GeoPosition[{51.091726, -114.158224}], 
         "2018-03-02-082201.gpx" -> GeoPosition[{51.091706, -114.158231}], 
         "2018-03-03-092557.gpx" -> GeoPosition[{51.091731, -114.158177}], 
         "2018-03-04-090225.gpx" -> GeoPosition[{51.091809, -114.158347}], 
         "2018-03-05-094728.gpx" -> GeoPosition[{51.091738, -114.158207}], 
         "2018-03-06-064539.gpx" -> GeoPosition[{51.091698, -114.158284}], 
         "2018-03-07-165140.gpx" -> GeoPosition[{51.091766, -114.158514}], 
         "2018-03-08-080754.gpx" -> GeoPosition[{51.091788, -114.15838}], 
         "2018-03-09-082817.gpx" -> GeoPosition[{51.091798, -114.158378}], 
         "2018-03-10-075002.gpx" -> GeoPosition[{51.091688, -114.158229}], 
         "2018-03-11-110438.gpx" -> GeoPosition[{51.091788, -114.158466}], 
         "2018-03-12-083821.gpx" -> GeoPosition[{51.091814, -114.158368}], 
         "2018-03-13-065408.gpx" -> GeoPosition[{51.060598, -114.115048}], 
         "2018-03-14-084714.gpx" -> GeoPosition[{51.060368, -114.114866}], 
         "2018-03-15-092925.gpx" -> GeoPosition[{51.064118, -114.152406}], 
         "2018-03-16-092924.gpx" -> GeoPosition[{51.060628, -114.114995}], 
         "2018-03-17-101106.gpx" -> GeoPosition[{51.060624, -114.115015}], 
         "2018-03-18-105736.gpx" -> GeoPosition[{51.060269, -114.114726}], 
         "2018-03-19-083146.gpx" -> GeoPosition[{51.060625, -114.115169}], 
         "2018-03-20-063659.gpx" -> GeoPosition[{51.060618, -114.115142}], 
         "2018-03-21-084125.gpx" -> GeoPosition[{51.09174, -114.158168}], 
         "2018-03-22-093114.gpx" -> GeoPosition[{51.09181, -114.15845}], 
         "2018-03-23-233213.gpx" -> GeoPosition[{51.091763, -114.158537}], 
         "2018-03-24-092153.gpx" -> GeoPosition[{51.091766, -114.158603}], 
         "2018-03-25-083041.gpx" -> GeoPosition[{51.091754, -114.15818}], 
         "2018-03-26-093452.gpx" -> GeoPosition[{51.349837, -110.480486}], 
         "2018-03-27-065916.gpx" -> GeoPosition[{51.09173, -114.158512}], 
         "2018-03-28-082959.gpx" -> GeoPosition[{51.091661, -114.158227}], 
         "2018-03-29-073053.gpx" -> GeoPosition[{51.091748, -114.158241}], 
         "2018-03-30-082811.gpx" -> GeoPosition[{51.091764, -114.158235}], 
         "2018-03-31-104020.gpx" -> GeoPosition[{51.091804, -114.158182}], 
         "2018-04-01-113306.gpx" -> GeoPosition[{51.091755, -114.158232}], 
         "2018-04-02-104629.gpx" -> GeoPosition[{51.091779, -114.158217}], 
         "2018-04-03-064118.gpx" -> GeoPosition[{51.091726, -114.158173}], 
         "2018-04-04-080938.gpx" -> GeoPosition[{51.091736, -114.158245}], 
         "2018-04-05-093332.gpx" -> GeoPosition[{51.091702, -114.158235}], 
         "2018-04-06-081203.gpx" -> GeoPosition[{51.09176, -114.158178}], 
         "2018-04-07-104712.gpx" -> GeoPosition[{51.091743, -114.158242}], 
         "2018-04-08-170916.gpx" -> GeoPosition[{51.091786, -114.158218}], 
         "2018-04-09-083949.gpx" -> GeoPosition[{51.091771, -114.158276}], 
         "2018-04-10-082642.gpx" -> GeoPosition[{51.091714, -114.158207}], 
         "2018-04-11-084639.gpx" -> GeoPosition[{51.091731, -114.158195}], 
         "2018-04-12-064627.gpx" -> GeoPosition[{51.091723, -114.158209}], 
         "2018-04-13-111406.gpx" -> GeoPosition[{51.09172, -114.158304}], 
         "2018-04-14-104142.gpx" -> GeoPosition[{51.09177, -114.158303}], 
         "2018-04-15-090924.gpx" -> GeoPosition[{51.060513, -114.115141}], 
         "2018-04-16-084839.gpx" -> GeoPosition[{51.060633, -114.114961}], 
         "2018-04-17-173611.gpx" -> GeoPosition[{51.060664, -114.114955}], 
         "2018-04-18-090622.gpx" -> GeoPosition[{51.060636, -114.115024}], 
         "2018-04-19-103837.gpx" -> GeoPosition[{51.060642, -114.115036}], 
         "2018-04-20-094655.gpx" -> GeoPosition[{51.060616, -114.114979}], 
         "2018-04-21-073216.gpx" -> GeoPosition[{51.060706, -114.115089}], 
         "2018-04-22-090017.gpx" -> GeoPosition[{51.060634, -114.115055}], 
         "2018-04-23-084925.gpx" -> GeoPosition[{51.060599, -114.115197}], 
         "2018-04-24-094429.gpx" -> GeoPosition[{51.09173, -114.158236}], 
         "2018-04-25-102423.gpx" -> GeoPosition[{51.091759, -114.158192}], 
         "2018-04-26-132018.gpx" -> GeoPosition[{51.091726, -114.158632}], 
         "2018-04-27-112543.gpx" -> GeoPosition[{51.091736, -114.158196}], 
         "2018-04-28-094745.gpx" -> GeoPosition[{51.091775, -114.158189}], 
         "2018-04-29-100908.gpx" -> GeoPosition[{51.091774, -114.158188}], 
         "2018-04-30-095813.gpx" -> GeoPosition[{51.091713, -114.158203}], 
         "2018-05-01-102657.gpx" -> GeoPosition[{51.091759, -114.158242}], 
         "2018-05-02-090854.gpx" -> GeoPosition[{51.091763, -114.158167}], 
         "2018-05-03-074153.gpx" -> GeoPosition[{51.091767, -114.158352}], 
         "2018-05-04-081710.gpx" -> GeoPosition[{51.091832, -114.158389}], 
         "2018-05-05-084054.gpx" -> GeoPosition[{51.091728, -114.158259}], 
         "2018-05-06-101820.gpx" -> GeoPosition[{51.349838, -110.480654}], 
         "2018-05-07-095846.gpx" -> GeoPosition[{51.091743, -114.158323}], 
         "2018-05-08-092818.gpx" -> GeoPosition[{51.091729, -114.158206}], 
         "2018-05-09-091831.gpx" -> GeoPosition[{51.091747, -114.158337}], 
         "2018-05-11-091712.gpx" -> GeoPosition[{51.091723, -114.158567}], 
         "2018-05-12-090217.gpx" -> GeoPosition[{51.091813, -114.158568}], 
         "2018-05-13-091422.gpx" -> GeoPosition[{51.091758, -114.158501}], 
         "2018-05-14-183841.gpx" -> GeoPosition[{49.401633, 8.669242}], 
         "2018-05-15-061122.gpx" -> GeoPosition[{49.401791, 8.66942}], 
         "2018-05-16-053522.gpx" -> GeoPosition[{49.401837, 8.669238}], 
         "2018-05-17-054900.gpx" -> GeoPosition[{49.401724, 8.669449}], 
         "2018-05-18-065036.gpx" -> GeoPosition[{49.401496, 8.669451}], 
         "2018-05-19-093706.gpx" -> GeoPosition[{49.401635, 8.669569}], 
         "2018-05-20-133824.gpx" -> GeoPosition[{49.401666, 8.669373}], 
         "2018-05-21-080510.gpx" -> GeoPosition[{49.401435, 8.669334}], 
         "2018-05-22-080009.gpx" -> GeoPosition[{49.401622, 8.669168}], 
         "2018-05-23-081648.gpx" -> GeoPosition[{49.40177, 8.669229}], 
         "2018-05-24-075714.gpx" -> GeoPosition[{49.401569, 8.669598}], 
         "2018-05-25-082840.gpx" -> GeoPosition[{49.401612, 8.669541}], 
         "2018-05-26-082723.gpx" -> GeoPosition[{49.401632, 8.669451}], 
         "2018-05-27-090111.gpx" -> GeoPosition[{49.401468, 8.669225}], 
         "2018-05-28-075033.gpx" -> GeoPosition[{49.401546, 8.669059}], 
         "2018-05-29-074404.gpx" -> GeoPosition[{49.401144, 8.669341}], 
         "2018-05-30-074814.gpx" -> GeoPosition[{49.401442, 8.669257}], 
         "2018-05-31-095159.gpx" -> GeoPosition[{49.401557, 8.669037}], 
         "2018-06-01-173443.gpx" -> GeoPosition[{49.401581, 8.669305}], 
         "2018-06-02-054509.gpx" -> GeoPosition[{49.401534, 8.669112}], 
         "2018-06-03-093428.gpx" -> GeoPosition[{49.402039, 8.668711}], 
         "2018-06-04-074147.gpx" -> GeoPosition[{49.401591, 8.669561}], 
         "2018-06-05-075234.gpx" -> GeoPosition[{49.401489, 8.669527}], 
         "2018-06-06-074130.gpx" -> GeoPosition[{49.40165, 8.669518}], 
         "2018-06-07-074124.gpx" -> GeoPosition[{49.40151, 8.669432}], 
         "2018-06-08-075423.gpx" -> GeoPosition[{49.40154, 8.669479}], 
         "2018-06-09-094618.gpx" -> GeoPosition[{49.401505, 8.669195}], 
         "2018-06-10-093126.gpx" -> GeoPosition[{49.401511, 8.669218}], 
         "2018-06-11-075114.gpx" -> GeoPosition[{49.401764, 8.66906}], 
         "2018-06-12-074604.gpx" -> GeoPosition[{49.40174, 8.669503}], 
         "2018-06-13-080359.gpx" -> GeoPosition[{49.402031, 8.66878}], 
         "2018-06-14-073940.gpx" -> GeoPosition[{49.401572, 8.669274}], 
         "2018-06-15-075037.gpx" -> GeoPosition[{49.401453, 8.669237}], 
         "2018-06-16-095217.gpx" -> GeoPosition[{49.401428, 8.669369}], 
         "2018-06-17-110836.gpx" -> GeoPosition[{49.401603, 8.669585}], 
         "2018-06-18-080433.gpx" -> GeoPosition[{49.401589, 8.66922}], 
         "2018-06-19-073800.gpx" -> GeoPosition[{49.401474, 8.669266}], 
         "2018-06-20-080722.gpx" -> GeoPosition[{49.401479, 8.669325}], 
         "2018-06-21-075057.gpx" -> GeoPosition[{49.401511, 8.66918}], 
         "2018-06-22-075453.gpx" -> GeoPosition[{49.401554, 8.669266}], 
         "2018-06-23-103411.gpx" -> GeoPosition[{49.401347, 8.669119}], 
         "2018-06-24-091800.gpx" -> GeoPosition[{49.401407, 8.66934}], 
         "2018-06-25-080713.gpx" -> GeoPosition[{49.401649, 8.669337}], 
         "2018-06-26-072030.gpx" -> GeoPosition[{49.40302, 8.668722}], 
         "2018-06-27-074339.gpx" -> GeoPosition[{49.401537, 8.669196}], 
         "2018-06-28-073117.gpx" -> GeoPosition[{49.401675, 8.669341}], 
         "2018-06-29-170436.gpx" -> GeoPosition[{49.401644, 8.669368}], 
         "2018-06-30-100605.gpx" -> GeoPosition[{49.40193, 8.669138}], 
         "2018-07-01-074813.gpx" -> GeoPosition[{49.401567, 8.669284}], 
         "2018-07-02-080450.gpx" -> GeoPosition[{49.401454, 8.669182}], 
         "2018-07-03-072634.gpx" -> GeoPosition[{49.40157, 8.669299}], 
         "2018-07-04-071519.gpx" -> GeoPosition[{49.401617, 8.6694}], 
         "2018-07-05-074305.gpx" -> GeoPosition[{49.401488, 8.669177}], 
         "2018-07-06-075434.gpx" -> GeoPosition[{49.401632, 8.669264}], 
         "2018-07-07-074735.gpx" -> GeoPosition[{49.401485, 8.669196}], 
         "2018-07-08-080516.gpx" -> GeoPosition[{49.401924, 8.669426}], 
         "2018-07-09-075409.gpx" -> GeoPosition[{49.401662, 8.669299}], 
         "2018-07-10-075137.gpx" -> GeoPosition[{49.401498, 8.669432}], 
         "2018-07-11-074516.gpx" -> GeoPosition[{49.401485, 8.669182}], 
         "2018-07-12-073625.gpx" -> GeoPosition[{49.401487, 8.669167}], 
         "2018-07-13-072723.gpx" -> GeoPosition[{49.4014, 8.669072}], 
         "2018-07-14-091112.gpx" -> GeoPosition[{49.401342, 8.669142}], 
         "2018-07-15-100223.gpx" -> GeoPosition[{49.401608, 8.66943}], 
         "2018-07-16-075422.gpx" -> GeoPosition[{49.401368, 8.669284}], 
         "2018-07-17-072505.gpx" -> GeoPosition[{49.401716, 8.669399}], 
         "2018-07-18-074841.gpx" -> GeoPosition[{49.40148, 8.669242}], 
         "2018-07-19-074437.gpx" -> GeoPosition[{49.401543, 8.669446}], 
         "2018-07-20-075717.gpx" -> GeoPosition[{49.401309, 8.669221}], 
         "2018-07-21-094054.gpx" -> GeoPosition[{49.40143, 8.669131}], 
         "2018-07-22-102323.gpx" -> GeoPosition[{49.401344, 8.669115}], 
         "2018-07-23-080021.gpx" -> GeoPosition[{49.401323, 8.669171}], 
         "2018-07-24-074605.gpx" -> GeoPosition[{49.4013, 8.669252}], 
         "2018-07-25-074935.gpx" -> GeoPosition[{49.401676, 8.669311}], 
         "2018-07-26-074105.gpx" -> GeoPosition[{49.401307, 8.669145}], 
         "2018-07-27-074227.gpx" -> GeoPosition[{49.40145, 8.669204}], 
         "2018-07-28-083808.gpx" -> GeoPosition[{49.401502, 8.669116}], 
         "2018-07-29-085046.gpx" -> GeoPosition[{49.401662, 8.669392}], 
         "2018-07-30-075128.gpx" -> GeoPosition[{49.401212, 8.66891}], 
         "2018-07-31-084323.gpx" -> GeoPosition[{49.401259, 8.669247}], 
         "2018-08-01-075307.gpx" -> GeoPosition[{49.401451, 8.669174}], 
         "2018-08-02-080853.gpx" -> GeoPosition[{49.401612, 8.669325}], 
         "2018-08-03-073227.gpx" -> GeoPosition[{49.401926, 8.669435}], 
         "2018-08-04-085329.gpx" -> GeoPosition[{49.401403, 8.669258}], 
         "2018-08-05-091719.gpx" -> GeoPosition[{49.401629, 8.669438}], 
         "2018-08-06-075413.gpx" -> GeoPosition[{49.401415, 8.669158}], 
         "2018-08-07-080229.gpx" -> GeoPosition[{49.40137, 8.669238}], 
         "2018-08-08-074646.gpx" -> GeoPosition[{49.401466, 8.669413}], 
         "2018-08-09-080352.gpx" -> GeoPosition[{49.401586, 8.66935}], 
         "2018-08-10-083207.gpx" -> GeoPosition[{49.401622, 8.66901}], 
         "2018-08-11-060857.gpx" -> GeoPosition[{49.401197, 8.669245}], 
         "2018-08-12-074325.gpx" -> GeoPosition[{51.091769, -114.158431}], 
         "2018-08-13-070436.gpx" -> GeoPosition[{51.091692, -114.158798}], 
         "2018-08-14-075447.gpx" -> GeoPosition[{51.091796, -114.158474}], 
         "2018-08-15-074403.gpx" -> GeoPosition[{51.091664, -114.158796}], 
         "2018-08-16-093117.gpx" -> GeoPosition[{51.091671, -114.158647}], 
         "2018-08-17-084913.gpx" -> GeoPosition[{51.091678, -114.158567}], 
         "2018-08-18-070945.gpx" -> GeoPosition[{51.091789, -114.158339}], 
         "2018-08-19-064054.gpx" -> GeoPosition[{51.091668, -114.158645}], 
         "2018-08-20-061838.gpx" -> GeoPosition[{51.451796, -112.70111}], 
         "2018-08-21-054617.gpx" -> GeoPosition[{51.451621, -112.701128}], 
         "2018-08-22-061946.gpx" -> GeoPosition[{51.451564, -112.70134}], 
         "2018-08-23-072117.gpx" -> GeoPosition[{51.091772, -114.158392}], 
         "2018-08-24-062819.gpx" -> GeoPosition[{51.097551, -115.357759}], 
         "2018-08-25-062246.gpx" -> GeoPosition[{51.097623, -115.357753}], 
         "2018-08-26-062258.gpx" -> GeoPosition[{51.097708, -115.357725}], 
         "2018-08-27-063035.gpx" -> GeoPosition[{51.09765, -115.357761}], 
         "2018-08-28-061845.gpx" -> GeoPosition[{51.097677, -115.357722}], 
         "2018-08-29-060337.gpx" -> GeoPosition[{49.299856, -117.657686}], 
         "2018-08-30-060155.gpx" -> GeoPosition[{49.299517, -117.657984}], 
         "2018-08-31-063519.gpx" -> GeoPosition[{49.299861, -117.657641}], 
         "2018-09-01-061710.gpx" -> GeoPosition[{49.299871, -117.657488}], 
         "2018-09-02-063639.gpx" -> GeoPosition[{49.299726, -117.657973}], 
         "2018-09-03-073554.gpx" -> GeoPosition[{51.091783, -114.158331}], 
         "2018-09-04-081232.gpx" -> GeoPosition[{51.091631, -114.158547}], 
         "2018-09-05-084449.gpx" -> GeoPosition[{51.091685, -114.158742}], 
         "2018-09-06-080453.gpx" -> GeoPosition[{51.091688, -114.158394}], 
         "2018-09-07-081612.gpx" -> GeoPosition[{51.091743, -114.158232}], 
         "2018-09-08-082642.gpx" -> GeoPosition[{51.091745, -114.158217}], 
         "2018-09-09-102909.gpx" -> GeoPosition[{51.091758, -114.158459}], 
         "2018-09-10-070821.gpx" -> GeoPosition[{51.060626, -114.115109}], 
         "2018-09-11-084426.gpx" -> GeoPosition[{51.060551, -114.115069}], 
         "2018-09-12-083932.gpx" -> GeoPosition[{51.06058, -114.1152}], 
         "2018-09-13-085126.gpx" -> GeoPosition[{51.0918, -114.158398}], 
         "2018-09-14-085943.gpx" -> GeoPosition[{51.091811, -114.158297}], 
         "2018-09-15-080239.gpx" -> GeoPosition[{51.091729, -114.158616}], 
         "2018-09-16-103937.gpx" -> GeoPosition[{51.091732, -114.158569}], 
         "2018-09-17-083625.gpx" -> GeoPosition[{51.091768, -114.158389}], 
         "2018-09-18-074850.gpx" -> GeoPosition[{51.091704, -114.158649}], 
         "2018-09-19-082319.gpx" -> GeoPosition[{51.091765, -114.158589}], 
         "2018-09-20-075355.gpx" -> GeoPosition[{51.091759, -114.158387}], 
         "2018-09-21-080655.gpx" -> GeoPosition[{51.091689, -114.158638}], 
         "2018-09-22-094623.gpx" -> GeoPosition[{51.091737, -114.158222}], 
         "2018-09-23-094435.gpx" -> GeoPosition[{51.091749, -114.158173}], 
         "2018-09-24-083310.gpx" -> GeoPosition[{51.0918, -114.15839}], 
         "2018-09-25-095938.gpx" -> GeoPosition[{51.0917, -114.158158}], 
         "2018-09-26-093422.gpx" -> GeoPosition[{51.091747, -114.158461}], 
         "2018-09-27-092559.gpx" -> GeoPosition[{51.091779, -114.158379}], 
         "2018-09-28-100957.gpx" -> GeoPosition[{51.091719, -114.158592}], 
         "2018-09-29-094628.gpx" -> GeoPosition[{51.091776, -114.15834}], 
         "2018-09-30-092935.gpx" -> GeoPosition[{51.09182, -114.158154}], 
         "2018-10-01-083126.gpx" -> GeoPosition[{51.091765, -114.158261}], 
         "2018-10-02-084516.gpx" -> GeoPosition[{51.091717, -114.158509}], 
         "2018-10-03-083258.gpx" -> GeoPosition[{51.091825, -114.158256}], 
         "2018-10-04-083115.gpx" -> GeoPosition[{51.091576, -114.15887}], 
         "2018-10-05-075444.gpx" -> GeoPosition[{51.0918, -114.158224}], 
         "2018-10-06-084701.gpx" -> GeoPosition[{51.091706, -114.158284}], 
         "2018-10-07-075147.gpx" -> GeoPosition[{53.507301, -113.286426}], 
         "2018-10-08-085404.gpx" -> GeoPosition[{53.507359, -113.286254}], 
         "2018-10-09-073513.gpx" -> GeoPosition[{51.09171, -114.158251}], 
         "2018-10-10-085241.gpx" -> GeoPosition[{51.09175, -114.158274}], 
         "2018-10-11-085420.gpx" -> GeoPosition[{51.091689, -114.158295}], 
         "2018-10-12-090936.gpx" -> GeoPosition[{51.09179, -114.158352}], 
         "2018-10-13-084633.gpx" -> GeoPosition[{51.091698, -114.158268}], 
         "2018-10-14-083917.gpx" -> GeoPosition[{51.091775, -114.158423}], 
         "2018-10-15-082300.gpx" -> GeoPosition[{51.060564, -114.115261}], 
         "2018-10-16-090950.gpx" -> GeoPosition[{51.060632, -114.115184}], 
         "2018-10-17-071303.gpx" -> GeoPosition[{51.060616, -114.115251}], 
         "2018-10-18-092955.gpx" -> GeoPosition[{51.091797, -114.15828}], 
         "2018-10-19-082454.gpx" -> GeoPosition[{51.091839, -114.158459}], 
         "2018-10-20-084934.gpx" -> GeoPosition[{51.088565, -114.166484}], 
         "2018-10-21-072147.gpx" -> GeoPosition[{51.091743, -114.158207}], 
         "2018-10-22-082513.gpx" -> GeoPosition[{51.091722, -114.158255}], 
         "2018-10-23-084250.gpx" -> GeoPosition[{51.091771, -114.158189}], 
         "2018-10-24-084434.gpx" -> GeoPosition[{51.091775, -114.158278}], 
         "2018-10-25-091142.gpx" -> GeoPosition[{51.091787, -114.158227}], 
         "2018-10-26-094359.gpx" -> GeoPosition[{51.091811, -114.158199}], 
         "2018-10-27-092907.gpx" -> GeoPosition[{51.091798, -114.158163}], 
         "2018-10-28-094912.gpx" -> GeoPosition[{51.091815, -114.158283}], 
         "2018-10-29-082301.gpx" -> GeoPosition[{51.091739, -114.158236}], 
         "2018-10-30-090835.gpx" -> GeoPosition[{51.091787, -114.158173}], 
         "2018-10-31-082120.gpx" -> GeoPosition[{51.091802, -114.158188}], 
         "2018-11-01-082434.gpx" -> GeoPosition[{51.091758, -114.158234}], 
         "2018-11-02-082223.gpx" -> GeoPosition[{51.071747, -114.091517}], 
         "2018-11-03-092000.gpx" -> GeoPosition[{51.071844, -114.091454}], 
         "2018-11-04-090852.gpx" -> GeoPosition[{51.071822, -114.091625}], 
         "2018-11-05-071636.gpx" -> GeoPosition[{51.071775, -114.091486}], 
         "2018-11-06-094035.gpx" -> GeoPosition[{51.071863, -114.091503}], 
         "2018-11-07-085017.gpx" -> GeoPosition[{51.071783, -114.091516}], 
         "2018-11-08-081219.gpx" -> GeoPosition[{51.071783, -114.091473}], 
         "2018-11-09-075518.gpx" -> GeoPosition[{51.071834, -114.091513}], 
         "2018-11-10-085038.gpx" -> GeoPosition[{51.071934, -114.091595}], 
         "2018-11-11-092634.gpx" -> GeoPosition[{51.071876, -114.091797}], 
         "2018-11-12-093002.gpx" -> GeoPosition[{51.071904, -114.091522}], 
         "2018-11-13-102421.gpx" -> GeoPosition[{51.0718, -114.091498}], 
         "2018-11-14-072733.gpx" -> GeoPosition[{51.071934, -114.091588}], 
         "2018-11-15-072925.gpx" -> GeoPosition[{51.071921, -114.091602}], 
         "2018-11-16-110947.gpx" -> GeoPosition[{51.071813, -114.09151}], 
         "2018-11-17-092431.gpx" -> GeoPosition[{51.071848, -114.09153}], 
         "2018-11-18-093602.gpx" -> GeoPosition[{51.071827, -114.091533}], 
         "2018-11-19-085212.gpx" -> GeoPosition[{51.071878, -114.091634}], 
         "2018-11-20-085354.gpx" -> GeoPosition[{51.071841, -114.091536}], 
         "2018-11-21-092303.gpx" -> GeoPosition[{51.071894, -114.091592}], 
         "2018-11-22-101628.gpx" -> GeoPosition[{51.071791, -114.091548}], 
         "2018-11-23-080755.gpx" -> GeoPosition[{51.071822, -114.09151}], 
         "2018-11-24-092328.gpx" -> GeoPosition[{51.07185, -114.091492}], 
         "2018-11-25-085038.gpx" -> GeoPosition[{51.071851, -114.091779}], 
         "2018-11-26-091618.gpx" -> GeoPosition[{51.07189, -114.091576}], 
         "2018-11-27-092548.gpx" -> GeoPosition[{51.071866, -114.091549}], 
         "2018-11-28-082804.gpx" -> GeoPosition[{51.071803, -114.091535}], 
         "2018-11-29-095145.gpx" -> GeoPosition[{51.071941, -114.091589}], 
         "2018-11-30-082752.gpx" -> GeoPosition[{51.071916, -114.091772}], 
         "2018-12-01-122333.gpx" -> GeoPosition[{51.071763, -114.091511}], 
         "2018-12-02-092257.gpx" -> GeoPosition[{51.071811, -114.091529}], 
         "2018-12-03-084151.gpx" -> GeoPosition[{51.071793, -114.091516}], 
         "2018-12-04-092059.gpx" -> GeoPosition[{51.071712, -114.091566}], 
         "2018-12-05-093436.gpx" -> GeoPosition[{51.071871, -114.091568}], 
         "2018-12-06-100354.gpx" -> GeoPosition[{51.071841, -114.091495}], 
         "2018-12-07-082342.gpx" -> GeoPosition[{51.071863, -114.091562}], 
         "2018-12-08-091407.gpx" -> GeoPosition[{51.071748, -114.09156}], 
         "2018-12-09-070957.gpx" -> GeoPosition[{51.071867, -114.092013}], 
         "2018-12-10-070558.gpx" -> GeoPosition[{44.988175, -122.988148}], 
         "2018-12-11-174542.gpx" -> GeoPosition[{51.071926, -114.091619}], 
         "2018-12-12-083926.gpx" -> GeoPosition[{51.071798, -114.09152}], 
         "2018-12-13-084753.gpx" -> GeoPosition[{51.071908, -114.091793}], 
         "2018-12-14-091445.gpx" -> GeoPosition[{51.071867, -114.09155}], 
         "2018-12-15-093608.gpx" -> GeoPosition[{51.071832, -114.091724}], 
         "2018-12-16-082155.gpx" -> GeoPosition[{51.071802, -114.091516}], 
         "2018-12-17-091955.gpx" -> GeoPosition[{51.071899, -114.09154}], 
         "2018-12-18-104018.gpx" -> GeoPosition[{51.071843, -114.091652}], 
         "2018-12-19-085143.gpx" -> GeoPosition[{51.071753, -114.091582}], 
         "2018-12-20-093236.gpx" -> GeoPosition[{51.071753, -114.091461}], 
         "2018-12-21-082035.gpx" -> GeoPosition[{53.507453, -113.286224}], 
         "2018-12-22-081155.gpx" -> GeoPosition[{53.507378, -113.28629}], 
         "2018-12-23-091039.gpx" -> GeoPosition[{53.507405, -113.286037}], 
         "2018-12-24-084019.gpx" -> GeoPosition[{53.507315, -113.286054}], 
         "2018-12-25-085420.gpx" -> GeoPosition[{51.071746, -114.091554}], 
         "2018-12-26-085835.gpx" -> GeoPosition[{51.071905, -114.091923}], 
         "2018-12-27-110758.gpx" -> GeoPosition[{51.071832, -114.091516}], 
         "2018-12-28-085733.gpx" -> GeoPosition[{51.07187, -114.091674}], 
         "2018-12-29-094841.gpx" -> GeoPosition[{51.071862, -114.091741}], 
         "2018-12-30-095530.gpx" -> GeoPosition[{51.071855, -114.091419}], 
         "2018-12-31-102359.gpx" -> GeoPosition[{51.071881, -114.091747}], 
         "2019-01-01-095417.gpx" -> GeoPosition[{51.071941, -114.091412}], 
         "2019-01-02-094805.gpx" -> GeoPosition[{51.071905, -114.091734}], 
         "2019-01-03-104551.gpx" -> GeoPosition[{51.071847, -114.091658}], 
         "2019-01-04-093721.gpx" -> GeoPosition[{51.071865, -114.091766}], 
         "2019-01-05-082019.gpx" -> GeoPosition[{51.071821, -114.091598}], 
         "2019-01-06-102232.gpx" -> GeoPosition[{51.071829, -114.091614}], 
         "2019-01-07-091803.gpx" -> GeoPosition[{51.071828, -114.091535}], 
         "2019-01-08-101533.gpx" -> GeoPosition[{51.071867, -114.091533}], 
         "2019-01-09-081544.gpx" -> GeoPosition[{51.071863, -114.091813}], 
         "2019-01-10-084211.gpx" -> GeoPosition[{51.071912, -114.091513}], 
         "2019-01-11-080421.gpx" -> GeoPosition[{51.071804, -114.091551}], 
         "2019-01-12-082420.gpx" -> GeoPosition[{51.071799, -114.091507}], 
         "2019-01-13-094014.gpx" -> GeoPosition[{51.071937, -114.091534}], 
         "2019-01-14-083100.gpx" -> GeoPosition[{51.071839, -114.091537}], 
         "2019-01-15-084441.gpx" -> GeoPosition[{51.071793, -114.091478}], 
         "2019-01-16-083205.gpx" -> GeoPosition[{51.071804, -114.091563}], 
         "2019-01-17-080412.gpx" -> GeoPosition[{51.071807, -114.091557}], 
         "2019-01-18-082500.gpx" -> GeoPosition[{51.071898, -114.091857}], 
         "2019-01-19-080701.gpx" -> GeoPosition[{51.071874, -114.09183}], 
         "2019-01-20-090414.gpx" -> GeoPosition[{51.071843, -114.091617}], 
         "2019-01-21-075106.gpx" -> GeoPosition[{51.071879, -114.091426}], 
         "2019-01-22-085235.gpx" -> GeoPosition[{51.071731, -114.091599}], 
         "2019-01-23-081846.gpx" -> GeoPosition[{51.071758, -114.091555}], 
         "2019-01-24-081337.gpx" -> GeoPosition[{51.071784, -114.091512}], 
         "2019-01-25-081112.gpx" -> GeoPosition[{51.071905, -114.091585}], 
         "2019-01-26-090544.gpx" -> GeoPosition[{51.071798, -114.091405}], 
         "2019-01-27-101720.gpx" -> GeoPosition[{51.071892, -114.09169}], 
         "2019-01-28-081032.gpx" -> GeoPosition[{51.07194, -114.091716}], 
         "2019-01-29-082353.gpx" -> GeoPosition[{51.071954, -114.091793}], 
         "2019-01-30-081425.gpx" -> GeoPosition[{51.071775, -114.091412}], 
         "2019-01-31-101534.gpx" -> GeoPosition[{51.071852, -114.091511}], 
         "2019-02-01-083102.gpx" -> GeoPosition[{51.071941, -114.091682}], 
         "2019-02-02-092559.gpx" -> GeoPosition[{51.0717, -114.091503}], 
         "2019-02-03-103857.gpx" -> GeoPosition[{51.071725, -114.091508}], 
         "2019-02-04-081311.gpx" -> GeoPosition[{51.071766, -114.09177}], 
         "2019-02-05-091705.gpx" -> GeoPosition[{51.071681, -114.091408}], 
         "2019-02-06-083127.gpx" -> GeoPosition[{51.071775, -114.091501}], 
         "2019-02-07-082216.gpx" -> GeoPosition[{51.071757, -114.091457}], 
         "2019-02-08-075112.gpx" -> GeoPosition[{51.07173, -114.091484}], 
         "2019-02-09-094052.gpx" -> GeoPosition[{51.071729, -114.091474}], 
         "2019-02-10-093610.gpx" -> GeoPosition[{51.071752, -114.091488}], 
         "2019-02-11-081450.gpx" -> GeoPosition[{51.071737, -114.091479}], 
         "2019-02-12-084831.gpx" -> GeoPosition[{51.071721, -114.091492}], 
         "2019-02-13-082237.gpx" -> GeoPosition[{51.071773, -114.091455}], 
         "2019-02-14-082937.gpx" -> GeoPosition[{51.071696, -114.0915}], 
         "2019-02-15-075413.gpx" -> GeoPosition[{51.071668, -114.091483}], 
         "2019-02-16-093837.gpx" -> GeoPosition[{51.071732, -114.091456}], 
         "2019-02-17-111428.gpx" -> GeoPosition[{51.071816, -114.091527}], 
         "2019-02-18-095245.gpx" -> GeoPosition[{51.071763, -114.091496}], 
         "2019-02-19-103259.gpx" -> GeoPosition[{51.071806, -114.091583}], 
         "2019-02-20-104544.gpx" -> GeoPosition[{51.07173, -114.091418}], 
         "2019-02-21-084513.gpx" -> GeoPosition[{51.07175, -114.091422}], 
         "2019-02-22-090115.gpx" -> GeoPosition[{51.071663, -114.091475}], 
         "2019-02-23-094711.gpx" -> GeoPosition[{51.071754, -114.091462}], 
         "2019-02-24-085458.gpx" -> GeoPosition[{51.071739, -114.091437}], 
         "2019-02-25-081535.gpx" -> GeoPosition[{51.071755, -114.091406}], 
         "2019-02-26-081235.gpx" -> GeoPosition[{51.071722, -114.091465}], 
         "2019-02-27-082803.gpx" -> GeoPosition[{51.07176, -114.091471}], 
         "2019-02-28-081914.gpx" -> GeoPosition[{51.071754, -114.091379}], 
         "2019-03-01-081139.gpx" -> GeoPosition[{51.071703, -114.091422}], 
         "2019-03-02-094232.gpx" -> GeoPosition[{51.07171, -114.091522}], 
         "2019-03-03-100553.gpx" -> GeoPosition[{51.071745, -114.09142}], 
         "2019-03-04-085139.gpx" -> GeoPosition[{51.071693, -114.09151}], 
         "2019-03-05-054551.gpx" -> GeoPosition[{51.071748, -114.091475}], 
         "2019-03-06-083517.gpx" -> GeoPosition[{51.071768, -114.091478}], 
         "2019-03-07-082528.gpx" -> GeoPosition[{51.071743, -114.091468}], 
         "2019-03-08-080554.gpx" -> GeoPosition[{51.071724, -114.091462}], 
         "2019-03-09-101240.gpx" -> GeoPosition[{51.071756, -114.09143}], 
         "2019-03-10-105116.gpx" -> GeoPosition[{51.071801, -114.091501}], 
         "2019-03-11-085407.gpx" -> GeoPosition[{51.071853, -114.091555}], 
         "2019-03-12-082008.gpx" -> GeoPosition[{51.071722, -114.091506}], 
         "2019-03-13-083158.gpx" -> GeoPosition[{51.071752, -114.091474}], 
         "2019-03-14-090903.gpx" -> GeoPosition[{51.071817, -114.091502}], 
         "2019-03-15-075348.gpx" -> GeoPosition[{51.071668, -114.091475}], 
         "2019-03-16-081405.gpx" -> GeoPosition[{51.071756, -114.091482}], 
         "2019-03-17-110437.gpx" -> GeoPosition[{51.071722, -114.091589}], 
         "2019-03-18-082914.gpx" -> GeoPosition[{51.071679, -114.091449}], 
         "2019-03-19-084124.gpx" -> GeoPosition[{51.071738, -114.091463}], 
         "2019-03-20-085236.gpx" -> GeoPosition[{51.071685, -114.091521}], 
         "2019-03-21-085351.gpx" -> GeoPosition[{51.071607, -114.091421}], 
         "2019-03-22-085516.gpx" -> GeoPosition[{51.071769, -114.091438}], 
         "2019-03-23-085742.gpx" -> GeoPosition[{53.507386, -113.286157}], 
         "2019-03-24-085620.gpx" -> GeoPosition[{53.507345, -113.286324}], 
         "2019-03-25-082525.gpx" -> GeoPosition[{51.071711, -114.09141}], 
         "2019-03-26-085100.gpx" -> GeoPosition[{51.071737, -114.091513}], 
         "2019-03-27-085301.gpx" -> GeoPosition[{51.071809, -114.091413}], 
         "2019-03-28-090716.gpx" -> GeoPosition[{51.071748, -114.091512}], 
         "2019-03-29-082649.gpx" -> GeoPosition[{51.071826, -114.091559}], 
         "2019-03-30-105315.gpx" -> GeoPosition[{51.071698, -114.091465}], 
         "2019-03-31-093941.gpx" -> GeoPosition[{51.071778, -114.091502}], 
         "2019-04-01-083708.gpx" -> GeoPosition[{51.071754, -114.091424}], 
         "2019-04-02-082608.gpx" -> GeoPosition[{51.071774, -114.091457}], 
         "2019-04-03-081534.gpx" -> GeoPosition[{51.071728, -114.091533}], 
         "2019-04-04-061808.gpx" -> GeoPosition[{51.071772, -114.091507}], 
         "2019-04-05-043923.gpx" -> GeoPosition[{51.071655, -114.09139}], 
         "2019-04-06-200830.gpx" -> GeoPosition[{51.63007, -121.300014}], 
         "2019-04-07-154446.gpx" -> GeoPosition[{51.630017, -121.3}], 
         "2019-04-08-214825.gpx" -> GeoPosition[{51.071805, -114.091548}], 
         "2019-04-09-082228.gpx" -> GeoPosition[{51.071751, -114.091463}], 
         "2019-04-10-085228.gpx" -> GeoPosition[{51.071918, -114.091487}], 
         "2019-04-11-083830.gpx" -> GeoPosition[{51.071791, -114.09151}], 
         "2019-04-12-080832.gpx" -> GeoPosition[{51.071708, -114.091502}], 
         "2019-04-13-100543.gpx" -> GeoPosition[{51.071835, -114.091554}], 
         "2019-04-14-092205.gpx" -> GeoPosition[{51.071757, -114.091532}], 
         "2019-04-15-080750.gpx" -> GeoPosition[{51.07198, -114.091482}], 
         "2019-04-16-081242.gpx" -> GeoPosition[{51.071699, -114.091493}], 
         "2019-04-17-083430.gpx" -> GeoPosition[{51.07182, -114.091383}], 
         "2019-04-18-092141.gpx" -> GeoPosition[{51.071818, -114.091544}], 
         "2019-04-19-085202.gpx" -> GeoPosition[{51.07177, -114.091482}], 
         "2019-04-20-104855.gpx" -> GeoPosition[{51.071784, -114.091539}], 
         "2019-04-21-101019.gpx" -> GeoPosition[{51.071768, -114.091518}], 
         "2019-04-22-084937.gpx" -> GeoPosition[{51.07173, -114.091514}], 
         "2019-04-23-082533.gpx" -> GeoPosition[{51.071763, -114.091494}], 
         "2019-04-24-083232.gpx" -> GeoPosition[{51.071704, -114.091502}], 
         "2019-04-25-084329.gpx" -> GeoPosition[{51.071753, -114.091398}], 
         "2019-04-26-081107.gpx" -> GeoPosition[{51.071813, -114.091474}], 
         "2019-04-27-075623.gpx" -> GeoPosition[{51.071738, -114.091453}], 
         "2019-04-28-090918.gpx" -> GeoPosition[{51.071785, -114.091446}], 
         "2019-04-29-084538.gpx" -> GeoPosition[{51.071859, -114.091413}], 
         "2019-04-30-083423.gpx" -> GeoPosition[{51.071697, -114.091476}], 
         "2019-05-01-061818.gpx" -> GeoPosition[{51.071762, -114.091482}], 
         "2019-05-02-084221.gpx" -> GeoPosition[{41.483198, -81.702748}], 
         "2019-05-03-075821.gpx" -> GeoPosition[{41.483194, -81.703008}], 
         "2019-05-04-094140.gpx" -> GeoPosition[{41.48329, -81.702439}], 
         "2019-05-05-065749.gpx" -> GeoPosition[{41.483198, -81.70258}], 
         "2019-05-06-080631.gpx" -> GeoPosition[{41.483031, -81.702584}], 
         "2019-05-07-082009.gpx" -> GeoPosition[{41.483119, -81.702421}], 
         "2019-05-08-065639.gpx" -> GeoPosition[{41.483304, -81.702632}], 
         "2019-05-09-080148.gpx" -> GeoPosition[{41.483057, -81.702698}], 
         "2019-05-11-071244.gpx" -> GeoPosition[{46.80905, -71.219626}], 
         "2019-05-12-083105.gpx" -> GeoPosition[{46.809328, -71.217034}], 
         "2019-05-13-075404.gpx" -> GeoPosition[{46.809072, -71.21997}], 
         "2019-05-15-075953.gpx" -> GeoPosition[{46.809099, -71.219832}], 
         "2019-05-16-165034.gpx" -> GeoPosition[{51.071774, -114.091548}], 
         "2019-05-17-080207.gpx" -> GeoPosition[{51.071595, -114.09146}], 
         "2019-05-18-084833.gpx" -> GeoPosition[{51.071597, -114.091556}], 
         "2019-05-19-092336.gpx" -> GeoPosition[{51.071811, -114.091572}], 
         "2019-05-20-091840.gpx" -> GeoPosition[{51.071854, -114.091656}], 
         "2019-05-21-090145.gpx" -> GeoPosition[{51.071716, -114.091479}], 
         "2019-05-22-095412.gpx" -> GeoPosition[{51.071937, -114.09153}], 
         "2019-05-23-102022.gpx" -> GeoPosition[{51.071733, -114.091586}], 
         "2019-05-24-092707.gpx" -> GeoPosition[{51.071747, -114.091524}], 
         "2019-05-25-101545.gpx" -> GeoPosition[{51.071789, -114.091518}], 
         "2019-05-26-093307.gpx" -> GeoPosition[{51.07188, -114.091585}], 
         "2019-05-27-101741.gpx" -> GeoPosition[{51.071758, -114.091539}], 
         "2019-05-28-083425.gpx" -> GeoPosition[{51.071713, -114.091571}], 
         "2019-05-29-101635.gpx" -> GeoPosition[{51.071966, -114.091507}], 
         "2019-05-30-095745.gpx" -> GeoPosition[{51.071806, -114.091578}], 
         "2019-05-31-101047.gpx" -> GeoPosition[{51.071651, -114.091491}], 
         "2019-06-01-092047.gpx" -> GeoPosition[{51.071772, -114.091442}], 
         "2019-06-02-092855.gpx" -> GeoPosition[{51.071788, -114.091545}], 
         "2019-06-03-122138.gpx" -> GeoPosition[{51.071817, -114.091573}], 
         "2019-06-04-090232.gpx" -> GeoPosition[{51.071785, -114.091548}], 
         "2019-06-05-094714.gpx" -> GeoPosition[{51.071728, -114.09154}], 
         "2019-06-06-095204.gpx" -> GeoPosition[{51.071727, -114.091547}], 
         "2019-06-07-093141.gpx" -> GeoPosition[{51.071666, -114.091529}], 
         "2019-06-08-081720.gpx" -> GeoPosition[{51.071759, -114.091516}], 
         "2019-06-09-085308.gpx" -> GeoPosition[{51.071812, -114.091531}], 
         "2019-06-10-102455.gpx" -> GeoPosition[{51.071804, -114.091577}], 
         "2019-06-11-090330.gpx" -> GeoPosition[{51.071666, -114.091485}], 
         "2019-06-12-085044.gpx" -> GeoPosition[{51.071715, -114.091484}], 
         "2019-06-13-095842.gpx" -> GeoPosition[{51.071744, -114.091478}], 
         "2019-06-14-101629.gpx" -> GeoPosition[{51.071745, -114.091492}], 
         "2019-06-15-090437.gpx" -> GeoPosition[{51.07169, -114.091564}], 
         "2019-06-16-085425.gpx" -> GeoPosition[{51.071654, -114.091343}], 
         "2019-06-17-101156.gpx" -> GeoPosition[{51.07182, -114.091456}], 
         "2019-06-18-083715.gpx" -> GeoPosition[{51.071893, -114.091518}], 
         "2019-06-19-095959.gpx" -> GeoPosition[{51.071803, -114.091511}], 
         "2019-06-20-101017.gpx" -> GeoPosition[{51.071653, -114.091445}], 
         "2019-06-21-155501.gpx" -> GeoPosition[{51.071833, -114.091539}], 
         "2019-06-22-093051.gpx" -> GeoPosition[{51.071753, -114.091483}], 
         "2019-06-23-153253.gpx" -> GeoPosition[{42.386304, -71.222405}], 
         "2019-06-24-073312.gpx" -> GeoPosition[{42.386455, -71.222277}], 
         "2019-06-25-073444.gpx" -> GeoPosition[{42.386333, -71.222367}]], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`Vector]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], TypeSystem`Vector[
         Pattern[TypeSystem`Constructors`PackagePrivate`a, 
          Blank[]]] := 
       TypeSystem`Vector[
        TypeSystem`Constructors`PackagePrivate`a, TypeSystem`AnyLength], 
       TypeSystem`Vector[
         Pattern[TypeSystem`Constructors`PackagePrivate`a, 
          Blank[]], 
         Pattern[TypeSystem`Constructors`PackagePrivate`dim, 
          Blank[List]]] := 
       Fold[TypeSystem`Vector[#, #2]& , 
         TypeSystem`Constructors`PackagePrivate`a, 
         Reverse[TypeSystem`Constructors`PackagePrivate`dim]], 
       TagSetDelayed[TypeSystem`Vector, 
        MakeBoxes[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          PatternTest[
           TypeSystem`Vector[
            Blank[], 
            Blank[]], TypeSystem`HoldValidTypeQ]], StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[
          TypeSystem`Summary`PackagePrivate`t], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`Vector, 
        MessageName[TypeSystem`Vector, "usage"], 
        "Vector[type] or Vector[type, len] represents a variable-length list \
where each element is of the given type."], 
       UpSetDelayed[
       TypeSystem`AnyLength + BlankNullSequence[], TypeSystem`AnyLength], 
       UpSetDelayed[
       TypeSystem`AnyLength BlankNullSequence[], TypeSystem`AnyLength], 
       Attributes[TypeSystem`HoldValidTypeQ] = {HoldAllComplete}, 
       TypeSystem`HoldValidTypeQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`Predicates`PackagePrivate`valid[
        TypeSystem`Predicates`PackagePrivate`t], 
       Attributes[TypeSystem`Predicates`PackagePrivate`valid] = {
        HoldAllComplete}, TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Vector[
          Pattern[TypeSystem`Predicates`PackagePrivate`t, 
           Blank[]], 
          Alternatives[
           Blank[Integer], TypeSystem`AnyLength, TypeSystem`UnknownLength]]] := 
       TypeSystem`Predicates`PackagePrivate`valid[
        TypeSystem`Predicates`PackagePrivate`t], 
       TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Predicates`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Predicates`PackagePrivate`v, 
           Blank[]], 
          Alternatives[
           Blank[Integer], TypeSystem`AnyLength, TypeSystem`UnknownLength]]] := 
       And[
         TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Predicates`PackagePrivate`k], 
         TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Predicates`PackagePrivate`v]], 
       TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Struct[
          Pattern[TypeSystem`Predicates`PackagePrivate`keys, 
           Blank[List]], 
          Pattern[TypeSystem`Predicates`PackagePrivate`vals, 
           Blank[List]]]] := And[Length[
           Unevaluated[TypeSystem`Predicates`PackagePrivate`keys]] == Length[
           Unevaluated[TypeSystem`Predicates`PackagePrivate`vals]], 
         VectorQ[
          Unevaluated[TypeSystem`Predicates`PackagePrivate`vals], 
          TypeSystem`Predicates`PackagePrivate`valid]], 
       TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Predicates`PackagePrivate`t, 
           Blank[]]]] := VectorQ[
         Unevaluated[TypeSystem`Predicates`PackagePrivate`t], 
         TypeSystem`Predicates`PackagePrivate`valid], 
       TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Atom[
          Alternatives[Integer, String, Real, TypeSystem`Boolean]]] := True, 
       TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`Atom[
          Pattern[TypeSystem`Predicates`PackagePrivate`a, 
           Blank[]]]] := MatchQ[
         Unevaluated[TypeSystem`Predicates`PackagePrivate`a], 
         TypeSystem`$AtomTypePattern], 
       TypeSystem`Predicates`PackagePrivate`valid[
         Alternatives[TypeSystem`UnknownType, TypeSystem`AnyType]] := True, 
       TypeSystem`Predicates`PackagePrivate`valid[
         Blank[TypeSystem`FailureType]] := True, 
       TypeSystem`Predicates`PackagePrivate`valid[
         TypeSystem`TypeSymbol[
          BlankNullSequence[], 
          Blank[String]]] := True, TypeSystem`Predicates`PackagePrivate`valid[
         Blank[]] := False, 
       UpSetDelayed[
       TypeSystem`UnknownLength + BlankNullSequence[], 
        TypeSystem`UnknownLength], 
       UpSetDelayed[
       TypeSystem`UnknownLength BlankNullSequence[], 
        TypeSystem`UnknownLength], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`Struct]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], TypeSystem`Struct[{}, {}] := 
       TypeSystem`Assoc[
        TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength], 
       TypeSystem`Struct[
         Pattern[TypeSystem`Constructors`PackagePrivate`a, 
          Blank[Association]]] := TypeSystem`Struct[
         Keys[TypeSystem`Constructors`PackagePrivate`a], 
         Values[TypeSystem`Constructors`PackagePrivate`a]], TypeSystem`Struct[
         Pattern[TypeSystem`Constructors`PackagePrivate`r, 
          BlankNullSequence[Rule]]] := TypeSystem`Struct[
         Keys[{TypeSystem`Constructors`PackagePrivate`r}], 
         Values[{TypeSystem`Constructors`PackagePrivate`r}]], 
       TagSetDelayed[TypeSystem`Struct, 
        MakeBoxes[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          PatternTest[
           TypeSystem`Struct[
            Blank[List], 
            Blank[List]], TypeSystem`HoldValidTypeQ]], StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[
          TypeSystem`Summary`PackagePrivate`t], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`Struct, 
        MessageName[TypeSystem`Struct, "usage"], 
        "Struct[keys, values] represents a fixed-length association with the \
given keys whose values have the given types."], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, TypeSystem`AnyType]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], 
       TagSetDelayed[TypeSystem`AnyType, 
        MakeBoxes[TypeSystem`AnyType, StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[TypeSystem`AnyType], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`AnyType, 
        MessageName[TypeSystem`AnyType, "usage"], 
        "AnyType represents any type."], 
       Attributes[TypeSystem`Summary`PackagePrivate`typeForm] = {
        HoldAllComplete}, TypeSystem`Summary`PackagePrivate`typeForm[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := 
       With[{TypeSystem`Summary`PackagePrivate`boxes = StyleBox[
            TypeSystem`Summary`PackagePrivate`typeBox[
            TypeSystem`Summary`PackagePrivate`t], FontTracking -> "Condensed",
             FontWeight -> "Bold", SpanMinSize -> 1.3, SpanMaxSize -> 3.]}, 
         With[{TypeSystem`Summary`PackagePrivate`boxes2 = MouseAppearance[
             RawBoxes[
              TagBox[
              TypeSystem`Summary`PackagePrivate`boxes, Deploy, 
               DefaultBaseStyle -> "Deploy"]], "LinkHand"]}, 
          Interpretation[
          TypeSystem`Summary`PackagePrivate`boxes2, 
           TypeSystem`Summary`PackagePrivate`t]]], 
       Attributes[TypeSystem`Summary`PackagePrivate`typeBox] = {
        HoldAllComplete}, TypeSystem`Summary`PackagePrivate`typeBox[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := TagBox[
         TooltipBox[
          TypeSystem`Summary`PackagePrivate`highlightBox[
           TypeSystem`Summary`PackagePrivate`tbox[
           TypeSystem`Summary`PackagePrivate`t]], 
          Cell[
           BoxData[
            ToBoxes[
             Unevaluated[
              InputForm[TypeSystem`Summary`PackagePrivate`t]]]], "Input", 
           FontTracking -> "Plain"], TooltipDelay -> 0.25], 
         EventHandlerTag[{"MouseClicked" :> CellPrint[
             Cell[
              ToString[TypeSystem`Summary`PackagePrivate`t, InputForm], 
              "Input"]], Method -> "Preemptive", PassEventsDown -> True, 
           PassEventsUp -> False}]], 
       Attributes[TypeSystem`Summary`PackagePrivate`highlightBox] = {HoldAll},
        TypeSystem`Summary`PackagePrivate`highlightBox[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := If[
         TrueQ[TypeSystem`Summary`PackagePrivate`$outermost], 
         Block[{TypeSystem`Summary`PackagePrivate`$outermost = False}, 
          TypeSystem`Summary`PackagePrivate`t], 
         FrameBox[TypeSystem`Summary`PackagePrivate`t, FrameStyle -> Dynamic[
            If[
             CurrentValue["MouseOver"], 
             GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
          FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> False]], 
       TypeSystem`Summary`PackagePrivate`$outermost = True, 
       Attributes[TypeSystem`Summary`PackagePrivate`tbox] = {HoldAllComplete},
        TypeSystem`Summary`PackagePrivate`tbox[TypeSystem`AnyType] := 
       TypeSystem`Summary`PackagePrivate`letterBox["Any", 
         RGBColor[0.66, 0, 0]], 
       TypeSystem`Summary`PackagePrivate`tbox[TypeSystem`UnknownType] := 
       TypeSystem`Summary`PackagePrivate`letterBox["Unknown", 
         RGBColor[0.66, 0, 0]], TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Vector[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[]], 
          Pattern[TypeSystem`Summary`PackagePrivate`n, 
           Blank[]]]] := TypeSystem`Summary`PackagePrivate`lengthBox[
         TypeSystem`Summary`PackagePrivate`listBox[{
           TypeSystem`Summary`PackagePrivate`typeBox[
           TypeSystem`Summary`PackagePrivate`t]}], 
         TypeSystem`Summary`PackagePrivate`n], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Summary`PackagePrivate`e, 
           Blank[List]]]] := TypeSystem`Summary`PackagePrivate`listBox[
         Map[TypeSystem`Summary`PackagePrivate`typeBox, 
          Unevaluated[TypeSystem`Summary`PackagePrivate`e]]], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Summary`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Summary`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Summary`PackagePrivate`n, 
           Blank[]]]] := TypeSystem`Summary`PackagePrivate`lengthBox[
         TypeSystem`Summary`PackagePrivate`assocBox[{{
            TypeSystem`Summary`PackagePrivate`typeBox[
            TypeSystem`Summary`PackagePrivate`k], 
            TypeSystem`Summary`PackagePrivate`typeBox[
            TypeSystem`Summary`PackagePrivate`v]}}], 
         TypeSystem`Summary`PackagePrivate`n], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Struct[
          Pattern[TypeSystem`Summary`PackagePrivate`k, 
           Blank[List]], 
          Pattern[TypeSystem`Summary`PackagePrivate`v, 
           Blank[List]]]] := TypeSystem`Summary`PackagePrivate`assocBox[
         MapThread[TypeSystem`Summary`PackagePrivate`fieldBox, 
          
          Unevaluated[{
           TypeSystem`Summary`PackagePrivate`k, 
            TypeSystem`Summary`PackagePrivate`v}]]], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Atom[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[Symbol]]]] := TypeSystem`Summary`PackagePrivate`letterBox[
         TypeSystem`Summary`PackagePrivate`symbolAbbrev[
         TypeSystem`Summary`PackagePrivate`t]], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Atom[
          Pattern[TypeSystem`Summary`PackagePrivate`e, 
           TypeSystem`Enumeration[
            BlankSequence[String]]]]] := 
       TypeSystem`Summary`PackagePrivate`letterBox[
         TypeSystem`Summary`PackagePrivate`lengthBox["Enum\[MediumSpace]", 
          Length[TypeSystem`Summary`PackagePrivate`e]]], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Atom[
          Pattern[TypeSystem`Summary`PackagePrivate`q, 
           Blank[Quantity]]]] := 
       TypeSystem`Summary`PackagePrivate`letterBox["Quant"], 
       TypeSystem`Summary`PackagePrivate`tbox[
         TypeSystem`Atom[
          Pattern[TypeSystem`Summary`PackagePrivate`e, 
           Blank[Entity]]]] := 
       TypeSystem`Summary`PackagePrivate`letterBox["Ent"], 
       TypeSystem`Summary`PackagePrivate`tbox[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := StyleBox[
         ToBoxes[
          Unevaluated[TypeSystem`Summary`PackagePrivate`t]], FontWeight -> 
         Normal], TypeSystem`Summary`PackagePrivate`letterBox[
         Pattern[TypeSystem`Summary`PackagePrivate`l, 
          Blank[]], 
         Optional[
          Pattern[TypeSystem`Summary`PackagePrivate`col, 
           Blank[]], 
          RGBColor[0, 0.66, 0]]] := 
       StyleBox[
        TypeSystem`Summary`PackagePrivate`l, FontColor -> 
         TypeSystem`Summary`PackagePrivate`col, FontFamily -> "Monaco"], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[
         TypeSystem`Types`PackagePrivate`type, TypeSystem`UnknownType]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], TypeSystem`UnknownType[
         Pattern[TypeSystem`Inference`PackagePrivate`t, 
          BlankNullSequence[]]] := Catch[
         TypeSystem`Inference`PackagePrivate`apply0[
         TypeSystem`Inference`PackagePrivate`f, {
          TypeSystem`Inference`PackagePrivate`t}], TypeSystem`FailureType], 
       TagSetDelayed[TypeSystem`UnknownType, 
        MakeBoxes[TypeSystem`UnknownType, StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[TypeSystem`UnknownType], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`UnknownType, 
        MessageName[TypeSystem`UnknownType, "usage"], 
        "UnknownType represents an unknown type that could later be \
inferred."], TypeSystem`Inference`PackagePrivate`apply0[
         Pattern[TypeSystem`Inference`PackagePrivate`f, 
          Blank[]], {}][
         Pattern[TypeSystem`Inference`PackagePrivate`t, 
          BlankNullSequence[]]] := Catch[
         TypeSystem`Inference`PackagePrivate`apply0[
         TypeSystem`Inference`PackagePrivate`f, {
          TypeSystem`Inference`PackagePrivate`t}], TypeSystem`FailureType], 
       TypeSystem`Inference`PackagePrivate`apply0[
         HoldPattern[Query][
          Pattern[TypeSystem`Inference`PackagePrivate`sub, 
           BlankSequence[]]], {
          Pattern[TypeSystem`Inference`PackagePrivate`arg, 
           Blank[]]}] := TypeSystem`Inference`PackagePrivate`apply0[
         Normal[
          Query[TypeSystem`Inference`PackagePrivate`sub]], {
         TypeSystem`Inference`PackagePrivate`arg}], 
       TypeSystem`Inference`PackagePrivate`apply0[
         Pattern[TypeSystem`Inference`PackagePrivate`head, 
          Blank[Symbol]][
          Pattern[TypeSystem`Inference`PackagePrivate`sub, 
           BlankNullSequence[]]], {
          Pattern[TypeSystem`Inference`PackagePrivate`arg, 
           Blank[]]}] := Which[
         MemberQ[
         TypeSystem`$RightOrThreeTwoOperatorForms, 
          TypeSystem`Inference`PackagePrivate`head], 
         TypeSystem`Inference`PackagePrivate`apply0[
         TypeSystem`Inference`PackagePrivate`head, {
          TypeSystem`Inference`PackagePrivate`arg, 
           TypeSystem`Inference`PackagePrivate`sub}], 
         MemberQ[
         TypeSystem`$LeftOperatorForms, 
          TypeSystem`Inference`PackagePrivate`head], 
         TypeSystem`Inference`PackagePrivate`apply0[
         TypeSystem`Inference`PackagePrivate`head, {
          TypeSystem`Inference`PackagePrivate`sub, 
           TypeSystem`Inference`PackagePrivate`arg}], 
         TypeSystem`Inference`PackagePrivate`head === GeneralUtilities`Parts, 
         TypeSystem`Inference`PackagePrivate`apply0[
         Part, {TypeSystem`Inference`PackagePrivate`arg, 
           TypeSystem`Inference`PackagePrivate`sub}], 
         MatchQ[TypeSystem`Inference`PackagePrivate`head, 
          Alternatives[
          GeneralUtilities`Checked, Dataset`$MissingModifierHeads]], 
         TypeSystem`Inference`PackagePrivate`apply0[
          First[{TypeSystem`Inference`PackagePrivate`sub}], {
          TypeSystem`Inference`PackagePrivate`arg}], 
         TypeSystem`Inference`PackagePrivate`head === GeneralUtilities`Slice, 
         TypeSystem`TypePart[
         TypeSystem`Inference`PackagePrivate`arg, 
          TypeSystem`Inference`PackagePrivate`sub], 
         TypeSystem`Inference`PackagePrivate`head === Function, 
         TypeSystem`FunctionTypeApply[
         TypeSystem`Inference`PackagePrivate`sub& , {
          TypeSystem`Inference`PackagePrivate`arg}], 
         GeneralUtilities`HeldFunctionQ[
         TypeSystem`Inference`PackagePrivate`head], TypeSystem`UnknownType, 
         True, 
         Block[{
          TypeSystem`Inference`PackagePrivate`$head = 
           TypeSystem`Inference`PackagePrivate`head}, 
          TypeSystem`Inference`PackagePrivate`apply1[
           TypeSystem`$SubSignatures[
           TypeSystem`Inference`PackagePrivate`head], {{
            TypeSystem`Inference`PackagePrivate`sub}, {
            TypeSystem`Inference`PackagePrivate`arg}}]]], 
       TypeSystem`Inference`PackagePrivate`apply0[
         Pattern[TypeSystem`Inference`PackagePrivate`f, 
          Blank[]], {
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[TypeSystem`TypeSymbol]]}] := 
       Prepend[TypeSystem`Inference`PackagePrivate`t, 
         TypeSystem`Inference`PackagePrivate`f], 
       TypeSystem`Inference`PackagePrivate`apply0[
         Pattern[TypeSystem`Inference`PackagePrivate`f, 
          Blank[Function]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := 
       TypeSystem`FunctionTypeApply[
        TypeSystem`Inference`PackagePrivate`f, 
         TypeSystem`Inference`PackagePrivate`args], 
       TypeSystem`Inference`PackagePrivate`apply0[
         Pattern[TypeSystem`Inference`PackagePrivate`head, 
          Blank[Symbol]][
          Pattern[TypeSystem`Inference`PackagePrivate`sub, 
           BlankNullSequence[]]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := 
       Block[{TypeSystem`Inference`PackagePrivate`$head = 
          TypeSystem`Inference`PackagePrivate`head}, 
         TypeSystem`Inference`PackagePrivate`apply1[
          TypeSystem`$SubSignatures[
          TypeSystem`Inference`PackagePrivate`head], {{
           TypeSystem`Inference`PackagePrivate`sub}, 
           TypeSystem`Inference`PackagePrivate`args}]], 
       TypeSystem`Inference`PackagePrivate`apply0[
         Pattern[TypeSystem`Inference`PackagePrivate`head, 
          Blank[]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[]]] := Which[
         And[
          TypeSystem`Inference`PackagePrivate`NonSimpleNumericFunctionQ[
          TypeSystem`Inference`PackagePrivate`head], 
          VectorQ[
          TypeSystem`Inference`PackagePrivate`args, 
           TypeSystem`Inference`PackagePrivate`RealAtomQ]], 
         TypeSystem`Atom[Real], True, 
         Block[{
          TypeSystem`Inference`PackagePrivate`$head = 
           TypeSystem`Inference`PackagePrivate`head}, 
          TypeSystem`Inference`PackagePrivate`apply1[
           TypeSystem`$Signatures[TypeSystem`Inference`PackagePrivate`head], 
           TypeSystem`Inference`PackagePrivate`args]]], 
       Attributes[TypeSystem`FailureType] = {HoldAllComplete}, 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`FailureType]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], TypeSystem`FailureType[
         Pattern[TypeSystem`Types`PackagePrivate`head, 
          Blank[Symbol]], 
         Pattern[TypeSystem`Types`PackagePrivate`msgname, 
          Blank[String]], 
         Pattern[TypeSystem`Types`PackagePrivate`args, 
          BlankNullSequence[Rule]]] := 
       With[{TypeSystem`Types`PackagePrivate`assoc = 
          Association[TypeSystem`Types`PackagePrivate`args]}, 
         With[{TypeSystem`Types`PackagePrivate`ft = System`Private`SetValid[
             System`Private`SetNoEntry[
              
              TypeSystem`FailureType[{
               TypeSystem`Types`PackagePrivate`head, 
                TypeSystem`Types`PackagePrivate`msgname}, 
               TypeSystem`Types`PackagePrivate`assoc]]]}, 
          If[
           TrueQ[TypeSystem`$ThrowFailureType], 
           Throw[TypeSystem`Types`PackagePrivate`ft, TypeSystem`FailureType], 
           TypeSystem`Types`PackagePrivate`ft]]], 
       TagSet[TypeSystem`FailureType, 
        MessageName[TypeSystem`FailureType, "invalid"], 
        "`` is invalid. Construct with FailureType[head, \"tag\", field1 -> \
val1, field2 -> val2, ...]."], 
       TagSet[TypeSystem`FailureType, 
        MessageName[TypeSystem`FailureType, "usage"], 
        "FailureType[msg, meta] represents a failure of an operation for the \
given reason."], TypeSystem`$ThrowFailureType = False, 
       TypeSystem`$RightOrThreeTwoOperatorForms = {
        Prepend, Append, GroupBy, CountsBy, Count, Position, FirstPosition, 
         SortBy, ReverseSortBy, KeySelect, Select, SelectFirst, Delete, 
         Extract, Replace, ReplacePart, ReplaceAll, Cases, DeleteCases, 
         FirstCase, AnyTrue, AllTrue, NoneTrue, KeyExistsQ, KeySortBy, 
         KeyTake, KeyDrop, MaximalBy, MinimalBy, MatchQ, FreeQ, MemberQ, 
         TakeLargest, TakeSmallest, Lookup, Merge, Insert, TakeLargestBy, 
         TakeSmallestBy}, 
       TypeSystem`$LeftOperatorForms = {
        Map, AssociationMap, KeyMap, Apply, Scan, MapIndexed, KeyValueMap}, 
       GeneralUtilities`Parts[
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          BlankNullSequence[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]]] := 
       Part[GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`parts], 
       UpSetDelayed[
        Map[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
         Map[GeneralUtilities`Parts`PackagePrivate`f$], 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        Map[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts$, 
          OptionsPattern[Map]]], 
        GeneralUtilities`MapParts[
        Map[GeneralUtilities`Parts`PackagePrivate`f$, #, 
          GeneralUtilities`Parts`PackagePrivate`opts$]& , 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        Apply[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
         Apply[GeneralUtilities`Parts`PackagePrivate`f$], 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        Apply[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts$, 
          OptionsPattern[Apply]]], 
        GeneralUtilities`MapParts[
        Apply[GeneralUtilities`Parts`PackagePrivate`f$, #, 
          GeneralUtilities`Parts`PackagePrivate`opts$]& , 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        Scan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
         Scan[GeneralUtilities`Parts`PackagePrivate`f$], 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        Scan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts$, 
          OptionsPattern[Scan]]], 
        GeneralUtilities`MapParts[
        Scan[GeneralUtilities`Parts`PackagePrivate`f$, #, 
          GeneralUtilities`Parts`PackagePrivate`opts$]& , 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        MapIndexed[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
         MapIndexed[GeneralUtilities`Parts`PackagePrivate`f$], 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        MapIndexed[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr$, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p$, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts$, 
          OptionsPattern[MapIndexed]]], 
        GeneralUtilities`MapParts[
        MapIndexed[
         GeneralUtilities`Parts`PackagePrivate`f$, #, 
          GeneralUtilities`Parts`PackagePrivate`opts$]& , 
         GeneralUtilities`Parts`PackagePrivate`expr$, 
         GeneralUtilities`Parts`PackagePrivate`p$]], 
       UpSetDelayed[
        MapAt[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
        GeneralUtilities`Parts`PackagePrivate`f, 
         GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`p]], 
       UpSetDelayed[
        Replace[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
         Replace[GeneralUtilities`Parts`PackagePrivate`patt], 
         GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`p]], 
       UpSetDelayed[
        Replace[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts, 
          OptionsPattern[Replace]]], 
        GeneralUtilities`MapParts[
        Replace[#, GeneralUtilities`Parts`PackagePrivate`patt, 
          GeneralUtilities`Parts`PackagePrivate`opts]& , 
         GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`p]], 
       UpSetDelayed[
        DeleteCases[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`MapParts[
         DeleteCases[GeneralUtilities`Parts`PackagePrivate`patt], 
         GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`p]], 
       TagSetDelayed[GeneralUtilities`Parts, 
        DeleteCases[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`n, 
          Blank[Integer]]], 
        GeneralUtilities`MapParts[
        DeleteCases[#, GeneralUtilities`Parts`PackagePrivate`patt, 
          GeneralUtilities`Parts`PackagePrivate`n]& , 
         GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`p]], 
       UpSetDelayed[
        Dimensions[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]]], 
        Module[{
         GeneralUtilities`Parts`PackagePrivate`level, 
          GeneralUtilities`Parts`PackagePrivate`dim}, 
         GeneralUtilities`Parts`PackagePrivate`level = 
          GeneralUtilities`PartsLevel[
           GeneralUtilities`Parts`PackagePrivate`expr, 
            GeneralUtilities`Parts`PackagePrivate`p]; 
         GeneralUtilities`Parts`PackagePrivate`dim = 
          Dimensions[
           GeneralUtilities`Parts`PackagePrivate`level, AllowedHeads -> All]; 
         If[Length[GeneralUtilities`Parts`PackagePrivate`dim] < 2, 
           Return[$Failed]]; 
         Last[GeneralUtilities`Parts`PackagePrivate`dim]]], 
       UpSetDelayed[
        Count[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts, 
          OptionsPattern[Counts]]], 
        Module[{GeneralUtilities`Parts`PackagePrivate`counts = 0}, 
         GeneralUtilities`ScanParts[
          AddTo[GeneralUtilities`Parts`PackagePrivate`counts, 
            
            Count[#, GeneralUtilities`Parts`PackagePrivate`patt, 
             GeneralUtilities`Parts`PackagePrivate`opts]]& , 
           GeneralUtilities`Parts`PackagePrivate`expr, 
           GeneralUtilities`Parts`PackagePrivate`p]; 
         GeneralUtilities`Parts`PackagePrivate`counts]], 
       UpSetDelayed[
        FreeQ[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts, 
          OptionsPattern[FreeQ]]], 
        Catch[GeneralUtilities`ScanParts[If[
            Not[
             
             FreeQ[#, GeneralUtilities`Parts`PackagePrivate`patt, 
              GeneralUtilities`Parts`PackagePrivate`opts]], 
            Throw[False, GeneralUtilities`Parts`PackagePrivate`FreeQTag]]& , 
           GeneralUtilities`Parts`PackagePrivate`expr, 
           GeneralUtilities`Parts`PackagePrivate`p]; True, 
         GeneralUtilities`Parts`PackagePrivate`FreeQTag]], 
       UpSetDelayed[
        MemberQ[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`patt, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts, 
          OptionsPattern[FreeQ]]], 
        Catch[GeneralUtilities`ScanParts[If[
            
            FreeQ[#, GeneralUtilities`Parts`PackagePrivate`patt, 
             GeneralUtilities`Parts`PackagePrivate`opts], 
            Throw[True, GeneralUtilities`Parts`PackagePrivate`MemberQTag]]& , 
           GeneralUtilities`Parts`PackagePrivate`expr, 
           GeneralUtilities`Parts`PackagePrivate`p]; False, 
         GeneralUtilities`Parts`PackagePrivate`MemberQTag]], 
       UpSetDelayed[
        Cases[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`pattern, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[GeneralUtilities`Parts]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`opts, 
          OptionsPattern[Cases]]], 
        With[{GeneralUtilities`Parts`PackagePrivate`bag = Internal`Bag[]}, 
         GeneralUtilities`ScanParts[(
           Internal`StuffBag[GeneralUtilities`Parts`PackagePrivate`bag, 
             
             Cases[#, GeneralUtilities`Parts`PackagePrivate`pattern, 
              GeneralUtilities`Parts`PackagePrivate`opts]]; Null)& , 
           GeneralUtilities`Parts`PackagePrivate`expr, 
           GeneralUtilities`Parts`PackagePrivate`parts]; Apply[Join, 
           Internal`BagPart[
           GeneralUtilities`Parts`PackagePrivate`bag, All]]]], 
       UpSetDelayed[
        Level[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[GeneralUtilities`Parts]]], 
        GeneralUtilities`PartsLevel[
        GeneralUtilities`Parts`PackagePrivate`expr, 
         GeneralUtilities`Parts`PackagePrivate`parts]], 
       Attributes[GeneralUtilities`Parts`PackagePrivate`f$] = {Temporary}, 
       Attributes[GeneralUtilities`Parts`PackagePrivate`expr$] = {Temporary}, 
       Attributes[GeneralUtilities`Parts`PackagePrivate`p$] = {Temporary}, 
       GeneralUtilities`MapParts[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[GeneralUtilities`Parts]]] := 
       Block[{GeneralUtilities`Parts`PackagePrivate`$mapfunc = 
          GeneralUtilities`Parts`PackagePrivate`f}, 
         Apply[
         GeneralUtilities`Parts`PackagePrivate`map, 
          GeneralUtilities`Parts`PackagePrivate`parts]][
        GeneralUtilities`Parts`PackagePrivate`expr], 
       GeneralUtilities`Parts`PackagePrivate`map[] := 
       GeneralUtilities`Parts`PackagePrivate`$mapfunc, 
       GeneralUtilities`Parts`PackagePrivate`map[All, 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`mapall[
         GeneralUtilities`Parts`PackagePrivate`map[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`map[Values, 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`mapvalues[
         GeneralUtilities`Parts`PackagePrivate`map[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`map[
         Alternatives[
          Pattern[GeneralUtilities`Parts`PackagePrivate`k, 
           Blank[Key]], 
          Pattern[GeneralUtilities`Parts`PackagePrivate`k, 
           Blank[String]]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`mapkey[
        GeneralUtilities`Parts`PackagePrivate`k, 
         GeneralUtilities`Parts`PackagePrivate`map[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`map[
         Pattern[GeneralUtilities`Parts`PackagePrivate`i, 
          Blank[Integer]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`mapintpart[
        GeneralUtilities`Parts`PackagePrivate`i, 
         GeneralUtilities`Parts`PackagePrivate`map[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`map[
         Pattern[GeneralUtilities`Parts`PackagePrivate`l, 
          Blank[List]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := Apply[Composition, 
         Map[
         GeneralUtilities`Parts`PackagePrivate`map[#, 
           GeneralUtilities`Parts`PackagePrivate`rest]& , 
          GeneralUtilities`Parts`PackagePrivate`l]], 
       GeneralUtilities`Parts`PackagePrivate`map[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[Span]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`mapspan[
        GeneralUtilities`Parts`PackagePrivate`s, 
         GeneralUtilities`Parts`PackagePrivate`map[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`mapall[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         GeneralUtilities`Parts`PackagePrivate`ContainerQ[
         GeneralUtilities`Parts`PackagePrivate`e], 
         Map[
         GeneralUtilities`Parts`PackagePrivate`s, 
          GeneralUtilities`Parts`PackagePrivate`e]], 
       GeneralUtilities`Parts`PackagePrivate`ContainerQ = Or[
         ListQ[#], 
         AssociationQ[#]]& , GeneralUtilities`Parts`PackagePrivate`mapvalues[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         AssociationQ[GeneralUtilities`Parts`PackagePrivate`e], 
         Map[GeneralUtilities`Parts`PackagePrivate`s, 
          Values[GeneralUtilities`Parts`PackagePrivate`e]]], 
       GeneralUtilities`Parts`PackagePrivate`mapkey[
         Pattern[GeneralUtilities`Parts`PackagePrivate`k, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         And[
          AssociationQ[GeneralUtilities`Parts`PackagePrivate`e], 
          KeyExistsQ[
          GeneralUtilities`Parts`PackagePrivate`e, 
           GeneralUtilities`Parts`PackagePrivate`k]], 
         MapAt[
         GeneralUtilities`Parts`PackagePrivate`s, 
          GeneralUtilities`Parts`PackagePrivate`e, 
          GeneralUtilities`Parts`PackagePrivate`k], 
         GeneralUtilities`Parts`PackagePrivate`e], 
       GeneralUtilities`Parts`PackagePrivate`mapintpart[
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         And[
          GeneralUtilities`Parts`PackagePrivate`ContainerQ[
          GeneralUtilities`Parts`PackagePrivate`e], 1 <= 
          Abs[GeneralUtilities`Parts`PackagePrivate`p] <= 
          Length[GeneralUtilities`Parts`PackagePrivate`e]], 
         MapAt[
         GeneralUtilities`Parts`PackagePrivate`s, 
          GeneralUtilities`Parts`PackagePrivate`e, 
          GeneralUtilities`Parts`PackagePrivate`p], 
         GeneralUtilities`Parts`PackagePrivate`e], 
       GeneralUtilities`Parts`PackagePrivate`mapspan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`ThrowFailure["NotImplemented"], 
       Attributes[GeneralUtilities`ThrowFailure] = {HoldFirst}, 
       GeneralUtilities`ThrowFailure[] := 
       GeneralUtilities`ThrowRawFailure[$Failed], 
       GeneralUtilities`ThrowFailure[
         Pattern[GeneralUtilities`Code`PackagePrivate`msg, 
          Blank[String]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`args, 
          BlankNullSequence[]]] := GeneralUtilities`ThrowRawFailure[
         GeneralUtilities`PackageScope`FailurePayload[
         GeneralUtilities`Code`PackagePrivate`msg, {
          GeneralUtilities`Code`PackagePrivate`args}]], 
       GeneralUtilities`ThrowFailure[
         MessageName[
          Pattern[GeneralUtilities`Code`PackagePrivate`head, 
           Blank[]], 
          Pattern[GeneralUtilities`Code`PackagePrivate`msg, 
           Blank[String]]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`args, 
          BlankNullSequence[]]] := GeneralUtilities`ThrowRawFailure[
         System`Private`SetNoEntry[
          Failure[
           If[
            System`Private`HasOwnEvaluationsQ[
            GeneralUtilities`Code`PackagePrivate`head], 
            HoldForm[GeneralUtilities`Code`PackagePrivate`head], 
            GeneralUtilities`Code`PackagePrivate`head], 
           Association[
           "MessageTemplate" :> 
            MessageName[
             GeneralUtilities`Code`PackagePrivate`head, 
              GeneralUtilities`Code`PackagePrivate`msg], 
            "MessageParameters" :> {
             GeneralUtilities`Code`PackagePrivate`args}]]]], 
       GeneralUtilities`ThrowFailure[
         BlankNullSequence[]] := 
       GeneralUtilities`Panic["InvalidThrowFailure"], 
       TagSet[GeneralUtilities`ThrowFailure, 
        MessageName[GeneralUtilities`ThrowFailure, "usage"], 
        "\!\(\*RowBox[{\"ThrowFailure\", \"[\", RowBox[{StyleBox[\"\\\"\\!\\(\
\\*StyleBox[\\\"msg\\\", \\\"TI\\\"]\\)\\\"\", ShowStringCharacters -> True], \
\",\",  RowBox[{StyleBox[\"args\", \"TI\"], StyleBox[\"\[Ellipsis]\", \
\"TR\"]}]}], \"]\"}]\) throws a Failure object to be caught by the nearest \
CatchFailure, which will attach the associated head.\n\
\!\(\*RowBox[{\"ThrowFailure\", \"[\", RowBox[{RowBox[{StyleBox[\"head\", \
\"TI\"], \"::\", StyleBox[\"msg\", \"TI\"]}], \",\",  RowBox[{StyleBox[\"args\
\", \"TI\"], StyleBox[\"\[Ellipsis]\", \"TR\"]}]}], \"]\"}]\) specifies the \
head to use for the Failure object.\n\!\(\*RowBox[{\"ThrowFailure\", \"[\", \
RowBox[{}], \"]\"}]\) just throws $Failed."], GeneralUtilities`ThrowRawFailure[
         Pattern[GeneralUtilities`Code`PackagePrivate`f, 
          Blank[]]] := If[
         GeneralUtilities`InCatchFailureQ[], 
         Throw[
         GeneralUtilities`Code`PackagePrivate`f, 
          GeneralUtilities`PackageScope`CatchFailureTag], 
         If[GeneralUtilities`$DebugMode, 
           Print[GeneralUtilities`Code`PackagePrivate`f]]; 
         Internal`$LastUncaughtFailure = 
          GeneralUtilities`Code`PackagePrivate`f; Message[
           MessageName[General, "interr2"]]; 
         GeneralUtilities`Code`PackagePrivate`cntr = 0; While[
           And[Increment[GeneralUtilities`Code`PackagePrivate`cntr] < 5, 
            Quiet[
             Check[End[]; True, False]]], Null]; 
         GeneralUtilities`Code`PackagePrivate`cntr = 0; While[
           And[Increment[GeneralUtilities`Code`PackagePrivate`cntr] < 5, 
            Quiet[
             Check[EndPackage[]; True, False]]], Null]; Abort[]], 
       TagSet[GeneralUtilities`ThrowRawFailure, 
        MessageName[GeneralUtilities`ThrowRawFailure, "usage"], 
        "\!\(\*RowBox[{\"ThrowRawFailure\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) throws an expression to be caught and returned by the \
nearest CatchFailure."], GeneralUtilities`InCatchFailureQ[] := Stack[
          Catch[
           Blank[], GeneralUtilities`PackageScope`CatchFailureTag, 
           Blank[]]] =!= {}, GeneralUtilities`$DebugMode = False, 
       GeneralUtilities`Panic[] := GeneralUtilities`Panic["UnspecifiedError"],
        GeneralUtilities`Panic[
         Pattern[GeneralUtilities`Code`PackagePrivate`tag, 
          Blank[String]]] := GeneralUtilities`ThrowRawFailure[
         GeneralUtilities`Code`PackagePrivate`MakeInternalFailure[
         GeneralUtilities`Code`PackagePrivate`tag, None, None]], 
       GeneralUtilities`Panic[
         Pattern[GeneralUtilities`Code`PackagePrivate`tag, 
          Blank[String]], "Information" -> 
         Pattern[GeneralUtilities`Code`PackagePrivate`info, 
           Blank[Association]]] := GeneralUtilities`ThrowRawFailure[
         GeneralUtilities`Code`PackagePrivate`MakeInternalFailure[
         GeneralUtilities`Code`PackagePrivate`tag, None, None, 
          GeneralUtilities`Code`PackagePrivate`info]], GeneralUtilities`Panic[
         Pattern[GeneralUtilities`Code`PackagePrivate`tag, 
          Blank[String]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`msg, 
          Blank[String]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`args, 
          BlankNullSequence[]], "Information" -> 
         Pattern[GeneralUtilities`Code`PackagePrivate`info, 
           Blank[Association]]] := GeneralUtilities`ThrowRawFailure[
         GeneralUtilities`Code`PackagePrivate`MakeInternalFailure[
         GeneralUtilities`Code`PackagePrivate`tag, 
          GeneralUtilities`Code`PackagePrivate`msg, {
          GeneralUtilities`Code`PackagePrivate`args}, 
          GeneralUtilities`Code`PackagePrivate`info]], GeneralUtilities`Panic[
         Pattern[GeneralUtilities`Code`PackagePrivate`tag, 
          Blank[String]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`msg, 
          Blank[String]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`args, 
          BlankNullSequence[]]] := GeneralUtilities`ThrowRawFailure[
         GeneralUtilities`Code`PackagePrivate`MakeInternalFailure[
         GeneralUtilities`Code`PackagePrivate`tag, 
          GeneralUtilities`Code`PackagePrivate`msg, {
          GeneralUtilities`Code`PackagePrivate`args}]], 
       Pattern[GeneralUtilities`Code`PackagePrivate`p, 
         Blank[GeneralUtilities`Panic]] := (
        GeneralUtilities`$LastMalformedPanic = 
         Hold[GeneralUtilities`Code`PackagePrivate`p]; 
        GeneralUtilities`Panic[
         "MalformedPanic", "See $LastMalformedPanic for more information."]), 
       TagSet[GeneralUtilities`Panic, 
        MessageName[GeneralUtilities`Panic, "usage"], 
        "\!\(\*RowBox[{\"Panic\", \"[\", RowBox[{}], \"]\"}]\) aborts the \
computation when an unexpected internal condition occurs.\n\
\!\(\*RowBox[{\"Panic\", \"[\", RowBox[{StyleBox[\"\\\"tag\\\"\", \
ShowStringCharacters -> True]}], \"]\"}]\) gives a single-word label or tag \
for the kind of unexpected condition, which should be CamelCase.\n\
\!\(\*RowBox[{\"Panic\", \"[\", RowBox[{StyleBox[\"\\\"tag\\\"\", \
ShowStringCharacters -> True], \",\",  \
StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"msg\\\", \\\"TI\\\"]\\)\\\"\", \
ShowStringCharacters -> True], \",\",  RowBox[{StyleBox[\"args\", \"TI\"], \
StyleBox[\"\[Ellipsis]\", \"TR\"]}]}], \"]\"}]\) provides more information, \
formatting as in Message.\nWhen $DebugMode is True, any information will be \
returned from the containing CatchFailure as an InternalFailure object.\nIn \
production, $Failed will be returned from the containing CatchFailure and a \
message about an unspecified internal error will be printed.\nIf there is no \
containing CatchFailure, the entire computation is aborted with Abort[].\nThe \
last InternalFailure to be thrown is stored in Internal`$LastInternalFailure.\
\nThe last uncaught failure is stored in Internal`$LastUncaughtFailure."], 
       GeneralUtilities`Code`PackagePrivate`MakeInternalFailure[
         Pattern[GeneralUtilities`Code`PackagePrivate`tag, 
          Blank[]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`msg, 
          Blank[]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`args, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`Code`PackagePrivate`info, 
           Blank[]], None]] := 
       Block[{GeneralUtilities`Code`PackagePrivate`assoc, 
          GeneralUtilities`Code`PackagePrivate`rawstack, 
          GeneralUtilities`Code`PackagePrivate`srcstack}, 
         GeneralUtilities`Code`PackagePrivate`assoc = 
          Association[
           "Tag" -> GeneralUtilities`Code`PackagePrivate`tag, "Message" -> 
            GeneralUtilities`Code`PackagePrivate`msg, "MessageArguments" -> 
            GeneralUtilities`Code`PackagePrivate`args]; 
         If[Length[GeneralUtilities`$SourceStack] > 0, 
           GeneralUtilities`Code`PackagePrivate`srcstack = 
            GeneralUtilities`GetSourceStack[]; 
           GeneralUtilities`Code`PackagePrivate`assoc["Stack"] = 
            GeneralUtilities`Code`PackagePrivate`srcstack; Null, 
           GeneralUtilities`Code`PackagePrivate`rawstack = TakeWhile[
              Stack[
               Blank[]], 
              FreeQ[
               Alternatives[
               GeneralUtilities`Code`PackagePrivate`MakeInternalFailure, 
                GeneralUtilities`ThrowRawFailure]]]; 
           GeneralUtilities`Code`PackagePrivate`rawstack = 
            Map[GeneralUtilities`SkeletonizeHeavyData, 
              GeneralUtilities`Code`PackagePrivate`rawstack]; 
           GeneralUtilities`Code`PackagePrivate`assoc["RawStack"] = {
              BinarySerialize[
              GeneralUtilities`Code`PackagePrivate`rawstack, PerformanceGoal -> 
               "Size"], 
              Length[GeneralUtilities`Code`PackagePrivate`rawstack]}; Null]; 
         If[ByteCount[GeneralUtilities`Code`PackagePrivate`assoc] > 32768, 
           GeneralUtilities`Code`PackagePrivate`assoc = 
           Map[GeneralUtilities`SkeletonizeHeavyData, 
             GeneralUtilities`Code`PackagePrivate`assoc]]; 
         GeneralUtilities`Code`PackagePrivate`assoc["Information"] = 
          GeneralUtilities`Code`PackagePrivate`info; 
         Internal`$LastInternalFailure = 
          GeneralUtilities`InternalFailure[
           GeneralUtilities`Code`PackagePrivate`assoc]], 
       GeneralUtilities`$SourceStack = {}, GeneralUtilities`GetSourceStack[] := 
       Apply[GeneralUtilities`SourceStackData, 
         MapThread[GeneralUtilities`Stack`PackagePrivate`addCELineEntry[#, 
           #2[]]& , {
          GeneralUtilities`$SourceStack, 
           GeneralUtilities`Stack`PackagePrivate`$LineStack}]], 
       TagSetDelayed[GeneralUtilities`SourceStackData, 
        Condition[
         MakeBoxes[
          Pattern[System`Private`T, 
           Blank[GeneralUtilities`SourceStackData]], StandardForm], 
         Refresh[
          Not[BoxForm`UseTextFormattingQ], None]], 
        RuleCondition[
         Replace[
          Unevaluated[System`Private`T], {HoldPattern[
             Pattern[GeneralUtilities`Stack`PackagePrivate`s, 
              Blank[GeneralUtilities`SourceStackData]]] :> ToBoxes[
             GeneralUtilities`Stack`PackagePrivate`formatStackGrid[
              If[Length[GeneralUtilities`Stack`PackagePrivate`s] > 32, 
               Take[GeneralUtilities`Stack`PackagePrivate`s, 32], 
               GeneralUtilities`Stack`PackagePrivate`s]]], Blank[] :> 
           Fail}]]], GeneralUtilities`Stack`PackagePrivate`formatStackGrid[
         Pattern[GeneralUtilities`Stack`PackagePrivate`stack, 
          Blank[]]] := GeneralUtilities`Stack`PackagePrivate`niceGrid[
         Map[GeneralUtilities`Stack`PackagePrivate`stackGridEntry, 
          Apply[List, GeneralUtilities`Stack`PackagePrivate`stack]]], 
       GeneralUtilities`Stack`PackagePrivate`niceGrid[
         Pattern[GeneralUtilities`Stack`PackagePrivate`grid, 
          Blank[]], 
         Pattern[GeneralUtilities`Stack`PackagePrivate`opts, 
          BlankNullSequence[]]] := ExpressionCell[
         Grid[
         GeneralUtilities`Stack`PackagePrivate`grid, 
          GeneralUtilities`Stack`PackagePrivate`opts, 
          Alignment -> {Left, Baseline}, Dividers -> All, FrameStyle -> 
          LightGray, Spacings -> {1.5, 0.8}, ItemSize -> {Automatic, 1.}], 
         Background -> White], 
       GeneralUtilities`Stack`PackagePrivate`stackGridEntry[
         HoldComplete[{
           Pattern[GeneralUtilities`Stack`PackagePrivate`head, 
            Blank[]], 
           Pattern[GeneralUtilities`Stack`PackagePrivate`spec, 
            Blank[]]}, 
          Pattern[GeneralUtilities`Stack`PackagePrivate`lhs, 
           Blank[]]]] := {GeneralUtilities`Stack`PackagePrivate`spec, 
         GeneralUtilities`Stack`PackagePrivate`pasteEntryCell[
         GeneralUtilities`Stack`PackagePrivate`lhs]}, 
       Attributes[GeneralUtilities`Stack`PackagePrivate`pasteEntryCell] = {
        HoldAllComplete}, GeneralUtilities`Stack`PackagePrivate`pasteEntryCell[
         Pattern[GeneralUtilities`Stack`PackagePrivate`expr, 
          Blank[]]] := RawBoxes[
         PaneBox[
          GeneralUtilities`PackageScope`makeInputPasteBox[
          GeneralUtilities`Stack`PackagePrivate`expr], 
          ImageSize -> {{Automatic, 600}, Automatic}, 
          BaseStyle -> {ShowStringCharacters -> True}]], 
       GeneralUtilities`Stack`PackagePrivate`addCELineEntry[
         Pattern[GeneralUtilities`Stack`PackagePrivate`frame, 
          Blank[]], 0] := GeneralUtilities`Stack`PackagePrivate`frame, 
       GeneralUtilities`Stack`PackagePrivate`addCELineEntry[
         Pattern[GeneralUtilities`Stack`PackagePrivate`frame, 
          Blank[]], 
         Pattern[GeneralUtilities`Stack`PackagePrivate`line, 
          Blank[Integer]]] := 
       Sequence[GeneralUtilities`Stack`PackagePrivate`frame, 
         GeneralUtilities`Stack`PackagePrivate`CELineEntry[
          Part[GeneralUtilities`Stack`PackagePrivate`frame, 1], 
          GeneralUtilities`Stack`PackagePrivate`line]], 
       GeneralUtilities`Stack`PackagePrivate`CELineEntry[{
          Hold[
           Pattern[GeneralUtilities`Stack`PackagePrivate`sym, 
            Blank[Symbol]]], 
          GeneralUtilities`FileLine[
           Pattern[GeneralUtilities`Stack`PackagePrivate`file, 
            Blank[]], 
           Blank[]]}, 
         Pattern[GeneralUtilities`Stack`PackagePrivate`line, 
          Blank[]]] := 
       Block[{GeneralUtilities`Stack`PackagePrivate`entry}, 
         GeneralUtilities`Stack`PackagePrivate`entry = FirstCase[
            GeneralUtilities`Definitions[
            GeneralUtilities`Stack`PackagePrivate`sym], 
            HoldPattern[
             BlankNullSequence[]; 
              GeneralUtilities`Stack`PackagePrivate`CELine[
               GeneralUtilities`Stack`PackagePrivate`line]; 
              Pattern[GeneralUtilities`Stack`PackagePrivate`expr, 
                Blank[]]; BlankNullSequence[]] :> ReplaceAll[
              HoldComplete[GeneralUtilities`Stack`PackagePrivate`expr], 
              HoldPattern[
               Blank[GeneralUtilities`Stack`PackagePrivate`CELine]; 
                Pattern[GeneralUtilities`Stack`PackagePrivate`e, 
                  Blank[]]] :> GeneralUtilities`Stack`PackagePrivate`e], 
            HoldComplete[Missing], Infinity]; 
         Prepend[GeneralUtilities`Stack`PackagePrivate`entry, {
            Hold[GeneralUtilities`Stack`PackagePrivate`sym], 
            GeneralUtilities`FileLine[
            GeneralUtilities`Stack`PackagePrivate`file, 
             GeneralUtilities`Stack`PackagePrivate`line]}]], 
       UpSetDelayed[
        SystemOpen[
         GeneralUtilities`FileLine[
          Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
           Blank[String]], 
          Alternatives[
           Pattern[GeneralUtilities`Packages`PackagePrivate`n, 
            Blank[Integer]], 
           Pattern[GeneralUtilities`Packages`PackagePrivate`n, 
            Blank[String]]]]], 
        GeneralUtilities`Packages`PackagePrivate`systemOpenAtLine[
        GeneralUtilities`Packages`PackagePrivate`file, 
         GeneralUtilities`Packages`PackagePrivate`n]], 
       TagSetDelayed[GeneralUtilities`FileLine, 
        Condition[
         MakeBoxes[
          Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
           GeneralUtilities`FileLine[
            Pattern[GeneralUtilities`Packages`PackagePrivate`path, 
             Blank[String]], 
            Pattern[GeneralUtilities`Packages`PackagePrivate`n, 
             Blank[]]]], StandardForm], BoxForm`UseTextFormattingQ === False], 
        Block[{
         GeneralUtilities`Packages`PackagePrivate`col, 
          GeneralUtilities`Packages`PackagePrivate`display}, 
         GeneralUtilities`Packages`PackagePrivate`col = 
          Blend[{Blue, White}, 0.9]; 
         GeneralUtilities`Packages`PackagePrivate`display = Style[
            Row[{
              Style[
               StringJoin["\[Ellipsis]/", 
                FileNameTake[
                GeneralUtilities`Packages`PackagePrivate`path, -2]], Bold], 
              ":", 
              If[
               IntegerQ[GeneralUtilities`Packages`PackagePrivate`n], 
               GeneralUtilities`Packages`PackagePrivate`n, "?"]}], 
            "Hyperlink", ShowStringCharacters -> False]; 
         GeneralUtilities`Packages`PackagePrivate`display = 
          Tooltip[
           GeneralUtilities`Packages`PackagePrivate`display, 
            GeneralUtilities`Packages`PackagePrivate`path]; 
         GeneralUtilities`Packages`PackagePrivate`display = 
          EventHandler[
           GeneralUtilities`Packages`PackagePrivate`display, {
            "MouseClicked" :> 
             GeneralUtilities`Packages`PackagePrivate`systemOpenAtLine[
              GeneralUtilities`Packages`PackagePrivate`path, 
               GeneralUtilities`Packages`PackagePrivate`n]}]; 
         GeneralUtilities`Packages`PackagePrivate`display = 
          MouseAppearance[
           GeneralUtilities`Packages`PackagePrivate`display, "LinkHand"]; 
         ToBoxes[
           Interpretation[
           GeneralUtilities`Packages`PackagePrivate`display, 
            GeneralUtilities`Packages`PackagePrivate`file]]]], Condition[
         GeneralUtilities`Packages`PackagePrivate`systemOpenAtLine[
          Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
           Blank[]], 
          Pattern[GeneralUtilities`Packages`PackagePrivate`n, 
           Blank[Integer]]], 
         GeneralUtilities`Packages`PackagePrivate`$useSublimeText] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`cmd}, 
         GeneralUtilities`Packages`PackagePrivate`cmd = 
          StringJoin[
           "!\"", GeneralUtilities`Packages`PackagePrivate`$sublimePath, 
            "\" ", 
            StringReplace[
             AbsoluteFileName[GeneralUtilities`Packages`PackagePrivate`file], 
             " " -> " "], 
            If[
             IntegerQ[GeneralUtilities`Packages`PackagePrivate`n], 
             StringJoin[":", 
              IntegerString[GeneralUtilities`Packages`PackagePrivate`n]], 
             ""]]; Close[
           OpenRead[GeneralUtilities`Packages`PackagePrivate`cmd]]; Null], 
       Condition[
         GeneralUtilities`Packages`PackagePrivate`systemOpenAtLine[
          Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
           Blank[]], 
          Pattern[GeneralUtilities`Packages`PackagePrivate`n, 
           Blank[Integer]]], 
         StringMatchQ[GeneralUtilities`Packages`PackagePrivate`file, "*.m"]] := 
       Block[{
         GeneralUtilities`Packages`PackagePrivate`nb, 
          GeneralUtilities`Packages`PackagePrivate`lines, 
          GeneralUtilities`Packages`PackagePrivate`target, 
          GeneralUtilities`Packages`PackagePrivate`count}, 
         GeneralUtilities`Packages`PackagePrivate`nb = 
          GeneralUtilities`PackageOpen[
           GeneralUtilities`Packages`PackagePrivate`file, "SourceAnnotations" -> 
            True]; GeneralUtilities`Packages`PackagePrivate`lines = 
          GeneralUtilities`FileLines[
           GeneralUtilities`Packages`PackagePrivate`file]; 
         If[GeneralUtilities`Packages`PackagePrivate`n > 
           Length[GeneralUtilities`Packages`PackagePrivate`lines], 
           SelectionMove[
            GeneralUtilities`Packages`PackagePrivate`nb, After, Notebook]; 
           Null, GeneralUtilities`Packages`PackagePrivate`target = 
            Part[GeneralUtilities`Packages`PackagePrivate`lines, 
              GeneralUtilities`Packages`PackagePrivate`n]; 
           GeneralUtilities`Packages`PackagePrivate`count = Count[
              Take[
              GeneralUtilities`Packages`PackagePrivate`lines, 
               GeneralUtilities`Packages`PackagePrivate`n], 
              Condition[
               Pattern[GeneralUtilities`Packages`PackagePrivate`s, 
                Blank[]], 
               Not[
                StringFreeQ[
                GeneralUtilities`Packages`PackagePrivate`s, 
                 GeneralUtilities`Packages`PackagePrivate`target]]]]; 
           FrontEndExecute[
             Prepend[
              FrontEnd`SelectionMove[
              GeneralUtilities`Packages`PackagePrivate`nb, Before, Notebook]][
              Table[
               FrontEnd`NotebookFind[
               GeneralUtilities`Packages`PackagePrivate`nb, 
                GeneralUtilities`Packages`PackagePrivate`target], {
               GeneralUtilities`Packages`PackagePrivate`count}]]]]; Null], 
       Condition[
         GeneralUtilities`Packages`PackagePrivate`systemOpenAtLine[
          Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
           Blank[]], 
          Pattern[GeneralUtilities`Packages`PackagePrivate`target, 
           Blank[String]]], 
         StringMatchQ[GeneralUtilities`Packages`PackagePrivate`file, "*.m"]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`nb, 
          GeneralUtilities`Packages`PackagePrivate`result}, 
         GeneralUtilities`Packages`PackagePrivate`nb = 
          GeneralUtilities`PackageOpen[
           GeneralUtilities`Packages`PackagePrivate`file, "SourceAnnotations" -> 
            True]; If[
           FailureQ[GeneralUtilities`Packages`PackagePrivate`nb], 
           GeneralUtilities`Panic[]]; If[
           FailureQ[
            SelectionMove[
            GeneralUtilities`Packages`PackagePrivate`nb, Before, Notebook]], 
           GeneralUtilities`Panic[]]; 
         GeneralUtilities`Packages`PackagePrivate`result = 
          NotebookFind[
           GeneralUtilities`Packages`PackagePrivate`nb, 
            GeneralUtilities`Packages`PackagePrivate`target, WrapAround -> 
            True]; If[
           FailureQ[GeneralUtilities`Packages`PackagePrivate`result], 
           Beep[]]; Null], 
       GeneralUtilities`Packages`PackagePrivate`systemOpenAtLine[
         Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
          Blank[]], 
         Blank[]] := 
       SystemOpen[GeneralUtilities`Packages`PackagePrivate`file], 
       GeneralUtilities`Packages`PackagePrivate`$useSublimeText := And[
         StringQ[GeneralUtilities`Packages`PackagePrivate`$sublimePath], 
         FileExistsQ[GeneralUtilities`Packages`PackagePrivate`$sublimePath]], 
       GeneralUtilities`Packages`PackagePrivate`$sublimePath := (
        GeneralUtilities`Packages`PackagePrivate`$sublimePath = Which[
          StringMatchQ[$SystemID, "MacOSX*"], "/usr/local/bin/subl", 
          StringMatchQ[$SystemID, "Windows*"], 
          "C:/Program Files/Sublime Text 3/subl.exe", True, None]), 
       GeneralUtilities`PackageOpen[
         Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
          Blank[String]], 
         OptionsPattern[]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`nb, 
          GeneralUtilities`Packages`PackagePrivate`contexts, 
          GeneralUtilities`Packages`PackagePrivate`source}, If[
           Not[
            GeneralUtilities`FileQ[
            GeneralUtilities`Packages`PackagePrivate`file]], 
           Return[Message[
              MessageName[GeneralUtilities`PackageOpen, "notfile"], 
              GeneralUtilities`Packages`PackagePrivate`file]; $Failed, 
            Block]]; GeneralUtilities`Packages`PackagePrivate`nb = 
          Lookup[GeneralUtilities`Packages`PackagePrivate`$nbmappings, 
            GeneralUtilities`Packages`PackagePrivate`file, None]; If[
           And[
           GeneralUtilities`Packages`PackagePrivate`nb =!= None, 
            Options[GeneralUtilities`Packages`PackagePrivate`nb] === $Failed],
            GeneralUtilities`Packages`PackagePrivate`nb = None]; 
         If[GeneralUtilities`Packages`PackagePrivate`nb === None, 
           GeneralUtilities`Packages`PackagePrivate`contexts = 
            GeneralUtilities`ExtractFileContexts[
             GeneralUtilities`Packages`PackagePrivate`file]; 
           GeneralUtilities`Packages`PackagePrivate`source = If[
              And[
               OptionValue["SourceAnnotations"], 
               GeneralUtilities`Packages`PackagePrivate`patchableFileQ[
               GeneralUtilities`Packages`PackagePrivate`file]], 
              GeneralUtilities`Packages`PackagePrivate`file, None]; 
           GeneralUtilities`Packages`PackagePrivate`nb = 
            NotebookOpen[
             GeneralUtilities`Packages`PackagePrivate`file, WindowSize -> {
                Scaled[1/2], 
                Scaled[1]}, FrontEnd`FileChangeProtection -> None, 
              WindowMargins -> {{Automatic, 0}, {0, 0}}, 
              NotebookEventActions -> {{"MenuCommand", "Save"} :> 
                GeneralUtilities`Packages`PackagePrivate`handleSave[
                 GeneralUtilities`Packages`PackagePrivate`file]}, Visible -> 
              OptionValue[Visible], Background -> Lighter[Orange, 0.95], 
              StyleDefinitions -> 
              GeneralUtilities`Packages`PackagePrivate`\
makePackageStyleDefinitions[
               GeneralUtilities`Packages`PackagePrivate`contexts, 
                GeneralUtilities`Packages`PackagePrivate`source], 
              FrontEnd`ClosingSaveDialog -> False, DockedCells -> {}]; 
           GeneralUtilities`Packages`PackagePrivate`$nbmappings[
             GeneralUtilities`Packages`PackagePrivate`file] = 
            GeneralUtilities`Packages`PackagePrivate`nb; Null]; 
         GeneralUtilities`Packages`PackagePrivate`nb], 
       Options[GeneralUtilities`PackageOpen] = {
        "SourceAnnotations" -> False, Visible -> True}, 
       TagSet[GeneralUtilities`PackageOpen, 
        MessageName[GeneralUtilities`PackageOpen, "notfile"], 
        "`` is not a file."], GeneralUtilities`FileQ[
         Pattern[GeneralUtilities`Files`PackagePrivate`path, 
          Blank[String]]] := 
       FileType[GeneralUtilities`Files`PackagePrivate`path] === File, 
       GeneralUtilities`FileQ[
         Blank[]] := False, 
       TagSet[GeneralUtilities`FileQ, 
        MessageName[GeneralUtilities`FileQ, "usage"], 
        "\!\(\*RowBox[{\"FileQ\", \"[\", RowBox[{StyleBox[\"path\", \
\"TI\"]}], \"]\"}]\) returns True if \!\(\*StyleBox[\"path\", \"TI\"]\) \
exists and is an ordinary file."], 
       GeneralUtilities`Packages`PackagePrivate`$nbmappings = Association[], 
       GeneralUtilities`ExtractFileContexts[
         Pattern[GeneralUtilities`Packages`PackagePrivate`filename, 
          Blank[String]]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`newstyle, 
          GeneralUtilities`Packages`PackagePrivate`outer, 
          GeneralUtilities`Packages`PackagePrivate`inner, 
          GeneralUtilities`Packages`PackagePrivate`imported, 
          GeneralUtilities`Packages`PackagePrivate`importFramework, 
          GeneralUtilities`Packages`PackagePrivate`text, 
          GeneralUtilities`Packages`PackagePrivate`filelinks, 
          GeneralUtilities`Packages`PackagePrivate`basename, 
          GeneralUtilities`Packages`PackagePrivate`parsed, 
          GeneralUtilities`Packages`PackagePrivate`contexts, 
          GeneralUtilities`Packages`PackagePrivate`result}, 
         GeneralUtilities`Packages`PackagePrivate`newstyle = None; 
         GeneralUtilities`Packages`PackagePrivate`outer = None; 
         GeneralUtilities`Packages`PackagePrivate`inner = None; 
         GeneralUtilities`Packages`PackagePrivate`imported = {}; If[
           Not[
            GeneralUtilities`FileQ[
            GeneralUtilities`Packages`PackagePrivate`filename]], 
           Return[Message[
              MessageName[GeneralUtilities`ExtractFileContexts, "fnfnd"], 
              GeneralUtilities`Packages`PackagePrivate`filename]; $Failed, 
            Block]]; GeneralUtilities`Packages`PackagePrivate`importFramework = 
          False; GeneralUtilities`Packages`PackagePrivate`text = 
          GeneralUtilities`FileString[
           GeneralUtilities`Packages`PackagePrivate`filename]; Assert[
           StringQ[GeneralUtilities`Packages`PackagePrivate`text], {
           62, "/Jenkins/workspace/Component.ARG.64Bit.12.0/Paclets/\
GeneralUtilities/GeneralUtilities/Packages.m"}]; 
         StringCases[
          GeneralUtilities`Packages`PackagePrivate`text, {
           GeneralUtilities`Packages`PackagePrivate`HeadP["Package", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`newstyle =!= None, 
               Return[$Failed, Block]]; 
             GeneralUtilities`Packages`PackagePrivate`newstyle = True; 
             GeneralUtilities`Packages`PackagePrivate`outer = 
              GeneralUtilities`Packages`PackagePrivate`package; 
             GeneralUtilities`Packages`PackagePrivate`filelinks = Symbol[
                StringJoin[
                GeneralUtilities`Packages`PackagePrivate`package, 
                 "Private`$filelinks"]]; If[
               MatchQ[GeneralUtilities`Packages`PackagePrivate`filelinks, 
                Blank[Association]], 
               GeneralUtilities`Packages`PackagePrivate`basename = First[
                  StringCases[
                  GeneralUtilities`Packages`PackagePrivate`filename, 
                   StringExpression[
                    BlankNullSequence[], 
                    StringJoin[
                    StringDrop[
                    GeneralUtilities`Packages`PackagePrivate`package, -1], 
                    "/"], 
                    Pattern[GeneralUtilities`Packages`PackagePrivate`name, 
                    BlankNullSequence[]]] :> 
                   GeneralUtilities`Packages`PackagePrivate`name]]; 
               GeneralUtilities`Packages`PackagePrivate`basename = 
                GeneralUtilities`Packages`PackagePrivate`filelinks[
                 GeneralUtilities`Packages`PackagePrivate`basename]; 
               GeneralUtilities`Packages`PackagePrivate`basename = 
                FileBaseName[
                 GeneralUtilities`Packages`PackagePrivate`basename]; Null, 
               GeneralUtilities`Packages`PackagePrivate`basename = 
                FileBaseName[
                 GeneralUtilities`Packages`PackagePrivate`filename]; Null]; 
             GeneralUtilities`Packages`PackagePrivate`inner = 
              StringJoin[
               GeneralUtilities`Packages`PackagePrivate`package, 
                GeneralUtilities`Packages`PackagePrivate`basename, 
                "`PackagePrivate`"]; 
             AppendTo[GeneralUtilities`Packages`PackagePrivate`imported, 
               StringJoin[
               GeneralUtilities`Packages`PackagePrivate`package, 
                "PackageScope`"]]; Null), 
            GeneralUtilities`Packages`PackagePrivate`HeadP[
             "System`ConvertersDump`BeginModule", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package]] :> (
             GeneralUtilities`Packages`PackagePrivate`outer = (
               GeneralUtilities`Packages`PackagePrivate`inner = 
               GeneralUtilities`Packages`PackagePrivate`package); 
             GeneralUtilities`Packages`PackagePrivate`importFramework = True; 
             Null), GeneralUtilities`Packages`PackagePrivate`HeadP[
             "System`ConvertersDump`BeginModule", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package], 
              GeneralUtilities`Packages`PackagePrivate`ListP[
              GeneralUtilities`Packages`PackagePrivate`needs]] :> (
             GeneralUtilities`Packages`PackagePrivate`outer = (
               GeneralUtilities`Packages`PackagePrivate`inner = 
               GeneralUtilities`Packages`PackagePrivate`package); 
             GeneralUtilities`Packages`PackagePrivate`imported = 
              ToExpression[
               GeneralUtilities`Packages`PackagePrivate`needs, InputForm]; 
             Assert[
               Developer`StringVectorQ[
               GeneralUtilities`Packages`PackagePrivate`imported], {
               86, "/Jenkins/workspace/Component.ARG.64Bit.12.0/Paclets/\
GeneralUtilities/GeneralUtilities/Packages.m"}]; 
             GeneralUtilities`Packages`PackagePrivate`importFramework = True; 
             Null), GeneralUtilities`Packages`PackagePrivate`HeadP[
             "System`ConvertersDump`BeginModule", 
              GeneralUtilities`Packages`PackagePrivate`SeqP[
              GeneralUtilities`Packages`PackagePrivate`seq]] :> (
             GeneralUtilities`Packages`PackagePrivate`parsed = ToExpression[
                StringJoin[
                "{", GeneralUtilities`Packages`PackagePrivate`seq, "}"], 
                InputForm]; If[
               Not[
                Developer`StringVectorQ[
                GeneralUtilities`Packages`PackagePrivate`parsed]], 
               Return[$Failed, Block]]; 
             Assert[Length[GeneralUtilities`Packages`PackagePrivate`parsed] > 
               2, {92, 
                "/Jenkins/workspace/Component.ARG.64Bit.12.0/Paclets/\
GeneralUtilities/GeneralUtilities/Packages.m"}]; 
             GeneralUtilities`Packages`PackagePrivate`outer = (
               GeneralUtilities`Packages`PackagePrivate`inner = 
               First[GeneralUtilities`Packages`PackagePrivate`parsed]); 
             GeneralUtilities`Packages`PackagePrivate`imported = 
              Rest[GeneralUtilities`Packages`PackagePrivate`parsed]; 
             GeneralUtilities`Packages`PackagePrivate`importFramework = True; 
             Null), GeneralUtilities`Packages`PackagePrivate`HeadP[
             "BeginPackage", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`newstyle =!= None, 
               Return[$Failed, Block]]; 
             GeneralUtilities`Packages`PackagePrivate`newstyle = False; 
             GeneralUtilities`Packages`PackagePrivate`inner = (
               GeneralUtilities`Packages`PackagePrivate`outer = 
               GeneralUtilities`Packages`PackagePrivate`package); Null), 
            GeneralUtilities`Packages`PackagePrivate`HeadP["BeginPackage", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package], 
              GeneralUtilities`Packages`PackagePrivate`ListP[
              GeneralUtilities`Packages`PackagePrivate`needs]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`newstyle =!= None, 
               Return[$Failed, Block]]; 
             GeneralUtilities`Packages`PackagePrivate`newstyle = False; 
             GeneralUtilities`Packages`PackagePrivate`inner = (
               GeneralUtilities`Packages`PackagePrivate`outer = 
               GeneralUtilities`Packages`PackagePrivate`package); 
             GeneralUtilities`Packages`PackagePrivate`imported = 
              ToExpression[
               GeneralUtilities`Packages`PackagePrivate`needs, InputForm]; If[
               Not[
                Developer`StringVectorQ[
                GeneralUtilities`Packages`PackagePrivate`imported]], 
               Return[$Failed, Block]]; Null), 
            GeneralUtilities`Packages`PackagePrivate`HeadP["Begin", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`newstyle === True, 
               Return[$Failed, Block]]; 
             If[StringTake[
                GeneralUtilities`Packages`PackagePrivate`package, 1] === "`", 
               If[GeneralUtilities`Packages`PackagePrivate`outer === None, 
                 GeneralUtilities`Packages`PackagePrivate`inner = (
                  GeneralUtilities`Packages`PackagePrivate`outer = 
                  StringJoin[
                   "System", 
                    GeneralUtilities`Packages`PackagePrivate`package]), 
                 GeneralUtilities`Packages`PackagePrivate`inner = 
                 StringJoin[GeneralUtilities`Packages`PackagePrivate`outer, 
                   StringDrop[
                   GeneralUtilities`Packages`PackagePrivate`package, 1]]]; 
               Null, GeneralUtilities`Packages`PackagePrivate`inner = (
                 GeneralUtilities`Packages`PackagePrivate`outer = 
                 GeneralUtilities`Packages`PackagePrivate`package); Null]; 
             Null), 
            GeneralUtilities`Packages`PackagePrivate`HeadP["PackageImport", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`newstyle =!= True, 
               Return[$Failed, Block]]; 
             AppendTo[
              GeneralUtilities`Packages`PackagePrivate`imported, 
               GeneralUtilities`Packages`PackagePrivate`package]; Null), 
            GeneralUtilities`Packages`PackagePrivate`FlushHeadP["Needs", 
              GeneralUtilities`Packages`PackagePrivate`StringP[
              GeneralUtilities`Packages`PackagePrivate`package]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`outer === False, 
               Return[$Failed, Block]]; 
             If[GeneralUtilities`Packages`PackagePrivate`newstyle === True, 
               Return[$Failed, Block]]; 
             AppendTo[
              GeneralUtilities`Packages`PackagePrivate`imported, 
               GeneralUtilities`Packages`PackagePrivate`package]; Null), 
            GeneralUtilities`Packages`PackagePrivate`HeadP[
             "System`Private`NewContextPath", 
              GeneralUtilities`Packages`PackagePrivate`ListP[
              GeneralUtilities`Packages`PackagePrivate`contextList]] :> (
             If[GeneralUtilities`Packages`PackagePrivate`newstyle === True, 
               Return[$Failed, Block]]; 
             GeneralUtilities`Packages`PackagePrivate`contexts = 
              ToExpression[
               GeneralUtilities`Packages`PackagePrivate`contextList, 
                InputForm]; If[
               Not[
                Developer`StringVectorQ[
                GeneralUtilities`Packages`PackagePrivate`contexts]], 
               Return[$Failed, Block]]; 
             GeneralUtilities`Packages`PackagePrivate`imported = 
              Join[GeneralUtilities`Packages`PackagePrivate`imported, 
                GeneralUtilities`Packages`PackagePrivate`contexts]; Null)}]; 
         If[GeneralUtilities`Packages`PackagePrivate`importFramework, 
           AppendTo[
            GeneralUtilities`Packages`PackagePrivate`imported, 
             "System`ConvertersDump`Utilities`"]; Null]; 
         GeneralUtilities`Packages`PackagePrivate`result = 
          Developer`ToList[
           GeneralUtilities`Packages`PackagePrivate`inner, 
            GeneralUtilities`Packages`PackagePrivate`outer, 
            GeneralUtilities`Packages`PackagePrivate`imported, "System`"]; If[
           Not[
            Developer`StringVectorQ[
            GeneralUtilities`Packages`PackagePrivate`result]], 
           Return[$Failed, Block]]; 
         DeleteDuplicates[GeneralUtilities`Packages`PackagePrivate`result]], 
       GeneralUtilities`FileString[
         Pattern[GeneralUtilities`Files`PackagePrivate`file, 
          Blank[String]]] := 
       Module[{GeneralUtilities`Files`PackagePrivate`res, 
          GeneralUtilities`Files`PackagePrivate`str}, 
         GeneralUtilities`Files`PackagePrivate`str = 
          OpenRead[GeneralUtilities`Files`PackagePrivate`file]; 
         GeneralUtilities`Files`PackagePrivate`res = 
          Read[GeneralUtilities`Files`PackagePrivate`str, Record, 
            RecordSeparators -> {}]; 
         Close[GeneralUtilities`Files`PackagePrivate`str]; 
         GeneralUtilities`Files`PackagePrivate`res], 
       GeneralUtilities`FileString[
         Blank[]] := $Failed, 
       TagSet[GeneralUtilities`FileString, 
        MessageName[GeneralUtilities`FileString, "usage"], 
        "\!\(\*RowBox[{\"FileString\", \"[\", RowBox[{StyleBox[\"path\", \"TI\
\"]}], \"]\"}]\) gives a string of the contents of a file."], 
       Attributes[Assert] = {HoldAllComplete}, 
       GeneralUtilities`Packages`PackagePrivate`HeadP[
         Pattern[GeneralUtilities`Packages`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`arg, 
          Blank[]]] := 
       StringExpression[
        StartOfLine, GeneralUtilities`Packages`PackagePrivate`WSNull, 
         GeneralUtilities`Packages`PackagePrivate`head, 
         GeneralUtilities`Packages`PackagePrivate`WSNull, "[", 
         GeneralUtilities`Packages`PackagePrivate`WSNull, 
         GeneralUtilities`Packages`PackagePrivate`arg, 
         GeneralUtilities`Packages`PackagePrivate`WSNull, "]"], 
       GeneralUtilities`Packages`PackagePrivate`HeadP[
         Pattern[GeneralUtilities`Packages`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       StringExpression[
        StartOfLine, GeneralUtilities`Packages`PackagePrivate`WSNull, 
         GeneralUtilities`Packages`PackagePrivate`head, 
         GeneralUtilities`Packages`PackagePrivate`WSNull, "[", 
         GeneralUtilities`Packages`PackagePrivate`WSNull, 
         Apply[StringExpression, 
          Riffle[{GeneralUtilities`Packages`PackagePrivate`args}, 
           StringExpression[
           GeneralUtilities`Packages`PackagePrivate`WSNull, ",", 
            GeneralUtilities`Packages`PackagePrivate`WSNull]]], 
         GeneralUtilities`Packages`PackagePrivate`WSNull, "]"], 
       GeneralUtilities`Packages`PackagePrivate`WSNull = 
       RepeatedNull[WhitespaceCharacter], 
       GeneralUtilities`Packages`PackagePrivate`StringP[
         Pattern[GeneralUtilities`Packages`PackagePrivate`var, 
          Blank[]]] := 
       StringExpression[GeneralUtilities`Packages`PackagePrivate`DQuote, 
         Pattern[GeneralUtilities`Packages`PackagePrivate`var, 
          Shortest[
           Repeated[
            Except[GeneralUtilities`Packages`PackagePrivate`DQuote]]]], 
         GeneralUtilities`Packages`PackagePrivate`DQuote], 
       GeneralUtilities`Packages`PackagePrivate`DQuote = "\"", 
       GeneralUtilities`Packages`PackagePrivate`ListP[
         Pattern[GeneralUtilities`Packages`PackagePrivate`var, 
          Blank[]]] := Pattern[GeneralUtilities`Packages`PackagePrivate`var, 
         StringExpression["{", 
          Shortest[
           RepeatedNull[
            Except["}"]]], "}"]], 
       GeneralUtilities`Packages`PackagePrivate`SeqP[
         Pattern[GeneralUtilities`Packages`PackagePrivate`var, 
          Blank[]]] := Pattern[GeneralUtilities`Packages`PackagePrivate`var, 
         Repeated[
          Except[
           Alternatives["\n", "]"]]]], 
       GeneralUtilities`Packages`PackagePrivate`FlushHeadP[
         Pattern[GeneralUtilities`Packages`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`arg, 
          Blank[]]] := 
       StringExpression[
        StartOfLine, GeneralUtilities`Packages`PackagePrivate`head, 
         GeneralUtilities`Packages`PackagePrivate`WSNull, "[", 
         GeneralUtilities`Packages`PackagePrivate`WSNull, 
         GeneralUtilities`Packages`PackagePrivate`arg, 
         GeneralUtilities`Packages`PackagePrivate`WSNull, "]"], 
       GeneralUtilities`Packages`PackagePrivate`handleSave[
         Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
          Blank[]]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`str, 
          GeneralUtilities`Packages`PackagePrivate`stream}, 
         GeneralUtilities`Packages`PackagePrivate`str = 
          GeneralUtilities`Packages`PackagePrivate`toCodeString[
            EvaluationNotebook[]]; Assert[
           StringQ[GeneralUtilities`Packages`PackagePrivate`str], {
           703, "/Jenkins/workspace/Component.ARG.64Bit.12.0/Paclets/\
GeneralUtilities/GeneralUtilities/Packages.m"}]; 
         GeneralUtilities`Packages`PackagePrivate`stream = 
          OpenWrite[GeneralUtilities`Packages`PackagePrivate`file]; 
         WriteString[
          GeneralUtilities`Packages`PackagePrivate`stream, 
           GeneralUtilities`Packages`PackagePrivate`str]; 
         Close[GeneralUtilities`Packages`PackagePrivate`stream]; Null], 
       GeneralUtilities`Packages`PackagePrivate`toCodeString[
         Pattern[GeneralUtilities`Packages`PackagePrivate`nb, 
          Blank[NotebookObject]]] := 
       GeneralUtilities`Packages`PackagePrivate`toCodeString[
         NotebookGet[GeneralUtilities`Packages`PackagePrivate`nb]], 
       GeneralUtilities`Packages`PackagePrivate`toCodeString[
         Notebook[
          Pattern[GeneralUtilities`Packages`PackagePrivate`list, 
           Blank[List]], 
          BlankNullSequence[]]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`cells, 
          GeneralUtilities`Packages`PackagePrivate`res}, 
         GeneralUtilities`Packages`PackagePrivate`cells = 
          Cases[GeneralUtilities`Packages`PackagePrivate`list, 
            Pattern[GeneralUtilities`Packages`PackagePrivate`cell, 
              Cell[
               Blank[], "Code", 
               BlankNullSequence[]]] :> 
            Take[GeneralUtilities`Packages`PackagePrivate`cell, 2], Infinity]; 
         GeneralUtilities`Packages`PackagePrivate`cells = 
          Riffle[GeneralUtilities`Packages`PackagePrivate`cells, 
            Cell["\n", "Code"]]; 
         GeneralUtilities`Packages`PackagePrivate`res = MathLink`CallFrontEnd[
            FrontEnd`ExportPacket[
             Notebook[{GeneralUtilities`Packages`PackagePrivate`cells}], 
             "PlainText"]]; If[
           Not[
            MatchQ[GeneralUtilities`Packages`PackagePrivate`res, {
              Blank[String], 
              Blank[], 
              Blank[]}]], 
           Return[$Failed]]; 
         First[GeneralUtilities`Packages`PackagePrivate`res]], 
       GeneralUtilities`Packages`PackagePrivate`toCodeString[
         Pattern[GeneralUtilities`Packages`PackagePrivate`box, 
          Blank[BoxData]]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`res}, 
         GeneralUtilities`Packages`PackagePrivate`res = MathLink`CallFrontEnd[
            FrontEnd`ExportPacket[
            GeneralUtilities`Packages`PackagePrivate`box, "InputText"]]; If[
           Not[
            MatchQ[GeneralUtilities`Packages`PackagePrivate`res, {
              Blank[String], 
              Blank[], 
              Blank[]}]], 
           Return[$Failed]]; 
         First[GeneralUtilities`Packages`PackagePrivate`res]], 
       GeneralUtilities`Packages`PackagePrivate`toCodeString[
         Blank[]] := $Failed, 
       GeneralUtilities`Packages`PackagePrivate`makePackageStyleDefinitions[
         Pattern[GeneralUtilities`Packages`PackagePrivate`contexts, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
          Blank[]]] := Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Package.nb"]], 
          Cell[
           StyleData["Code"], CellMargins -> {{5, 5}, {0, 5}}, 
           CellFrameMargins -> {{7, 5}, {2, 5}}, ShowCellLabel -> False, 
           ShowCellBracket -> False, CellFrameColor -> Lighter[Orange, 0.75], 
           CellFrame -> {{0.25, 0.25}, {0.25, 0.25}}, 
           If[
            Developer`StringVectorQ[
            GeneralUtilities`Packages`PackagePrivate`contexts], 
            CellEvaluationFunction -> 
            GeneralUtilities`Packages`PackagePrivate`evaluateBoxesInContext[
             GeneralUtilities`Packages`PackagePrivate`contexts, 
              GeneralUtilities`Packages`PackagePrivate`file], Evaluatable -> 
            False]], 
          Cell[
           StyleData["StandardForm"], LineSpacing -> {1.25, 0, 2}, FontFamily -> 
           "Courier"]}, StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
        GeneralUtilities`Packages`PackagePrivate`evaluateBoxesInContext[
         Pattern[GeneralUtilities`Packages`PackagePrivate`contexts, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`file, 
          Blank[]]][
         Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`form, 
          Blank[]]] := 
       Block[{$Context = 
          First[GeneralUtilities`Packages`PackagePrivate`contexts], \
$ContextPath = Rest[GeneralUtilities`Packages`PackagePrivate`contexts], 
          GeneralUtilities`Packages`PackagePrivate`$file = 
          GeneralUtilities`Packages`PackagePrivate`file, 
          GeneralUtilities`Packages`PackagePrivate`unboxFinal = If[
            StringQ[GeneralUtilities`Packages`PackagePrivate`file], 
            GeneralUtilities`Packages`PackagePrivate`unboxAnnotate, 
            GeneralUtilities`Packages`PackagePrivate`unboxNormal]}, 
         GeneralUtilities`Packages`PackagePrivate`unbox0[
         GeneralUtilities`Packages`PackagePrivate`boxes]], $Context = 
       "Global`", $ContextPath = {
        "Utilities`URLTools`", "JLink`", "JSONTools`", "DocumentationSearch`",
          "ResourceLocator`", "URLUtilities`", "PacletManager`", "System`", 
         "Global`"}, GeneralUtilities`Packages`PackagePrivate`unboxAnnotate[
         Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
          Blank[]]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`prefix, 
          GeneralUtilities`Packages`PackagePrivate`lhs, 
          GeneralUtilities`Packages`PackagePrivate`rhs, 
          GeneralUtilities`Packages`PackagePrivate`str}, {
           GeneralUtilities`Packages`PackagePrivate`prefix, 
            GeneralUtilities`Packages`PackagePrivate`lhs, 
            GeneralUtilities`Packages`PackagePrivate`rhs} = 
          GeneralUtilities`Packages`PackagePrivate`splitBoxes[
           GeneralUtilities`Packages`PackagePrivate`boxes]; If[
           FailureQ[GeneralUtilities`Packages`PackagePrivate`prefix], 
           Return[
            GeneralUtilities`Packages`PackagePrivate`unboxNormal[
            GeneralUtilities`Packages`PackagePrivate`boxes]]]; 
         GeneralUtilities`Packages`PackagePrivate`str = 
          GeneralUtilities`Packages`PackagePrivate`toCodeString[
            BoxData[GeneralUtilities`Packages`PackagePrivate`prefix]]; If[
           FailureQ[GeneralUtilities`Packages`PackagePrivate`str], 
           Return[
            GeneralUtilities`Packages`PackagePrivate`unboxNormal[
            GeneralUtilities`Packages`PackagePrivate`boxes]]]; {
           GeneralUtilities`Packages`PackagePrivate`lhs, 
            GeneralUtilities`Packages`PackagePrivate`rhs} = 
          Map[ToExpression[#, StandardForm, HoldComplete]& , {
            GeneralUtilities`Packages`PackagePrivate`lhs, 
             GeneralUtilities`Packages`PackagePrivate`rhs}]; If[
           Or[
            FailureQ[GeneralUtilities`Packages`PackagePrivate`lhs], 
            FailureQ[GeneralUtilities`Packages`PackagePrivate`rhs]], 
           Return[
            GeneralUtilities`Packages`PackagePrivate`unboxNormal[
            GeneralUtilities`Packages`PackagePrivate`boxes]]]; If[
           Apply[
           GeneralUtilities`Packages`PackagePrivate`unpatchableQ, 
            GeneralUtilities`Packages`PackagePrivate`rhs], 
           Return[
            GeneralUtilities`Packages`PackagePrivate`unboxNormal[
            GeneralUtilities`Packages`PackagePrivate`boxes]]]; 
         GeneralUtilities`Packages`PackagePrivate`unsetLHS[
          GeneralUtilities`Packages`PackagePrivate`lhs]; 
         GeneralUtilities`Packages`PackagePrivate`unboxAnnotate2[
           GeneralUtilities`FileLine[
           GeneralUtilities`Packages`PackagePrivate`$file, 
            GeneralUtilities`Packages`PackagePrivate`str], 
           GeneralUtilities`Packages`PackagePrivate`lhs, 
           GeneralUtilities`Packages`PackagePrivate`rhs]; Null], 
       GeneralUtilities`Packages`PackagePrivate`splitBoxes[
         RowBox[{
           Pattern[GeneralUtilities`Packages`PackagePrivate`sym, 
            Blank[String]], 
           Pattern[GeneralUtilities`Packages`PackagePrivate`space, 
            Repeated[
             Alternatives[" ", "  ", "   "], {0, 3}]], ":=", 
           Pattern[GeneralUtilities`Packages`PackagePrivate`rhs, 
            Blank[]]}]] := {
         RowBox[{
          GeneralUtilities`Packages`PackagePrivate`sym, 
           GeneralUtilities`Packages`PackagePrivate`space, ":="}], 
         GeneralUtilities`Packages`PackagePrivate`sym, 
         GeneralUtilities`Packages`PackagePrivate`rhs}, 
       GeneralUtilities`Packages`PackagePrivate`splitBoxes[
         RowBox[{
           Pattern[GeneralUtilities`Packages`PackagePrivate`lhs, 
            RowBox[{
              Blank[], "[", 
              BlankNullSequence[], "]"}]], 
           Pattern[GeneralUtilities`Packages`PackagePrivate`space, 
            Repeated[
             Alternatives[" ", "  ", "   "], {0, 3}]], ":=", 
           Pattern[GeneralUtilities`Packages`PackagePrivate`rhs, 
            Blank[]]}]] := {
         RowBox[{
          GeneralUtilities`Packages`PackagePrivate`lhs, 
           GeneralUtilities`Packages`PackagePrivate`space, ":="}], 
         GeneralUtilities`Packages`PackagePrivate`lhs, 
         GeneralUtilities`Packages`PackagePrivate`rhs}, 
       GeneralUtilities`Packages`PackagePrivate`splitBoxes[
         Blank[]] := {$Failed, $Failed, $Failed}, 
       GeneralUtilities`Packages`PackagePrivate`unboxNormal[
         Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
          Blank[]]] := ToBoxes[
         ToExpression[
         GeneralUtilities`Packages`PackagePrivate`boxes, StandardForm]], 
       GeneralUtilities`Packages`PackagePrivate`unsetLHS[
         HoldComplete[
          Pattern[GeneralUtilities`Packages`PackagePrivate`lhs, 
           Blank[]]]] := 
       Quiet[Unset[GeneralUtilities`Packages`PackagePrivate`lhs]; Unset[
           Pattern[
           System`Private`LHS, 
            GeneralUtilities`Packages`PackagePrivate`lhs]]], 
       GeneralUtilities`Packages`PackagePrivate`unboxAnnotate2[
         Pattern[GeneralUtilities`Packages`PackagePrivate`spec, 
          Blank[]], 
         HoldComplete[
          Pattern[GeneralUtilities`Packages`PackagePrivate`lhs, 
           Blank[]]], 
         HoldComplete[
          Pattern[GeneralUtilities`Packages`PackagePrivate`rhs, 
           Blank[]]]] := Apply[SetDelayed, 
         HoldComplete[
          Pattern[
          System`Private`LHS, GeneralUtilities`Packages`PackagePrivate`lhs], 
          GeneralUtilities`SourceAnnotation[
          GeneralUtilities`Packages`PackagePrivate`spec, System`Private`LHS, 
           GeneralUtilities`Packages`PackagePrivate`rhs]]], 
       Attributes[GeneralUtilities`SourceAnnotation] = {HoldAllComplete}, 
       GeneralUtilities`SourceAnnotation[
         Pattern[GeneralUtilities`Stack`PackagePrivate`spec, 
          Blank[]], 
         Pattern[GeneralUtilities`Stack`PackagePrivate`lhs, 
          Blank[]], 
         Pattern[GeneralUtilities`Stack`PackagePrivate`rhs, 
          Blank[]]] := 
       If[$DynamicEvaluation, GeneralUtilities`Stack`PackagePrivate`rhs, 
         GeneralUtilities`EvaluateStrict[
          
          With[{GeneralUtilities`Stack`PackagePrivate`CELineVar = 
            GeneralUtilities`Stack`PackagePrivate`makeCELineVar[]}, 
           
           Block[{GeneralUtilities`$SourceStack = 
             Append[GeneralUtilities`$SourceStack, 
               HoldComplete[
               GeneralUtilities`Stack`PackagePrivate`spec, 
                GeneralUtilities`Stack`PackagePrivate`lhs]], 
             GeneralUtilities`Stack`PackagePrivate`$LineStack = 
             Append[GeneralUtilities`Stack`PackagePrivate`$LineStack, 
               GeneralUtilities`Stack`PackagePrivate`CELineVar]}, 
            ReplaceAll[
             Unevaluated[GeneralUtilities`Stack`PackagePrivate`rhs], 
             GeneralUtilities`Stack`PackagePrivate`CELine -> 
             GeneralUtilities`Stack`PackagePrivate`CELineVar]]]]], 
       Attributes[GeneralUtilities`EvaluateStrict] = {HoldAll}, Condition[
         GeneralUtilities`EvaluateStrict[
          Pattern[GeneralUtilities`Stack`PackagePrivate`expr, 
           Blank[]]], 
         Not[GeneralUtilities`Stack`PackagePrivate`$strict]] := Catch[
         Block[{
          Failure, GeneralUtilities`InternalFailure, 
           GeneralUtilities`Stack`PackagePrivate`$strict = True}, 
          Internal`$LastInternalFailure = None; Condition[
             Failure[
              Pattern[GeneralUtilities`Stack`PackagePrivate`s, 
               Alternatives[
                Blank[Symbol], 
                Blank[String], 
                Blank[HoldForm]]], 
              Pattern[GeneralUtilities`Stack`PackagePrivate`a, 
               Blank[Association]]], 
             GeneralUtilities`Stack`PackagePrivate`$strict] := 
           GeneralUtilities`Stack`PackagePrivate`interceptFailure[
            GeneralUtilities`Stack`PackagePrivate`s, 
             GeneralUtilities`Stack`PackagePrivate`a]; Condition[
             GeneralUtilities`InternalFailure[
              Pattern[GeneralUtilities`Stack`PackagePrivate`args, 
               BlankNullSequence[]]], 
             GeneralUtilities`Stack`PackagePrivate`$strict] := 
           GeneralUtilities`Stack`PackagePrivate`interceptInternalfailure[
            GeneralUtilities`Stack`PackagePrivate`args]; 
          If[$VersionNumber >= 11, 
            
            Internal`HandlerBlock[{
             "Message", 
              GeneralUtilities`Stack`PackagePrivate`interceptMessage}, 
             GeneralUtilities`Stack`PackagePrivate`expr], 
            Internal`WithLocalSettings[
             Internal`AddHandler[
             "Message", 
              GeneralUtilities`Stack`PackagePrivate`interceptMessage], 
             GeneralUtilities`Stack`PackagePrivate`expr, 
             Internal`RemoveHandler[
             "Message", 
              GeneralUtilities`Stack`PackagePrivate`interceptMessage]]]], 
         GeneralUtilities`Stack`PackagePrivate`$EvaluateStrictTag], 
       GeneralUtilities`EvaluateStrict[
         Pattern[GeneralUtilities`Stack`PackagePrivate`expr, 
          Blank[]]] := GeneralUtilities`Stack`PackagePrivate`expr, 
       GeneralUtilities`Stack`PackagePrivate`$strict = False, 
       UpSetDelayed[
        FailureQ[
         Blank[GeneralUtilities`InternalFailure]], True], 
       TagSetDelayed[GeneralUtilities`InternalFailure, 
        Condition[
         MakeBoxes[
          Pattern[System`Private`T, 
           Blank[GeneralUtilities`InternalFailure]], StandardForm], 
         Refresh[
          Not[BoxForm`UseTextFormattingQ], None]], 
        RuleCondition[
         Replace[
          Unevaluated[System`Private`T], {HoldPattern[
             Pattern[GeneralUtilities`Code`PackagePrivate`if, 
              GeneralUtilities`InternalFailure[
               PatternTest[
                Blank[Association], AssociationQ]]]] :> 
           GeneralUtilities`Code`PackagePrivate`fmtInternalFailure[
            GeneralUtilities`Code`PackagePrivate`if], Blank[] :> Fail}]]], 
       TagSet[GeneralUtilities`InternalFailure, 
        MessageName[GeneralUtilities`InternalFailure, "usage"], 
        "\!\(\*RowBox[{\"InternalFailure\", \"[\", RowBox[{RowBox[{\"\
\[LeftAssociation]\", StyleBox[\"\[Ellipsis]\", \"TR\"], \
\"\[RightAssociation]\"}]}], \"]\"}]\) represents a failure caused by a \
Panic, and always contains the fields \"Tag\", \"Message\", and \
\"MessageArguments\" (which can be None).\n\[Bullet] An optional field called \
\"Information\" can contain an association, any fields within it will be \
presented using PrettyGrid."], 
       GeneralUtilities`Code`PackagePrivate`fmtInternalFailure[
         Pattern[GeneralUtilities`Code`PackagePrivate`if, 
          GeneralUtilities`InternalFailure[
           Pattern[GeneralUtilities`Code`PackagePrivate`assoc, 
            Blank[]]]]] := 
       Block[{GeneralUtilities`Code`PackagePrivate`tag, 
          GeneralUtilities`Code`PackagePrivate`msg, 
          GeneralUtilities`Code`PackagePrivate`msgargs, 
          GeneralUtilities`Code`PackagePrivate`msgstr = Nothing, 
          GeneralUtilities`Code`PackagePrivate`assoc2 = 
          GeneralUtilities`Code`PackagePrivate`assoc}, {
           GeneralUtilities`Code`PackagePrivate`tag, 
            GeneralUtilities`Code`PackagePrivate`msg, 
            GeneralUtilities`Code`PackagePrivate`msgargs, 
            GeneralUtilities`Code`PackagePrivate`info} = 
          Lookup[GeneralUtilities`Code`PackagePrivate`assoc2, {
            "Tag", "Message", "MessageArguments", "Information"}, None]; 
         KeyDropFrom[GeneralUtilities`Code`PackagePrivate`assoc2, "Tag"]; If[
           And[
            StringQ[GeneralUtilities`Code`PackagePrivate`msg], 
            ListQ[GeneralUtilities`Code`PackagePrivate`msgargs]], 
           KeyDropFrom[
            GeneralUtilities`Code`PackagePrivate`assoc2, {
             "Message", "MessageArguments"}]; 
           GeneralUtilities`Code`PackagePrivate`msgstr = 
            StringForm[GeneralUtilities`Code`PackagePrivate`msg, 
              Apply[Sequence, GeneralUtilities`Code`PackagePrivate`msgargs]]; 
           GeneralUtilities`Code`PackagePrivate`msgstr = 
            Style[
             GeneralUtilities`Code`PackagePrivate`msgstr, 11, Black, 
              FontFamily -> "Source Code Pro"]; Null]; 
         If[GeneralUtilities`Code`PackagePrivate`msg === None, 
           KeyDropFrom[
           GeneralUtilities`Code`PackagePrivate`assoc2, "Message"]]; 
         If[GeneralUtilities`Code`PackagePrivate`msgargs === None, 
           KeyDropFrom[
           GeneralUtilities`Code`PackagePrivate`assoc2, "MessageArguments"]]; 
         ToBoxes[
           Style[
            Panel[
             Column[
              Flatten[{
                Style[GeneralUtilities`Code`PackagePrivate`tag, 13, Bold], 
                GeneralUtilities`Code`PackagePrivate`msgstr, 
                KeyValueMap[
                GeneralUtilities`Code`PackagePrivate`makeIFailItem, 
                 GeneralUtilities`Code`PackagePrivate`assoc2]}]], Background -> 
             LightPink], LineBreakWithin -> False]]], 
       Attributes[GeneralUtilities`Code`PackagePrivate`makeIFailItem] = {
        HoldRest}, 
       GeneralUtilities`Code`PackagePrivate`makeIFailItem[
        "Information", None] := Nothing, 
       GeneralUtilities`Code`PackagePrivate`makeIFailItem["Information", 
         Pattern[GeneralUtilities`Code`PackagePrivate`info, 
          Blank[Association]]] := Item[
         GeneralUtilities`PrettyGrid[
         GeneralUtilities`Code`PackagePrivate`info], Background -> White], 
       GeneralUtilities`Code`PackagePrivate`makeIFailItem["RawStack", {
          Pattern[GeneralUtilities`Code`PackagePrivate`ba, 
           Blank[ByteArray]], 
          Pattern[GeneralUtilities`Code`PackagePrivate`n, 
           Blank[]]}] := OpenerView[{
          HoldForm[
           Skeleton[
            StringForm[
            "`` raw stack frames", GeneralUtilities`Code`PackagePrivate`n]]], 
          Dynamic[
           GeneralUtilities`Code`PackagePrivate`formatInternalFailureStack[
           GeneralUtilities`Code`PackagePrivate`ba], TrackedSymbols :> {}]}], 
       GeneralUtilities`Code`PackagePrivate`makeIFailItem[
         Pattern[GeneralUtilities`Code`PackagePrivate`key, 
          Blank[]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`value, 
          Blank[]]] := BoxForm`SummaryItem[{
          Row[{GeneralUtilities`Code`PackagePrivate`key, ": "}], 
          GeneralUtilities`Code`PackagePrivate`value}], 
       GeneralUtilities`PrettyGrid[
         Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`PrettyGrid`PackagePrivate`$inner = False}, 
         GeneralUtilities`PrettyGrid`PackagePrivate`igrid[
         GeneralUtilities`PrettyGrid`PackagePrivate`e]], 
       GeneralUtilities`PrettyGrid`PackagePrivate`igrid[
         Association[]] := Association[], 
       GeneralUtilities`PrettyGrid`PackagePrivate`igrid[{}] := {}, 
       GeneralUtilities`PrettyGrid`PackagePrivate`igrid[
         Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`e, {
           BlankSequence[Rule]}]] := 
       GeneralUtilities`PrettyGrid`PackagePrivate`assocGrid[
         Association[GeneralUtilities`PrettyGrid`PackagePrivate`e], 
         GeneralUtilities`PrettyGrid`PackagePrivate`$inner], 
       GeneralUtilities`PrettyGrid`PackagePrivate`igrid[
         Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`a, 
          Blank[Association]]] := 
       GeneralUtilities`PrettyGrid`PackagePrivate`assocGrid[
        GeneralUtilities`PrettyGrid`PackagePrivate`a, 
         GeneralUtilities`PrettyGrid`PackagePrivate`$inner], 
       GeneralUtilities`PrettyGrid`PackagePrivate`igrid[
         Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`f, 
          Blank[Function]]] := 
       GeneralUtilities`PrettyForm[
        GeneralUtilities`PrettyGrid`PackagePrivate`f], 
       GeneralUtilities`PrettyGrid`PackagePrivate`igrid[
         Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`e, 
          Blank[]]] := If[
         FreeQ[GeneralUtilities`PrettyGrid`PackagePrivate`e, 
          Alternatives[Row, Column, Graphics, Grid]], 
         GeneralUtilities`PrettyGrid`PackagePrivate`e, 
         Style[
         GeneralUtilities`PrettyGrid`PackagePrivate`e, ShowStringCharacters -> 
          False]], GeneralUtilities`PrettyGrid`PackagePrivate`assocGrid[
         Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`assoc, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`PrettyGrid`PackagePrivate`inner, 
           Blank[]], False]] := 
       Block[{GeneralUtilities`PrettyGrid`PackagePrivate`$inner}, 
         GeneralUtilities`PrettyGrid`PackagePrivate`$inner = True; 
         GeneralUtilities`PackageScope`rowLabelGrid[
           Map[List, 
            Map[GeneralUtilities`PrettyGrid`PackagePrivate`igrid][
             Values[GeneralUtilities`PrettyGrid`PackagePrivate`assoc]]], 
           Keys[GeneralUtilities`PrettyGrid`PackagePrivate`assoc], 
           GeneralUtilities`PrettyGrid`PackagePrivate`inner]], 
       TagSetDelayed[GeneralUtilities`PrettyForm, 
        MakeBoxes[
         GeneralUtilities`PrettyForm[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`expr, 
           Blank[]]], StandardForm], 
        GeneralUtilities`PrettyFormBoxes[
        GeneralUtilities`Formatting`PackagePrivate`expr]], 
       Attributes[GeneralUtilities`PrettyFormBoxes] = {HoldAllComplete}, 
       GeneralUtilities`PrettyFormBoxes[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`expr, 
          Blank[]]] := 
       Block[{GeneralUtilities`PackageScope`$EmbedSymbolBoxStyles = True, 
          GeneralUtilities`PackageScope`$DefinitionHyperlinksEnabled = False}, 
         GeneralUtilities`PackageScope`rewriteDefBoxes[
          GeneralUtilities`MakeFormattedBoxes[
          GeneralUtilities`Formatting`PackagePrivate`expr]]], 
       GeneralUtilities`PrettyFormBoxes[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth = 
          GeneralUtilities`Formatting`PackagePrivate`n}, 
         GeneralUtilities`PrettyFormBoxes[
         GeneralUtilities`Formatting`PackagePrivate`expr]], 
       GeneralUtilities`PackageScope`$EmbedSymbolBoxStyles = False, 
       GeneralUtilities`PackageScope`$DefinitionHyperlinksEnabled = True, 
       Attributes[GeneralUtilities`MakeFormattedBoxes] = {HoldAllComplete}, 
       GeneralUtilities`MakeFormattedBoxes[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`r}, 
         GeneralUtilities`Formatting`PackagePrivate`r = 
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`e]; 
         GeneralUtilities`Formatting`PackagePrivate`r = 
          ReplaceRepeated[
           GeneralUtilities`Formatting`PackagePrivate`r, 
            GeneralUtilities`Formatting`PackagePrivate`cerow[
              Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
               BlankNullSequence[]]] :> 
            GeneralUtilities`Formatting`PackagePrivate`row[
             GeneralUtilities`Formatting`PackagePrivate`args]]; 
         GeneralUtilities`Formatting`PackagePrivate`r = 
          ReplaceAll[
           GeneralUtilities`Formatting`PackagePrivate`r, {
            GeneralUtilities`Formatting`PackagePrivate`$heavy$ -> Identity, 
             GeneralUtilities`Formatting`PackagePrivate`op -> Sequence}]; 
         Block[{GeneralUtilities`Formatting`PackagePrivate`scope := 
            GeneralUtilities`Formatting`PackagePrivate`scopeFunction, 
            GeneralUtilities`Formatting`PackagePrivate`$nt := 
            GeneralUtilities`Formatting`PackagePrivate`ntFunction, 
            GeneralUtilities`Formatting`PackagePrivate`$ont := 
            GeneralUtilities`Formatting`PackagePrivate`ontFunction, 
            GeneralUtilities`Formatting`PackagePrivate`$oont := 
            GeneralUtilities`Formatting`PackagePrivate`oontFunction, 
            GeneralUtilities`Formatting`PackagePrivate`seq := Sequence, 
            GeneralUtilities`Formatting`PackagePrivate`op := Identity}, 
           GeneralUtilities`Formatting`PackagePrivate`r = 
            GeneralUtilities`Formatting`PackagePrivate`r; Null]; 
         If[GeneralUtilities`PackageScope`$enableReflow, 
           GeneralUtilities`Formatting`PackagePrivate`r = 
           GeneralUtilities`Formatting`PackagePrivate`reflowNewtabs[
            GeneralUtilities`Formatting`PackagePrivate`r]]; 
         GeneralUtilities`Formatting`PackagePrivate`r = 
          ReplaceAll[
           GeneralUtilities`Formatting`PackagePrivate`r, 
            GeneralUtilities`Formatting`PackagePrivate`row -> 
            GeneralUtilities`Formatting`PackagePrivate`rowFunction]; 
         GeneralUtilities`Formatting`PackagePrivate`r = 
          ReplaceAll[
           GeneralUtilities`Formatting`PackagePrivate`r, 
            GeneralUtilities`Formatting`PackagePrivate`$newtab[
              Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
               Blank[]]] :> Sequence["\n", 
              GeneralUtilities`Formatting`PackagePrivate`tabs[
              GeneralUtilities`Formatting`PackagePrivate`n]]]; 
         GeneralUtilities`Formatting`PackagePrivate`r], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`fullbox] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[#] := "#", 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`args1, 
           BlankNullSequence[]]][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`args2, 
           BlankNullSequence[]]]] := 
       With[{GeneralUtilities`Formatting`PackagePrivate`headbox = 
          GeneralUtilities`Formatting`PackagePrivate`rowbox[
            GeneralUtilities`Formatting`PackagePrivate`fullbox[
            GeneralUtilities`Formatting`PackagePrivate`head], 
            GeneralUtilities`Formatting`PackagePrivate`m[
            GeneralUtilities`Formatting`PackagePrivate`fullbox, 
             GeneralUtilities`Formatting`PackagePrivate`args1]]}, 
         GeneralUtilities`Formatting`PackagePrivate`rowbox[
         GeneralUtilities`Formatting`PackagePrivate`headbox, 
          GeneralUtilities`Formatting`PackagePrivate`m[
          GeneralUtilities`Formatting`PackagePrivate`fullbox, 
           GeneralUtilities`Formatting`PackagePrivate`args2]]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
           Blank[Symbol]], Developer`HoldSymbolQ]] := 
       GeneralUtilities`Formatting`PackagePrivate`sn[
        GeneralUtilities`Formatting`PackagePrivate`head], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
           Blank[Real]], GeneralUtilities`Formatting`PackagePrivate`atomQ]] := 
       ToString[GeneralUtilities`Formatting`PackagePrivate`r, InputForm], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`i, 
           Blank[Integer]], 
          GeneralUtilities`Formatting`PackagePrivate`atomQ]] := If[
         Negative[GeneralUtilities`Formatting`PackagePrivate`i], StringJoin[
         "-", #]& , Identity][
         IntegerString[GeneralUtilities`Formatting`PackagePrivate`i]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[String]], GeneralUtilities`Formatting`PackagePrivate`atomQ]] := 
       ToBoxes[GeneralUtilities`Formatting`PackagePrivate`s], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
          Blank[GeneralUtilities`$Skeletonized$]]] := StyleBox[
         GeneralUtilities`Formatting`PackagePrivate`skellbox[
         GeneralUtilities`Formatting`PackagePrivate`s], Italic, Gray], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Apply[
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
             Blank[]], 
            GeneralUtilities`Formatting`PackagePrivate`syntaxFreeQ], 
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
             Blank[]], 
            GeneralUtilities`Formatting`PackagePrivate`syntaxFreeQ]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$weakSyntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Apply", "@@", GeneralUtilities`Formatting`PackagePrivate`f, 
           GeneralUtilities`Formatting`PackagePrivate`arg]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Apply[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
            Blank[]], {1}]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`f], "@@@", 
           GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`arg]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`lhs, 
            Blank[]] = Pattern[GeneralUtilities`Formatting`PackagePrivate`rhs, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`lhs], " ", "=", " ", 
           GeneralUtilities`Formatting`PackagePrivate`rhsbox[
           GeneralUtilities`Formatting`PackagePrivate`rhs]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
        Pattern[GeneralUtilities`Formatting`PackagePrivate`lhs, 
           Blank[]] := 
         GeneralUtilities`PackageScope`$KernelFunctionPlaceholder] := 
       GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`lhsbox[
         GeneralUtilities`Formatting`PackagePrivate`lhs], " ", ":=", " ", 
         StyleBox[
          RowBox[{"\[LeftSkeleton]", "kernel function", "\[RightSkeleton]"}], 
          Purple, Italic, ShowAutoStyles -> False, Selectable -> False, 
          Editable -> False]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`lhs, 
            Blank[]] := 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`rhs, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`lhsbox[
           GeneralUtilities`Formatting`PackagePrivate`lhs], " ", ":=", " ", 
           GeneralUtilities`Formatting`PackagePrivate`rhsbox[
           GeneralUtilities`Formatting`PackagePrivate`rhs]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          TagSetDelayed[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`tag, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`lhs, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`rhs, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`lhsbox[
           GeneralUtilities`Formatting`PackagePrivate`tag], " ", "/:", " ", 
           GeneralUtilities`Formatting`PackagePrivate`lhsbox[
           GeneralUtilities`Formatting`PackagePrivate`lhs], " ", ":=", " ", 
           GeneralUtilities`Formatting`PackagePrivate`rhsbox[
           GeneralUtilities`Formatting`PackagePrivate`rhs]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`$on$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOn[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`$off$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`$allow$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]], 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
        GeneralUtilities`Formatting`PackagePrivate`e], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`$heavy$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`$heavy$[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`PackageScope`$Highlighted$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := TemplateBox[{
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`e], FrameStyle -> None}, 
         "Highlighted"], GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, -
          Pattern[GeneralUtilities`Formatting`PackagePrivate`m, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`seq["-", 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`m]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] - Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          
          With[{GeneralUtilities`Formatting`PackagePrivate`b2 = -
             GeneralUtilities`Formatting`PackagePrivate`b}, 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a - 
            GeneralUtilities`Formatting`PackagePrivate`b2]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] + Condition[
            Alternatives[
             Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
              Blank[Integer]], 
             Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
              Blank[Real]]], 
            And[
             GeneralUtilities`Formatting`PackagePrivate`atomQ[
             GeneralUtilities`Formatting`PackagePrivate`b], 
             Negative[GeneralUtilities`Formatting`PackagePrivate`b]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          
          With[{GeneralUtilities`Formatting`PackagePrivate`b2 = -
             GeneralUtilities`Formatting`PackagePrivate`b}, 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a - 
            GeneralUtilities`Formatting`PackagePrivate`b2]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]]/Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Divide", "/", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[Power]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] - Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Subtract", "-", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
             Blank[Times], 
             Blank[Power]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] + Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Plus", "+", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
             Blank[Plus], 
             Blank[Times], 
             Blank[Power]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Times", "*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
             Blank[Times], 
             Blank[Power]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] - Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Subtract", "-", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
             Blank[Times], 
             Blank[Power]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]]/Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Divide", "/", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[Power]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, -
          Pattern[GeneralUtilities`Formatting`PackagePrivate`m, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`seq["-", 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`m]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`m, 
            Blank[]]^Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Power", "^", GeneralUtilities`Formatting`PackagePrivate`m, 
           GeneralUtilities`Formatting`PackagePrivate`n]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          ReplaceAll[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
             Blank[]], GeneralUtilities`Formatting`PackagePrivate`lightQ]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "ReplaceAll", "/.", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
             Blank[Rule], 
             Blank[RuleDelayed]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          ReplaceRepeated[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
             Blank[]], GeneralUtilities`Formatting`PackagePrivate`lightQ]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "ReplaceRepeated", "//.", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
             Blank[Rule], 
             Blank[RuleDelayed]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Slot[
          Condition[
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
             Blank[Integer]], 
            GeneralUtilities`Formatting`PackagePrivate`atomQ], 
           NonNegative[GeneralUtilities`Formatting`PackagePrivate`n]]]] := 
       StringJoin["#", 
         IntegerString[GeneralUtilities`Formatting`PackagePrivate`n]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Slot[
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
            Blank[String]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := If[
         StringMatchQ[GeneralUtilities`Formatting`PackagePrivate`s, 
          Repeated[WordCharacter]], 
         StringJoin["#", GeneralUtilities`Formatting`PackagePrivate`s], 
         StringJoin["#", 
          ToString[GeneralUtilities`Formatting`PackagePrivate`s, InputForm]]],
        GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`body, 
            Blank[]], GeneralUtilities`Formatting`PackagePrivate`lightQ]& ]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`argbox[
            GeneralUtilities`Formatting`PackagePrivate`$allow$[
            GeneralUtilities`Formatting`PackagePrivate`body, 
             Alternatives[
             GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern, 
              GeneralUtilities`Formatting`PackagePrivate`$mathPattern]]], 
           "&"]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] -> Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop["Rule", "\[Rule]", 
           GeneralUtilities`Formatting`PackagePrivate`$off$[
           GeneralUtilities`Formatting`PackagePrivate`a], 
           GeneralUtilities`Formatting`PackagePrivate`$heavy$[
           GeneralUtilities`Formatting`PackagePrivate`b]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[
         GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]] :> Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RuleDelayed", "\[RuleDelayed]", 
           GeneralUtilities`Formatting`PackagePrivate`$off$[
           GeneralUtilities`Formatting`PackagePrivate`a], 
           GeneralUtilities`Formatting`PackagePrivate`$heavy$[
           GeneralUtilities`Formatting`PackagePrivate`b]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[PatternTest][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
           Blank[]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[Symbol]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`binop[
        "PatternTest", "?", GeneralUtilities`Formatting`PackagePrivate`a, 
         GeneralUtilities`Formatting`PackagePrivate`b], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          RightComposition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "RightComposition", "/*", 
           GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`ternop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b, 
           GeneralUtilities`Formatting`PackagePrivate`c]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Composition[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop[
          "Composition", "@*", GeneralUtilities`Formatting`PackagePrivate`a, 
           GeneralUtilities`Formatting`PackagePrivate`b]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Not[
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`m, 
             Blank[]], 
            GeneralUtilities`Formatting`PackagePrivate`syntaxFreeQ]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row["!", 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`m]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          Part[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[Symbol]], 
           PatternTest[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`rest, 
             BlankNullSequence[]], 
            GeneralUtilities`Formatting`PackagePrivate`simplePartQ]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$weakSyntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a], 
           "\[LeftDoubleBracket]", 
           GeneralUtilities`Formatting`PackagePrivate`row[
            GeneralUtilities`Formatting`PackagePrivate`mrif[
            GeneralUtilities`Formatting`PackagePrivate`fullbox, 
             GeneralUtilities`Formatting`PackagePrivate`seq[",", " "], 
             GeneralUtilities`Formatting`PackagePrivate`rest]], 
           "\[RightDoubleBracket]"]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          PatternTest[
           And[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
             Blank[]], 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
             Blank[]]], GeneralUtilities`Formatting`PackagePrivate`lightQ]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$weakSyntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop["And", "&&", 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`a, 
            Alternatives[
            GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern, 
             Blank[Not]]], 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
            GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern, 
             Blank[Not]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          PatternTest[
           Or[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
             Blank[]], 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
             Blank[]]], GeneralUtilities`Formatting`PackagePrivate`lightQ]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$weakSyntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`binop["Or", "||", 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`a, 
            Alternatives[
            GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern, 
             Blank[Not]]], 
           GeneralUtilities`Formatting`PackagePrivate`$allow$[
           GeneralUtilities`Formatting`PackagePrivate`b, 
            Alternatives[
            GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern, 
             Blank[Not]]]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Condition][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
           Blank[]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`binop[
        "Condition", "/;", GeneralUtilities`Formatting`PackagePrivate`a, 
         GeneralUtilities`Formatting`PackagePrivate`$on$[
          GeneralUtilities`Formatting`PackagePrivate`$allow$[
          GeneralUtilities`Formatting`PackagePrivate`b, 
           Alternatives[
            Blank[And], 
            Blank[Or], 
            Blank[Not], 
            GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern]]]],
        GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Alternatives][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           GeneralUtilities`Formatting`PackagePrivate`simplePatternQ], 
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           GeneralUtilities`Formatting`PackagePrivate`simplePatternQ]]] := 
       GeneralUtilities`Formatting`PackagePrivate`binop["Alternatives", "|", 
         GeneralUtilities`Formatting`PackagePrivate`$off$[
         GeneralUtilities`Formatting`PackagePrivate`a], 
         GeneralUtilities`Formatting`PackagePrivate`$off$[
         GeneralUtilities`Formatting`PackagePrivate`b]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Alternatives][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
            Blank[]], 
           GeneralUtilities`Formatting`PackagePrivate`simplePatternQ], 
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[]], 
           GeneralUtilities`Formatting`PackagePrivate`simplePatternQ], 
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
            Blank[]], 
           GeneralUtilities`Formatting`PackagePrivate`simplePatternQ]]] := 
       GeneralUtilities`Formatting`PackagePrivate`ternop["Alternatives", "|", 
         GeneralUtilities`Formatting`PackagePrivate`$off$[
         GeneralUtilities`Formatting`PackagePrivate`a], 
         GeneralUtilities`Formatting`PackagePrivate`$off$[
         GeneralUtilities`Formatting`PackagePrivate`b], 
         GeneralUtilities`Formatting`PackagePrivate`$off$[
         GeneralUtilities`Formatting`PackagePrivate`c]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Blank][]] := "_", 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Blank][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := 
       StringJoin["_", 
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`sym]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[BlankSequence][]] := "__", 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[BlankSequence][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := 
       StringJoin["__", 
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`sym]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[BlankNullSequence][]] := "___", 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[BlankNullSequence][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := 
       StringJoin["___", 
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`sym]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Repeated][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
         If[
          GeneralUtilities`Formatting`PackagePrivate`atomQ[
          GeneralUtilities`Formatting`PackagePrivate`a], 
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a], ".."], 
          GeneralUtilities`Formatting`PackagePrivate`stdbox[
          Repeated, GeneralUtilities`Formatting`PackagePrivate`a]]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[RepeatedNull][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
         If[
          GeneralUtilities`Formatting`PackagePrivate`atomQ[
          GeneralUtilities`Formatting`PackagePrivate`a], 
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a], "..."], 
          GeneralUtilities`Formatting`PackagePrivate`stdbox[
          RepeatedNull, GeneralUtilities`Formatting`PackagePrivate`a]]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Verbatim[Pattern][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`bindsym, 
           Blank[Symbol]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`other, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
         GeneralUtilities`Formatting`PackagePrivate`patternBox[
         GeneralUtilities`Formatting`PackagePrivate`bindsym, 
          GeneralUtilities`Formatting`PackagePrivate`other]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Span[
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`parts, 
            BlankSequence[]], 
           GeneralUtilities`Formatting`PackagePrivate`simplePartQ]]] := 
       GeneralUtilities`Formatting`PackagePrivate`spanBox[
        GeneralUtilities`Formatting`PackagePrivate`parts], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          MessageName[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`str, 
            Blank[String]]]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          StringJoin[
           GeneralUtilities`Formatting`PackagePrivate`sn[
           GeneralUtilities`Formatting`PackagePrivate`sym], "::", 
           GeneralUtilities`Formatting`PackagePrivate`str]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[{
          Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
           BlankNullSequence[]]}] := 
       GeneralUtilities`Formatting`PackagePrivate`row["{", 
         GeneralUtilities`Formatting`PackagePrivate`clauses[
          GeneralUtilities`Formatting`PackagePrivate`m[
          GeneralUtilities`Formatting`PackagePrivate`fullbox, 
           GeneralUtilities`Formatting`PackagePrivate`args]], "}"], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Association[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`rules, 
           BlankNullSequence[Rule]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["<|", 
         GeneralUtilities`Formatting`PackagePrivate`clauses[
          GeneralUtilities`Formatting`PackagePrivate`m[
          GeneralUtilities`Formatting`PackagePrivate`fullbox, 
           GeneralUtilities`Formatting`PackagePrivate`rules]], "|>"], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Block[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`vars, 
           Blank[List]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`body, 
           Blank[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["Block", "[", 
         GeneralUtilities`Formatting`PackagePrivate`clauses[
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`vars], 
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`body]], "]"], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`sw, 
          Blank[Switch]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$i = 0, 
          GeneralUtilities`Formatting`PackagePrivate`$len = Length[
            Unevaluated[GeneralUtilities`Formatting`PackagePrivate`sw]]}, If[
           Or[GeneralUtilities`Formatting`PackagePrivate`$len < 3, 
            Not[
             OddQ[GeneralUtilities`Formatting`PackagePrivate`$len]]], 
           Return[
            GeneralUtilities`Formatting`PackagePrivate`box2[
            GeneralUtilities`Formatting`PackagePrivate`sw]]]; 
         GeneralUtilities`Formatting`PackagePrivate`row["Switch", "[", 
           GeneralUtilities`Formatting`PackagePrivate`scope[
            Apply[GeneralUtilities`Formatting`PackagePrivate`row, 
             Map[GeneralUtilities`Formatting`PackagePrivate`switchArg, 
              Apply[Hold, 
               Unevaluated[GeneralUtilities`Formatting`PackagePrivate`sw]]]]],
            GeneralUtilities`Formatting`PackagePrivate`$nt, "]"]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`sw, 
          Blank[Which]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$i = 1, 
          GeneralUtilities`Formatting`PackagePrivate`$len = Length[
            Unevaluated[GeneralUtilities`Formatting`PackagePrivate`sw]]}, If[
           Or[GeneralUtilities`Formatting`PackagePrivate`$len < 2, 
            Not[
             EvenQ[GeneralUtilities`Formatting`PackagePrivate`$len]]], 
           Return[
            GeneralUtilities`Formatting`PackagePrivate`box2[
            GeneralUtilities`Formatting`PackagePrivate`sw]]]; 
         GeneralUtilities`Formatting`PackagePrivate`row["Which", "[", 
           GeneralUtilities`Formatting`PackagePrivate`scope[
            Apply[GeneralUtilities`Formatting`PackagePrivate`row, 
             Map[GeneralUtilities`Formatting`PackagePrivate`switchArg, 
              Apply[Hold, 
               Unevaluated[GeneralUtilities`Formatting`PackagePrivate`sw]]]]],
            GeneralUtilities`Formatting`PackagePrivate`$nt, "]"]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`statements, 
            BlankSequence[]], 
           GeneralUtilities`Formatting`PackagePrivate`longFixQ]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`cerow[
           GeneralUtilities`Formatting`PackagePrivate`mfml[
           GeneralUtilities`Formatting`PackagePrivate`cef, 
            GeneralUtilities`Formatting`PackagePrivate`cem, 
            GeneralUtilities`Formatting`PackagePrivate`cel, 
            GeneralUtilities`Formatting`PackagePrivate`statements]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
           Blank[Symbol]], Developer`HoldSymbolQ][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
            Blank[]], 
           GeneralUtilities`Formatting`PackagePrivate`syntaxFreeQ]]] := If[
         And[
         GeneralUtilities`Formatting`PackagePrivate`$syntax, 
          GeneralUtilities`Formatting`PackagePrivate`$weakSyntax, 
          Not[
           MemberQ[
           GeneralUtilities`Formatting`PackagePrivate`$uniboxBlacklist, 
            HoldPattern[GeneralUtilities`Formatting`PackagePrivate`head]]], 
          Not[
           StringMatchQ[
            GeneralUtilities`Formatting`PackagePrivate`sn[
            GeneralUtilities`Formatting`PackagePrivate`head], {
            "*Q", "*`$*"}]]], 
         GeneralUtilities`Formatting`PackagePrivate`unibox[
         GeneralUtilities`Formatting`PackagePrivate`head, 
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`arg]], 
         GeneralUtilities`Formatting`PackagePrivate`stdbox[
         GeneralUtilities`Formatting`PackagePrivate`head, 
          GeneralUtilities`Formatting`PackagePrivate`arg]], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`other, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`box2[
        GeneralUtilities`Formatting`PackagePrivate`other], 
       GeneralUtilities`Formatting`PackagePrivate`fullbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`$lhs, 
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`statements, 
            BlankSequence[]], 
           GeneralUtilities`Formatting`PackagePrivate`longFixQ]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$syntax, 
         GeneralUtilities`Formatting`PackagePrivate`op[
          GeneralUtilities`Formatting`PackagePrivate`cerow[
           GeneralUtilities`Formatting`PackagePrivate`mfml[
           GeneralUtilities`Formatting`PackagePrivate`cef, 
            GeneralUtilities`Formatting`PackagePrivate`cem, 
            GeneralUtilities`Formatting`PackagePrivate`cel, 
            GeneralUtilities`Formatting`PackagePrivate`statements]]], 
         GeneralUtilities`Formatting`PackagePrivate`box2[
         GeneralUtilities`Formatting`PackagePrivate`$lhs]], 
       GeneralUtilities`Formatting`PackagePrivate`rowbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := (
        GeneralUtilities`Formatting`PackagePrivate`$weakSyntax = 
         GeneralUtilities`Formatting`PackagePrivate`$weakSyntaxDefault; 
        GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`head, "[", 
          GeneralUtilities`Formatting`PackagePrivate`clauses[
          GeneralUtilities`Formatting`PackagePrivate`args], "]"]), 
       GeneralUtilities`Formatting`PackagePrivate`$weakSyntax = True, 
       GeneralUtilities`Formatting`PackagePrivate`$weakSyntaxDefault = True, 
       GeneralUtilities`Formatting`PackagePrivate`clauses[] := 
       GeneralUtilities`Formatting`PackagePrivate`seq[], 
       GeneralUtilities`Formatting`PackagePrivate`clauses[
         GeneralUtilities`Formatting`PackagePrivate`op[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
           Blank[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`clauses[
        GeneralUtilities`Formatting`PackagePrivate`t], 
       GeneralUtilities`Formatting`PackagePrivate`clauses[
         GeneralUtilities`Formatting`PackagePrivate`seq[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
           BlankNullSequence[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`clauses[
        GeneralUtilities`Formatting`PackagePrivate`args], 
       GeneralUtilities`Formatting`PackagePrivate`clauses[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
          Blank[]]] := If[
         GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
         GeneralUtilities`Formatting`PackagePrivate`arg], 
         GeneralUtilities`Formatting`PackagePrivate`scope[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`seq[
           GeneralUtilities`Formatting`PackagePrivate`$nt, 
            GeneralUtilities`Formatting`PackagePrivate`arg, 
            GeneralUtilities`Formatting`PackagePrivate`$ont]]], 
         GeneralUtilities`Formatting`PackagePrivate`arg], 
       GeneralUtilities`Formatting`PackagePrivate`clauses[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := If[
         GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[{
          GeneralUtilities`Formatting`PackagePrivate`args}], 
         GeneralUtilities`Formatting`PackagePrivate`scope[
          GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`mml[
            Function[GeneralUtilities`Formatting`PackagePrivate`t, 
             GeneralUtilities`Formatting`PackagePrivate`seq[
             GeneralUtilities`Formatting`PackagePrivate`$nt, 
              GeneralUtilities`Formatting`PackagePrivate`t, ","]], 
            Function[GeneralUtilities`Formatting`PackagePrivate`t, 
             GeneralUtilities`Formatting`PackagePrivate`seq[
             GeneralUtilities`Formatting`PackagePrivate`$nt, 
              GeneralUtilities`Formatting`PackagePrivate`t, 
              GeneralUtilities`Formatting`PackagePrivate`$ont]], 
            GeneralUtilities`Formatting`PackagePrivate`args]]], 
         GeneralUtilities`Formatting`PackagePrivate`row[
          GeneralUtilities`Formatting`PackagePrivate`riff[
           GeneralUtilities`Formatting`PackagePrivate`seq[",", " "], 
           GeneralUtilities`Formatting`PackagePrivate`args]]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`seq] = {Flat}, 
       GeneralUtilities`Formatting`PackagePrivate`op[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`o, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`op]]] := 
       GeneralUtilities`Formatting`PackagePrivate`o, 
       GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
         GeneralUtilities`Formatting`PackagePrivate`op[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
        GeneralUtilities`Formatting`PackagePrivate`e], 
       GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
         GeneralUtilities`Formatting`PackagePrivate`$heavy$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := False, 
       GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
         Blank[String]] := False, 
       GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := Or[
         Or[
         LeafCount[GeneralUtilities`Formatting`PackagePrivate`e] >= 40, 
          Depth[GeneralUtilities`Formatting`PackagePrivate`e] >= 12, 
          GeneralUtilities`Formatting`PackagePrivate`strlen[
           GeneralUtilities`Formatting`PackagePrivate`e] > 
          GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth - 20], 
         Count[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`scope], Infinity] >= 
         1], GeneralUtilities`Formatting`PackagePrivate`strlen[","] = 2, 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
         GeneralUtilities`Formatting`PackagePrivate`$heavy$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
        GeneralUtilities`Formatting`PackagePrivate`e], 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`str, 
          Blank[String]]] := If[
         Or[GeneralUtilities`Formatting`PackagePrivate`$countContextLen, 
          StringFreeQ[GeneralUtilities`Formatting`PackagePrivate`str, "`"]], 
         StringLength[GeneralUtilities`Formatting`PackagePrivate`str], 
         GeneralUtilities`Formatting`PackagePrivate`strlen[
          GeneralUtilities`Formatting`PackagePrivate`str] = 
         StringLength[GeneralUtilities`Formatting`PackagePrivate`str] - Part[
           StringPosition[
           GeneralUtilities`Formatting`PackagePrivate`str, "`"], -1, 1]], 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
         Alternatives[
         GeneralUtilities`Formatting`PackagePrivate`$ont, 
          GeneralUtilities`Formatting`PackagePrivate`$nt, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]]] := 
       Infinity, GeneralUtilities`Formatting`PackagePrivate`strlen[
         Alternatives[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`row]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`seq]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`op]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[List]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`cerow]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`scope]]]] := Total[
         Map[GeneralUtilities`Formatting`PackagePrivate`strlen, 
          Apply[List, GeneralUtilities`Formatting`PackagePrivate`s]]], 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
         TemplateBox[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
           Blank[]], 
          BlankNullSequence[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
        GeneralUtilities`Formatting`PackagePrivate`b], 
       GeneralUtilities`Formatting`PackagePrivate`strlen[
         Blank[]] := 0, 
       GeneralUtilities`Formatting`PackagePrivate`$countContextLen = False, 
       GeneralUtilities`Formatting`PackagePrivate`scope[] := 
       GeneralUtilities`Formatting`PackagePrivate`seq[], 
       GeneralUtilities`Formatting`PackagePrivate`scope[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`rest, 
          BlankSequence[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`scope[
         GeneralUtilities`Formatting`PackagePrivate`seq[
         GeneralUtilities`Formatting`PackagePrivate`f, 
          GeneralUtilities`Formatting`PackagePrivate`rest]], 
       GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth = 80, 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`mml] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`mml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`last, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[
         Apply[Sequence, 
          GeneralUtilities`Formatting`PackagePrivate`m[
          GeneralUtilities`Formatting`PackagePrivate`fm, 
           GeneralUtilities`Formatting`PackagePrivate`args]], 
         GeneralUtilities`Formatting`PackagePrivate`fl[
         GeneralUtilities`Formatting`PackagePrivate`last]], 
       GeneralUtilities`Formatting`PackagePrivate`mml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`last, 
          BlankSequence[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`fl[
        GeneralUtilities`Formatting`PackagePrivate`last], 
       GeneralUtilities`Formatting`PackagePrivate`mml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`m] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`m[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`f[
        GeneralUtilities`Formatting`PackagePrivate`a], 
       GeneralUtilities`Formatting`PackagePrivate`m[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[], 
       GeneralUtilities`Formatting`PackagePrivate`m[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       Apply[GeneralUtilities`Formatting`PackagePrivate`seq, 
         Map[GeneralUtilities`Formatting`PackagePrivate`f, 
          Unevaluated[{GeneralUtilities`Formatting`PackagePrivate`args}]]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`riff] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`riff[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`riff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       Apply[GeneralUtilities`Formatting`PackagePrivate`seq, 
         Riffle[{GeneralUtilities`Formatting`PackagePrivate`args}, 
          GeneralUtilities`Formatting`PackagePrivate`riff]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`sn] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`sn[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       If[Context[GeneralUtilities`Formatting`PackagePrivate`e] == "System`", 
         SymbolName[
          Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e]], 
         StringJoin[
          Context[GeneralUtilities`Formatting`PackagePrivate`e], 
          SymbolName[
           Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e]]]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`atomQ] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`atomQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]]] := 
       Developer`HoldAtomQ[GeneralUtilities`Formatting`PackagePrivate`a], 
       GeneralUtilities`Formatting`PackagePrivate`atomQ[
         BlankNullSequence[]] := False, 
       GeneralUtilities`Formatting`PackagePrivate`skellbox[
         GeneralUtilities`$Skeletonized$[String, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`len, 
           Blank[]]]] := StringJoin["\"\[LeftAngleBracket]\[Ellipsis]", 
         IntegerString[GeneralUtilities`Formatting`PackagePrivate`len], 
         "\[Ellipsis]\[RightAngleBracket]\""], 
       GeneralUtilities`Formatting`PackagePrivate`skellbox[
         GeneralUtilities`$Skeletonized$[List, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`dims, 
           Blank[List]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["{", 
         ToBoxes[
          Apply[
          AngleBracket, GeneralUtilities`Formatting`PackagePrivate`dims]], 
         "}"], GeneralUtilities`Formatting`PackagePrivate`skellbox[
         GeneralUtilities`$Skeletonized$[NumericArray, 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`dims, 
           Blank[List]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`type, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`row[
         ToBoxes[NumericArray], "[", 
         ToBoxes[
          Apply[
          AngleBracket, GeneralUtilities`Formatting`PackagePrivate`dims]], 
         ",", 
         ToBoxes[GeneralUtilities`Formatting`PackagePrivate`type], "]"], 
       GeneralUtilities`Formatting`PackagePrivate`skellbox[
         GeneralUtilities`$Skeletonized$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
           Blank[]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
           Blank[Integer]]]] := GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`head], "[", 
         StringJoin[
          IntegerString[GeneralUtilities`Formatting`PackagePrivate`n], 
          " bytes"], "]"], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`syntaxFreeQ] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`syntaxFreeQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := FreeQ[
         Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e], 
         GeneralUtilities`Formatting`PackagePrivate`$syntaxHeads, {
         0, Infinity}], 
       GeneralUtilities`Formatting`PackagePrivate`$syntaxHeads = 
       Alternatives[
        Alternatives, Apply, Set, SetDelayed, TagSetDelayed, Times, Plus, 
         Subtract, Divide, Minus, Power, ReplaceAll, ReplaceRepeated, 
         Function, Rule, RuleDelayed, PatternTest, RightComposition, 
         Composition, Not, Part, And, Or, Condition, Repeated, RepeatedNull, 
         MessageName, CompoundExpression], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`binop] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`binop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`sep, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`a2 = 
          GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`a], 
          GeneralUtilities`Formatting`PackagePrivate`b2 = 
          GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`b]}, 
         If[
          Or[
           GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
           GeneralUtilities`Formatting`PackagePrivate`a2], 
           GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
           GeneralUtilities`Formatting`PackagePrivate`b2]], 
          GeneralUtilities`Formatting`PackagePrivate`rowbox[
          GeneralUtilities`Formatting`PackagePrivate`head, 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a], 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`b]], 
          GeneralUtilities`Formatting`PackagePrivate`row[
          GeneralUtilities`Formatting`PackagePrivate`a2, " ", 
           GeneralUtilities`Formatting`PackagePrivate`sep, " ", 
           GeneralUtilities`Formatting`PackagePrivate`b2]]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`argbox] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`$heavy$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`$heavy$[
         GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`$off$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
         GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`$on$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]]]] := GeneralUtilities`Formatting`PackagePrivate`syntaxOn[
         GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`$allow$[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`patt, 
           Blank[]]]] := If[
         MatchQ[
          Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e], 
          GeneralUtilities`Formatting`PackagePrivate`patt], 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e], 
         GeneralUtilities`Formatting`PackagePrivate`argbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`argbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$weakSyntax = False}, 
         Replace[
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`e], {
          GeneralUtilities`Formatting`PackagePrivate`op[
             Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
              Blank[]]] :> 
           GeneralUtilities`Formatting`PackagePrivate`row[
            "(", GeneralUtilities`Formatting`PackagePrivate`t, ")"], 
           GeneralUtilities`Formatting`PackagePrivate`cerow[
             Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
              BlankNullSequence[]]] :> 
           GeneralUtilities`Formatting`PackagePrivate`row["(", 
             GeneralUtilities`Formatting`PackagePrivate`scope[
             GeneralUtilities`Formatting`PackagePrivate`$nt, 
              GeneralUtilities`Formatting`PackagePrivate`args, 
              GeneralUtilities`Formatting`PackagePrivate`$ont], ")"]}]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`syntaxOff] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$syntax = False}, 
         GeneralUtilities`Formatting`PackagePrivate`e], 
       GeneralUtilities`Formatting`PackagePrivate`$syntax = True, 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`syntaxOn] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`syntaxOn[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$syntax = True}, 
         GeneralUtilities`Formatting`PackagePrivate`e], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`box2] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`box2[
         Condition[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`d, 
           Blank[Dispatch]], 
          AtomQ[
           Unevaluated[GeneralUtilities`Formatting`PackagePrivate`d]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["Dispatch", "[", 
         Apply[GeneralUtilities`Formatting`PackagePrivate`fullbox, {
           Normal[GeneralUtilities`Formatting`PackagePrivate`d]}], "]"], 
       GeneralUtilities`Formatting`PackagePrivate`box2[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`dispatch, 
          Blank[Dispatch]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["Dispatch", "[", 
         ToBoxes[
          AngleBracket[
           Length[
            Normal[GeneralUtilities`Formatting`PackagePrivate`dispatch]]]], 
         "]"], GeneralUtilities`Formatting`PackagePrivate`box2[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bag, 
          Blank[Internal`Bag]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["Internal`Bag", "[", 
         ToBoxes[
          AngleBracket[
           Internal`BagLength[
           GeneralUtilities`Formatting`PackagePrivate`bag]]], "]"], 
       GeneralUtilities`Formatting`PackagePrivate`box2[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`sa, 
           Blank[SparseArray]], System`Private`HoldNoEntryQ]] := 
       GeneralUtilities`Formatting`PackagePrivate`row["SparseArray", "[", 
         ToBoxes[
          Apply[AngleBracket, 
           Dimensions[GeneralUtilities`Formatting`PackagePrivate`sa]]], "]"], 
       GeneralUtilities`Formatting`PackagePrivate`box2[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]][
          Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
           BlankNullSequence[]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`stdbox[
        GeneralUtilities`Formatting`PackagePrivate`head, 
         GeneralUtilities`Formatting`PackagePrivate`args], 
       GeneralUtilities`Formatting`PackagePrivate`box2[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]]] := 
       GeneralUtilities`MakePlainBoxes[
        GeneralUtilities`Formatting`PackagePrivate`a], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`stdbox] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`stdbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`rowbox[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`head], 
         GeneralUtilities`Formatting`PackagePrivate`m[
         GeneralUtilities`Formatting`PackagePrivate`fullbox, 
          GeneralUtilities`Formatting`PackagePrivate`args]], 
       Attributes[GeneralUtilities`MakePlainBoxes] = {HoldAllComplete}, 
       GeneralUtilities`MakePlainBoxes[
         PatternTest[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`sym, 
           Blank[Symbol]], Developer`HoldSymbolQ]] := ToString[
         Unevaluated[GeneralUtilities`Debugging`PackagePrivate`sym], 
         InputForm], GeneralUtilities`MakePlainBoxes[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]]] := 
       Block[{BoxForm`$UseTextFormattingWhenEvaluating = True, 
          BoxForm`UseTextFormattingQ = True, BoxForm`UseIcons = False, 
          AccountingForm, BaseForm, ColumnForm, DisplayForm, MatrixForm, 
          NumberForm, OutputForm, StandardForm, InputForm, FullForm, 
          TraditionalForm, HoldForm, PaddedForm, PrintForm, QuantityForm, 
          ScientificForm, SequenceForm, StringForm, TableForm, TreeForm, 
          DateObject, Entity, TimeObject, Failure, Quantity, Power, Sqrt, 
          Times, Image, Shallow, ColorDataFunction, BoxForm`ArrangeSummaryBox,
           LibraryFunction, ClassifierFunction, PredictorFunction, 
          SearchIndexObject, ContentObject, Dataset}, 
         SetAttributes[BoxForm`ArrangeSummaryBox, HoldAll]; 
         BoxForm`ArrangeSummaryBox[
            Blank[], 
            Pattern[GeneralUtilities`Debugging`PackagePrivate`head, 
             Blank[Symbol]][
             Pattern[GeneralUtilities`Debugging`PackagePrivate`body, 
              BlankNullSequence[]]], 
            BlankNullSequence[]] := 
          Block[{GeneralUtilities`Debugging`PackagePrivate`head}, 
            MakeBoxes[
             GeneralUtilities`Debugging`PackagePrivate`head[
             GeneralUtilities`Debugging`PackagePrivate`body]]]; 
         BoxForm`ArrangeSummaryBox[
            Blank[], 
            Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
             Blank[]], 
            BlankNullSequence[]] := ToExpression[
            ToString[
            GeneralUtilities`Debugging`PackagePrivate`expr, InputForm], 
            InputForm, MakeBoxes]; ReplaceAll[
           Apply[MakeBoxes, 
            GeneralUtilities`Debugging`PackagePrivate`preprocessForPlainForm[
            GeneralUtilities`Debugging`PackagePrivate`e]], {FractionBox[
              Pattern[GeneralUtilities`Debugging`PackagePrivate`a, 
               Blank[]], 
              Pattern[GeneralUtilities`Debugging`PackagePrivate`b, 
               Blank[]]] :> 
            RowBox[{GeneralUtilities`Debugging`PackagePrivate`a, "/", 
               GeneralUtilities`Debugging`PackagePrivate`b}], Condition[
              RowBox[{
                Pattern[GeneralUtilities`Debugging`PackagePrivate`left, 
                 Blank[]], "\[Ellipsis]", 
                Pattern[GeneralUtilities`Debugging`PackagePrivate`right, 
                 Blank[]]}], 
              And[
               GeneralUtilities`QuotedStringQ[
               GeneralUtilities`Debugging`PackagePrivate`left], 
               GeneralUtilities`QuotedStringQ[
               GeneralUtilities`Debugging`PackagePrivate`right]]] :> 
            StringJoin[
              StringDrop[GeneralUtilities`Debugging`PackagePrivate`left, -1], 
              "\[Ellipsis]", 
              StringDrop[
              GeneralUtilities`Debugging`PackagePrivate`right, 1]]}]], 
       GeneralUtilities`MakePlainBoxes[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          BlankNullSequence[]]] := GeneralUtilities`MakePlainBoxes[
         GeneralUtilities`PackageScope`HoldSequenceForm[
         GeneralUtilities`Debugging`PackagePrivate`e]], 
       Attributes[
        GeneralUtilities`Debugging`PackagePrivate`preprocessForPlainForm] = {
        HoldAllComplete}, 
       GeneralUtilities`Debugging`PackagePrivate`preprocessForPlainForm[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]]] := ReplaceAll[
         ReplaceRepeated[
          HoldComplete[GeneralUtilities`Debugging`PackagePrivate`e], {
          GeneralUtilities`PackageScope`HoldSequenceForm[
             Pattern[GeneralUtilities`Debugging`PackagePrivate`x, 
              Blank[]]] :> GeneralUtilities`Debugging`PackagePrivate`x, 
           GeneralUtilities`PackageScope`HoldSequenceForm[] :> Sequence[], 
           GeneralUtilities`PackageScope`HoldSequenceForm[
             Pattern[GeneralUtilities`Debugging`PackagePrivate`x, 
              BlankSequence[]]] :> 
           Sequence[GeneralUtilities`Debugging`PackagePrivate`x]}], {
         Skeleton -> GeneralUtilities`PackageScope`UnescapedForm[Skeleton], 
          GeneralUtilities`PackageScope`ShortForm -> Short, Short -> 
          GeneralUtilities`PackageScope`UnescapedForm[Short], PatternTest[
            Pattern[GeneralUtilities`Debugging`PackagePrivate`b, 
             Blank[NumericArray]], Developer`NumericArrayQHold] :> 
          RuleCondition[
            GeneralUtilities`PackageScope`UnescapedForm[NumericArray][
             Apply[AngleBracket, 
              Dimensions[GeneralUtilities`Debugging`PackagePrivate`b]], 
             NumericArrayType[GeneralUtilities`Debugging`PackagePrivate`b]]], 
          Condition[
            Pattern[GeneralUtilities`Debugging`PackagePrivate`b, 
             Blank[ByteArray]], 
            ByteArrayQ[
             Unevaluated[GeneralUtilities`Debugging`PackagePrivate`b]]] :> 
          RuleCondition[
            GeneralUtilities`PackageScope`UnescapedForm[ByteArray][
             Apply[AngleBracket, 
              Dimensions[GeneralUtilities`Debugging`PackagePrivate`b]]]]}], 
       Attributes[GeneralUtilities`PackageScope`HoldSequenceForm] = {HoldAll}, 
       TagSetDelayed[GeneralUtilities`PackageScope`HoldSequenceForm, 
        MakeBoxes[
         GeneralUtilities`PackageScope`HoldSequenceForm[], StandardForm], 
        RowBox[{"Sequence", "[", "]"}]], 
       TagSetDelayed[GeneralUtilities`PackageScope`HoldSequenceForm, 
        MakeBoxes[
         GeneralUtilities`PackageScope`HoldSequenceForm[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
           Blank[]]], StandardForm], 
        MakeBoxes[
         HoldForm[GeneralUtilities`Debugging`PackagePrivate`args]]], 
       TagSetDelayed[GeneralUtilities`PackageScope`HoldSequenceForm, 
        MakeBoxes[
         GeneralUtilities`PackageScope`HoldSequenceForm[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
           BlankSequence[]]], StandardForm], 
        RowBox[{"Sequence", "[", 
          Apply[Sequence, 
           Riffle[
            Map[MakeBoxes, 
             Map[HoldForm, 
              Unevaluated[{GeneralUtilities`Debugging`PackagePrivate`args}]]],
             ","]], "]"}]], 
       Attributes[GeneralUtilities`PackageScope`UnescapedForm] = {
        HoldAllComplete}, 
       TagSetDelayed[GeneralUtilities`PackageScope`UnescapedForm, 
        MakeBoxes[
         GeneralUtilities`PackageScope`UnescapedForm[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`inner, 
           Blank[]]], StandardForm], 
        MakeBoxes[GeneralUtilities`Debugging`PackagePrivate`inner]], 
       TagSetDelayed[GeneralUtilities`PackageScope`ShortForm, 
        MakeBoxes[
         GeneralUtilities`PackageScope`ShortForm[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
           Blank[]]], StandardForm], 
        MakeBoxes[
         Short[GeneralUtilities`Debugging`PackagePrivate`expr, 6]]], 
       TagSetDelayed[GeneralUtilities`PackageScope`ShortForm, 
        MakeBoxes[
         GeneralUtilities`PackageScope`ShortForm[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
           Blank[]], 
          Pattern[GeneralUtilities`Debugging`PackagePrivate`n, 
           Blank[]]], StandardForm], 
        MakeBoxes[
         Short[
         GeneralUtilities`Debugging`PackagePrivate`expr, 
          GeneralUtilities`Debugging`PackagePrivate`n]]], 
       GeneralUtilities`QuotedStringQ[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`s, 
          Blank[]]] := 
       And[StringLength[GeneralUtilities`Debugging`PackagePrivate`s] >= 2, 
         StringDrop[GeneralUtilities`Debugging`PackagePrivate`s, {2, -2}] == 
         "\"\""], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`rhsbox] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`rhsbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Alternatives[Catch, Quiet, Check]][
          Alternatives[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[Block]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[Module]]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`head], " ", "@", " ", 
         GeneralUtilities`Formatting`PackagePrivate`rhsbox[
         GeneralUtilities`Formatting`PackagePrivate`b]], 
       GeneralUtilities`Formatting`PackagePrivate`rhsbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Alternatives[Catch, Quiet, Check]][
          Alternatives[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[Block]], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
            Blank[Module]]], 
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`other, 
            Blank[]], GeneralUtilities`Formatting`PackagePrivate`lightQ]]] := 
       GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`head], "[", 
         GeneralUtilities`Formatting`PackagePrivate`rhsbox[
         GeneralUtilities`Formatting`PackagePrivate`b], ",", " ", 
         GeneralUtilities`Formatting`PackagePrivate`$ont, 
         GeneralUtilities`Formatting`PackagePrivate`delnt[
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`other]], "]"], 
       GeneralUtilities`Formatting`PackagePrivate`rhsbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := Replace[
         Replace[
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`e], 
          GeneralUtilities`Formatting`PackagePrivate`op[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
             Blank[]]] :> GeneralUtilities`Formatting`PackagePrivate`t], 
         GeneralUtilities`Formatting`PackagePrivate`cerow[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
            BlankNullSequence[]]] :> 
         GeneralUtilities`Formatting`PackagePrivate`row["(", 
           GeneralUtilities`Formatting`PackagePrivate`scope[
           GeneralUtilities`Formatting`PackagePrivate`$nt, 
            GeneralUtilities`Formatting`PackagePrivate`args, 
            GeneralUtilities`Formatting`PackagePrivate`$ont], ")"]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`lightQ] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`lightQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := Not[
         GeneralUtilities`Formatting`PackagePrivate`heavyQ[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`heavyQ] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`heavyQ[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
           Blank[]], Developer`HoldAtomQ]] := False, 
       GeneralUtilities`Formatting`PackagePrivate`heavyQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := Or[
         Or[LeafCount[
            Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e]] >= 12, 
          Depth[
            Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e]] >= 4, 
          Length[
            Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e]] >= 6], 
         Count[
           Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e], 
           Blank[CompoundExpression]] > 0], 
       GeneralUtilities`Formatting`PackagePrivate`delnt[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       DeleteCases[GeneralUtilities`Formatting`PackagePrivate`e, 
         Alternatives[
         GeneralUtilities`Formatting`PackagePrivate`$nt, 
          GeneralUtilities`Formatting`PackagePrivate`$ont], Infinity], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`lhsbox] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`lhsbox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`delnt[
         GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`e]]], 
       GeneralUtilities`Formatting`PackagePrivate`$comparatorPattern = 
       Alternatives[
         Blank[Greater], 
         Blank[GreaterEqual], 
         Blank[Less], 
         Blank[LessEqual], 
         Blank[Equal], 
         Blank[Unequal], 
         Blank[SameQ], 
         Blank[UnsameQ]], 
       GeneralUtilities`Formatting`PackagePrivate`$mathPattern = Alternatives[
         Blank[Plus], 
         Blank[Minus], 
         Blank[Times], 
         Blank[Divide]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`ternop] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`ternop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`sep, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`a2 = 
          GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`a], 
          GeneralUtilities`Formatting`PackagePrivate`b2 = 
          GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`b], 
          GeneralUtilities`Formatting`PackagePrivate`c2 = 
          GeneralUtilities`Formatting`PackagePrivate`argbox[
           GeneralUtilities`Formatting`PackagePrivate`c]}, 
         If[
          Or[
           GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
           GeneralUtilities`Formatting`PackagePrivate`a2], 
           GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
           GeneralUtilities`Formatting`PackagePrivate`b2], 
           GeneralUtilities`Formatting`PackagePrivate`postHeavyQ[
           GeneralUtilities`Formatting`PackagePrivate`c2]], 
          GeneralUtilities`Formatting`PackagePrivate`rowbox[
          GeneralUtilities`Formatting`PackagePrivate`head, 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`a], 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`b], 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`c]], 
          GeneralUtilities`Formatting`PackagePrivate`row[
          GeneralUtilities`Formatting`PackagePrivate`a2, " ", 
           GeneralUtilities`Formatting`PackagePrivate`sep, " ", 
           GeneralUtilities`Formatting`PackagePrivate`b2, " ", 
           GeneralUtilities`Formatting`PackagePrivate`sep, " ", 
           GeneralUtilities`Formatting`PackagePrivate`c2]]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`simplePartQ] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`simplePartQ[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
           Blank[]], GeneralUtilities`Formatting`PackagePrivate`atomQ]] := 
       True, GeneralUtilities`Formatting`PackagePrivate`simplePartQ[
         Key[
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
            Blank[]], GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := 
       True, GeneralUtilities`Formatting`PackagePrivate`simplePartQ[
         Span[
          PatternTest[
           BlankSequence[], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := True, 
       GeneralUtilities`Formatting`PackagePrivate`simplePartQ[
         Blank[]] := False, 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`mrif] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`mrif[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`riff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`first, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`f[
        GeneralUtilities`Formatting`PackagePrivate`first], 
       GeneralUtilities`Formatting`PackagePrivate`mrif[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`riff, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[], 
       GeneralUtilities`Formatting`PackagePrivate`mrif[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`riff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       Apply[GeneralUtilities`Formatting`PackagePrivate`seq, 
         Riffle[
          Map[GeneralUtilities`Formatting`PackagePrivate`f, 
           Unevaluated[{GeneralUtilities`Formatting`PackagePrivate`args}]], 
          GeneralUtilities`Formatting`PackagePrivate`riff]], 
       Attributes[
        GeneralUtilities`Formatting`PackagePrivate`simplePatternQ] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`simplePatternQ[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
           Blank[]], GeneralUtilities`Formatting`PackagePrivate`atomQ]] := 
       True, GeneralUtilities`Formatting`PackagePrivate`simplePatternQ[
         Alternatives[
          Verbatim[Blank][], 
          Verbatim[Blank][
           Blank[Symbol]]]] := True, 
       GeneralUtilities`Formatting`PackagePrivate`simplePatternQ[
         Alternatives[
          Verbatim[BlankSequence][], 
          Verbatim[BlankSequence][
           Blank[Symbol]]]] := True, 
       GeneralUtilities`Formatting`PackagePrivate`simplePatternQ[
         Alternatives[
          Verbatim[BlankNullSequence][], 
          Verbatim[BlankNullSequence][
           Blank[Symbol]]]] := True, 
       GeneralUtilities`Formatting`PackagePrivate`simplePatternQ[
         PatternTest[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
           Blank[Symbol]], 
          GeneralUtilities`Formatting`PackagePrivate`notSyntaxQ][
          PatternTest[
           BlankNullSequence[], 
           GeneralUtilities`Formatting`PackagePrivate`simplePatternQ]]] := 
       True, GeneralUtilities`Formatting`PackagePrivate`simplePatternQ[
         Blank[]] := False, 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`notSyntaxQ] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`notSyntaxQ[
         Alternatives[
         Verbatim, Blank, BlankSequence, BlankNullSequence, Repeated, 
          RepeatedNull, HoldPattern]] := False, 
       GeneralUtilities`Formatting`PackagePrivate`notSyntaxQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[Symbol]]] := Not[
         MemberQ[GeneralUtilities`Formatting`PackagePrivate`$syntaxHeads, 
          HoldPattern[GeneralUtilities`Formatting`PackagePrivate`head]]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`patternBox] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Verbatim[Blank][]] := StringJoin[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], "_"], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Verbatim[Blank][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := StringJoin[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], "_", 
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`sym]], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Verbatim[BlankSequence][]] := StringJoin[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], "__"], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Verbatim[BlankSequence][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := StringJoin[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], "__", 
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`sym]], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Verbatim[BlankNullSequence][]] := StringJoin[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], "___"], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Verbatim[BlankNullSequence][
          PatternTest[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`sym, 
            Blank[Symbol]], 
           GeneralUtilities`Formatting`PackagePrivate`atomQ]]] := StringJoin[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], "___", 
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`sym]], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`bsym, 
          Blank[Symbol]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`other, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`bsym], ":", 
         GeneralUtilities`Formatting`PackagePrivate`syntaxOff[
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`other]]], 
       GeneralUtilities`Formatting`PackagePrivate`patternBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`stdbox[
        Pattern, GeneralUtilities`Formatting`PackagePrivate`a, 
         GeneralUtilities`Formatting`PackagePrivate`b], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`spanBox] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`spanBox[All, 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`row[";;", 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`b]], 
       GeneralUtilities`Formatting`PackagePrivate`spanBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]], All] := GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`a], ";;"], 
       GeneralUtilities`Formatting`PackagePrivate`spanBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`a], ";;", 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`b]], 
       GeneralUtilities`Formatting`PackagePrivate`spanBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`a, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`b, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`a], ";;", 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`b], ";;", 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`c]], 
       GeneralUtilities`Formatting`PackagePrivate`spanBox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`other, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`stdbox[
        Span, GeneralUtilities`Formatting`PackagePrivate`other], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`switchArg] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`switchArg[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
          Blank[]]] := If[
         And[
          EvenQ[
           Increment[GeneralUtilities`Formatting`PackagePrivate`$i]], 
          GeneralUtilities`Formatting`PackagePrivate`$i > 2], 
         GeneralUtilities`Formatting`PackagePrivate`scope[
          GeneralUtilities`Formatting`PackagePrivate`seq[
          GeneralUtilities`Formatting`PackagePrivate`$nt, 
           GeneralUtilities`Formatting`PackagePrivate`fullbox[
           GeneralUtilities`Formatting`PackagePrivate`arg], 
           If[
           GeneralUtilities`Formatting`PackagePrivate`$i >= 
            GeneralUtilities`Formatting`PackagePrivate`$len, 
            GeneralUtilities`Formatting`PackagePrivate`seq[], ","]]], 
         GeneralUtilities`Formatting`PackagePrivate`seq[
         GeneralUtilities`Formatting`PackagePrivate`$nt, 
          GeneralUtilities`Formatting`PackagePrivate`fullbox[
          GeneralUtilities`Formatting`PackagePrivate`arg], ","]], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`longFixQ] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`longFixQ[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := Length[
          Unevaluated[GeneralUtilities`Formatting`PackagePrivate`e]] > 1, 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`mfml] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`mfml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`ff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`first, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankSequence[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`last, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[
         GeneralUtilities`Formatting`PackagePrivate`ff[
         GeneralUtilities`Formatting`PackagePrivate`first], 
         Apply[Sequence, 
          GeneralUtilities`Formatting`PackagePrivate`m[
          GeneralUtilities`Formatting`PackagePrivate`fm, 
           GeneralUtilities`Formatting`PackagePrivate`args]], 
         GeneralUtilities`Formatting`PackagePrivate`fl[
         GeneralUtilities`Formatting`PackagePrivate`last]], 
       GeneralUtilities`Formatting`PackagePrivate`mfml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`ff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`first, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`last, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[
         GeneralUtilities`Formatting`PackagePrivate`ff[
         GeneralUtilities`Formatting`PackagePrivate`first], 
         GeneralUtilities`Formatting`PackagePrivate`fl[
         GeneralUtilities`Formatting`PackagePrivate`last]], 
       GeneralUtilities`Formatting`PackagePrivate`mfml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`ff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`last, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`fl[
        GeneralUtilities`Formatting`PackagePrivate`last], 
       GeneralUtilities`Formatting`PackagePrivate`mfml[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`ff, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fm, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`fl, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`cef] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`cef[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`seq[
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e], ";"], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`cem] = {
        HoldAllComplete}, GeneralUtilities`Formatting`PackagePrivate`cem[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`seq[
        GeneralUtilities`Formatting`PackagePrivate`$nt, 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e], ";"], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`cel] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`cel[Null] := 
       GeneralUtilities`Formatting`PackagePrivate`seq[], 
       GeneralUtilities`Formatting`PackagePrivate`cel[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`Formatting`PackagePrivate`seq[
        GeneralUtilities`Formatting`PackagePrivate`$nt, 
         GeneralUtilities`Formatting`PackagePrivate`fullbox[
         GeneralUtilities`Formatting`PackagePrivate`e]], 
       GeneralUtilities`Formatting`PackagePrivate`$uniboxBlacklist = 
       Hold[Map, AssociationMap, KeyMap, Apply, Scan, MapIndexed, KeyValueMap,
          GeneralUtilities`ApplyThrough, GeneralUtilities`MapIf, 
         GeneralUtilities`ScanIndexed, GeneralUtilities`ScanThread, DisjointQ,
          IntersectingQ, Prepend, Append, GroupBy, CountsBy, Count, Position, 
         FirstPosition, SortBy, KeySelect, Select, SelectFirst, Delete, 
         Extract, Replace, ReplacePart, ReplaceAll, Cases, DeleteCases, 
         FirstCase, AnyTrue, AllTrue, NoneTrue, MatchQ, MemberQ, FreeQ, 
         StringMatchQ, StringFreeQ, StringContainsQ, StringReplace, 
         StringDelete, KeyExistsQ, ContainsAny, ContainsAll, ContainsNone, 
         ContainsOnly, ContainsExactly, IntersectingQ, DisjointQ, 
         DeleteDuplicatesBy, KeySortBy, KeyTake, KeyDrop, MaximalBy, 
         MinimalBy, TakeLargest, TakeSmallest, Lookup, 
         GeneralUtilities`SelectIndices, GeneralUtilities`SelectFirstIndex, 
         GeneralUtilities`IndexOf, GeneralUtilities`MatchIndices, 
         GeneralUtilities`FirstMatchIndex, Merge, AllTrue, AnyTrue, NoneTrue, 
         MatchQ, FreeQ, MemberQ, KeyExistsQ, DisjointQ, IntersectingQ, 
         SubsetQ, StringStartsQ, StringEndsQ, StringContainsQ, 
         GeneralUtilities`ElementQ, GeneralUtilities`PrefixQ, Between, Insert,
          TakeLargestBy, TakeSmallestBy, Key, Return, Throw, Blank, 
         BlankSequence, BlankNullSequence, Verbatim, HoldPattern, Repeated, 
         RepeatedNull], GeneralUtilities`ApplyThrough[
         Pattern[GeneralUtilities`General`PackagePrivate`spec, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       GeneralUtilities`General`PackagePrivate`iApplyThrough[
        GeneralUtilities`General`PackagePrivate`spec, 
         GeneralUtilities`General`PackagePrivate`args], 
       GeneralUtilities`ApplyThrough[
         Pattern[GeneralUtilities`General`PackagePrivate`spec, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`args, 
          BlankSequence[]]] := 
       GeneralUtilities`General`PackagePrivate`iApplyThrough[
        GeneralUtilities`General`PackagePrivate`spec, 
         GeneralUtilities`General`PackagePrivate`args], 
       GeneralUtilities`General`PackagePrivate`iApplyThrough[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[List]], 
         Pattern[GeneralUtilities`General`PackagePrivate`args, 
          BlankNullSequence[]]] := Through[
         GeneralUtilities`General`PackagePrivate`list[
         GeneralUtilities`General`PackagePrivate`args]], 
       GeneralUtilities`General`PackagePrivate`iApplyThrough[
         Pattern[GeneralUtilities`General`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`General`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       Map[GeneralUtilities`SafeConstruct[#, 
          GeneralUtilities`General`PackagePrivate`args]& , 
         GeneralUtilities`General`PackagePrivate`assoc], 
       GeneralUtilities`SafeConstruct = Construct, GeneralUtilities`MapIf[
         Pattern[GeneralUtilities`General`PackagePrivate`function, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`test, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`MapIf[
        GeneralUtilities`General`PackagePrivate`function, 
         GeneralUtilities`General`PackagePrivate`test, 
         GeneralUtilities`General`PackagePrivate`list], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`MapIf], {2, 3}], 
       GeneralUtilities`MapIf[
         Pattern[GeneralUtilities`General`PackagePrivate`function, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := Map[If[
          GeneralUtilities`General`PackagePrivate`test[#], 
          GeneralUtilities`General`PackagePrivate`function[#], #]& , 
         GeneralUtilities`General`PackagePrivate`list], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`MapIf]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 2, 3]; Fail], 
       TagSet[GeneralUtilities`MapIf, 
        MessageName[GeneralUtilities`MapIf, "usage"], 
        "\!\(\*RowBox[{\"MapIf\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"], \",\
\",  StyleBox[\"test\", \"TI\"], \",\",  StyleBox[\"list\", \"TI\"]}], \
\"]\"}]\) applies \!\(\*StyleBox[\"f\", \"TI\"]\) to only those values \
\!\(\*StyleBox[SubscriptBox[\"e\", StyleBox[\"i\", \"TI\"]], \"TI\"]\) in \
\!\(\*StyleBox[\"list\", \"TI\"]\) for which \!\(\*StyleBox[\"test\", \"TI\"]\
\)[\!\(\*StyleBox[SubscriptBox[\"e\", StyleBox[\"i\", \"TI\"]], \"TI\"]\)] \
gives True.\n\!\(\*RowBox[{\"MapIf\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"], \
\",\",  StyleBox[\"test\", \"TI\"]}], \"]\"}]\) is the operator form of \
MapIf."], GeneralUtilities`ScanIndexed[
         Pattern[GeneralUtilities`General`PackagePrivate`func, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]]] := 
       GeneralUtilities`ScanIndexed[
        GeneralUtilities`General`PackagePrivate`func, 
         GeneralUtilities`General`PackagePrivate`expr], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`ScanIndexed], {1, 3}],
        GeneralUtilities`ScanIndexed[
         Pattern[GeneralUtilities`General`PackagePrivate`func, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]]] := Which[
         AssociationQ[GeneralUtilities`General`PackagePrivate`expr], 
         Scan[GeneralUtilities`General`PackagePrivate`func[
           First[#], {
            Last[#]}]& , 
          Transpose[{
            Values[GeneralUtilities`General`PackagePrivate`expr], 
            Keys[GeneralUtilities`General`PackagePrivate`expr]}]], 
         AtomQ[GeneralUtilities`General`PackagePrivate`expr], Null, True, 
         Do[
          GeneralUtilities`General`PackagePrivate`func[
           Part[
           GeneralUtilities`General`PackagePrivate`expr, 
            GeneralUtilities`General`PackagePrivate`i], {
           GeneralUtilities`General`PackagePrivate`i}], {
          GeneralUtilities`General`PackagePrivate`i, 
           Length[GeneralUtilities`General`PackagePrivate`expr]}]], 
       GeneralUtilities`ScanIndexed[
         Pattern[GeneralUtilities`General`PackagePrivate`func, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`level, 
          Blank[]]] := 
       MapIndexed[(GeneralUtilities`General`PackagePrivate`func[#, #2]; #)& , 
         GeneralUtilities`General`PackagePrivate`expr, 
         GeneralUtilities`General`PackagePrivate`level], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`ScanIndexed]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 3]; Fail], 
       TagSet[GeneralUtilities`ScanIndexed, 
        MessageName[GeneralUtilities`ScanIndexed, "usage"], 
        "\!\(\*RowBox[{\"ScanIndexed\", \"[\", RowBox[{StyleBox[\"f\", \
\"TI\"], \",\",  StyleBox[\"expr\", \"TI\"]}], \"]\"}]\) evaluates \
\!\(\*StyleBox[\"f\", \"TI\"]\) on each element of \!\(\*StyleBox[\"expr\", \
\"TI\"]\), giving the part specification as the second argument to \
\!\(\*StyleBox[\"f\", \"TI\"]\).\n\!\(\*RowBox[{\"ScanIndexed\", \"[\", \
RowBox[{StyleBox[\"f\", \"TI\"]}], \"]\"}]\) is the operator form of \
ScanIndexed."], GeneralUtilities`ScanThread[
         Pattern[GeneralUtilities`General`PackagePrivate`func, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]]] := 
       GeneralUtilities`ScanThread[
        GeneralUtilities`General`PackagePrivate`func, 
         GeneralUtilities`General`PackagePrivate`expr], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`ScanThread], {1, 2}], 
       GeneralUtilities`ScanThread[
         Pattern[GeneralUtilities`General`PackagePrivate`func, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]]] := 
       Internal`ConditionalValueBody[
        GeneralUtilities`ScanThread, {
         ArrayDepth[GeneralUtilities`General`PackagePrivate`expr] >= 2}, {{
          "arg2", GeneralUtilities`General`PackagePrivate`expr}}, 
         Scan[
          Apply[GeneralUtilities`General`PackagePrivate`func], 
          Transpose[GeneralUtilities`General`PackagePrivate`expr]]], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`ScanThread]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 2]; Fail], 
       TagSet[GeneralUtilities`ScanThread, 
        MessageName[GeneralUtilities`ScanThread, "arg2"], 
        "The second argument `` is expected to be a list whose elements are \
all the same length."], 
       TagSet[GeneralUtilities`ScanThread, 
        MessageName[GeneralUtilities`ScanThread, "usage"], 
        "\!\(\*RowBox[{\"ScanThread\", \"[\", RowBox[{StyleBox[\"f\", \
\"TI\"], \",\",  RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"expr\", \
StyleBox[\"1\", \"TR\"]], \"TI\"], \",\", StyleBox[SubscriptBox[\"expr\", \
StyleBox[\"2\", \"TR\"]], \"TI\"], \",\", StyleBox[\"\[Ellipsis]\", \
\"TR\"]}], \"}\"}]}], \"]\"}]\) repeatedly evaluates \!\(\*StyleBox[\"f\", \
\"TI\"]\) applied to successive elements taken from each \
\!\(\*StyleBox[SubscriptBox[\"expr\", StyleBox[\"i\", \"TI\"]], \"TI\"]\).\n\
\!\(\*RowBox[{\"ScanThread\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"]}], \
\"]\"}]\) is the operator form of ScanThread."], 
       GeneralUtilities`SelectIndices[
         Pattern[GeneralUtilities`General`PackagePrivate`crit, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`SelectIndices[
        GeneralUtilities`General`PackagePrivate`list, 
         GeneralUtilities`General`PackagePrivate`crit], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`SelectIndices], {1, 
        2}], GeneralUtilities`SelectIndices[
         Pattern[GeneralUtilities`General`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`General`PackagePrivate`crit, 
          Blank[]]] := Map[Key, 
         Keys[
          Select[
          GeneralUtilities`General`PackagePrivate`assoc, 
           GeneralUtilities`General`PackagePrivate`crit]]], 
       GeneralUtilities`SelectIndices[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`crit, 
          Blank[]]] := Pick[
         Range[
          Length[GeneralUtilities`General`PackagePrivate`list]], 
         Map[
         GeneralUtilities`General`PackagePrivate`crit, 
          GeneralUtilities`General`PackagePrivate`list]], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`SelectIndices]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 2]; Fail], 
       TagSet[GeneralUtilities`SelectIndices, 
        MessageName[GeneralUtilities`SelectIndices, "usage"], 
        "\!\(\*RowBox[{\"SelectIndices\", \"[\", RowBox[{StyleBox[\"list\", \
\"TI\"], \",\",  StyleBox[\"crit\", \"TI\"]}], \"]\"}]\) gives a list of the \
\!\(\*StyleBox[\"i\", \"TI\"]\) for which \!\(\*StyleBox[\"crit\", \"TI\"]\)[\
\!\(\*StyleBox[SubscriptBox[\"e\", StyleBox[\"i\", \"TI\"]], \"TI\"]\)] \
yields True.\n\!\(\*RowBox[{\"SelectIndices\", \"[\", RowBox[{StyleBox[\"crit\
\", \"TI\"]}], \"]\"}]\) is the operator form of SelectIndices."], 
       Attributes[GeneralUtilities`SelectFirstIndex] = {HoldRest}, 
       GeneralUtilities`SelectFirstIndex[
         Pattern[GeneralUtilities`General`PackagePrivate`crit, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`SelectFirstIndex[
        GeneralUtilities`General`PackagePrivate`list, 
         GeneralUtilities`General`PackagePrivate`crit, 
         GeneralUtilities`General`PackagePrivate`$notFound], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`SelectFirstIndex], {1,
         3}], GeneralUtilities`SelectFirstIndex[
         Pattern[GeneralUtilities`General`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`General`PackagePrivate`crit, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`General`PackagePrivate`default, 
           Blank[]], GeneralUtilities`General`PackagePrivate`$notFound]] := 
       Block[{GeneralUtilities`General`PackagePrivate`f = 
          GeneralUtilities`General`PackagePrivate`crit}, 
         Association`ScanWhile[
          GeneralUtilities`General`PackagePrivate`assoc, If[
            GeneralUtilities`General`PackagePrivate`f[
             Last[#]], 
            Return[
             Key[
              First[#]], Block], True, True]& ]; 
         GeneralUtilities`General`PackagePrivate`default], 
       GeneralUtilities`SelectFirstIndex[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`crit, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`General`PackagePrivate`default, 
           Blank[]], GeneralUtilities`General`PackagePrivate`$notFound]] := 
       Block[{GeneralUtilities`General`PackagePrivate`f = 
          GeneralUtilities`General`PackagePrivate`crit}, Do[
           If[
            GeneralUtilities`General`PackagePrivate`f[
             Part[
             GeneralUtilities`General`PackagePrivate`list, 
              GeneralUtilities`General`PackagePrivate`i]], 
            Return[GeneralUtilities`General`PackagePrivate`i, Block]], {
           GeneralUtilities`General`PackagePrivate`i, 
            Length[GeneralUtilities`General`PackagePrivate`list]}]; 
         GeneralUtilities`General`PackagePrivate`default], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`SelectFirstIndex]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 3]; Fail], 
       TagSet[GeneralUtilities`SelectFirstIndex, 
        MessageName[GeneralUtilities`SelectFirstIndex, "usage"], 
        "\!\(\*RowBox[{\"SelectFirstIndex\", \"[\", \
RowBox[{StyleBox[\"list\", \"TI\"], \",\",  StyleBox[\"crit\", \"TI\"]}], \"]\
\"}]\) gives the first \!\(\*StyleBox[\"i\", \"TI\"]\) for which \
\!\(\*StyleBox[\"crit\", \"TI\"]\)[\!\(\*StyleBox[SubscriptBox[\"e\", \
StyleBox[\"i\", \"TI\"]], \"TI\"]\)] yields True.\n\
\!\(\*RowBox[{\"SelectFirstIndex\", \"[\", RowBox[{StyleBox[\"list\", \
\"TI\"], \",\",  StyleBox[\"crit\", \"TI\"], \",\",  StyleBox[\"default\", \
\"TI\"]}], \"]\"}]\) gives \!\(\*StyleBox[\"default\", \"TI\"]\) if no \
element matched.\n\!\(\*RowBox[{\"SelectFirstIndex\", \"[\", \
RowBox[{StyleBox[\"crit\", \"TI\"]}], \"]\"}]\) is the operator form of \
SelectFirstIndex."], GeneralUtilities`General`PackagePrivate`$notFound = 
       Missing["NotFound"], Attributes[GeneralUtilities`IndexOf] = {HoldRest},
        GeneralUtilities`IndexOf[
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`IndexOf[
        GeneralUtilities`General`PackagePrivate`list, 
         GeneralUtilities`General`PackagePrivate`expr, 
         GeneralUtilities`General`PackagePrivate`$notFound], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`IndexOf], {1, 3}], 
       GeneralUtilities`IndexOf[
         Pattern[GeneralUtilities`General`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`General`PackagePrivate`default, 
           Blank[]], GeneralUtilities`General`PackagePrivate`$notFound]] := 
       Block[{GeneralUtilities`General`PackagePrivate`e = 
          GeneralUtilities`General`PackagePrivate`expr}, 
         Association`ScanWhile[
          GeneralUtilities`General`PackagePrivate`assoc, If[
           Last[#] === GeneralUtilities`General`PackagePrivate`e, 
            Return[
             Key[
              First[#]], Block], True, True]& ]; 
         GeneralUtilities`General`PackagePrivate`default], 
       GeneralUtilities`IndexOf[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`expr, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`General`PackagePrivate`default, 
           Blank[]], GeneralUtilities`General`PackagePrivate`$notFound]] := If[
         And[
          Developer`PackedArrayQ[
          GeneralUtilities`General`PackagePrivate`list], 
          AtomQ[GeneralUtilities`General`PackagePrivate`expr]], 
         First[
          Pick[
           Range[
            Length[GeneralUtilities`General`PackagePrivate`list]], 
           GeneralUtilities`General`PackagePrivate`list, 
           GeneralUtilities`General`PackagePrivate`expr], 
          GeneralUtilities`General`PackagePrivate`default], 
         First[
          FirstPosition[GeneralUtilities`General`PackagePrivate`list, 
           Verbatim[GeneralUtilities`General`PackagePrivate`expr], {
           GeneralUtilities`General`PackagePrivate`default}, Heads -> 
           False]]], Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`IndexOf]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 3]; Fail], 
       TagSet[GeneralUtilities`IndexOf, 
        MessageName[GeneralUtilities`IndexOf, "usage"], 
        "\!\(\*RowBox[{\"IndexOf\", \"[\", RowBox[{StyleBox[\"list\", \
\"TI\"], \",\",  StyleBox[\"expr\", \"TI\"]}], \"]\"}]\) gives the first \!\(\
\*StyleBox[\"i\", \"TI\"]\) for which \!\(\*StyleBox[SubscriptBox[\"list\", \
StyleBox[\"i\", \"TI\"]], \"TI\"]\) === \!\(\*StyleBox[\"expr\", \"TI\"]\).\n\
\!\(\*RowBox[{\"IndexOf\", \"[\", RowBox[{StyleBox[\"list\", \"TI\"], \",\",  \
StyleBox[\"expr\", \"TI\"], \",\",  StyleBox[\"default\", \"TI\"]}], \
\"]\"}]\) gives \!\(\*StyleBox[\"default\", \"TI\"]\) if no element was equal \
to \!\(\*StyleBox[\"expr\", \"TI\"]\).\n\!\(\*RowBox[{\"IndexOf\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"]}], \"]\"}]\) is the operator form of \
IndexOf."], GeneralUtilities`MatchIndices[
         Pattern[GeneralUtilities`General`PackagePrivate`patt, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`MatchIndices[
        GeneralUtilities`General`PackagePrivate`list, 
         GeneralUtilities`General`PackagePrivate`patt], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`MatchIndices], {1, 
        2}], GeneralUtilities`MatchIndices[
         Pattern[GeneralUtilities`General`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`General`PackagePrivate`patt, 
          Blank[]]] := Part[
         Position[
         GeneralUtilities`General`PackagePrivate`assoc, 
          GeneralUtilities`General`PackagePrivate`patt, {1}, Heads -> False], 
         All, 1], GeneralUtilities`MatchIndices[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`patt, 
          Blank[]]] := Pick[
         Range[
          Length[GeneralUtilities`General`PackagePrivate`list]], 
         GeneralUtilities`General`PackagePrivate`list, 
         GeneralUtilities`General`PackagePrivate`patt], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`MatchIndices]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 2]; Fail], 
       TagSet[GeneralUtilities`MatchIndices, 
        MessageName[GeneralUtilities`MatchIndices, "usage"], 
        "\!\(\*RowBox[{\"MatchIndices\", \"[\", RowBox[{StyleBox[\"list\", \
\"TI\"], \",\",  StyleBox[\"patt\", \"TI\"]}], \"]\"}]\) gives a list of the \
\!\(\*StyleBox[\"i\", \"TI\"]\) at which pattern \!\(\*StyleBox[\"patt\", \
\"TI\"]\) matches.\n\!\(\*RowBox[{\"MatchIndices\", \"[\", \
RowBox[{StyleBox[\"patt\", \"TI\"]}], \"]\"}]\) is the operator form of \
MatchIndices."], Attributes[GeneralUtilities`FirstMatchIndex] = {HoldRest}, 
       GeneralUtilities`FirstMatchIndex[
         Pattern[GeneralUtilities`General`PackagePrivate`patt, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`FirstMatchIndex[
        GeneralUtilities`General`PackagePrivate`list, 
         GeneralUtilities`General`PackagePrivate`patt, 
         GeneralUtilities`General`PackagePrivate`$notFound], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`FirstMatchIndex], {1, 
        3}], GeneralUtilities`FirstMatchIndex[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`patt, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`General`PackagePrivate`default, 
           Blank[]], GeneralUtilities`General`PackagePrivate`$notFound]] := 
       First[
         FirstPosition[
         GeneralUtilities`General`PackagePrivate`list, 
          GeneralUtilities`General`PackagePrivate`patt, {
          GeneralUtilities`General`PackagePrivate`default}, Heads -> False]], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`FirstMatchIndex]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 1, 3]; Fail], 
       TagSet[GeneralUtilities`FirstMatchIndex, 
        MessageName[GeneralUtilities`FirstMatchIndex, "usage"], 
        "\!\(\*RowBox[{\"FirstMatchIndex\", \"[\", RowBox[{StyleBox[\"list\", \
\"TI\"], \",\",  StyleBox[\"patt\", \"TI\"]}], \"]\"}]\) gives the first \!\(\
\*StyleBox[\"i\", \"TI\"]\) for which \!\(\*StyleBox[SubscriptBox[\"list\", \
StyleBox[\"i\", \"TI\"]], \"TI\"]\) matches the pattern \!\(\*StyleBox[\"patt\
\", \"TI\"]\).\n\!\(\*RowBox[{\"FirstMatchIndex\", \"[\", \
RowBox[{StyleBox[\"list\", \"TI\"], \",\",  StyleBox[\"patt\", \"TI\"], \
\",\",  StyleBox[\"default\", \"TI\"]}], \"]\"}]\) gives \
\!\(\*StyleBox[\"default\", \"TI\"]\) if no element matched.\n\
\!\(\*RowBox[{\"FirstMatchIndex\", \"[\", RowBox[{StyleBox[\"patt\", \
\"TI\"]}], \"]\"}]\) is the operator form of FirstMatchIndex."], 
       GeneralUtilities`ElementQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`list, 
          Blank[]]][
         Pattern[GeneralUtilities`Predicates`PackagePrivate`elem, 
          Blank[]]] := 
       GeneralUtilities`ElementQ[
        GeneralUtilities`Predicates`PackagePrivate`elem, 
         GeneralUtilities`Predicates`PackagePrivate`list], 
       GeneralUtilities`ElementQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`elem, 
          Blank[]], 
         Pattern[GeneralUtilities`Predicates`PackagePrivate`list, 
          Blank[]]] := 
       MemberQ[GeneralUtilities`Predicates`PackagePrivate`list, 
         Verbatim[GeneralUtilities`Predicates`PackagePrivate`elem]], 
       TagSet[GeneralUtilities`ElementQ, 
        MessageName[GeneralUtilities`ElementQ, "usage"], 
        "\!\(\*RowBox[{\"ElementQ\", \"[\", RowBox[{StyleBox[\"elem\", \
\"TI\"], \",\",  StyleBox[\"list\", \"TI\"]}], \"]\"}]\) gives True if the \
value \!\(\*StyleBox[\"elem\", \"TI\"]\) is present in \
\!\(\*StyleBox[\"list\", \"TI\"]\).\n\!\(\*RowBox[{\"ElementQ\", \"[\", \
RowBox[{StyleBox[\"list\", \"TI\"]}], \"]\"}]\) is the operator form of \
ElementQ."], GeneralUtilities`PrefixQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`prefix, 
          Blank[]]][
         Pattern[GeneralUtilities`Predicates`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`PrefixQ[
        GeneralUtilities`Predicates`PackagePrivate`list, 
         GeneralUtilities`Predicates`PackagePrivate`prefix], 
       GeneralUtilities`PrefixQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`list, 
          Blank[]], 
         Pattern[GeneralUtilities`Predicates`PackagePrivate`prefix, 
          Blank[]]] := 
       And[Length[GeneralUtilities`Predicates`PackagePrivate`prefix] <= 
         Length[GeneralUtilities`Predicates`PackagePrivate`list], 
         Take[GeneralUtilities`Predicates`PackagePrivate`list, 
           Length[GeneralUtilities`Predicates`PackagePrivate`prefix]] === 
         GeneralUtilities`Predicates`PackagePrivate`prefix], 
       TagSet[GeneralUtilities`PrefixQ, 
        MessageName[GeneralUtilities`PrefixQ, "usage"], 
        "\!\(\*RowBox[{\"PrefixQ\", \"[\", \
RowBox[{StyleBox[SubscriptBox[\"list\", StyleBox[\"1\", \"TR\"]], \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"list\", StyleBox[\"2\", \"TR\"]], \"TI\"]}], \
\"]\"}]\) gives True if \!\(\*StyleBox[SubscriptBox[\"list\", StyleBox[\"2\", \
\"TR\"]], \"TI\"]\) is a prefix of $list1.\n\!\(\*RowBox[{\"PrefixQ\", \"[\", \
RowBox[{StyleBox[SubscriptBox[\"list\", StyleBox[\"2\", \"TR\"]], \"TI\"]}], \
\"]\"}]\) is the operator form of PrefixQ."], 
       Attributes[GeneralUtilities`Formatting`PackagePrivate`unibox] = {
        HoldFirst}, GeneralUtilities`Formatting`PackagePrivate`unibox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]], 
         Alternatives[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`op]], 
          Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
           Blank[GeneralUtilities`Formatting`PackagePrivate`cerow]]]] := 
       GeneralUtilities`Formatting`PackagePrivate`rowbox[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`head], 
         GeneralUtilities`Formatting`PackagePrivate`arg], 
       GeneralUtilities`Formatting`PackagePrivate`unibox[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`sn[
         GeneralUtilities`Formatting`PackagePrivate`head], " ", "@", " ", 
         GeneralUtilities`Formatting`PackagePrivate`arg], 
       Attributes[
        GeneralUtilities`Formatting`PackagePrivate`scopeFunction] = {
        HoldAllComplete}, 
       GeneralUtilities`Formatting`PackagePrivate`scopeFunction[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$indent = 
          GeneralUtilities`Formatting`PackagePrivate`$indent + 1}, 
         GeneralUtilities`Formatting`PackagePrivate`e], 
       GeneralUtilities`Formatting`PackagePrivate`$indent = 0, 
       GeneralUtilities`Formatting`PackagePrivate`ntFunction := 
       GeneralUtilities`Formatting`PackagePrivate`$newtab[
        GeneralUtilities`Formatting`PackagePrivate`$indent], 
       GeneralUtilities`Formatting`PackagePrivate`ontFunction := 
       GeneralUtilities`Formatting`PackagePrivate`$newtab[
        GeneralUtilities`Formatting`PackagePrivate`$indent - 1], 
       GeneralUtilities`Formatting`PackagePrivate`oontFunction = 
       GeneralUtilities`Formatting`PackagePrivate`$newtab[0], 
       GeneralUtilities`PackageScope`$enableReflow = True, 
       GeneralUtilities`Formatting`PackagePrivate`reflowNewtabs[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`boxes2, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`boxes = 
          GeneralUtilities`Formatting`PackagePrivate`boxes2}, 
         GeneralUtilities`Formatting`PackagePrivate`boxes = 
          ReplaceRepeated[
           GeneralUtilities`Formatting`PackagePrivate`boxes, 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
              GeneralUtilities`Formatting`PackagePrivate`row[
               BlankNullSequence[], 
               GeneralUtilities`Formatting`PackagePrivate`row[
                Blank[String], "[", 
                GeneralUtilities`Formatting`PackagePrivate`row[
                 Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab], 
                 Condition[
                  Pattern[GeneralUtilities`Formatting`PackagePrivate`f, 
                   Blank[]], 
                  FreeQ[
                  GeneralUtilities`Formatting`PackagePrivate`f, 
                   GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
                 RepeatedNull[","], 
                 Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab], 
                 BlankNullSequence[]], "]"], 
               BlankNullSequence[]]] :> 
            GeneralUtilities`Formatting`PackagePrivate`reflowCalls[
             GeneralUtilities`Formatting`PackagePrivate`r]]; 
         GeneralUtilities`Formatting`PackagePrivate`boxes = 
          ReplaceRepeated[
           GeneralUtilities`Formatting`PackagePrivate`boxes, 
            GeneralUtilities`Formatting`PackagePrivate`row[
              Pattern[GeneralUtilities`Formatting`PackagePrivate`l, 
               BlankNullSequence[]], 
              Pattern[GeneralUtilities`Formatting`PackagePrivate`r1, 
               GeneralUtilities`Formatting`PackagePrivate`row[
                BlankNullSequence[], ";"]], ",", 
              GeneralUtilities`Formatting`PackagePrivate`$newtab[
               Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
                Blank[]]], 
              Pattern[GeneralUtilities`Formatting`PackagePrivate`r2, 
               BlankNullSequence[]]] :> 
            GeneralUtilities`Formatting`PackagePrivate`row[
             GeneralUtilities`Formatting`PackagePrivate`l, 
              GeneralUtilities`Formatting`PackagePrivate`r1, 
              GeneralUtilities`Formatting`PackagePrivate`$newtab[
              GeneralUtilities`Formatting`PackagePrivate`n - 1], ",", 
              GeneralUtilities`Formatting`PackagePrivate`$newtab[
              GeneralUtilities`Formatting`PackagePrivate`n], 
              GeneralUtilities`Formatting`PackagePrivate`r2]]; 
         GeneralUtilities`Formatting`PackagePrivate`boxes = 
          Block[{GeneralUtilities`Formatting`PackagePrivate`$col = 0}, 
            GeneralUtilities`Formatting`PackagePrivate`reflowTop[
            GeneralUtilities`Formatting`PackagePrivate`boxes]]; 
         GeneralUtilities`Formatting`PackagePrivate`boxes = 
          ReplaceRepeated[
           GeneralUtilities`Formatting`PackagePrivate`boxes, 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
              GeneralUtilities`Formatting`PackagePrivate`row[
               BlankNullSequence[], 
               GeneralUtilities`Formatting`PackagePrivate`$newtab[
                Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
                 Blank[]]], 
               GeneralUtilities`Formatting`PackagePrivate`$simpleBox, ",", 
               GeneralUtilities`Formatting`PackagePrivate`$newtab[
                Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
                 Blank[]]], 
               GeneralUtilities`Formatting`PackagePrivate`$simpleBox, 
               BlankNullSequence[]]] :> 
            GeneralUtilities`Formatting`PackagePrivate`reflowRow[
             GeneralUtilities`Formatting`PackagePrivate`r]]; 
         GeneralUtilities`Formatting`PackagePrivate`boxes = 
          ReplaceRepeated[
           GeneralUtilities`Formatting`PackagePrivate`boxes, 
            GeneralUtilities`Formatting`PackagePrivate`row["{", 
              GeneralUtilities`Formatting`PackagePrivate`row[
               Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab], 
               Condition[
                Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
                 BlankNullSequence[]], 
                
                FreeQ[{GeneralUtilities`Formatting`PackagePrivate`r}, 
                 GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
               Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
              "}"] :> GeneralUtilities`Formatting`PackagePrivate`row[
             "{", GeneralUtilities`Formatting`PackagePrivate`r, "}"]]; 
         GeneralUtilities`Formatting`PackagePrivate`boxes], 
       GeneralUtilities`Formatting`PackagePrivate`reflowCalls[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`row]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$indent = Infinity}, 
         Map[
         GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg, 
          GeneralUtilities`Formatting`PackagePrivate`r]], 
       GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
          GeneralUtilities`Formatting`PackagePrivate`$newtab[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
            Blank[]]]]] := (
        GeneralUtilities`Formatting`PackagePrivate`$indent = 
         GeneralUtilities`Formatting`PackagePrivate`n; 
        GeneralUtilities`Formatting`PackagePrivate`t), 
       GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          GeneralUtilities`Formatting`PackagePrivate`row[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
            Blank[String]], "[", 
           GeneralUtilities`Formatting`PackagePrivate`row[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
             Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
            Condition[
             Pattern[GeneralUtilities`Formatting`PackagePrivate`first, 
              Blank[]], 
             FreeQ[
             GeneralUtilities`Formatting`PackagePrivate`f, 
              GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`c, 
             RepeatedNull[","]], 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
             Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`rest, 
             BlankNullSequence[]]], "]"]]] := RuleCondition[
         If[
          And[
          GeneralUtilities`Formatting`PackagePrivate`$indent < 6, 
           4 GeneralUtilities`Formatting`PackagePrivate`$indent + 
            GeneralUtilities`Formatting`PackagePrivate`strlen[
             GeneralUtilities`Formatting`PackagePrivate`head] + 
            GeneralUtilities`Formatting`PackagePrivate`strlen[
             GeneralUtilities`Formatting`PackagePrivate`first] + 3 < 
           GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth], 
          GeneralUtilities`Formatting`PackagePrivate`row[
          GeneralUtilities`Formatting`PackagePrivate`head, "[", 
           GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`first, 
            GeneralUtilities`Formatting`PackagePrivate`c, 
            GeneralUtilities`Formatting`PackagePrivate`t, 
            GeneralUtilities`Formatting`PackagePrivate`rest], "]"], Fail]], 
       GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`row]]] := 
       Map[GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg, 
         GeneralUtilities`Formatting`PackagePrivate`e], 
       GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[String]]] := GeneralUtilities`Formatting`PackagePrivate`e, 
       GeneralUtilities`Formatting`PackagePrivate`reflowFirstArg[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`Formatting`PackagePrivate`e, 
       GeneralUtilities`Formatting`PackagePrivate`reflowTop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          GeneralUtilities`Formatting`PackagePrivate`row[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
            Blank[String]], "[", 
           Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab], 
           Pattern[GeneralUtilities`Formatting`PackagePrivate`arg, 
            GeneralUtilities`Formatting`PackagePrivate`row[
             Blank[String], "[", 
             BlankNullSequence[]]], 
           BlankNullSequence[
           GeneralUtilities`Formatting`PackagePrivate`$newtab], "]"]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`len = 
          GeneralUtilities`Formatting`PackagePrivate`linelen[
           GeneralUtilities`Formatting`PackagePrivate`arg]}, 
         If[
         GeneralUtilities`Formatting`PackagePrivate`$col + 
           GeneralUtilities`Formatting`PackagePrivate`len < 
          GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth - 20, 
          GeneralUtilities`Formatting`PackagePrivate`reflowTop[
           GeneralUtilities`Formatting`PackagePrivate`row[
           GeneralUtilities`Formatting`PackagePrivate`head, " ", "@", " ", 
            ReplaceAll[
            GeneralUtilities`Formatting`PackagePrivate`arg, 
             GeneralUtilities`Formatting`PackagePrivate`$newtab[
               Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
                Blank[]]] :> 
             GeneralUtilities`Formatting`PackagePrivate`$newtab[
              GeneralUtilities`Formatting`PackagePrivate`n - 1]]]], 
          GeneralUtilities`Formatting`PackagePrivate`r]], 
       GeneralUtilities`Formatting`PackagePrivate`reflowTop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          GeneralUtilities`Formatting`PackagePrivate`row[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`head, 
            Blank[String]], "[", 
           GeneralUtilities`Formatting`PackagePrivate`row[
            Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
             Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
            Condition[
             Pattern[GeneralUtilities`Formatting`PackagePrivate`first, 
              Blank[]], 
             FreeQ[
             GeneralUtilities`Formatting`PackagePrivate`f, 
              GeneralUtilities`Formatting`PackagePrivate`$newtab]], ",", 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
             Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]], 
            Pattern[GeneralUtilities`Formatting`PackagePrivate`rest, 
             BlankNullSequence[]]], "]"]]] := 
       If[GeneralUtilities`Formatting`PackagePrivate`$col + 
          GeneralUtilities`Formatting`PackagePrivate`strlen[
           GeneralUtilities`Formatting`PackagePrivate`head] + 1 + 
          GeneralUtilities`Formatting`PackagePrivate`strlen[
           GeneralUtilities`Formatting`PackagePrivate`first] + 3 < 
         GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth - 10, 
         GeneralUtilities`Formatting`PackagePrivate`row[
         GeneralUtilities`Formatting`PackagePrivate`head, "[", 
          GeneralUtilities`Formatting`PackagePrivate`first, ",", 
          GeneralUtilities`Formatting`PackagePrivate`t, 
          GeneralUtilities`Formatting`PackagePrivate`row[
          GeneralUtilities`Formatting`PackagePrivate`rest], "]"], 
         GeneralUtilities`Formatting`PackagePrivate`r], 
       GeneralUtilities`Formatting`PackagePrivate`reflowTop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`row]]] := 
       Map[GeneralUtilities`Formatting`PackagePrivate`reflowTop, 
         GeneralUtilities`Formatting`PackagePrivate`r], 
       GeneralUtilities`Formatting`PackagePrivate`reflowTop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
          Blank[String]]] := (
        AddTo[GeneralUtilities`Formatting`PackagePrivate`$col, 
          GeneralUtilities`Formatting`PackagePrivate`strlen[
          GeneralUtilities`Formatting`PackagePrivate`s]]; 
        GeneralUtilities`Formatting`PackagePrivate`s), 
       GeneralUtilities`Formatting`PackagePrivate`reflowTop[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`other, 
          Blank[]]] := (
        GeneralUtilities`Formatting`PackagePrivate`$col = Infinity; 
        GeneralUtilities`Formatting`PackagePrivate`other), 
       GeneralUtilities`Formatting`PackagePrivate`linelen[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$len = 0}, 
         GeneralUtilities`Formatting`PackagePrivate`llen[
          GeneralUtilities`Formatting`PackagePrivate`e]; 
         GeneralUtilities`Formatting`PackagePrivate`$len], 
       GeneralUtilities`Formatting`PackagePrivate`llen[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`row]]] := 
       Scan[GeneralUtilities`Formatting`PackagePrivate`llen, 
         GeneralUtilities`Formatting`PackagePrivate`r], 
       GeneralUtilities`Formatting`PackagePrivate`llen[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
          Blank[String]]] := 
       AddTo[GeneralUtilities`Formatting`PackagePrivate`$len, 
         GeneralUtilities`Formatting`PackagePrivate`strlen[
         GeneralUtilities`Formatting`PackagePrivate`s]], 
       GeneralUtilities`Formatting`PackagePrivate`llen[
         Blank[GeneralUtilities`Formatting`PackagePrivate`$newtab]] := 
       Return[GeneralUtilities`Formatting`PackagePrivate`$len, Block], 
       GeneralUtilities`Formatting`PackagePrivate`llen[
         Blank[]] := Return[Infinity, Block], 
       GeneralUtilities`Formatting`PackagePrivate`$simpleBox = Alternatives[
         Blank[String], 
         GeneralUtilities`Formatting`PackagePrivate`row[
          BlankSequence[String]]], 
       GeneralUtilities`Formatting`PackagePrivate`reflowRow[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          Blank[GeneralUtilities`Formatting`PackagePrivate`row]]] := 
       Block[{GeneralUtilities`Formatting`PackagePrivate`$indent = Infinity, 
          GeneralUtilities`Formatting`PackagePrivate`$oindent = None}, 
         Map[
         GeneralUtilities`Formatting`PackagePrivate`reflowElem, 
          GeneralUtilities`Formatting`PackagePrivate`r]], 
       GeneralUtilities`Formatting`PackagePrivate`reflowElem[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
          Blank[String]]] := (
        AddTo[GeneralUtilities`Formatting`PackagePrivate`$indent, 
          GeneralUtilities`Formatting`PackagePrivate`strlen[
          GeneralUtilities`Formatting`PackagePrivate`s]]; 
        GeneralUtilities`Formatting`PackagePrivate`s), 
       GeneralUtilities`Formatting`PackagePrivate`reflowElem[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`r, 
          GeneralUtilities`Formatting`PackagePrivate`row[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`s, 
            BlankSequence[String]]]]] := (
        AddTo[GeneralUtilities`Formatting`PackagePrivate`$indent, 
          
          GeneralUtilities`Formatting`PackagePrivate`strlen[{
           GeneralUtilities`Formatting`PackagePrivate`s}]]; 
        GeneralUtilities`Formatting`PackagePrivate`r), 
       GeneralUtilities`Formatting`PackagePrivate`reflowElem[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`t, 
          GeneralUtilities`Formatting`PackagePrivate`$newtab[
           Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
            Blank[]]]]] := 
       Which[GeneralUtilities`Formatting`PackagePrivate`$oindent === None, 
         GeneralUtilities`Formatting`PackagePrivate`$oindent = (
           GeneralUtilities`Formatting`PackagePrivate`$indent = 
           GeneralUtilities`Formatting`PackagePrivate`n); 
         GeneralUtilities`Formatting`PackagePrivate`t, 
         And[
         GeneralUtilities`Formatting`PackagePrivate`$oindent === 
          GeneralUtilities`Formatting`PackagePrivate`n, 
          GeneralUtilities`Formatting`PackagePrivate`$indent <= 
          GeneralUtilities`Formatting`PackagePrivate`$prettyFormWidth], 
         AddTo[GeneralUtilities`Formatting`PackagePrivate`$indent, 1]; " ", 
         True, GeneralUtilities`Formatting`PackagePrivate`$indent = 
          GeneralUtilities`Formatting`PackagePrivate`n; 
         GeneralUtilities`Formatting`PackagePrivate`t], 
       GeneralUtilities`Formatting`PackagePrivate`reflowElem[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`e, 
          Blank[]]] := (
        GeneralUtilities`Formatting`PackagePrivate`$indent = Infinity; 
        GeneralUtilities`Formatting`PackagePrivate`e), 
       GeneralUtilities`Formatting`PackagePrivate`rowFunction[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       RowBox[{GeneralUtilities`Formatting`PackagePrivate`args}], 
       GeneralUtilities`Formatting`PackagePrivate`tabs[
         Pattern[GeneralUtilities`Formatting`PackagePrivate`n, 
          Blank[]]] := FromCharacterCode[
         ConstantArray[9, 
          Max[GeneralUtilities`Formatting`PackagePrivate`n, 0]]], 
       GeneralUtilities`Code`PackagePrivate`formatInternalFailureStack[
         Pattern[GeneralUtilities`Code`PackagePrivate`ba, 
          Blank[]]] := SlideView[
         Reverse[
          Apply[GeneralUtilities`Quoted, 
           BinaryDeserialize[GeneralUtilities`Code`PackagePrivate`ba], {1}]], 
         ImageSize -> Automatic, 
         AppearanceElements -> {
          "FirstSlide", "LastSlide", "SlideTotal", "PreviousSlide", 
           "NextSlide", "SliderControl"}, Background -> GrayLevel[0.98]], 
       Attributes[GeneralUtilities`Quoted] = {HoldAllComplete}, 
       TagSetDelayed[GeneralUtilities`Quoted, 
        Condition[
         MakeBoxes[
          Pattern[System`Private`T, 
           Blank[GeneralUtilities`Quoted]], StandardForm], 
         Refresh[
          Not[BoxForm`UseTextFormattingQ], None]], 
        RuleCondition[
         Replace[
          Unevaluated[System`Private`T], {HoldPattern[
             GeneralUtilities`Quoted[
              Pattern[GeneralUtilities`Control`PackagePrivate`q, 
               Blank[]]]] :> 
           GeneralUtilities`Control`PackagePrivate`CodePane[
            GeneralUtilities`Control`PackagePrivate`q], Blank[] :> Fail}]]], 
       TagSet[GeneralUtilities`Quoted, 
        MessageName[GeneralUtilities`Quoted, "usage"], 
        "\!\(\*RowBox[{\"Quoted\", \"[\", RowBox[{StyleBox[\"code\", \
\"TI\"]}], \"]\"}]\) is the inert body of code for the purposes of macro \
expansion."], 
       Attributes[GeneralUtilities`Control`PackagePrivate`CodePane] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`CodePane[
         Pattern[GeneralUtilities`Control`PackagePrivate`code, 
          Blank[]]] := PanelBox[
         Append[
          GeneralUtilities`PackageScope`CodeStyleBox[
           GeneralUtilities`MakeFormattedBoxes[
           GeneralUtilities`Control`PackagePrivate`code]], {
          Selectable -> False, FontSize -> Small, FontFamily -> "Courier"}], 
         ContentPadding -> False, Background -> GrayLevel[0.98]], 
       GeneralUtilities`Stack`PackagePrivate`interceptFailure[
         Optional[
          Pattern[GeneralUtilities`Stack`PackagePrivate`s, 
           Blank[]], 
          Alternatives[
           Blank[String], 
           Blank[Symbol]]], 
         Pattern[GeneralUtilities`Stack`PackagePrivate`a, 
          Blank[Association]]] := (
        GeneralUtilities`Stack`PackagePrivate`$strict = False; Throw[
          Failure[GeneralUtilities`Stack`PackagePrivate`s, 
           Map[GeneralUtilities`SkeletonizeHeavyData, 
            Prepend[
            GeneralUtilities`Stack`PackagePrivate`a, "Stack" -> 
             GeneralUtilities`GetSourceStack[]]]], 
          GeneralUtilities`Stack`PackagePrivate`$EvaluateStrictTag]), 
       GeneralUtilities`SkeletonizeHeavyData[
         Pattern[GeneralUtilities`Code`PackagePrivate`ss, 
          Blank[GeneralUtilities`SourceStackData]]] := 
       Map[GeneralUtilities`SkeletonizeHeavyData, 
         GeneralUtilities`Code`PackagePrivate`ss], 
       GeneralUtilities`SkeletonizeHeavyData[
         Pattern[GeneralUtilities`Code`PackagePrivate`assoc, 
          Blank[Association]]] := 
       Map[GeneralUtilities`SkeletonizeHeavyData, 
         GeneralUtilities`Code`PackagePrivate`assoc], 
       GeneralUtilities`SkeletonizeHeavyData[
         Pattern[GeneralUtilities`Code`PackagePrivate`expr, 
          Blank[]]] := Block[{GeneralUtilities`Code`PackagePrivate`res}, If[
           Not[
            GeneralUtilities`Code`PackagePrivate`HeavyQ[
            GeneralUtilities`Code`PackagePrivate`expr]], 
           Return[GeneralUtilities`Code`PackagePrivate`expr]]; 
         GeneralUtilities`Code`PackagePrivate`res = 
          ReplaceAll[GeneralUtilities`Code`PackagePrivate`expr, {PatternTest[
               Pattern[GeneralUtilities`Code`PackagePrivate`l, 
                Blank[List]], 
               GeneralUtilities`Code`PackagePrivate`PackedHeavyQ] :> 
             RuleCondition[
               GeneralUtilities`$Skeletonized$[List, 
                Dimensions[GeneralUtilities`Code`PackagePrivate`l]]], 
             Condition[
               Pattern[GeneralUtilities`Code`PackagePrivate`ra, 
                Blank[NumericArray]], 
               And[
                Developer`NumericArrayQHold[
                GeneralUtilities`Code`PackagePrivate`ra], 
                GeneralUtilities`Code`PackagePrivate`HeavyQ[
                GeneralUtilities`Code`PackagePrivate`ra]]] :> RuleCondition[
               GeneralUtilities`$Skeletonized$[NumericArray, 
                Dimensions[GeneralUtilities`Code`PackagePrivate`ra], 
                NumericArrayType[GeneralUtilities`Code`PackagePrivate`ra]]], 
             Condition[
               Pattern[GeneralUtilities`Code`PackagePrivate`s, 
                Blank[String]], 
               And[
                StringQ[
                 Unevaluated[GeneralUtilities`Code`PackagePrivate`s]], 
                StringLength[GeneralUtilities`Code`PackagePrivate`s] > 512]] :> 
             RuleCondition[
               GeneralUtilities`$Skeletonized$[String, 
                StringLength[GeneralUtilities`Code`PackagePrivate`s]]]}]; 
         If[ByteCount[GeneralUtilities`Code`PackagePrivate`res] > 65536, 
           GeneralUtilities`Code`PackagePrivate`res = 
            ReplaceAll[GeneralUtilities`Code`PackagePrivate`res, Condition[
                Pattern[GeneralUtilities`Code`PackagePrivate`e, 
                 Blank[]], 
                And[
                 System`Private`HoldNoEntryQ[
                 GeneralUtilities`Code`PackagePrivate`e], 
                 GeneralUtilities`Code`PackagePrivate`HeavyQ[
                 GeneralUtilities`Code`PackagePrivate`e]]] :> RuleCondition[
                GeneralUtilities`Code`PackagePrivate`toArbSkeleton[
                GeneralUtilities`Code`PackagePrivate`e]]]; 
           GeneralUtilities`Code`PackagePrivate`i = 3; 
           While[ByteCount[GeneralUtilities`Code`PackagePrivate`res] > 65536, 
             GeneralUtilities`Code`PackagePrivate`res = 
              Replace[GeneralUtilities`Code`PackagePrivate`res, PatternTest[
                  Pattern[GeneralUtilities`Code`PackagePrivate`e, 
                   Blank[]], GeneralUtilities`Code`PackagePrivate`HeavyQ] :> 
                RuleCondition[
                  GeneralUtilities`Code`PackagePrivate`toArbSkeleton[
                  GeneralUtilities`Code`PackagePrivate`e]], {
                 Decrement[GeneralUtilities`Code`PackagePrivate`i], 
                 Infinity}]; Null]; Null]; 
         GeneralUtilities`Code`PackagePrivate`res], 
       Attributes[GeneralUtilities`Code`PackagePrivate`HeavyQ] = {
        HoldAllComplete}, GeneralUtilities`Code`PackagePrivate`HeavyQ[
         Pattern[GeneralUtilities`Code`PackagePrivate`e, 
          Blank[]]] := ByteCount[
          Unevaluated[GeneralUtilities`Code`PackagePrivate`e]] > 32768, 
       Attributes[GeneralUtilities`Code`PackagePrivate`PackedHeavyQ] = {
        HoldAllComplete}, GeneralUtilities`Code`PackagePrivate`PackedHeavyQ[
         Pattern[GeneralUtilities`Code`PackagePrivate`e, 
          Blank[List]]] := And[
         GeneralUtilities`Code`PackagePrivate`HeavyQ[
         GeneralUtilities`Code`PackagePrivate`e], 
         Or[
          GeneralUtilities`Code`PackagePrivate`HoldPAQ[
          GeneralUtilities`Code`PackagePrivate`e], 
          VectorQ[
           Unevaluated[GeneralUtilities`Code`PackagePrivate`e], 
           GeneralUtilities`Code`PackagePrivate`HoldPAQ]]], 
       Attributes[GeneralUtilities`Code`PackagePrivate`HoldPAQ] = {
        HoldAllComplete}, GeneralUtilities`Code`PackagePrivate`HoldPAQ[
         Pattern[GeneralUtilities`Code`PackagePrivate`pa, 
          Blank[List]]] := Developer`PackedArrayQ[
         Unevaluated[GeneralUtilities`Code`PackagePrivate`pa]], 
       GeneralUtilities`Code`PackagePrivate`HoldPAQ[
         Blank[]] := False, 
       Attributes[GeneralUtilities`Code`PackagePrivate`toArbSkeleton] = {
        HoldAllComplete}, GeneralUtilities`Code`PackagePrivate`toArbSkeleton[
         Pattern[GeneralUtilities`Code`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`$Skeletonized$[
         Head[
          Unevaluated[GeneralUtilities`Code`PackagePrivate`e]], 
         ByteCount[
          Unevaluated[GeneralUtilities`Code`PackagePrivate`e]]], 
       GeneralUtilities`Stack`PackagePrivate`interceptInternalfailure[
         Pattern[GeneralUtilities`Stack`PackagePrivate`args, 
          BlankNullSequence[]]] := (
        GeneralUtilities`Stack`PackagePrivate`$strict = False; 
        Throw[Internal`$LastInternalFailure = 
          GeneralUtilities`InternalFailure[
           GeneralUtilities`Stack`PackagePrivate`args], 
          GeneralUtilities`Stack`PackagePrivate`$EvaluateStrictTag]), 
       GeneralUtilities`Stack`PackagePrivate`interceptMessage[
         Hold[
          Message[
           Pattern[GeneralUtilities`Stack`PackagePrivate`msg, 
            MessageName[
             Pattern[GeneralUtilities`Stack`PackagePrivate`sym, 
              Blank[]], 
             Blank[]]], 
           Pattern[GeneralUtilities`Stack`PackagePrivate`args, 
            BlankNullSequence[]]], True]] := (
        GeneralUtilities`Stack`PackagePrivate`$strict = False; Throw[
          Failure[GeneralUtilities`Stack`PackagePrivate`sym, 
           Map[GeneralUtilities`SkeletonizeHeavyData, 
            Association[
             If[
             Length[GeneralUtilities`$SourceStack] > 0, "Stack" -> 
              GeneralUtilities`GetSourceStack[], {}], 
             "MessageParameters" :> {
              GeneralUtilities`Stack`PackagePrivate`args}, "MessageTemplate" :> 
             GeneralUtilities`Stack`PackagePrivate`msg]]], 
          GeneralUtilities`Stack`PackagePrivate`$EvaluateStrictTag]), 
       GeneralUtilities`Stack`PackagePrivate`makeCELineVar[] := 
       With[{GeneralUtilities`Stack`PackagePrivate`s = Unique["CELine`$"]}, 
         SetAttributes[GeneralUtilities`Stack`PackagePrivate`s, Temporary]; 
         GeneralUtilities`Stack`PackagePrivate`s[] = 0; 
         GeneralUtilities`Stack`PackagePrivate`s[
            Pattern[GeneralUtilities`Stack`PackagePrivate`n, 
             Blank[Integer]]] := (GeneralUtilities`Stack`PackagePrivate`s[] = 
           GeneralUtilities`Stack`PackagePrivate`n); 
         GeneralUtilities`Stack`PackagePrivate`s], 
       GeneralUtilities`Stack`PackagePrivate`$LineStack = {}, 
       GeneralUtilities`Packages`PackagePrivate`unbox0[
         Cell[
          Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
           Blank[]], 
          BlankNullSequence[]]] := 
       GeneralUtilities`Packages`PackagePrivate`unbox0[
        GeneralUtilities`Packages`PackagePrivate`boxes], 
       GeneralUtilities`Packages`PackagePrivate`unbox0[
         BoxData[
          Pattern[GeneralUtilities`Packages`PackagePrivate`list, 
           Blank[List]]]] := Last[
         Map[
         GeneralUtilities`Packages`PackagePrivate`unbox1, 
          GeneralUtilities`Packages`PackagePrivate`list]], 
       GeneralUtilities`Packages`PackagePrivate`unbox0[
         BoxData[
          Pattern[GeneralUtilities`Packages`PackagePrivate`e, 
           Blank[]]]] := 
       GeneralUtilities`Packages`PackagePrivate`unbox1[
        GeneralUtilities`Packages`PackagePrivate`e], 
       GeneralUtilities`Packages`PackagePrivate`unbox0[
         Pattern[GeneralUtilities`Packages`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`Packages`PackagePrivate`unbox2[
        GeneralUtilities`Packages`PackagePrivate`e], 
       GeneralUtilities`Packages`PackagePrivate`unbox1[
         RowBox[
          Pattern[GeneralUtilities`Packages`PackagePrivate`list, {
            Repeated[
             Alternatives[
              Blank[RowBox], "\n"]]}]]] := Last[
         Map[
         GeneralUtilities`Packages`PackagePrivate`unbox2, 
          GeneralUtilities`Packages`PackagePrivate`list]], 
       GeneralUtilities`Packages`PackagePrivate`unbox1[
         Pattern[GeneralUtilities`Packages`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`Packages`PackagePrivate`unbox2[
        GeneralUtilities`Packages`PackagePrivate`e], 
       GeneralUtilities`Packages`PackagePrivate`unbox2["\n"] := Null, 
       GeneralUtilities`Packages`PackagePrivate`unbox2[
         RowBox[{
           Pattern[GeneralUtilities`Packages`PackagePrivate`e, 
            Blank[]], ";"}]] := (
        GeneralUtilities`Packages`PackagePrivate`unbox2[
         GeneralUtilities`Packages`PackagePrivate`e]; Null), 
       GeneralUtilities`Packages`PackagePrivate`unbox2[
         RowBox[{
           Alternatives[
           "Package", "PackageScope", "PackageExport", "PackageImport", 
            "BeginPackage", "EndPackage", "Begin", "End", "Needs"], "[", 
           BlankNullSequence[]}]] := Null, Condition[
         GeneralUtilities`Packages`PackagePrivate`unbox2[
          Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
           RowBox[{
             RowBox[{
               Pattern[GeneralUtilities`Packages`PackagePrivate`head, 
                Blank[String]], "[", 
               BlankNullSequence[], "]"}], 
             GeneralUtilities`Packages`PackagePrivate`space, ":=", 
             BlankNullSequence[]}]]], 
         NameQ[GeneralUtilities`Packages`PackagePrivate`head]] := 
       GeneralUtilities`Packages`PackagePrivate`unbox2b[
        GeneralUtilities`Packages`PackagePrivate`head, 
         GeneralUtilities`Packages`PackagePrivate`boxes], Condition[
         GeneralUtilities`Packages`PackagePrivate`unbox2[
          Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
           RowBox[{
             Pattern[GeneralUtilities`Packages`PackagePrivate`head, 
              Blank[String]], GeneralUtilities`Packages`PackagePrivate`space, 
             "=", 
             BlankNullSequence[]}]]], 
         NameQ[GeneralUtilities`Packages`PackagePrivate`head]] := 
       GeneralUtilities`Packages`PackagePrivate`unbox2b[
        GeneralUtilities`Packages`PackagePrivate`head, 
         GeneralUtilities`Packages`PackagePrivate`boxes], 
       GeneralUtilities`Packages`PackagePrivate`unbox2[
         Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
          Blank[]]] := 
       Block[{GeneralUtilities`Packages`PackagePrivate`$protectedSymbols = {},
           GeneralUtilities`Packages`PackagePrivate`res}, Quiet[
           
           Internal`HandlerBlock[{
            "Message", 
             GeneralUtilities`Packages`PackagePrivate`protectionHandler}, 
            GeneralUtilities`Packages`PackagePrivate`res = 
             GeneralUtilities`Packages`PackagePrivate`unboxFinal[
              GeneralUtilities`Packages`PackagePrivate`boxes]; Null], {
            MessageName[Set, "wrsym"], 
            MessageName[SetDelayed, "wrsym"], 
            MessageName[Set, "write"], 
            MessageName[SetDelayed, "write"]}]; 
         If[GeneralUtilities`Packages`PackagePrivate`$protectedSymbols =!= {},
            GeneralUtilities`Packages`PackagePrivate`$protectedSymbols = 
            DeleteDuplicates[
             GeneralUtilities`Packages`PackagePrivate`$protectedSymbols]; 
           Apply[Unprotect, 
             GeneralUtilities`Packages`PackagePrivate`$protectedSymbols]; 
           GeneralUtilities`Packages`PackagePrivate`res = 
            GeneralUtilities`Packages`PackagePrivate`unboxFinal[
             GeneralUtilities`Packages`PackagePrivate`boxes]; 
           Apply[Protect, 
             GeneralUtilities`Packages`PackagePrivate`$protectedSymbols]; 
           Null]; GeneralUtilities`Packages`PackagePrivate`res], 
       GeneralUtilities`Packages`PackagePrivate`unbox2b[
         Pattern[GeneralUtilities`Packages`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Packages`PackagePrivate`boxes, 
          Blank[]]] := 
       GeneralUtilities`BlockProtected[
        GeneralUtilities`Packages`PackagePrivate`head, 
         GeneralUtilities`Packages`PackagePrivate`unboxFinal[
         GeneralUtilities`Packages`PackagePrivate`boxes]], 
       Attributes[GeneralUtilities`BlockProtected] = {HoldRest}, 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`BlockProtected], {2, 
        2}], GeneralUtilities`BlockProtected[
         Pattern[GeneralUtilities`Code`PackagePrivate`syms, 
          Blank[List]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`body, 
          Blank[]]] := Catch[
         With[{
          GeneralUtilities`Code`PackagePrivate`psyms = 
           Select[GeneralUtilities`Code`PackagePrivate`syms, 
             GeneralUtilities`Code`PackagePrivate`procQ]}, 
          If[
          GeneralUtilities`Code`PackagePrivate`psyms === {}, 
           GeneralUtilities`Code`PackagePrivate`body, 
           Internal`WithLocalSettings[
            Unprotect[GeneralUtilities`Code`PackagePrivate`psyms], 
            GeneralUtilities`Code`PackagePrivate`body, 
            Protect[GeneralUtilities`Code`PackagePrivate`psyms]]]]], 
       GeneralUtilities`BlockProtected[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`body, 
          Blank[]]] := Catch[
         If[
          GeneralUtilities`Code`PackagePrivate`procQ[
          GeneralUtilities`Code`PackagePrivate`sym], 
          Internal`WithLocalSettings[
           Unprotect[GeneralUtilities`Code`PackagePrivate`sym], 
           GeneralUtilities`Code`PackagePrivate`body, 
           Protect[GeneralUtilities`Code`PackagePrivate`sym]], 
          GeneralUtilities`Code`PackagePrivate`body]], 
       Pattern[System`Private`LHS, 
         Blank[GeneralUtilities`BlockProtected]] := 
       RuleCondition[
        Developer`CheckArgumentCount[System`Private`LHS, 2, 2]; Fail], 
       TagSet[GeneralUtilities`BlockProtected, 
        MessageName[GeneralUtilities`BlockProtected, "locked"], 
        "Symbol `` is Locked and cannot be unprotected."], 
       Attributes[GeneralUtilities`Code`PackagePrivate`procQ] = {HoldFirst}, 
       GeneralUtilities`Code`PackagePrivate`procQ[
         Condition[
          Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
           Blank[String]], 
          Not[
           NameQ[GeneralUtilities`Code`PackagePrivate`sym]]]] := False, 
       GeneralUtilities`Code`PackagePrivate`procQ[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[]]] := 
       Block[{GeneralUtilities`Code`PackagePrivate`attrs = 
          Attributes[GeneralUtilities`Code`PackagePrivate`sym]}, If[
           MemberQ[GeneralUtilities`Code`PackagePrivate`attrs, Locked], 
           Message[
             MessageName[GeneralUtilities`BlockProtected, "locked"], 
             GeneralUtilities`Code`PackagePrivate`sym]; 
           Throw[$Failed, GeneralUtilities`BlockProtected]]; 
         MemberQ[GeneralUtilities`Code`PackagePrivate`attrs, Protected]], 
       GeneralUtilities`Packages`PackagePrivate`protectionHandler[
         Hold[
          Message[
           MessageName[
            Alternatives[Set, SetDelayed], 
            Alternatives["wrsym", "write"]], 
           HoldForm[
            Pattern[GeneralUtilities`Packages`PackagePrivate`sym, 
             Blank[Symbol]]], 
           BlankNullSequence[]], 
          Blank[]]] := 
       AppendTo[GeneralUtilities`Packages`PackagePrivate`$protectedSymbols, 
         GeneralUtilities`QualifiedSymbolName[
         GeneralUtilities`Packages`PackagePrivate`sym]], 
       GeneralUtilities`Packages`PackagePrivate`protectionHandler[
         Pattern[GeneralUtilities`Packages`PackagePrivate`h, 
          Blank[]]] := Null, 
       Attributes[GeneralUtilities`QualifiedSymbolName] = {HoldAllComplete}, 
       GeneralUtilities`QualifiedSymbolName[
         Pattern[GeneralUtilities`Code`PackagePrivate`s, 
          Blank[Symbol]]] := StringJoin[
         Context[GeneralUtilities`Code`PackagePrivate`s], 
         SymbolName[
          Unevaluated[GeneralUtilities`Code`PackagePrivate`s]]], 
       GeneralUtilities`QualifiedSymbolName[
         Blank[]] := $Failed, GeneralUtilities`FileLines[
         Pattern[GeneralUtilities`Files`PackagePrivate`file, 
          Blank[String]]] := 
       Module[{GeneralUtilities`Files`PackagePrivate`res, 
          GeneralUtilities`Files`PackagePrivate`str}, 
         GeneralUtilities`Files`PackagePrivate`str = 
          OpenRead[GeneralUtilities`Files`PackagePrivate`file]; 
         GeneralUtilities`Files`PackagePrivate`res = 
          ReadList[
           GeneralUtilities`Files`PackagePrivate`str, Record, 
            RecordSeparators -> "\n", NullRecords -> True]; 
         Close[GeneralUtilities`Files`PackagePrivate`str]; 
         GeneralUtilities`Files`PackagePrivate`res], 
       GeneralUtilities`FileLines[
         Pattern[GeneralUtilities`Files`PackagePrivate`file, 
          Blank[String]], 
         Pattern[GeneralUtilities`Files`PackagePrivate`n, 
          Blank[Integer]]] := 
       Module[{GeneralUtilities`Files`PackagePrivate`res, 
          GeneralUtilities`Files`PackagePrivate`str}, 
         GeneralUtilities`Files`PackagePrivate`str = 
          OpenRead[GeneralUtilities`Files`PackagePrivate`file]; 
         GeneralUtilities`Files`PackagePrivate`res = 
          ReadList[
           GeneralUtilities`Files`PackagePrivate`str, Record, 
            GeneralUtilities`Files`PackagePrivate`n, RecordSeparators -> "\n",
             NullRecords -> True]; 
         Close[GeneralUtilities`Files`PackagePrivate`str]; 
         GeneralUtilities`Files`PackagePrivate`res], 
       GeneralUtilities`FileLines[
         BlankSequence[]] := $Failed, 
       TagSet[GeneralUtilities`FileLines, 
        MessageName[GeneralUtilities`FileLines, "usage"], 
        "\!\(\*RowBox[{\"FileLines\", \"[\", RowBox[{StyleBox[\"path\", \
\"TI\"]}], \"]\"}]\) gives a list of lines contained in the given file.\n\!\(\
\*RowBox[{\"FileLines\", \"[\", RowBox[{StyleBox[\"path\", \"TI\"], \",\",  \
StyleBox[\"n\", \"TI\"]}], \"]\"}]\) gives the first \!\(\*StyleBox[\"n\", \
\"TI\"]\) lines."], Attributes[GeneralUtilities`Definitions] = {HoldAll}, 
       GeneralUtilities`Definitions[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[Symbol]]] := Internal`UnsafeQuietCheck[
         Apply[Join, 
          DeleteCases[{}][
           
           Map[#[GeneralUtilities`Code`PackagePrivate`sym]& , {
            DownValues, GeneralUtilities`PackageScope`OwnDefs, SubValues, 
             GeneralUtilities`Code`PackagePrivate`UpDefs, FormatValues, 
             GeneralUtilities`Code`PackagePrivate`AttributeDefs, 
             GeneralUtilities`Code`PackagePrivate`OptionDefs, 
             GeneralUtilities`Code`PackagePrivate`KernelPlaceholderDefs}]]], \
{}], GeneralUtilities`Definitions[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[String]]] := If[
         Not[
          NameQ[GeneralUtilities`Code`PackagePrivate`sym]], {}, 
         ToExpression[
         GeneralUtilities`Code`PackagePrivate`sym, InputForm, 
          GeneralUtilities`Definitions]], 
       Attributes[GeneralUtilities`Code`PackagePrivate`UpDefs] = {HoldFirst}, 
       GeneralUtilities`Code`PackagePrivate`UpDefs[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[Symbol]]] := 
       Map[GeneralUtilities`PackageScope`$UpValueWrapper, 
         UpValues[GeneralUtilities`Code`PackagePrivate`sym]], 
       Attributes[GeneralUtilities`PackageScope`$UpValueWrapper] = {
        HoldFirst}, GeneralUtilities`PackageScope`$UpValueWrapper = Identity, 
       Attributes[GeneralUtilities`Code`PackagePrivate`AttributeDefs] = {
        HoldAll}, GeneralUtilities`Code`PackagePrivate`AttributeDefs[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[]]] := 
       With[{GeneralUtilities`Code`PackagePrivate`attrs = 
          If[GeneralUtilities`PackageScope`$stripWeakAttributes, 
            DeleteCases[
             Alternatives[Protected, ReadProtected, Temporary]], Identity][
            Attributes[GeneralUtilities`Code`PackagePrivate`sym]]}, 
         If[GeneralUtilities`Code`PackagePrivate`attrs =!= {}, {HoldPattern[
             Attributes[GeneralUtilities`Code`PackagePrivate`sym]] :> 
           GeneralUtilities`Code`PackagePrivate`attrs}, {}]], 
       GeneralUtilities`PackageScope`$stripWeakAttributes = False, 
       Attributes[GeneralUtilities`Code`PackagePrivate`OptionDefs] = {
        HoldAll}, GeneralUtilities`Code`PackagePrivate`OptionDefs[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[]]] := 
       With[{GeneralUtilities`Code`PackagePrivate`opts = Options[
            Unevaluated[GeneralUtilities`Code`PackagePrivate`sym]]}, 
         If[GeneralUtilities`Code`PackagePrivate`opts =!= {}, {HoldPattern[
             Options[GeneralUtilities`Code`PackagePrivate`sym]] -> 
           GeneralUtilities`Code`PackagePrivate`opts}, {}]], 
       Attributes[
        GeneralUtilities`Code`PackagePrivate`KernelPlaceholderDefs] = {
        HoldAll}, GeneralUtilities`Code`PackagePrivate`KernelPlaceholderDefs[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[Symbol]]] := If[
         Not[
          System`Private`HasAnyCodesQ[
          GeneralUtilities`Code`PackagePrivate`sym]], {}, 
         DeleteCases[Null][{
           If[
            System`Private`HasOwnCodeQ[
            GeneralUtilities`Code`PackagePrivate`sym], 
            HoldPattern[GeneralUtilities`Code`PackagePrivate`sym] :> 
            GeneralUtilities`PackageScope`$KernelFunctionPlaceholder], 
           If[
            System`Private`HasDownCodeQ[
            GeneralUtilities`Code`PackagePrivate`sym], HoldPattern[
              GeneralUtilities`Code`PackagePrivate`sym[
               BlankNullSequence[]]] :> 
            GeneralUtilities`PackageScope`$KernelFunctionPlaceholder], 
           If[
            System`Private`HasSubCodeQ[
            GeneralUtilities`Code`PackagePrivate`sym], HoldPattern[
              GeneralUtilities`Code`PackagePrivate`sym[
               BlankNullSequence[]][
               BlankNullSequence[]]] :> 
            GeneralUtilities`PackageScope`$KernelFunctionPlaceholder], 
           If[
            System`Private`HasUpCodeQ[
            GeneralUtilities`Code`PackagePrivate`sym], HoldPattern[
              Blank[][
               BlankNullSequence[], GeneralUtilities`Code`PackagePrivate`sym, 
               BlankNullSequence[]]] :> 
            GeneralUtilities`PackageScope`$KernelFunctionPlaceholder], 
           If[
            System`Private`HasPrintCodeQ[
            GeneralUtilities`Code`PackagePrivate`sym], HoldPattern[
              Format[GeneralUtilities`Code`PackagePrivate`sym, 
               Blank[]]] :> 
            GeneralUtilities`PackageScope`$KernelFunctionPlaceholder]}]], 
       GeneralUtilities`$LastMalformedPanic = None, 
       Attributes[GeneralUtilities`Parts`PackagePrivate`opts$] = {Temporary}, 
       GeneralUtilities`PartsLevel[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[GeneralUtilities`Parts]]] := 
       GeneralUtilities`PartsLevel[GeneralUtilities`Parts`PackagePrivate`expr, 
         Apply[List, GeneralUtilities`Parts`PackagePrivate`parts]], 
       GeneralUtilities`PartsLevel[
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[List]]] := 
       With[{GeneralUtilities`Parts`PackagePrivate`bag = Internal`Bag[]}, 
         GeneralUtilities`ScanParts[(
           Internal`StuffBag[GeneralUtilities`Parts`PackagePrivate`bag, #]; 
           Null)& , GeneralUtilities`Parts`PackagePrivate`expr, 
           GeneralUtilities`Parts`PackagePrivate`parts]; 
         Internal`BagPart[GeneralUtilities`Parts`PackagePrivate`bag, All]], 
       GeneralUtilities`ScanParts[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[List]]] := (
        Block[{GeneralUtilities`Parts`PackagePrivate`$scanfunc = 
           GeneralUtilities`Parts`PackagePrivate`f}, 
          Apply[
          GeneralUtilities`Parts`PackagePrivate`scan, 
           GeneralUtilities`Parts`PackagePrivate`parts]][
         GeneralUtilities`Parts`PackagePrivate`expr]; Null), 
       GeneralUtilities`ScanParts[
         Pattern[GeneralUtilities`Parts`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`expr, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`parts, 
          Blank[GeneralUtilities`Parts]]] := (
        Block[{GeneralUtilities`Parts`PackagePrivate`$scanfunc = 
           GeneralUtilities`Parts`PackagePrivate`f}, 
          Apply[
          GeneralUtilities`Parts`PackagePrivate`scan, 
           GeneralUtilities`Parts`PackagePrivate`parts]][
         GeneralUtilities`Parts`PackagePrivate`expr]; Null), 
       GeneralUtilities`Parts`PackagePrivate`scan[] := 
       GeneralUtilities`Parts`PackagePrivate`$scanfunc, 
       GeneralUtilities`Parts`PackagePrivate`scan[
         Alternatives[All, Values], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`scanall[
         GeneralUtilities`Parts`PackagePrivate`scan[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`scan[
         Alternatives[
          Pattern[GeneralUtilities`Parts`PackagePrivate`k, 
           Blank[Key]], 
          Pattern[GeneralUtilities`Parts`PackagePrivate`k, 
           Blank[String]]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`scankey[
        GeneralUtilities`Parts`PackagePrivate`k, 
         GeneralUtilities`Parts`PackagePrivate`scan[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`scan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`i, 
          Blank[Integer]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`scanintpart[
        GeneralUtilities`Parts`PackagePrivate`i, 
         GeneralUtilities`Parts`PackagePrivate`scan[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`scan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`l, 
          Blank[List]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`scansplit[
         Map[
         GeneralUtilities`Parts`PackagePrivate`scan[#, 
           GeneralUtilities`Parts`PackagePrivate`rest]& , 
          GeneralUtilities`Parts`PackagePrivate`l]], 
       GeneralUtilities`Parts`PackagePrivate`scan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[Span]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`rest, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Parts`PackagePrivate`scanspan[
        GeneralUtilities`Parts`PackagePrivate`s, 
         GeneralUtilities`Parts`PackagePrivate`scan[
         GeneralUtilities`Parts`PackagePrivate`rest]], 
       GeneralUtilities`Parts`PackagePrivate`scanall[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         GeneralUtilities`Parts`PackagePrivate`ContainerQ[
         GeneralUtilities`Parts`PackagePrivate`e], 
         Scan[
         GeneralUtilities`Parts`PackagePrivate`s, 
          GeneralUtilities`Parts`PackagePrivate`e]], 
       GeneralUtilities`Parts`PackagePrivate`scankey[
         Pattern[GeneralUtilities`Parts`PackagePrivate`k, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         AssociationQ[GeneralUtilities`Parts`PackagePrivate`e], 
         GeneralUtilities`Parts`PackagePrivate`s[
          Lookup[
          GeneralUtilities`Parts`PackagePrivate`e, 
           GeneralUtilities`Parts`PackagePrivate`k]]], 
       GeneralUtilities`Parts`PackagePrivate`scanintpart[
         Pattern[GeneralUtilities`Parts`PackagePrivate`p, 
          Blank[]], 
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := If[
         And[
          GeneralUtilities`Parts`PackagePrivate`ContainerQ[
          GeneralUtilities`Parts`PackagePrivate`e], 1 <= 
          Abs[GeneralUtilities`Parts`PackagePrivate`p] <= 
          Length[GeneralUtilities`Parts`PackagePrivate`e]], 
         GeneralUtilities`Parts`PackagePrivate`s[
          Part[
          GeneralUtilities`Parts`PackagePrivate`e, 
           GeneralUtilities`Parts`PackagePrivate`p]]], 
       GeneralUtilities`Parts`PackagePrivate`scansplit[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := 
       If[Head[GeneralUtilities`Parts`PackagePrivate`e] =!= Missing, 
         Through[
          GeneralUtilities`Parts`PackagePrivate`s[
          GeneralUtilities`Parts`PackagePrivate`e]]], 
       GeneralUtilities`Parts`PackagePrivate`scanspan[
         Pattern[GeneralUtilities`Parts`PackagePrivate`s, 
          Blank[]]][
         Pattern[GeneralUtilities`Parts`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`ThrowFailure["NotImplemented"], 
       GeneralUtilities`Checked[
         Pattern[GeneralUtilities`Failure`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Failure`PackagePrivate`g, 
          Blank[]]][
         Pattern[GeneralUtilities`Failure`PackagePrivate`expr, 
          BlankNullSequence[]]] := GeneralUtilities`EvaluateChecked[
         GeneralUtilities`Failure`PackagePrivate`f[
         GeneralUtilities`Failure`PackagePrivate`expr], 
         GeneralUtilities`Failure`PackagePrivate`g], GeneralUtilities`Checked[
         Pattern[GeneralUtilities`Failure`PackagePrivate`f, 
          Blank[]]] := 
       GeneralUtilities`Checked[
        GeneralUtilities`Failure`PackagePrivate`f, Identity], 
       GeneralUtilities`Checked[
         Pattern[GeneralUtilities`Failure`PackagePrivate`f, 
          Blank[GeneralUtilities`Slice]], 
         Pattern[GeneralUtilities`Failure`PackagePrivate`g, 
          Blank[]]] := GeneralUtilities`Failure`PackagePrivate`f, 
       TagSet[GeneralUtilities`Checked, 
        MessageName[GeneralUtilities`Checked, "usage"], 
        "\!\(\*RowBox[{\"Checked\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"]}], \
\"]\", \"[\", RowBox[{RowBox[{StyleBox[\"args\", \"TI\"], StyleBox[\"\
\[Ellipsis]\", \"TR\"]}]}], \"]\"}]\) is the operator form of \
EvaluateChecked, which evaluates \!\(\*StyleBox[\"f\", \
\"TI\"]\)[\!\(\*StyleBox[\"args\", \"TI\"]\[Ellipsis]\)], returning early \
with a Failure[\[Ellipsis]] object if a message occured during evaluation.\n\
\!\(\*RowBox[{\"Checked\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"], \",\",  \
StyleBox[\"g\", \"TI\"]}], \"]\", \"[\", RowBox[{RowBox[{StyleBox[\"args\", \
\"TI\"], StyleBox[\"\[Ellipsis]\", \"TR\"]}]}], \"]\"}]\) evaluates \
\!\(\*StyleBox[\"f\", \"TI\"]\)[\!\(\*StyleBox[\"args\", \
\"TI\"]\[Ellipsis]\)], returning \!\(\*StyleBox[\"g\", \"TI\"]\)[Failure[\
\[Ellipsis]]] if a message occured."], 
       Attributes[GeneralUtilities`EvaluateChecked] = {HoldAllComplete}, 
       GeneralUtilities`EvaluateChecked[
         Pattern[GeneralUtilities`Failure`PackagePrivate`body, 
          Blank[]], 
         Optional[
          Pattern[GeneralUtilities`Failure`PackagePrivate`g, 
           Blank[]], Identity]] := Quiet[
         With[{
          GeneralUtilities`Failure`PackagePrivate`id = 
           GeneralUtilities`MessageStackID[]}, 
          Catch[
           Internal`HandlerBlock[{"Message", 
             GeneralUtilities`Failure`PackagePrivate`CheckedHandler[
             GeneralUtilities`Failure`PackagePrivate`id, 
              GeneralUtilities`Failure`PackagePrivate`g]}, 
            StackBegin[GeneralUtilities`Failure`PackagePrivate`body]], 
           GeneralUtilities`Failure`PackagePrivate`$CheckedTag$[
           GeneralUtilities`Failure`PackagePrivate`id]]]], 
       TagSet[GeneralUtilities`EvaluateChecked, 
        MessageName[GeneralUtilities`EvaluateChecked, "usage"], 
        "\!\(\*RowBox[{\"EvaluateChecked\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) evaluates \!\(\*StyleBox[\"body\", \"TI\"]\), returning \
early with a Failure[\[Ellipsis]] object if a message occurs during \
evaluation.\n\!\(\*RowBox[{\"EvaluateChecked\", \"[\", \
RowBox[{StyleBox[\"body\", \"TI\"], \",\",  StyleBox[\"f\", \"TI\"]}], \
\"]\"}]\) returns \!\(\*StyleBox[\"f\", \"TI\"]\)[Failure[\[Ellipsis]]] if a \
message occurs."], GeneralUtilities`MessageStackID[] := FirstCase[
         Reverse[
          Lookup[
           Internal`QuietStatus[], Stack], 2], {
           Pattern[GeneralUtilities`Failure`PackagePrivate`id, 
            Blank[Integer]], All, {}} :> 
         GeneralUtilities`Failure`PackagePrivate`id, 0, {2}], 
       GeneralUtilities`Failure`PackagePrivate`CheckedHandler[
         Pattern[GeneralUtilities`Failure`PackagePrivate`id, 
          Blank[]], 
         Pattern[GeneralUtilities`Failure`PackagePrivate`f, 
          Blank[]]][
         Hold[
          Message[
           Pattern[GeneralUtilities`Failure`PackagePrivate`msg, 
            MessageName[
             Pattern[GeneralUtilities`Failure`PackagePrivate`symbol, 
              Blank[]], 
             Pattern[GeneralUtilities`Failure`PackagePrivate`name, 
              Blank[]]]], 
           Pattern[GeneralUtilities`Failure`PackagePrivate`args, 
            BlankNullSequence[]]], 
          Blank[]]] := If[
         And[
          Not[
           GeneralUtilities`MessageQuietedQ[
           GeneralUtilities`Failure`PackagePrivate`msg, 
            GeneralUtilities`Failure`PackagePrivate`id + 1]], 
          GeneralUtilities`Failure`PackagePrivate`name =!= "shdw"], 
         StackInhibit[
          Throw[
           GeneralUtilities`Failure`PackagePrivate`f[
            System`Private`SetNoEntry[
             Failure[GeneralUtilities`Failure`PackagePrivate`symbol, 
              Association[
              "MessageTemplate" :> 
               GeneralUtilities`Failure`PackagePrivate`msg, 
               "MessageParameters" -> {
                GeneralUtilities`Failure`PackagePrivate`args}]]]], 
           GeneralUtilities`Failure`PackagePrivate`$CheckedTag$[
           GeneralUtilities`Failure`PackagePrivate`id]]]], 
       Attributes[GeneralUtilities`MessageQuietedQ] = {HoldFirst}, 
       GeneralUtilities`MessageQuietedQ[
         HoldPattern[
          MessageName[General, "stop"]]] := True, 
       GeneralUtilities`MessageQuietedQ[
         HoldPattern[
          MessageName[General, "stop"]], 
         Pattern[GeneralUtilities`Failure`PackagePrivate`id, 
          Blank[]]] := True, GeneralUtilities`MessageQuietedQ[
         Pattern[GeneralUtilities`Failure`PackagePrivate`msg, 
          Blank[]]] := Not[
         FreeQ[
          Alternatives[
           HoldPattern[GeneralUtilities`Failure`PackagePrivate`msg], All]][
          Lookup[
           Internal`QuietStatus[], Stack]]], GeneralUtilities`MessageQuietedQ[
         Pattern[GeneralUtilities`Failure`PackagePrivate`msg, 
          Blank[]], 
         Pattern[GeneralUtilities`Failure`PackagePrivate`id, 
          Blank[]]] := Or[
         Not[
          FreeQ[
           Alternatives[
            HoldPattern[GeneralUtilities`Failure`PackagePrivate`msg], All]][
           DeleteCases[
            Lookup[
             Internal`QuietStatus[], Stack], {
             Condition[
              Pattern[GeneralUtilities`Failure`PackagePrivate`i, 
               Blank[Integer]], GeneralUtilities`Failure`PackagePrivate`i < 
              GeneralUtilities`Failure`PackagePrivate`id], 
             Blank[], 
             Blank[]}, {2}]]], 
         Head[GeneralUtilities`Failure`PackagePrivate`msg] === $Off], 
       GeneralUtilities`Slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`parts, 
          BlankNullSequence[]]][
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]]] := Internal`UnsafeQuietCheck[
         Part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`parts], 
         GeneralUtilities`Slice`PackagePrivate`slice[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`parts]], 
       GeneralUtilities`Slice[] := Identity, 
       TagSet[GeneralUtilities`Slice, 
        MessageName[GeneralUtilities`Slice, "usage"], 
        "\!\(\*RowBox[{\"Slice\", \"[\", RowBox[{StyleBox[SubscriptBox[\"part\
\", StyleBox[\"1\", \"TR\"]], \"TI\"], \",\", StyleBox[SubscriptBox[\"part\", \
StyleBox[\"2\", \"TR\"]], \"TI\"], \",\", StyleBox[\"\[Ellipsis]\", \
\"TR\"]}], \"]\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"]}], \"]\"}]\) \
gives Part[\!\(\*StyleBox[\"expr\", \
\"TI\"]\),\!\(\*StyleBox[SubscriptBox[\"part\", StyleBox[\"1\", \"TR\"]], \
\"TI\"]\),\!\(\*StyleBox[SubscriptBox[\"part\", StyleBox[\"2\", \"TR\"]], \
\"TI\"]\),\[Ellipsis]].\n\!\(\*RowBox[{\"Slice\", \"[\", RowBox[{StyleBox[\"\
\[Ellipsis]\", \"TR\"]}], \"]\"}]\) represents an operator form of Part."], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`slice] = {
        SequenceHold}, GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`Slice`PackagePrivate`part[
        GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], All, 
         Pattern[GeneralUtilities`Slice`PackagePrivate`rest, 
          BlankSequence[]]] := 
       Map[GeneralUtilities`Slice`PackagePrivate`slice[#, 
          GeneralUtilities`Slice`PackagePrivate`rest]& , 
         GeneralUtilities`Slice`PackagePrivate`e], 
       GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], GeneralUtilities`$RandomElement, 
         Pattern[GeneralUtilities`Slice`PackagePrivate`rest, 
          BlankSequence[]]] := GeneralUtilities`Slice`PackagePrivate`slice[
         GeneralUtilities`Slice`PackagePrivate`random[
         GeneralUtilities`Slice`PackagePrivate`e], 
         GeneralUtilities`Slice`PackagePrivate`rest], 
       GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], GeneralUtilities`$RandomKey, 
         Pattern[GeneralUtilities`Slice`PackagePrivate`rest, 
          BlankSequence[]]] := GeneralUtilities`Slice`PackagePrivate`slice[
         GeneralUtilities`Slice`PackagePrivate`randomKey[
         GeneralUtilities`Slice`PackagePrivate`e], 
         GeneralUtilities`Slice`PackagePrivate`rest], 
       GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`f, 
          Alternatives[Keys, Values]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`rest, 
          BlankSequence[]]] := 
       Map[GeneralUtilities`Slice`PackagePrivate`slice[#, 
          GeneralUtilities`Slice`PackagePrivate`rest]& , 
         GeneralUtilities`Slice`PackagePrivate`f[
         GeneralUtilities`Slice`PackagePrivate`e]], 
       GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Alternatives[
          Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
           Blank[Span]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
           Blank[List]]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`rest, 
          BlankSequence[]]] := 
       Map[GeneralUtilities`Slice`PackagePrivate`slice[#, 
          GeneralUtilities`Slice`PackagePrivate`rest]& , 
         GeneralUtilities`Slice`PackagePrivate`part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`p]], 
       GeneralUtilities`Slice`PackagePrivate`slice[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`rest, 
          BlankSequence[]]] := GeneralUtilities`Slice`PackagePrivate`slice[
         GeneralUtilities`Slice`PackagePrivate`part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`p], 
         GeneralUtilities`Slice`PackagePrivate`rest], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`part] = {
        SequenceHold}, GeneralUtilities`Slice`PackagePrivate`part[
         HoldPattern[
          Pattern[GeneralUtilities`Slice`PackagePrivate`m, 
           Blank[Missing]]], 
         Blank[]] := GeneralUtilities`Slice`PackagePrivate`m, 
       GeneralUtilities`Slice`PackagePrivate`part[
         Alternatives[
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[List]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[Association]]], All] := 
       GeneralUtilities`Slice`PackagePrivate`e, 
       GeneralUtilities`Slice`PackagePrivate`part[
         Alternatives[
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[List]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[Association]]], GeneralUtilities`$RandomElement] := 
       GeneralUtilities`Slice`PackagePrivate`random[
        GeneralUtilities`Slice`PackagePrivate`e], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`a, 
          Blank[Association]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`f, 
          Alternatives[Keys, Values]]] := 
       GeneralUtilities`Slice`PackagePrivate`f[
        GeneralUtilities`Slice`PackagePrivate`a], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`a, 
          Blank[List]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`f, 
          Alternatives[Keys, Values]]] := 
       Map[GeneralUtilities`Slice`PackagePrivate`part[#, 
          GeneralUtilities`Slice`PackagePrivate`f]& , 
         GeneralUtilities`Slice`PackagePrivate`a], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Alternatives[
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[List]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[Association]]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[Span]]] := 
       GeneralUtilities`Slice`PackagePrivate`spart[
        GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[Association]], GeneralUtilities`$RandomKey] := 
       GeneralUtilities`Slice`PackagePrivate`randomKey[
        GeneralUtilities`Slice`PackagePrivate`e], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[Association]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`Slice`PackagePrivate`apart[
        GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[List]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`Slice`PackagePrivate`lpart[
        GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[Rule]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`Slice`PackagePrivate`rpart[
        GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`part[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`Slice`PackagePrivate`gpart[
        GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       TagSet[GeneralUtilities`$RandomElement, 
        MessageName[GeneralUtilities`$RandomElement, "usage"], 
        "$RandomElement is a part spec that can be used in a Slice that gives \
a random element at a level."], GeneralUtilities`Slice`PackagePrivate`random[
         Alternatives[
          Association[], {}]] := GeneralUtilities`AtomicMissing["Empty"], 
       GeneralUtilities`Slice`PackagePrivate`random[
         Alternatives[
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[List]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
           Blank[Association]]]] := 
       RandomChoice[GeneralUtilities`Slice`PackagePrivate`e], 
       GeneralUtilities`Slice`PackagePrivate`random[
         Blank[]] := GeneralUtilities`AtomicMissing["Atomic"], 
       GeneralUtilities`AtomicMissing[
         Pattern[GeneralUtilities`Slice`PackagePrivate`args, 
          BlankNullSequence[]]] := System`Private`SetNoEntry[
         Missing[GeneralUtilities`Slice`PackagePrivate`args]], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`spart] = {
        SequenceHold}, GeneralUtilities`Slice`PackagePrivate`spart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`s, 
          Span[
           Pattern[GeneralUtilities`Slice`PackagePrivate`n, 
            Blank[Integer]]]]] := 
       Which[GeneralUtilities`Slice`PackagePrivate`n > 0, 
         GeneralUtilities`Slice`PackagePrivate`spart[
         GeneralUtilities`Slice`PackagePrivate`e, 
          Span[1, GeneralUtilities`Slice`PackagePrivate`n]], 
         GeneralUtilities`Slice`PackagePrivate`n < 0, 
         GeneralUtilities`Slice`PackagePrivate`spart[
         GeneralUtilities`Slice`PackagePrivate`e, 
          Span[GeneralUtilities`Slice`PackagePrivate`n, -1]], 
         GeneralUtilities`Slice`PackagePrivate`n == 0, 
         Part[GeneralUtilities`Slice`PackagePrivate`e, 
          Span[1, 0]]], GeneralUtilities`Slice`PackagePrivate`spart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Span[
          Pattern[GeneralUtilities`Slice`PackagePrivate`a, 
           Blank[Integer]], All]] := 
       GeneralUtilities`Slice`PackagePrivate`spart[
        GeneralUtilities`Slice`PackagePrivate`e, 
         Span[GeneralUtilities`Slice`PackagePrivate`a, -1]], 
       GeneralUtilities`Slice`PackagePrivate`spart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Span[
          Pattern[GeneralUtilities`Slice`PackagePrivate`a, 
           Blank[Integer]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`b, 
           Blank[Integer]]]] := 
       With[{GeneralUtilities`Slice`PackagePrivate`len = 
          Length[GeneralUtilities`Slice`PackagePrivate`e]}, 
         With[{
          GeneralUtilities`Slice`PackagePrivate`a2 = 
           GeneralUtilities`Slice`PackagePrivate`fix[
            GeneralUtilities`Slice`PackagePrivate`a, 
             GeneralUtilities`Slice`PackagePrivate`len, 1], 
           GeneralUtilities`Slice`PackagePrivate`b2 = 
           GeneralUtilities`Slice`PackagePrivate`fix[
            GeneralUtilities`Slice`PackagePrivate`b, 
             GeneralUtilities`Slice`PackagePrivate`len, 0]}, 
          If[
          GeneralUtilities`Slice`PackagePrivate`a2 > 
           GeneralUtilities`Slice`PackagePrivate`b2, {}, 
           Part[GeneralUtilities`Slice`PackagePrivate`e, 
            Span[
            GeneralUtilities`Slice`PackagePrivate`a2, 
             GeneralUtilities`Slice`PackagePrivate`b2]]]]], 
       GeneralUtilities`Slice`PackagePrivate`spart[
         Blank[], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`AtomicMissing[
        "PartInvalid", GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`fix[
         Pattern[GeneralUtilities`Slice`PackagePrivate`x, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`len, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`j, 
          Blank[]]] := If[GeneralUtilities`Slice`PackagePrivate`x > 0, 
         Clip[
         GeneralUtilities`Slice`PackagePrivate`x, {
          1, GeneralUtilities`Slice`PackagePrivate`len}], 
         If[GeneralUtilities`Slice`PackagePrivate`x < 0, 
          Clip[
          GeneralUtilities`Slice`PackagePrivate`x + 
           GeneralUtilities`Slice`PackagePrivate`len + 1, {
           GeneralUtilities`Slice`PackagePrivate`j, 
            GeneralUtilities`Slice`PackagePrivate`len}], 
          GeneralUtilities`Slice`PackagePrivate`j]], 
       TagSet[GeneralUtilities`$RandomKey, 
        MessageName[GeneralUtilities`$RandomKey, "usage"], 
        "$RandomKey is a part spec that can be used in slice that gives a \
random key from an association at that level."], 
       GeneralUtilities`Slice`PackagePrivate`randomKey[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[Association]]] := GeneralUtilities`Slice`PackagePrivate`random[
         Keys[GeneralUtilities`Slice`PackagePrivate`e]], 
       GeneralUtilities`Slice`PackagePrivate`randomKey[
         Blank[]] := GeneralUtilities`AtomicMissing["NotAssociation"], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`apart] = {
        SequenceHold}, GeneralUtilities`Slice`PackagePrivate`apart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Alternatives[
          Pattern[GeneralUtilities`Slice`PackagePrivate`k, 
           Blank[Key]], 
          Pattern[GeneralUtilities`Slice`PackagePrivate`k, 
           Blank[String]]]] := 
       Part[GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`k], 
       GeneralUtilities`Slice`PackagePrivate`apart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`i, 
          Blank[Integer]]] := 
       If[1 <= Abs[GeneralUtilities`Slice`PackagePrivate`i] <= 
         GeneralUtilities`Slice`PackagePrivate`HeldLength[
          GeneralUtilities`Slice`PackagePrivate`e], 
         Part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`i], 
         GeneralUtilities`AtomicMissing[
         "PartAbsent", GeneralUtilities`Slice`PackagePrivate`i]], 
       GeneralUtilities`Slice`PackagePrivate`apart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`i, {
           BlankNullSequence[Integer]}]] := If[
         And[
         Min[GeneralUtilities`Slice`PackagePrivate`i] >= 1, 
          Max[GeneralUtilities`Slice`PackagePrivate`i] <= 
          GeneralUtilities`Slice`PackagePrivate`HeldLength[
           GeneralUtilities`Slice`PackagePrivate`e]], 
         Part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`i], 
         GeneralUtilities`AtomicMissing[
         "PartAbsent", GeneralUtilities`Slice`PackagePrivate`i]], 
       GeneralUtilities`Slice`PackagePrivate`apart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, {
           RepeatedNull[
            Alternatives[
             Blank[Key], 
             Blank[String]]]}]] := 
       Part[GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`p], 
       GeneralUtilities`Slice`PackagePrivate`apart[
         Blank[], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`AtomicMissing[
        "PartInvalid", GeneralUtilities`Slice`PackagePrivate`p], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`HeldLength] = {
        HoldAll}, GeneralUtilities`Slice`PackagePrivate`HeldLength[
         Pattern[GeneralUtilities`Slice`PackagePrivate`x, 
          Blank[]]] := Length[
         Unevaluated[GeneralUtilities`Slice`PackagePrivate`x]], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`lpart] = {
        SequenceHold}, GeneralUtilities`Slice`PackagePrivate`lpart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, {
           Blank[Rule], 
           BlankNullSequence[]}], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`s, 
          Blank[String]]] := 
       Lookup[GeneralUtilities`Slice`PackagePrivate`e, 
         GeneralUtilities`Slice`PackagePrivate`s], 
       GeneralUtilities`Slice`PackagePrivate`lpart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`i, 
          Blank[Integer]]] := 
       If[1 <= Abs[GeneralUtilities`Slice`PackagePrivate`i] <= 
         GeneralUtilities`Slice`PackagePrivate`HeldLength[
          GeneralUtilities`Slice`PackagePrivate`e], 
         Part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`i], 
         GeneralUtilities`AtomicMissing[
         "PartAbsent", GeneralUtilities`Slice`PackagePrivate`i]], 
       GeneralUtilities`Slice`PackagePrivate`lpart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`list, 
          Blank[List]]] := 
       Map[GeneralUtilities`Slice`PackagePrivate`lpart[
         GeneralUtilities`Slice`PackagePrivate`e, #]& , 
         GeneralUtilities`Slice`PackagePrivate`list], 
       GeneralUtilities`Slice`PackagePrivate`lpart[
         Blank[], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`AtomicMissing[
        "PartInvalid", GeneralUtilities`Slice`PackagePrivate`p], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`rpart] = {
        SequenceHold}, 
       GeneralUtilities`Slice`PackagePrivate`rpart[
        Pattern[GeneralUtilities`Slice`PackagePrivate`lhs, 
           Blank[]] -> Pattern[GeneralUtilities`Slice`PackagePrivate`rhs, 
           Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`s, 
          Blank[String]]] := 
       If[GeneralUtilities`Slice`PackagePrivate`s === 
         GeneralUtilities`Slice`PackagePrivate`lhs, 
         GeneralUtilities`Slice`PackagePrivate`rhs, 
         GeneralUtilities`AtomicMissing["PartInvalid"]], 
       GeneralUtilities`Slice`PackagePrivate`rpart[
        Pattern[GeneralUtilities`Slice`PackagePrivate`lhs, 
           Blank[]] -> Pattern[GeneralUtilities`Slice`PackagePrivate`rhs, 
           Blank[]], 
         Alternatives[1, -2]] := GeneralUtilities`Slice`PackagePrivate`lhs, 
       GeneralUtilities`Slice`PackagePrivate`rpart[
        Pattern[GeneralUtilities`Slice`PackagePrivate`lhs, 
           Blank[]] -> Pattern[GeneralUtilities`Slice`PackagePrivate`rhs, 
           Blank[]], 
         Alternatives[2, -1]] := GeneralUtilities`Slice`PackagePrivate`rhs, 
       GeneralUtilities`Slice`PackagePrivate`rpart[
         Blank[], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`AtomicMissing[
        "PartInvalid", GeneralUtilities`Slice`PackagePrivate`p], 
       Attributes[GeneralUtilities`Slice`PackagePrivate`gpart] = {
        SequenceHold}, GeneralUtilities`Slice`PackagePrivate`gpart[
         Pattern[GeneralUtilities`Slice`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`i, 
          Blank[Integer]]] := 
       If[1 <= GeneralUtilities`Slice`PackagePrivate`i <= 
         GeneralUtilities`Slice`PackagePrivate`HeldLength[
          GeneralUtilities`Slice`PackagePrivate`e], 
         Part[
         GeneralUtilities`Slice`PackagePrivate`e, 
          GeneralUtilities`Slice`PackagePrivate`i], 
         If[
          AtomQ[GeneralUtilities`Slice`PackagePrivate`e], 
          GeneralUtilities`AtomicMissing[
          "PartInvalid", GeneralUtilities`Slice`PackagePrivate`i], 
          GeneralUtilities`AtomicMissing[
          "PartAbsent", GeneralUtilities`Slice`PackagePrivate`i]]], 
       GeneralUtilities`Slice`PackagePrivate`gpart[
         Blank[], 
         Pattern[GeneralUtilities`Slice`PackagePrivate`p, 
          Blank[]]] := 
       GeneralUtilities`AtomicMissing[
        "PartInvalid", GeneralUtilities`Slice`PackagePrivate`p], 
       Dataset`$MissingModifierHeads = 
       Alternatives[
        Dataset`OverrideMissing, Dataset`OverrideMissingComplete, 
         Dataset`EmptyIsIndeterminate, Dataset`EmptyIsMissing, 
         Dataset`SingletonIsIndeterminate, Dataset`DropMissing, 
         Dataset`MissingIsSequence, Dataset`MissingIsIndeterminate], 
       Dataset`OverrideMissing[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          Blank[]]] := Dataset`BlockMissingBehavior[
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], PatternTest[
         Pattern[Dataset`Overrides`PackagePrivate`o, 
          Blank[Dataset`OverrideMissing]], System`Private`HoldNotValidQ] := 
       Dataset`Overrides`PackagePrivate`tryOptimize[
        Dataset`Overrides`PackagePrivate`o], 
       Attributes[Dataset`BlockMissingBehavior] = {HoldAll}, 
       Dataset`BlockMissingBehavior[
         Pattern[Dataset`Overrides`PackagePrivate`code, 
          Blank[]]] := 
       Block[{Missing}, Pattern[Dataset`Overrides`PackagePrivate`m, 
            Blank[Missing]] := (
           Dataset`Overrides`PackagePrivate`attachMissingUpvalues[]; 
           System`Private`SetNoEntry[Dataset`Overrides`PackagePrivate`m]); 
         Dataset`Overrides`PackagePrivate`code], 
       Dataset`Overrides`PackagePrivate`attachMissingUpvalues[] := (
        Unprotect[Missing]; Clear[Missing]; TagSetDelayed[Missing, 
          Dataset`Overrides`PackagePrivate`$MissingIsIndeterminateP[
           BlankNullSequence[], 
           BlankSequence[Missing], 
           BlankNullSequence[]], 
          GeneralUtilities`AtomicMissing["Indeterminate"]]; 
        TagSetDelayed[Missing, 
          Pattern[
          Dataset`Overrides`PackagePrivate`head, 
           Dataset`Overrides`PackagePrivate`$MissingIsSequenceP][
           Pattern[Dataset`Overrides`PackagePrivate`left, 
            BlankNullSequence[]], 
           BlankSequence[Missing], 
           Pattern[Dataset`Overrides`PackagePrivate`right, 
            BlankNullSequence[]]], 
          Dataset`Overrides`PackagePrivate`head[
          Dataset`Overrides`PackagePrivate`left, 
           Dataset`Overrides`PackagePrivate`right]]; TagSetDelayed[Missing, 
          Dataset`Overrides`PackagePrivate`$PreserveMissingP[
           Blank[]][
           Pattern[Dataset`Overrides`PackagePrivate`m, 
            Blank[Missing]]], Dataset`Overrides`PackagePrivate`m]; 
        TagSetDelayed[Missing, 
          Dataset`Overrides`PackagePrivate`$PreserveMissingP[
           Pattern[Dataset`Overrides`PackagePrivate`m, 
            Blank[Missing]], 
           BlankNullSequence[]], Dataset`Overrides`PackagePrivate`m]; Null), 
       Dataset`Overrides`PackagePrivate`$MissingIsIndeterminateP = 
       Alternatives[Times, Minus, Power], 
       Dataset`Overrides`PackagePrivate`$MissingIsSequenceP = 
       Alternatives[Plus, Min, Max, MinMax], 
       Dataset`Overrides`PackagePrivate`$PreserveMissingP = 
       Alternatives[
        Counts, CountsBy, GroupBy, Take, Drop, Select, MinimalBy, MaximalBy, 
         TakeLargest, TakeSmallest, TakeLargestBy, TakeSmallestBy], 
       Attributes[Dataset`Overrides`PackagePrivate`tryOptimize] = {
        HoldAllComplete}, Dataset`Overrides`PackagePrivate`tryOptimize[
         Pattern[Dataset`Overrides`PackagePrivate`om, 
          Dataset`OverrideMissing[
           Pattern[Dataset`Overrides`PackagePrivate`spec, 
            Blank[]]]]] := If[
         FreeQ[
         Dataset`Overrides`PackagePrivate`spec, 
          Dataset`Overrides`PackagePrivate`$Unoptimizable], 
         Dataset`Overrides`PackagePrivate`spec, 
         System`Private`HoldSetValid[Dataset`Overrides`PackagePrivate`om]], 
       Dataset`Overrides`PackagePrivate`$Unoptimizable = 
       Alternatives[
        Counts, CountsBy, GroupBy, Take, Drop, MinimalBy, MaximalBy, 
         TakeLargest, TakeSmallest, TakeLargestBy, TakeSmallestBy, Plus, Min, 
         Max, MinMax, Times, Minus, Power], Dataset`OverrideMissingComplete[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          Blank[]]] := Dataset`BlockMissingBehaviorComplete[
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], 
       Attributes[Dataset`BlockMissingBehaviorComplete] = {HoldAll}, 
       Dataset`BlockMissingBehaviorComplete[
         Pattern[Dataset`Overrides`PackagePrivate`code, 
          Blank[]]] := Internal`WithLocalSettings[
         Apply[
         Unprotect, Dataset`Overrides`PackagePrivate`$AllChangedSymbols], 
         Internal`InheritedBlock[
          Evaluate[Dataset`Overrides`PackagePrivate`$AllChangedSymbols], 
          Scan[(#[
              Condition[
               Pattern[Dataset`Overrides`PackagePrivate`l, 
                Blank[List]], 
               And[
                Not[
                 Developer`PackedArrayQ[Dataset`Overrides`PackagePrivate`l]], 
                MemberQ[Dataset`Overrides`PackagePrivate`l, 
                 Blank[Missing]]]]] := #[
              DeleteCases[Dataset`Overrides`PackagePrivate`l, 
               Blank[Missing]]])& , 
            Dataset`Overrides`PackagePrivate`$DropMissing]; Scan[(#[
              Condition[
               Pattern[Dataset`Overrides`PackagePrivate`a, 
                Blank[Association]], 
               MemberQ[Dataset`Overrides`PackagePrivate`a, 
                Blank[Missing]]]] := #[
              DeleteCases[Dataset`Overrides`PackagePrivate`a, 
               Blank[Missing]]])& , 
            Dataset`Overrides`PackagePrivate`$DropMissing]; Scan[(#[
              Alternatives[{}, 
               Association[]]] = 
            GeneralUtilities`AtomicMissing["Indeterminate"])& , 
            Dataset`Overrides`PackagePrivate`$EmptyIsIndeterminate]; Scan[(#[
              Alternatives[{}, 
               Association[]]] = GeneralUtilities`AtomicMissing["Empty"])& , 
            Dataset`Overrides`PackagePrivate`$EmptyIsMissing]; Scan[(#[
              Blank[Missing]] = 
            GeneralUtilities`AtomicMissing["Indeterminate"])& , 
            Dataset`Overrides`PackagePrivate`$EmptyIsIndeterminate]; Scan[(#[
              Alternatives[{}, {
                Blank[]}]] = 
            GeneralUtilities`AtomicMissing["Indeterminate"])& , 
            Dataset`Overrides`PackagePrivate`$SingletonIsIndeterminate]; 
          Scan[(#[
              Condition[
               Pattern[Dataset`Overrides`PackagePrivate`a, 
                Blank[Association]], 
               Length[Dataset`Overrides`PackagePrivate`a] < 2]] = 
            GeneralUtilities`AtomicMissing["Indeterminate"])& , 
            Dataset`Overrides`PackagePrivate`$SingletonIsIndeterminate]; 
          Scan[TagSetDelayed[Missing, 
             #[
              Pattern[Dataset`Overrides`PackagePrivate`left, 
               BlankNullSequence[]], 
              BlankSequence[Missing], 
              Pattern[Dataset`Overrides`PackagePrivate`right, 
               BlankNullSequence[]]], 
             GeneralUtilities`AtomicMissing["Indeterminate"]]& , 
            Dataset`Overrides`PackagePrivate`$MissingIsIndeterminate]; 
          Scan[TagSetDelayed[Missing, 
             #[
              Pattern[Dataset`Overrides`PackagePrivate`left, 
               BlankNullSequence[]], 
              BlankSequence[Missing], 
              Pattern[Dataset`Overrides`PackagePrivate`right, 
               BlankNullSequence[]]], 
             #[
             Dataset`Overrides`PackagePrivate`left, 
              Dataset`Overrides`PackagePrivate`right]]& , 
            Dataset`Overrides`PackagePrivate`$MissingIsSequence]; 
          Scan[TagSetDelayed[Missing, 
             #[
              Pattern[Dataset`Overrides`PackagePrivate`left, 
               BlankNullSequence[]], 
              Pattern[Dataset`Overrides`PackagePrivate`m, 
               Blank[Missing]], 
              Pattern[Dataset`Overrides`PackagePrivate`right, 
               BlankNullSequence[]]], Dataset`Overrides`PackagePrivate`m]& , 
            Dataset`Overrides`PackagePrivate`$PreserveMissing]; 
          Dataset`Overrides`PackagePrivate`code], 
         Apply[Protect, Dataset`Overrides`PackagePrivate`$AllChangedSymbols]],
        Dataset`Overrides`PackagePrivate`$AllChangedSymbols = {
        Commonest, First, InterquartileRange, Kurtosis, Last, Mean, Median, 
         Missing, Most, Quartiles, Rest, RootMeanSquare, Skewness, 
         StandardDeviation, Total, Variance}, 
       Dataset`Overrides`PackagePrivate`$DropMissing = {
        Total, Mean, Median, Commonest, StandardDeviation, Variance, 
         RootMeanSquare, Quartiles, Skewness, Kurtosis, InterquartileRange}, 
       Dataset`Overrides`PackagePrivate`$EmptyIsIndeterminate = {
        Mean, Median, RootMeanSquare}, 
       Dataset`Overrides`PackagePrivate`$EmptyIsMissing = {
        First, Last, Most, Rest}, 
       Dataset`Overrides`PackagePrivate`$SingletonIsIndeterminate = {
        StandardDeviation, Variance}, 
       Dataset`Overrides`PackagePrivate`$MissingIsIndeterminate = {
        Times, Minus, Power}, 
       Dataset`Overrides`PackagePrivate`$MissingIsSequence = {
        Plus, Min, Max, MinMax}, 
       Dataset`Overrides`PackagePrivate`$PreserveMissing = {
        Counts, CountsBy, GroupBy, Take, Drop, Select, MinimalBy, MaximalBy, 
         TakeLargest, TakeSmallest, TakeLargestBy, TakeSmallestBy}, 
       Dataset`EmptyIsIndeterminate[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          Blank[]]] := If[Length[Dataset`Overrides`PackagePrivate`e] === 0, 
         GeneralUtilities`AtomicMissing["Indeterminate"], 
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], Dataset`EmptyIsMissing[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          Blank[]]] := If[Length[Dataset`Overrides`PackagePrivate`e] === 0, 
         GeneralUtilities`AtomicMissing["Empty"], 
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], 
       Dataset`SingletonIsIndeterminate[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          Blank[]]] := If[Length[Dataset`Overrides`PackagePrivate`e] <= 1, 
         GeneralUtilities`AtomicMissing["Indeterminate"], 
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], Dataset`DropMissing[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          Blank[]]] := Which[
         MissingQ[Dataset`Overrides`PackagePrivate`e], 
         Dataset`Overrides`PackagePrivate`e, 
         And[
          Not[
           Developer`PackedArrayQ[Dataset`Overrides`PackagePrivate`e]], 
          MemberQ[Dataset`Overrides`PackagePrivate`e, 
           Blank[Missing]]], 
         Dataset`Overrides`PackagePrivate`f[
          DeleteCases[Dataset`Overrides`PackagePrivate`e, 
           Blank[Missing]]], True, 
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], Dataset`MissingIsSequence[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          BlankNullSequence[]]] := Apply[Dataset`Overrides`PackagePrivate`f, 
         DeleteCases[{Dataset`Overrides`PackagePrivate`e}, 
          Blank[Missing]]], Dataset`MissingIsIndeterminate[
         Pattern[Dataset`Overrides`PackagePrivate`f, 
          Blank[]]][
         Pattern[Dataset`Overrides`PackagePrivate`e, 
          BlankNullSequence[]]] := If[
         MemberQ[Dataset`Overrides`PackagePrivate`e, 
          Blank[Missing]], 
         GeneralUtilities`AtomicMissing["Indeterminate"], 
         Dataset`Overrides`PackagePrivate`f[
         Dataset`Overrides`PackagePrivate`e]], TypeSystem`TypePart[
         Pattern[TypeSystem`Parts`PackagePrivate`type, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`part, 
          Blank[]]] := Which[
         TypeSystem`ScalarPartQ[TypeSystem`Parts`PackagePrivate`part], 
         TypeSystem`Parts`PackagePrivate`spart[
         TypeSystem`Parts`PackagePrivate`type, 
          TypeSystem`Parts`PackagePrivate`part], 
         TypeSystem`VectorPartQ[TypeSystem`Parts`PackagePrivate`part], 
         TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Parts`PackagePrivate`type, 
          TypeSystem`Parts`PackagePrivate`part], 
         TypeSystem`TypeQ[TypeSystem`Parts`PackagePrivate`part], 
         TypeSystem`AnyType, True, 
         TypeSystem`PartFailure[
         "Spec", TypeSystem`Parts`PackagePrivate`type, 
          TypeSystem`Parts`PackagePrivate`part]], TypeSystem`TypePart[
         Pattern[TypeSystem`Parts`PackagePrivate`type, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          BlankSequence[]]] := 
       Block[{TypeSystem`Parts`PackagePrivate`ps = {
           TypeSystem`Parts`PackagePrivate`p}, 
          TypeSystem`Parts`PackagePrivate`i}, 
         If[
          VectorQ[TypeSystem`Parts`PackagePrivate`ps, TypeSystem`ScalarPartQ], 
          Fold[
          TypeSystem`Parts`PackagePrivate`spart, 
           TypeSystem`Parts`PackagePrivate`type, 
           TypeSystem`Parts`PackagePrivate`ps], 
          TypeSystem`Parts`PackagePrivate`i = 
           Length[TypeSystem`Parts`PackagePrivate`ps]; 
          GeneralUtilities`FoldRecurse[
           TypeSystem`Parts`PackagePrivate`rpart[#, #2, 
             Decrement[TypeSystem`Parts`PackagePrivate`i] == 1]& , 
            TypeSystem`Parts`PackagePrivate`type, 
            TypeSystem`Parts`PackagePrivate`ps]]], TypeSystem`TypePart[
         Pattern[TypeSystem`Parts`PackagePrivate`type, 
          Blank[]]] := TypeSystem`Parts`PackagePrivate`type, 
       TypeSystem`ScalarPartQ[
         Blank[Integer]] := True, TypeSystem`ScalarPartQ[
         Blank[String]] := True, TypeSystem`ScalarPartQ[
         Blank[Key]] := True, TypeSystem`ScalarPartQ[
         TypeSystem`Atom[
          Alternatives[
           Blank[Integer], 
           Blank[String]]]] := True, TypeSystem`ScalarPartQ[
         Blank[]] := False, 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`Atom]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], 
       TypeSystem`Atom[TypeSystem`AnyType] := TypeSystem`AnyType, 
       TypeSystem`Atom[TypeSystem`UnknownType] := TypeSystem`UnknownType, 
       TagSetDelayed[TypeSystem`Atom, 
        MakeBoxes[
         TypeSystem`Atom[
          Quantity[
           Blank[], 
           Pattern[TypeSystem`Types`PackagePrivate`unit, 
            Blank[]]]], StandardForm], 
        Block[{TypeSystem`Atom, Quantity}, 
         MakeBoxes[
          TypeSystem`Atom[
           Quantity[TypeSystem`Types`PackagePrivate`unit]], StandardForm]]], 
       TagSetDelayed[TypeSystem`Atom, 
        MakeBoxes[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          PatternTest[
           TypeSystem`Atom[
            Blank[]], TypeSystem`HoldValidTypeQ]], StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[
          TypeSystem`Summary`PackagePrivate`t], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`Atom, 
        MessageName[TypeSystem`Atom, "shdw"], 
        "Symbol `1` appears in multiple contexts `2`; definitions in context \
`3` may shadow or be shadowed by other definitions."], 
       TagSet[TypeSystem`Atom, 
        MessageName[TypeSystem`Atom, "usage"], 
        "Atom[head] represents an atom like Integer or Real, or more \
generally a non-recursive expression like Image."], 
       TypeSystem`Summary`PackagePrivate`$useTypeForm := 
       And[TypeSystem`$TypeStandardFormsEnabled, 
         Not[BoxForm`$UseTextFormattingWhenEvaluating]], 
       TypeSystem`$TypeStandardFormsEnabled = False, 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]], 
         Blank[]] := TypeSystem`Parts`PackagePrivate`f, Condition[
         TypeSystem`Parts`PackagePrivate`spart[
          TypeSystem`Assoc[
           TypeSystem`Atom[
            Pattern[TypeSystem`Parts`PackagePrivate`k, 
             Blank[]]], 
           Pattern[TypeSystem`Parts`PackagePrivate`v, 
            Blank[]], 
           Pattern[TypeSystem`Parts`PackagePrivate`n, 
            Blank[]]], 
          Alternatives[
           Key[
            Pattern[TypeSystem`Parts`PackagePrivate`k2, 
             Blank[]]], 
           Pattern[TypeSystem`Parts`PackagePrivate`k2, 
            Blank[String]]]], 
         TypeSystem`AtomConformsQ[
         TypeSystem`Parts`PackagePrivate`k2, 
          TypeSystem`Parts`PackagePrivate`k]] := 
       TypeSystem`Parts`PackagePrivate`v, 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`a, 
          TypeSystem`Assoc[
           Pattern[TypeSystem`Parts`PackagePrivate`k, 
            Blank[]], 
           Pattern[TypeSystem`Parts`PackagePrivate`v, 
            Blank[]], 
           Pattern[TypeSystem`Parts`PackagePrivate`n, 
            Blank[]]]], 
         Alternatives[
          Key[
           Pattern[TypeSystem`Parts`PackagePrivate`k2, 
            Blank[]]], 
          Pattern[TypeSystem`Parts`PackagePrivate`k2, 
           Blank[String]]]] := If[
         Not[
          TrueQ[
           TypeSystem`SmallConformsQ[
           TypeSystem`Parts`PackagePrivate`k2, 
            TypeSystem`Parts`PackagePrivate`k]]], 
         TypeSystem`PartFailure["Mismatch", TypeSystem`Parts`PackagePrivate`a, 
          Key[TypeSystem`Parts`PackagePrivate`k2]], 
         TypeSystem`Parts`PackagePrivate`v], 
       TypeSystem`Parts`PackagePrivate`spart[
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          Pattern[TypeSystem`Parts`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`n, 
           Blank[]]], 
         Alternatives[
          Blank[String], 
          TypeSystem`Atom[String]]] := TypeSystem`Parts`PackagePrivate`v, 
       TypeSystem`Parts`PackagePrivate`spart[
         Alternatives[
          Pattern[TypeSystem`Parts`PackagePrivate`t, 
           Blank[TypeSystem`Vector]], 
          Pattern[TypeSystem`Parts`PackagePrivate`t, 
           Blank[TypeSystem`Assoc]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := If[
         Or[
          Not[
           TypeSystem`FixedLengthQ[TypeSystem`Parts`PackagePrivate`t]], 1 <= 
          Abs[TypeSystem`Parts`PackagePrivate`n] <= 
          TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]], 
         TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
         TypeSystem`PartFailure[
         "Range", TypeSystem`Parts`PackagePrivate`t, 
          TypeSystem`Parts`PackagePrivate`n]], 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          Blank[Integer]]] := 
       TypeSystem`TypeValues[
        TypeSystem`Parts`PackagePrivate`t, TypeSystem`Parts`PackagePrivate`p],
        TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`s, 
          Blank[TypeSystem`Struct]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          Blank[Integer]]] := 
       If[1 <= Abs[TypeSystem`Parts`PackagePrivate`p] <= 
         TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`s], 
         Part[
          TypeSystem`TypeValues[TypeSystem`Parts`PackagePrivate`s], 
          TypeSystem`Parts`PackagePrivate`p], 
         TypeSystem`PartFailure[
         "Mismatch", TypeSystem`Parts`PackagePrivate`s, 
          TypeSystem`Parts`PackagePrivate`p]], 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`s, 
          Blank[TypeSystem`Struct]], 
         Pattern[TypeSystem`Parts`PackagePrivate`key, 
          Alternatives[
           Blank[String], 
           Key[
            Blank[String]], 
           Blank[Integer]]]] := 
       TypeSystem`TypeValues[
        TypeSystem`Parts`PackagePrivate`s, 
         TypeSystem`Parts`PackagePrivate`key], 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[]], 
         TypeSystem`Atom[Integer]] := 
       TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Atom]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          Blank[]]] := 
       TypeSystem`PartFailure[
        "Atomic", TypeSystem`Parts`PackagePrivate`t, 
         TypeSystem`Parts`PackagePrivate`p], 
       TypeSystem`Parts`PackagePrivate`spart[TypeSystem`AnyType, 
         Blank[]] := TypeSystem`AnyType, 
       TypeSystem`Parts`PackagePrivate`spart[TypeSystem`UnknownType, 
         Blank[]] := TypeSystem`UnknownType, 
       TypeSystem`Parts`PackagePrivate`spart[
         Pattern[TypeSystem`Parts`PackagePrivate`a, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`b, 
          Blank[]]] := 
       TypeSystem`PartFailure[
        "NotApplicable", TypeSystem`Parts`PackagePrivate`a, 
         TypeSystem`Parts`PackagePrivate`b], TypeSystem`AtomConformsQ[
         Pattern[TypeSystem`Validation`PackagePrivate`atom, 
          Blank[]], 
         Pattern[TypeSystem`Validation`PackagePrivate`type, 
          Blank[]]] := 
       TypeSystem`Validation`PackagePrivate`catom[
        TypeSystem`Validation`PackagePrivate`atom, 
         TypeSystem`Validation`PackagePrivate`type], 
       Attributes[TypeSystem`Validation`PackagePrivate`atom] = {HoldAll}, 
       TypeSystem`Validation`PackagePrivate`atom[Integer, 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       GeneralUtilities`Quoted[IntegerQ][
        TypeSystem`Validation`PackagePrivate`x], 
       TypeSystem`Validation`PackagePrivate`atom[String, 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       GeneralUtilities`Quoted[StringQ][
        TypeSystem`Validation`PackagePrivate`x], 
       TypeSystem`Validation`PackagePrivate`atom[
         Quantity[
          Blank[], 
          Pattern[TypeSystem`Validation`PackagePrivate`u, 
           Blank[]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       GeneralUtilities`Quoted[MatchQ][TypeSystem`Validation`PackagePrivate`x, 
         Quantity[
          Blank[], TypeSystem`Validation`PackagePrivate`u]], 
       TypeSystem`Validation`PackagePrivate`atom[
         Entity[
          Pattern[TypeSystem`Validation`PackagePrivate`e, 
           Blank[]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       GeneralUtilities`Quoted[MatchQ][TypeSystem`Validation`PackagePrivate`x, 
         Entity[TypeSystem`Validation`PackagePrivate`e, 
          Blank[]]], 
       TypeSystem`Validation`PackagePrivate`atom[TypeSystem`Boolean, 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       GeneralUtilities`Quoted[BooleanQ][
        TypeSystem`Validation`PackagePrivate`x], 
       TypeSystem`Validation`PackagePrivate`atom[
         Pattern[TypeSystem`Validation`PackagePrivate`e, 
          Blank[TypeSystem`Enumeration]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       GeneralUtilities`Quoted[MemberQ][
        TypeSystem`Validation`PackagePrivate`e, 
         TypeSystem`Validation`PackagePrivate`x], 
       TypeSystem`Validation`PackagePrivate`atom[
         Pattern[TypeSystem`Validation`PackagePrivate`head, 
          Blank[Symbol]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := GeneralUtilities`Quoted[SameQ][
         GeneralUtilities`Quoted[Head][
         TypeSystem`Validation`PackagePrivate`x], 
         TypeSystem`Validation`PackagePrivate`head], 
       TagSet[TypeSystem`Boolean, 
        MessageName[TypeSystem`Boolean, "usage"], 
        "Boolean represents one of the two symbols True or False."], 
       Attributes[TypeSystem`Enumeration] = {Flat, Orderless}, 
       TagSet[TypeSystem`Enumeration, 
        MessageName[TypeSystem`Enumeration, "usage"], 
        "Enumeration represents one of several different literal values."], 
       Attributes[TypeSystem`Validation`PackagePrivate`catom] = {HoldAll}, 
       TypeSystem`Validation`PackagePrivate`catom[
         Pattern[TypeSystem`Validation`PackagePrivate`s, 
          Blank[String]], 
         Pattern[TypeSystem`Validation`PackagePrivate`e, 
          Blank[TypeSystem`Enumeration]]] := 
       MemberQ[TypeSystem`Validation`PackagePrivate`e, 
         TypeSystem`Validation`PackagePrivate`s], 
       TypeSystem`Validation`PackagePrivate`catom[
         Alternatives[True, False], TypeSystem`Boolean] := True, 
       TypeSystem`Validation`PackagePrivate`catom[
         Entity[
          Pattern[TypeSystem`Validation`PackagePrivate`t, 
           Blank[]], 
          Blank[]], 
         Entity[
          Pattern[TypeSystem`Validation`PackagePrivate`t, 
           Blank[]]]] := True, TypeSystem`Validation`PackagePrivate`catom[
         Quantity[
          Blank[], 
          Pattern[TypeSystem`Validation`PackagePrivate`t, 
           Blank[]]], 
         Quantity[
          Blank[], 
          Pattern[TypeSystem`Validation`PackagePrivate`t, 
           Blank[]]]] := True, TypeSystem`Validation`PackagePrivate`catom[
         Blank[Missing], 
         Blank[]] := True, TypeSystem`Validation`PackagePrivate`catom[
         PatternTest[
          Blank[], NumericQ], Real] := True, 
       TypeSystem`Validation`PackagePrivate`catom[
         Blank[Integer], Rational] := True, 
       TypeSystem`Validation`PackagePrivate`catom[
         Pattern[TypeSystem`Validation`PackagePrivate`s, 
          Blank[]], 
         Pattern[TypeSystem`Validation`PackagePrivate`a, 
          Blank[]]] := 
       Head[TypeSystem`Validation`PackagePrivate`s] === 
        TypeSystem`Validation`PackagePrivate`a, TypeSystem`SmallConformsQ[
         Pattern[TypeSystem`Validation`PackagePrivate`type, 
          Blank[]]][
         Pattern[TypeSystem`Validation`PackagePrivate`expr, 
          Blank[]]] := 
       TypeSystem`Validation`PackagePrivate`conf[
        TypeSystem`Validation`PackagePrivate`type, 
         TypeSystem`Validation`PackagePrivate`expr], TypeSystem`SmallConformsQ[
         Pattern[TypeSystem`Validation`PackagePrivate`expr, 
          Blank[]], 
         Pattern[TypeSystem`Validation`PackagePrivate`type, 
          Blank[]]] := 
       TypeSystem`Validation`PackagePrivate`conf[
        TypeSystem`Validation`PackagePrivate`type, 
         TypeSystem`Validation`PackagePrivate`expr], 
       TagSet[TypeSystem`SmallConformsQ, 
        MessageName[TypeSystem`SmallConformsQ, "usage"], 
        "\!\(\*RowBox[{\"SmallConformsQ\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\",  StyleBox[\"type\", \"TI\"]}], \"]\"}]\) tests whether \
\!\(\*StyleBox[\"expr\", \"TI\"]\) has the type \!\(\*StyleBox[\"type\", \"TI\
\"]\), but avoids constructing a type-checking function.\n\
\!\(\*RowBox[{\"SmallConformsQ\", \"[\", RowBox[{StyleBox[\"type\", \
\"TI\"]}], \"]\"}]\) represents an operator form of SmallConformsQ that can \
be applied to an expression."], TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Vector[
          TypeSystem`Vector[
           Pattern[TypeSystem`Validation`PackagePrivate`a, 
            Blank[TypeSystem`Atom]], 
           Pattern[TypeSystem`Validation`PackagePrivate`n, 
            Blank[Integer]]], 
          Pattern[TypeSystem`Validation`PackagePrivate`m, 
           Blank[Integer]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := 
       And[Length[TypeSystem`Validation`PackagePrivate`x] == 
         TypeSystem`Validation`PackagePrivate`m, Length[
           Part[TypeSystem`Validation`PackagePrivate`x, 1]] == 
         TypeSystem`Validation`PackagePrivate`n, 
         MatrixQ[TypeSystem`Validation`PackagePrivate`x, 
          TypeSystem`Validation`PackagePrivate`conff[
          TypeSystem`Validation`PackagePrivate`a]]], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Vector[TypeSystem`AnyType, 
          Pattern[TypeSystem`Validation`PackagePrivate`n, 
           Blank[Integer]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := And[
         ListQ[TypeSystem`Validation`PackagePrivate`x], 
         Length[TypeSystem`Validation`PackagePrivate`x] == 
         TypeSystem`Validation`PackagePrivate`n], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := ListQ[TypeSystem`Validation`PackagePrivate`x], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Vector[
          Pattern[TypeSystem`Validation`PackagePrivate`e, 
           Blank[]], 
          Pattern[TypeSystem`Validation`PackagePrivate`len, 
           Blank[]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := And[
         ListQ[TypeSystem`Validation`PackagePrivate`x], 
         TypeSystem`Validation`PackagePrivate`lenconf[
         TypeSystem`Validation`PackagePrivate`x, 
          TypeSystem`Validation`PackagePrivate`len], 
         VectorQ[TypeSystem`Validation`PackagePrivate`x, 
          TypeSystem`Validation`PackagePrivate`conff[
          TypeSystem`Validation`PackagePrivate`e]]], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Validation`PackagePrivate`t, 
           Blank[]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := And[
         ListQ[TypeSystem`Validation`PackagePrivate`x], 
         Length[TypeSystem`Validation`PackagePrivate`x] == 
         Length[TypeSystem`Validation`PackagePrivate`t], 
         AllTrue[
          
          Transpose[{
           TypeSystem`Validation`PackagePrivate`t, 
            TypeSystem`Validation`PackagePrivate`x}], 
          Apply[TypeSystem`Validation`PackagePrivate`conf]]], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Struct[
          Pattern[TypeSystem`Validation`PackagePrivate`keys, 
           Blank[List]], 
          Pattern[TypeSystem`Validation`PackagePrivate`vals, 
           Blank[List]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := And[
         AssociationQ[TypeSystem`Validation`PackagePrivate`x], 
         SubsetQ[
          Keys[TypeSystem`Validation`PackagePrivate`x], 
          TypeSystem`Validation`PackagePrivate`keys], 
         AllTrue[
          Transpose[{TypeSystem`Validation`PackagePrivate`vals, 
            Lookup[
            TypeSystem`Validation`PackagePrivate`x, 
             TypeSystem`Validation`PackagePrivate`keys]}], 
          Apply[TypeSystem`Validation`PackagePrivate`conf]]], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Validation`PackagePrivate`key, 
           Blank[]], 
          Pattern[TypeSystem`Validation`PackagePrivate`val, 
           Blank[]], 
          Pattern[TypeSystem`Validation`PackagePrivate`len, 
           Blank[]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := And[
         AssociationQ[TypeSystem`Validation`PackagePrivate`x], 
         TypeSystem`Validation`PackagePrivate`lenconf[
         TypeSystem`Validation`PackagePrivate`x, 
          TypeSystem`Validation`PackagePrivate`len], 
         VectorQ[
          Values[TypeSystem`Validation`PackagePrivate`x], 
          TypeSystem`Validation`PackagePrivate`conff[
          TypeSystem`Validation`PackagePrivate`val]], 
         VectorQ[
          Keys[TypeSystem`Validation`PackagePrivate`x], 
          TypeSystem`Validation`PackagePrivate`conff[
          TypeSystem`Validation`PackagePrivate`key]]], 
       TypeSystem`Validation`PackagePrivate`conf[
         TypeSystem`Atom[
          Pattern[TypeSystem`Validation`PackagePrivate`a, 
           Blank[]]], 
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]]] := Or[
         TypeSystem`Validation`PackagePrivate`catom[
         TypeSystem`Validation`PackagePrivate`x, 
          TypeSystem`Validation`PackagePrivate`a], 
         MissingQ[TypeSystem`Validation`PackagePrivate`x]], 
       TypeSystem`Validation`PackagePrivate`conf[
         Blank[TypeSystem`FailureType], 
         Blank[]] := True, TypeSystem`Validation`PackagePrivate`conf[
         Alternatives[TypeSystem`AnyType, TypeSystem`UnknownType], 
         Blank[]] := True, TypeSystem`Validation`PackagePrivate`conf[
         Blank[], 
         Blank[]] := False, TypeSystem`Validation`PackagePrivate`conff[
         Pattern[TypeSystem`Validation`PackagePrivate`t, 
          Blank[]]][
         Pattern[TypeSystem`Validation`PackagePrivate`d, 
          Blank[]]] := 
       TypeSystem`Validation`PackagePrivate`conf[
        TypeSystem`Validation`PackagePrivate`t, 
         TypeSystem`Validation`PackagePrivate`d], 
       TypeSystem`Validation`PackagePrivate`lenconf[
         Pattern[TypeSystem`Validation`PackagePrivate`x, 
          Blank[]], 
         Pattern[TypeSystem`Validation`PackagePrivate`len, 
          Blank[]]] := 
       Or[Length[TypeSystem`Validation`PackagePrivate`x] === 
         TypeSystem`Validation`PackagePrivate`len, 
         TypeSystem`Validation`PackagePrivate`len === TypeSystem`AnyLength], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`Tuple]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], TypeSystem`Tuple[{}] := 
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
       TypeSystem`Tuple[
         Pattern[TypeSystem`Constructors`PackagePrivate`first, 
          Blank[]], 
         Pattern[TypeSystem`Constructors`PackagePrivate`rest, 
          BlankSequence[]]] := 
       TypeSystem`Tuple[{
         TypeSystem`Constructors`PackagePrivate`first, 
          TypeSystem`Constructors`PackagePrivate`rest}], 
       TagSetDelayed[TypeSystem`Tuple, 
        MakeBoxes[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          PatternTest[
           TypeSystem`Tuple[
            Blank[List]], TypeSystem`HoldValidTypeQ]], StandardForm], 
        Format[
         Condition[
          TypeSystem`Summary`PackagePrivate`typeForm[
          TypeSystem`Summary`PackagePrivate`t], 
          TypeSystem`Summary`PackagePrivate`$useTypeForm], StandardForm]], 
       TagSet[TypeSystem`Tuple, 
        MessageName[TypeSystem`Tuple, "usage"], 
        "Tuple[type1, t2, ...] represents a fixed-length list whose first \
element is of type type1, etc..."], TypeSystem`PartFailure[
         Pattern[TypeSystem`Types`PackagePrivate`msgname, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`p, 
          Blank[]]] := 
       TypeSystem`FailureType[
        Part, TypeSystem`Types`PackagePrivate`msgname, "Type" -> 
         TypeSystem`Types`PackagePrivate`t, "Part" -> 
         TypeSystem`Types`PackagePrivate`p], TypeSystem`FixedLengthQ[
         Alternatives[
          TypeSystem`Assoc[
           Blank[], 
           Blank[], 
           Blank[Integer]], 
          TypeSystem`Vector[
           Blank[], 
           Blank[Integer]]]] := True, TypeSystem`FixedLengthQ[
         Blank[Integer]] := True, TypeSystem`FixedLengthQ[
         Blank[]] := False, TypeSystem`TypeLength[TypeSystem`AnyType] := 
       TypeSystem`AnyLength, TypeSystem`TypeLength[TypeSystem`UnknownType] := 
       TypeSystem`AnyLength, TypeSystem`TypeLength[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]]] := 0, TypeSystem`TypeLength[
         Pattern[TypeSystem`Types`PackagePrivate`v, 
          Blank[TypeSystem`Vector]]] := 
       Last[TypeSystem`Types`PackagePrivate`v], TypeSystem`TypeLength[
         Pattern[TypeSystem`Types`PackagePrivate`s, 
          Blank[TypeSystem`Struct]]] := Length[
         First[TypeSystem`Types`PackagePrivate`s]], TypeSystem`TypeLength[
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]]] := Length[
         First[TypeSystem`Types`PackagePrivate`t]], TypeSystem`TypeLength[
         TypeSystem`Assoc[
          Blank[], 
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`len, 
           Blank[]]]] := TypeSystem`Types`PackagePrivate`len, 
       TypeSystem`TypeLength[
         Blank[]] := 0, TypeSystem`TypeInner[TypeSystem`AnyType] := 
       TypeSystem`AnyType, TypeSystem`TypeInner[TypeSystem`UnknownType] := 
       TypeSystem`UnknownType, TypeSystem`TypeInner[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]]] := 
       TypeSystem`Types`PackagePrivate`f, TypeSystem`TypeInner[
         Pattern[TypeSystem`Types`PackagePrivate`a, 
          Blank[TypeSystem`Atom]]] := 
       TypeSystem`PartFailure[
        "Atomic", TypeSystem`Types`PackagePrivate`a, None], 
       TypeSystem`TypeInner[
         Pattern[TypeSystem`Types`PackagePrivate`v, 
          Blank[TypeSystem`Vector]]] := 
       First[TypeSystem`Types`PackagePrivate`v], TypeSystem`TypeInner[
         Pattern[TypeSystem`Types`PackagePrivate`s, 
          Blank[TypeSystem`Struct]]] := Apply[TypeSystem`TypeUnion, 
         Last[TypeSystem`Types`PackagePrivate`s]], TypeSystem`TypeInner[
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]]] := Apply[TypeSystem`TypeUnion, 
         First[TypeSystem`Types`PackagePrivate`t]], TypeSystem`TypeInner[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Types`PackagePrivate`key, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`value, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`len, 
           Blank[]]]] := TypeSystem`Types`PackagePrivate`value, 
       TypeSystem`TypeUnion[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          BlankNullSequence[]]] := 
       With[{TypeSystem`Deduction`PackagePrivate`ft = 
          Flatten[{TypeSystem`Deduction`PackagePrivate`t}]}, 
         If[TypeSystem`Deduction`PackagePrivate`ft === {}, TypeSystem`AnyType, 
          Fold[TypeSystem`FoldType, TypeSystem`Deduction`PackagePrivate`ft]]],
        Attributes[TypeSystem`FoldType] = {Orderless}, 
       TypeSystem`FoldType[TypeSystem`AnyType, 
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := TypeSystem`AnyType, 
       TypeSystem`FoldType[TypeSystem`UnknownType, 
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := TypeSystem`Deduction`PackagePrivate`x, Condition[
         TypeSystem`FoldType[
          Pattern[TypeSystem`Deduction`PackagePrivate`x, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`y, 
           Blank[]]], TypeSystem`Deduction`PackagePrivate`x === 
         TypeSystem`Deduction`PackagePrivate`y] := 
       TypeSystem`Deduction`PackagePrivate`x, Condition[
         TypeSystem`FoldType[
          Pattern[TypeSystem`Deduction`PackagePrivate`t, 
           TypeSystem`Tuple[
            Pattern[TypeSystem`Deduction`PackagePrivate`i, 
             Blank[]]]], 
          TypeSystem`Vector[TypeSystem`UnknownType, 
           Pattern[TypeSystem`Deduction`PackagePrivate`ln, 
            Blank[]]]], TypeSystem`Deduction`PackagePrivate`ln == 
         Length[TypeSystem`Deduction`PackagePrivate`i]] := 
       TypeSystem`Deduction`PackagePrivate`t, Condition[
         TypeSystem`FoldType[
          TypeSystem`Tuple[
           Pattern[TypeSystem`Deduction`PackagePrivate`t, 
            Blank[]]], 
          TypeSystem`Vector[
           Pattern[TypeSystem`Deduction`PackagePrivate`e, 
            Blank[]], 
           Pattern[TypeSystem`Deduction`PackagePrivate`n, 
            Blank[]]]], Length[TypeSystem`Deduction`PackagePrivate`t] == 
         TypeSystem`Deduction`PackagePrivate`n] := TypeSystem`Tuple[
         Map[
         TypeSystem`FoldType[#, TypeSystem`Deduction`PackagePrivate`e]& , 
          TypeSystem`Deduction`PackagePrivate`t]], TypeSystem`FoldType[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Deduction`PackagePrivate`s, 
           Blank[]]], 
         TypeSystem`Tuple[
          Pattern[TypeSystem`Deduction`PackagePrivate`t, 
           Blank[]]]] := 
       If[Length[TypeSystem`Deduction`PackagePrivate`s] === 
         Length[TypeSystem`Deduction`PackagePrivate`t], 
         TypeSystem`Tuple[
          MapThread[
          TypeSystem`FoldType, {
           TypeSystem`Deduction`PackagePrivate`s, 
            TypeSystem`Deduction`PackagePrivate`t}]], 
         TypeSystem`Vector[
          TypeSystem`TypeUnion[
          TypeSystem`Deduction`PackagePrivate`s, 
           TypeSystem`Deduction`PackagePrivate`t]]], TypeSystem`FoldType[
         TypeSystem`Vector[
          Pattern[TypeSystem`Deduction`PackagePrivate`a, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`s, 
           Blank[]]], 
         TypeSystem`Vector[
          Pattern[TypeSystem`Deduction`PackagePrivate`b, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`t, 
           Blank[]]]] := TypeSystem`Vector[
         TypeSystem`FoldType[
         TypeSystem`Deduction`PackagePrivate`a, 
          TypeSystem`Deduction`PackagePrivate`b], 
         TypeSystem`FoldLength[
         TypeSystem`Deduction`PackagePrivate`s, 
          TypeSystem`Deduction`PackagePrivate`t]], TypeSystem`FoldType[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Deduction`PackagePrivate`ka, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`va, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`s, 
           Blank[]]], 
         TypeSystem`Assoc[
          Pattern[TypeSystem`Deduction`PackagePrivate`kb, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`vb, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`t, 
           Blank[]]]] := TypeSystem`Assoc[
         TypeSystem`FoldType[
         TypeSystem`Deduction`PackagePrivate`ka, 
          TypeSystem`Deduction`PackagePrivate`kb], 
         TypeSystem`FoldType[
         TypeSystem`Deduction`PackagePrivate`va, 
          TypeSystem`Deduction`PackagePrivate`vb], 
         TypeSystem`FoldLength[
         TypeSystem`Deduction`PackagePrivate`s, 
          TypeSystem`Deduction`PackagePrivate`t]], TypeSystem`FoldType[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`v, 
          Blank[TypeSystem`Vector]]] := TypeSystem`Vector[
         TypeSystem`TypeUnion[
          TypeSystem`TypeInner[TypeSystem`Deduction`PackagePrivate`v], 
          TypeSystem`TypeInner[TypeSystem`Deduction`PackagePrivate`t]], 
         TypeSystem`FoldLength[
          TypeSystem`TypeLength[TypeSystem`Deduction`PackagePrivate`v], 
          TypeSystem`TypeLength[TypeSystem`Deduction`PackagePrivate`t]]], 
       TypeSystem`FoldType[
         TypeSystem`Atom[
          Pattern[TypeSystem`Deduction`PackagePrivate`a, 
           Blank[]]], 
         TypeSystem`Atom[
          Pattern[TypeSystem`Deduction`PackagePrivate`b, 
           Blank[]]]] := TypeSystem`Atom[
         TypeSystem`FoldAtom[
         TypeSystem`Deduction`PackagePrivate`a, 
          TypeSystem`Deduction`PackagePrivate`b]], TypeSystem`FoldType[
         Pattern[TypeSystem`Deduction`PackagePrivate`s, 
          Blank[TypeSystem`Struct]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[TypeSystem`Struct]]] := 
       With[{TypeSystem`Deduction`PackagePrivate`sk = 
          TypeSystem`TypeParts[TypeSystem`Deduction`PackagePrivate`s], 
          TypeSystem`Deduction`PackagePrivate`tk = 
          TypeSystem`TypeParts[TypeSystem`Deduction`PackagePrivate`t]}, 
         Which[
         TypeSystem`Deduction`PackagePrivate`sk === 
          TypeSystem`Deduction`PackagePrivate`tk, 
          Apply[TypeSystem`Struct, 
           MapThread[
            
            Function[{
             TypeSystem`Deduction`PackagePrivate`a, 
              TypeSystem`Deduction`PackagePrivate`b, 
              TypeSystem`Deduction`PackagePrivate`c}, 
             TypeSystem`Deduction`PackagePrivate`a -> 
             TypeSystem`FoldType[
              TypeSystem`Deduction`PackagePrivate`b, 
               TypeSystem`Deduction`PackagePrivate`c]], {
            TypeSystem`Deduction`PackagePrivate`sk, 
             TypeSystem`TypeValues[TypeSystem`Deduction`PackagePrivate`s], 
             TypeSystem`TypeValues[TypeSystem`Deduction`PackagePrivate`t]}]], 
          SubsetQ[
          TypeSystem`Deduction`PackagePrivate`sk, 
           TypeSystem`Deduction`PackagePrivate`tk], 
          TypeSystem`Deduction`PackagePrivate`foldSubStruct[
          TypeSystem`Deduction`PackagePrivate`s, 
           TypeSystem`Deduction`PackagePrivate`t], 
          SubsetQ[
          TypeSystem`Deduction`PackagePrivate`tk, 
           TypeSystem`Deduction`PackagePrivate`sk], 
          TypeSystem`Deduction`PackagePrivate`foldSubStruct[
          TypeSystem`Deduction`PackagePrivate`t, 
           TypeSystem`Deduction`PackagePrivate`s], Length[
            Intersection[
            TypeSystem`Deduction`PackagePrivate`sk, 
             TypeSystem`Deduction`PackagePrivate`tk]] > 2, 
          Apply[TypeSystem`FoldType, 
           Map[TypeSystem`Struct, 
            KeyUnion[
             Apply[
              
              Function[{
               TypeSystem`Deduction`PackagePrivate`a, 
                TypeSystem`Deduction`PackagePrivate`b}, 
               Thread[
               TypeSystem`Deduction`PackagePrivate`a -> 
                TypeSystem`Deduction`PackagePrivate`b]], {
              TypeSystem`Deduction`PackagePrivate`s, 
               TypeSystem`Deduction`PackagePrivate`t}, {1}], 
             TypeSystem`UnknownType& ]]], True, 
          TypeSystem`Assoc[
           TypeSystem`Atom[String], 
           TypeSystem`TypeUnion[
            TypeSystem`TypeInner[TypeSystem`Deduction`PackagePrivate`s], 
            TypeSystem`TypeInner[TypeSystem`Deduction`PackagePrivate`t]], 
           Length[
            Union[
            TypeSystem`Deduction`PackagePrivate`sk, 
             TypeSystem`Deduction`PackagePrivate`tk]]]]], TypeSystem`FoldType[
         Pattern[TypeSystem`Deduction`PackagePrivate`a, 
          Blank[TypeSystem`Assoc]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`s, 
          Blank[TypeSystem`Struct]]] := 
       TypeSystem`Deduction`PackagePrivate`foldStructAssoc[
        TypeSystem`Deduction`PackagePrivate`s, 
         TypeSystem`Deduction`PackagePrivate`a], TypeSystem`FoldType[
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`y, 
          Blank[]]] := TypeSystem`AnyType, TypeSystem`FoldLength[
         Pattern[TypeSystem`Deduction`PackagePrivate`i, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`j, 
          Blank[]]] := 
       Which[TypeSystem`Deduction`PackagePrivate`i === 
         TypeSystem`Deduction`PackagePrivate`j, 
         TypeSystem`Deduction`PackagePrivate`i, 
         TypeSystem`Deduction`PackagePrivate`i === TypeSystem`UnknownLength, 
         TypeSystem`Deduction`PackagePrivate`j, 
         TypeSystem`Deduction`PackagePrivate`j === TypeSystem`UnknownLength, 
         TypeSystem`Deduction`PackagePrivate`i, True, TypeSystem`AnyLength], 
       Attributes[TypeSystem`FoldAtom] = {Orderless}, 
       TypeSystem`FoldAtom[Integer, Rational] := Rational, 
       TypeSystem`FoldAtom[Integer, Real] := Real, 
       TypeSystem`FoldAtom[Rational, Real] := Real, 
       TypeSystem`FoldAtom[TypeSystem`AnyType, 
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := TypeSystem`AnyType, 
       TypeSystem`FoldAtom[TypeSystem`UnknownType, 
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := TypeSystem`Deduction`PackagePrivate`x, 
       TypeSystem`FoldAtom[
         Alternatives[
          Blank[Entity], Entity], 
         Blank[Entity]] := Entity, TypeSystem`FoldAtom[
         Pattern[TypeSystem`Deduction`PackagePrivate`e1, 
          Blank[TypeSystem`Enumeration]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`e2, 
          Blank[TypeSystem`Enumeration]]] := 
       Block[{TypeSystem`Deduction`PackagePrivate`res = 
          Union[TypeSystem`Deduction`PackagePrivate`e1, 
            TypeSystem`Deduction`PackagePrivate`e2]}, 
         If[
         Length[TypeSystem`Deduction`PackagePrivate`res] < 16, 
          TypeSystem`Deduction`PackagePrivate`res, String]], 
       TypeSystem`FoldAtom[
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := TypeSystem`Deduction`PackagePrivate`x, 
       TypeSystem`FoldAtom[
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`y, 
          Blank[]]] := TypeSystem`AnyType, 
       TypeSystem`TypeParts[TypeSystem`AnyType] := {}, 
       TypeSystem`TypeParts[TypeSystem`UnknownType] := {}, 
       TypeSystem`TypeParts[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]]] := {}, TypeSystem`TypeParts[
         Pattern[TypeSystem`Types`PackagePrivate`a, 
          Blank[TypeSystem`Atom]]] := {}, TypeSystem`TypeParts[
         TypeSystem`Vector[
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`n, 
           Blank[Integer]]]] := Range[TypeSystem`Types`PackagePrivate`n], 
       TypeSystem`TypeParts[
         Blank[TypeSystem`Vector]] := {}, TypeSystem`TypeParts[
         Pattern[TypeSystem`Types`PackagePrivate`s, 
          Blank[TypeSystem`Struct]]] := 
       First[TypeSystem`Types`PackagePrivate`s], TypeSystem`TypeParts[
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]]] := Range[
         Length[
          First[TypeSystem`Types`PackagePrivate`t]]], TypeSystem`TypeParts[
         TypeSystem`Assoc[
          Blank[], 
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`len, 
           Blank[Integer]]]] := Range[TypeSystem`Types`PackagePrivate`len], 
       TypeSystem`TypeParts[
         Blank[TypeSystem`Assoc]] := {}, TypeSystem`TypeParts[
         Blank[]] := {}, TypeSystem`Deduction`PackagePrivate`c = 0, 
       TypeSystem`TypeValues[TypeSystem`AnyType] := {}, 
       TypeSystem`TypeValues[TypeSystem`UnknownType] := {}, 
       TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]]] := {}, TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`a, 
          Blank[TypeSystem`Atom]]] := {}, TypeSystem`TypeValues[
         TypeSystem`Vector[
          Pattern[TypeSystem`Types`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := {TypeSystem`Types`PackagePrivate`v}, 
       TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`s, 
          Blank[TypeSystem`Struct]]] := 
       Last[TypeSystem`Types`PackagePrivate`s], TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]]] := 
       First[TypeSystem`Types`PackagePrivate`t], TypeSystem`TypeValues[
         TypeSystem`Assoc[
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := {TypeSystem`Types`PackagePrivate`v}, 
       TypeSystem`TypeValues[
         Blank[]] := {}, TypeSystem`TypeValues[TypeSystem`AnyType, 
         Blank[]] := TypeSystem`UnknownType, 
       TypeSystem`TypeValues[TypeSystem`UnknownType, 
         Blank[]] := TypeSystem`UnknownType, TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]], 
         Blank[]] := TypeSystem`Types`PackagePrivate`f, TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`a, 
          Blank[TypeSystem`Atom]], 
         Pattern[TypeSystem`Types`PackagePrivate`p, 
          Blank[]]] := 
       TypeSystem`PartFailure[
        "Atomic", TypeSystem`Types`PackagePrivate`a, 
         TypeSystem`Types`PackagePrivate`p], TypeSystem`TypeValues[
         TypeSystem`Vector[
          Pattern[TypeSystem`Types`PackagePrivate`v, 
           Blank[]], 
          Blank[]], 
         Blank[]] := TypeSystem`Types`PackagePrivate`v, TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`s, 
          Blank[TypeSystem`Struct]], 
         Pattern[TypeSystem`Types`PackagePrivate`part, 
          Blank[]]] := Which[
         And[
          StringQ[TypeSystem`Types`PackagePrivate`part], 
          MemberQ[
           First[TypeSystem`Types`PackagePrivate`s], 
           TypeSystem`Types`PackagePrivate`part]], 
         First[
          Pick[
           Last[TypeSystem`Types`PackagePrivate`s], 
           First[TypeSystem`Types`PackagePrivate`s], 
           TypeSystem`Types`PackagePrivate`part]], 
         Head[TypeSystem`Types`PackagePrivate`part] === Key, 
         TypeSystem`TypeValues[TypeSystem`Types`PackagePrivate`s, 
          First[TypeSystem`Types`PackagePrivate`part]], 
         IntegerQ[TypeSystem`Types`PackagePrivate`part], 
         If[1 <= Abs[TypeSystem`Types`PackagePrivate`part] <= Length[
            First[TypeSystem`Types`PackagePrivate`s]], 
          Part[
           Last[TypeSystem`Types`PackagePrivate`s], 
           TypeSystem`Types`PackagePrivate`part], 
          TypeSystem`PartFailure[
          "Range", TypeSystem`Types`PackagePrivate`s, 
           TypeSystem`Types`PackagePrivate`part]], True, 
         TypeSystem`PartFailure[
         "Mismatch", TypeSystem`Types`PackagePrivate`s, 
          TypeSystem`Types`PackagePrivate`part]], TypeSystem`TypeValues[
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]], 
         Pattern[TypeSystem`Types`PackagePrivate`i, 
          Blank[]]] := If[
         And[
          IntegerQ[TypeSystem`Types`PackagePrivate`i], 1 <= 
          Abs[TypeSystem`Types`PackagePrivate`i] <= Length[
            First[TypeSystem`Types`PackagePrivate`t]]], 
         Part[
          First[TypeSystem`Types`PackagePrivate`t], 
          TypeSystem`Types`PackagePrivate`i], 
         TypeSystem`PartFailure[
         "Range", TypeSystem`Types`PackagePrivate`t, 
          TypeSystem`Types`PackagePrivate`i]], TypeSystem`TypeValues[
         TypeSystem`Assoc[
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`v, 
           Blank[]], 
          Blank[]], 
         Blank[]] := TypeSystem`Types`PackagePrivate`v, 
       TypeSystem`Deduction`PackagePrivate`foldSubStruct[
         TypeSystem`Struct[
          Pattern[TypeSystem`Deduction`PackagePrivate`k1, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`v1, 
           Blank[]]], 
         TypeSystem`Struct[
          Pattern[TypeSystem`Deduction`PackagePrivate`k2, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`v2, 
           Blank[]]]] := (TypeSystem`Struct[
         Keys[#], 
         Values[#]]& )[
         Merge[{
           Thread[
           TypeSystem`Deduction`PackagePrivate`k1 -> 
            TypeSystem`Deduction`PackagePrivate`v1], 
           Thread[
           TypeSystem`Deduction`PackagePrivate`k2 -> 
            TypeSystem`Deduction`PackagePrivate`v2]}, 
          Apply[TypeSystem`TypeUnion]]], Condition[
         TypeSystem`Deduction`PackagePrivate`foldStructAssoc[
          TypeSystem`Struct[
           Pattern[TypeSystem`Deduction`PackagePrivate`keys, 
            Blank[]], 
           Pattern[TypeSystem`Deduction`PackagePrivate`vals, 
            Blank[]]], 
          TypeSystem`Assoc[
           TypeSystem`Atom[String], 
           Pattern[TypeSystem`Deduction`PackagePrivate`inner, 
            Blank[]], 
           Pattern[TypeSystem`Deduction`PackagePrivate`n, 
            Blank[]]]], TypeSystem`Deduction`PackagePrivate`n == 
         Length[TypeSystem`Deduction`PackagePrivate`keys]] := 
       TypeSystem`Struct[TypeSystem`Deduction`PackagePrivate`keys, 
         Map[
         TypeSystem`FoldType[#, TypeSystem`Deduction`PackagePrivate`inner]& , 
          TypeSystem`Deduction`PackagePrivate`vals]], 
       TypeSystem`Deduction`PackagePrivate`foldStructAssoc[
         Pattern[TypeSystem`Deduction`PackagePrivate`s, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`a, 
          Blank[]]] := TypeSystem`FoldType[
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`TypeInner[TypeSystem`Deduction`PackagePrivate`s], 
          TypeSystem`TypeLength[TypeSystem`Deduction`PackagePrivate`s]], 
         TypeSystem`Deduction`PackagePrivate`a], TypeSystem`VectorPartQ[All] := 
       True, TypeSystem`VectorPartQ[
         Alternatives[Keys, Values]] := True, TypeSystem`VectorPartQ[
         Blank[Span]] := True, TypeSystem`VectorPartQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`l, 
          Blank[List]]] := 
       VectorQ[TypeSystem`Predicates`PackagePrivate`l, 
         TypeSystem`ScalarPartQ], TypeSystem`VectorPartQ[
         Alternatives[
          Blank[TypeSystem`Vector], 
          Blank[TypeSystem`Tuple]]] := True, TypeSystem`VectorPartQ[
         Blank[]] := False, TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`a, 
          Blank[TypeSystem`Atom]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          Blank[]]] := 
       TypeSystem`PartFailure[
        "Atomic", TypeSystem`Parts`PackagePrivate`a, 
         TypeSystem`Parts`PackagePrivate`p], 
       TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[]], All] := TypeSystem`Parts`PackagePrivate`t, 
       TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Struct]], Keys] := TypeSystem`Vector[
         TypeSystem`Atom[String], 
         TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]], 
       TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Struct]], Values] := TypeSystem`Tuple[
         TypeSystem`TypeValues[TypeSystem`Parts`PackagePrivate`t]], 
       TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Parts`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`ln, 
           Blank[]]], Keys] := 
       TypeSystem`Vector[
        TypeSystem`Parts`PackagePrivate`k, 
         TypeSystem`Parts`PackagePrivate`ln], 
       TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Parts`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`ln, 
           Blank[]]], Values] := 
       TypeSystem`Vector[
        TypeSystem`Parts`PackagePrivate`v, 
         TypeSystem`Parts`PackagePrivate`ln], 
       TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Vector[
          Alternatives[
           Pattern[TypeSystem`Parts`PackagePrivate`t, 
            Blank[TypeSystem`Assoc]], 
           Pattern[TypeSystem`Parts`PackagePrivate`t, 
            Blank[TypeSystem`Struct]]], 
          Pattern[TypeSystem`Parts`PackagePrivate`n, 
           Blank[]]], Keys] := TypeSystem`Vector[
         TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Parts`PackagePrivate`t, Keys], 
         TypeSystem`Parts`PackagePrivate`n], 
       TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Vector[
          Alternatives[
           Pattern[TypeSystem`Parts`PackagePrivate`t, 
            Blank[TypeSystem`Assoc]], 
           Pattern[TypeSystem`Parts`PackagePrivate`t, 
            Blank[TypeSystem`Struct]]], 
          Pattern[TypeSystem`Parts`PackagePrivate`n, 
           Blank[]]], Values] := TypeSystem`Vector[
         TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Parts`PackagePrivate`t, Values], 
         TypeSystem`Parts`PackagePrivate`n], 
       TypeSystem`Parts`PackagePrivate`svpart[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Parts`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`ln, 
           Blank[]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`keys, {
           Repeated[
            Alternatives[
             Blank[String], 
             Key[
              Blank[String]], 
             Blank[Integer]]]}]] := 
       TypeSystem`Assoc[
        TypeSystem`Parts`PackagePrivate`k, TypeSystem`Parts`PackagePrivate`v, 
         CountDistinct[TypeSystem`Parts`PackagePrivate`keys]], 
       TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`s, 
          TypeSystem`Struct[
           Pattern[TypeSystem`Parts`PackagePrivate`k, 
            Blank[]], 
           Pattern[TypeSystem`Parts`PackagePrivate`vals, 
            Blank[]]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`keys, {
           Repeated[
            Alternatives[
             Blank[String], 
             Key[
              Blank[String]], 
             Blank[Integer]]]}]] := Internal`UnsafeQuietCheck[
         TypeSystem`Struct[
          Part[
           AssociationThread[
           TypeSystem`Parts`PackagePrivate`k, 
            TypeSystem`Parts`PackagePrivate`vals], 
           TypeSystem`Parts`PackagePrivate`keys]], 
         TypeSystem`PartFailure[
         "NotApplicable", TypeSystem`Parts`PackagePrivate`s, 
          TypeSystem`Parts`PackagePrivate`keys]], 
       TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]], 
         Pattern[TypeSystem`Parts`PackagePrivate`keys, {
           BlankSequence[Integer]}]] := TypeSystem`Tuple[
         Map[
         TypeSystem`TypeValues[TypeSystem`Parts`PackagePrivate`t, #]& , 
          TypeSystem`Parts`PackagePrivate`keys]], 
       TypeSystem`Parts`PackagePrivate`svpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          Blank[]]] := Apply[Compose, 
         Reverse[
          TypeSystem`Parts`PackagePrivate`vpart[
          TypeSystem`Parts`PackagePrivate`t, 
           TypeSystem`Parts`PackagePrivate`p]]], 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`a, 
          Blank[TypeSystem`Atom]], 
         Pattern[TypeSystem`Parts`PackagePrivate`p, 
          Blank[]]] := {
         TypeSystem`PartFailure[
         "Atomic", TypeSystem`Parts`PackagePrivate`a, 
          TypeSystem`Parts`PackagePrivate`p], Identity}, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[]], All] := {
         TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
         TypeSystem`TypeWrapper[TypeSystem`Parts`PackagePrivate`t]}, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`s, 
          Blank[Span]]] := If[
         Or[
          Not[TypeSystem`Parts`PackagePrivate`$Strict], 
          TypeSystem`CheckSpan[TypeSystem`Parts`PackagePrivate`s, 
           TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]]], {
          TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
          TypeSystem`TypeWrapper[TypeSystem`Parts`PackagePrivate`t, 
           TypeSystem`SpanLength[TypeSystem`Parts`PackagePrivate`s, 
            TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]]]}, {
          TypeSystem`PartFailure[
          "Span", TypeSystem`Parts`PackagePrivate`t, 
           TypeSystem`Parts`PackagePrivate`s], Identity}], 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`l, {
           BlankSequence[Integer]}]] := 
       With[{TypeSystem`Parts`PackagePrivate`ln = 
          TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]}, 
         If[
          Or[
           Not[TypeSystem`Parts`PackagePrivate`$Strict], 
           VectorQ[
           TypeSystem`Parts`PackagePrivate`l, 1 <= Abs[#] <= 
            TypeSystem`Parts`PackagePrivate`ln& ], 
           Not[
            TypeSystem`FixedLengthQ[TypeSystem`Parts`PackagePrivate`t]]], {
           TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
           TypeSystem`TypeWrapper[TypeSystem`Parts`PackagePrivate`t, 
            Length[TypeSystem`Parts`PackagePrivate`l]]}, {
           TypeSystem`PartFailure[
           "Range", TypeSystem`Parts`PackagePrivate`t, 
            TypeSystem`Parts`PackagePrivate`l], Identity}]], 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Struct]], Keys] := {
         TypeSystem`Atom[String], TypeSystem`Vector[#, 
          TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]]& }, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`t, 
          Blank[TypeSystem`Struct]], Values] := {
         TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
         TypeSystem`Vector[#, 
          TypeSystem`TypeLength[TypeSystem`Parts`PackagePrivate`t]]& }, 
       TypeSystem`Parts`PackagePrivate`vpart[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Parts`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`ln, 
           Blank[]]], Keys] := {
        TypeSystem`Parts`PackagePrivate`k, 
         TypeSystem`Vector[#, TypeSystem`Parts`PackagePrivate`ln]& }, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`v, 
          Blank[TypeSystem`Vector]], 
         Pattern[TypeSystem`Parts`PackagePrivate`k, 
          Alternatives[
           Alternatives[
            Blank[String], 
            Key[
             Blank[String]], 
            Blank[Integer]], {
            Repeated[
             Alternatives[
              Blank[String], 
              Key[
               Blank[String]], 
              Blank[Integer]]]}]]] := {
         TypeSystem`PartFailure[
         "NotApplicable", TypeSystem`Parts`PackagePrivate`v, 
          TypeSystem`Parts`PackagePrivate`k], Identity}, 
       TypeSystem`Parts`PackagePrivate`vpart[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Parts`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Parts`PackagePrivate`ln, 
           Blank[]]], Values] := {
        TypeSystem`Parts`PackagePrivate`v, 
         TypeSystem`Vector[#, TypeSystem`Parts`PackagePrivate`ln]& }, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Alternatives[
          Pattern[TypeSystem`Parts`PackagePrivate`t, 
           Blank[TypeSystem`Struct]], 
          Pattern[TypeSystem`Parts`PackagePrivate`t, 
           Blank[TypeSystem`Assoc]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`k, {
           Repeated[
            Alternatives[
             Blank[String], 
             Key[
              Blank[String]], 
             Blank[Integer]]]}]] := {
         TypeSystem`TypeInner[TypeSystem`Parts`PackagePrivate`t], 
         TypeSystem`TypeWrapper[TypeSystem`Parts`PackagePrivate`t, 
          CountDistinct[TypeSystem`Parts`PackagePrivate`k]]}, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Pattern[TypeSystem`Parts`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]], 
         Blank[]] := {TypeSystem`Parts`PackagePrivate`f, Identity}, 
       TypeSystem`Parts`PackagePrivate`vpart[
         Blank[], 
         Blank[]] := {TypeSystem`UnknownType, Identity}, 
       TypeSystem`TypeWrapper[TypeSystem`AnyType] := TypeSystem`AnyType& , 
       TypeSystem`TypeWrapper[TypeSystem`UnknownType] := 
       TypeSystem`UnknownType& , TypeSystem`TypeWrapper[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]]] := 
       TypeSystem`Types`PackagePrivate`f& , TypeSystem`TypeWrapper[
         TypeSystem`Vector[
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`len, 
           Blank[]]]] := 
       TypeSystem`Vector[#, TypeSystem`Types`PackagePrivate`len]& , 
       TypeSystem`TypeWrapper[
         TypeSystem`Vector[
          Blank[], 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`len, 
          Blank[]]] := 
       TypeSystem`Vector[#, TypeSystem`Types`PackagePrivate`len]& , 
       TypeSystem`TypeWrapper[
         TypeSystem`Struct[
          Pattern[TypeSystem`Types`PackagePrivate`keys, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`vals, 
           Blank[]]]] := 
       With[{TypeSystem`Types`PackagePrivate`ln = 
          Length[TypeSystem`Types`PackagePrivate`keys]}, TypeSystem`Assoc[
          TypeSystem`Atom[String], #, TypeSystem`Types`PackagePrivate`ln]& ], 
       TypeSystem`TypeWrapper[
         TypeSystem`Struct[
          Pattern[TypeSystem`Types`PackagePrivate`keys, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`vals, 
           Blank[]]], 
         Pattern[TypeSystem`Types`PackagePrivate`ln, 
          Blank[]]] := TypeSystem`Assoc[
         TypeSystem`Atom[String], #, TypeSystem`Types`PackagePrivate`ln]& , 
       TypeSystem`TypeWrapper[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Types`PackagePrivate`t, 
           Blank[]]]] := 
       With[{TypeSystem`Types`PackagePrivate`ln = 
          Length[TypeSystem`Types`PackagePrivate`t]}, 
         TypeSystem`Vector[#, TypeSystem`Types`PackagePrivate`ln]& ], 
       TypeSystem`TypeWrapper[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Types`PackagePrivate`t, 
           Blank[]]], 
         Pattern[TypeSystem`Types`PackagePrivate`ln, 
          Blank[]]] := 
       TypeSystem`Vector[#, TypeSystem`Types`PackagePrivate`ln]& , 
       TypeSystem`TypeWrapper[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Types`PackagePrivate`key, 
           Blank[]], 
          Blank[], 
          Pattern[TypeSystem`Types`PackagePrivate`len, 
           Blank[]]]] := 
       TypeSystem`Assoc[
        TypeSystem`Types`PackagePrivate`key, #, 
         TypeSystem`Types`PackagePrivate`len]& , TypeSystem`TypeWrapper[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Types`PackagePrivate`key, 
           Blank[]], 
          Blank[], 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`len, 
          Blank[]]] := 
       TypeSystem`Assoc[
        TypeSystem`Types`PackagePrivate`key, #, 
         TypeSystem`Types`PackagePrivate`len]& , 
       TagSet[TypeSystem`TypeWrapper, 
        MessageName[TypeSystem`TypeWrapper, "usage"], 
        "TypeWrapper[type] returns a function that wraps a subtype in the \
parent type."], TypeSystem`Parts`PackagePrivate`$Strict = False, 
       TypeSystem`CheckSpan[
         Blank[], TypeSystem`AnyLength] := True, TypeSystem`CheckSpan[
         Span[
          Pattern[TypeSystem`Parts`PackagePrivate`i, 
           Blank[Integer]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := 
       1 <= Abs[TypeSystem`Parts`PackagePrivate`i] <= 
        TypeSystem`Parts`PackagePrivate`n, TypeSystem`CheckSpan[
         Span[
          Pattern[TypeSystem`Parts`PackagePrivate`i, 
           Blank[Integer]], All], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := 
       1 <= Abs[TypeSystem`Parts`PackagePrivate`i] <= 
        TypeSystem`Parts`PackagePrivate`n, TypeSystem`CheckSpan[
         Span[
          Pattern[TypeSystem`Parts`PackagePrivate`i, 
           Blank[Integer]], 
          Pattern[TypeSystem`Parts`PackagePrivate`j, 
           Blank[Integer]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := 
       And[1 <= Abs[TypeSystem`Parts`PackagePrivate`i] <= 
         TypeSystem`Parts`PackagePrivate`n, 1 <= 
         Abs[TypeSystem`Parts`PackagePrivate`j] <= 
         TypeSystem`Parts`PackagePrivate`n], TypeSystem`CheckSpan[
         Blank[], 
         Blank[]] := True, TypeSystem`SpanLength[
         Blank[], 
         Pattern[TypeSystem`Parts`PackagePrivate`l, 
          Alternatives[TypeSystem`AnyLength, TypeSystem`UnknownLength]]] := 
       TypeSystem`Parts`PackagePrivate`l, TypeSystem`SpanLength[
         Span[
          Pattern[TypeSystem`Parts`PackagePrivate`i, 
           Blank[Integer]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := 
       If[Abs[TypeSystem`Parts`PackagePrivate`i] > 
         TypeSystem`Parts`PackagePrivate`n, TypeSystem`Parts`PackagePrivate`n, 
         If[
          Positive[TypeSystem`Parts`PackagePrivate`i], 
          TypeSystem`Parts`PackagePrivate`i, -
          TypeSystem`Parts`PackagePrivate`i]], TypeSystem`SpanLength[
         Span[
          Pattern[TypeSystem`Parts`PackagePrivate`i, 
           Blank[Integer]], 
          Pattern[TypeSystem`Parts`PackagePrivate`j, 
           Blank[Integer]]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := If[
         Or[
         TypeSystem`Parts`PackagePrivate`i > 
          TypeSystem`Parts`PackagePrivate`n, 
          TypeSystem`Parts`PackagePrivate`j === 0], 0, 
         TypeSystem`Parts`PackagePrivate`clipneg[
         TypeSystem`Parts`PackagePrivate`fix[
           TypeSystem`Parts`PackagePrivate`j, 
            TypeSystem`Parts`PackagePrivate`n] - 
          TypeSystem`Parts`PackagePrivate`fix[
          TypeSystem`Parts`PackagePrivate`i, 
           TypeSystem`Parts`PackagePrivate`n] + 1]], TypeSystem`SpanLength[
         Span[
          Pattern[TypeSystem`Parts`PackagePrivate`i, 
           Blank[Integer]], 
          Pattern[TypeSystem`Parts`PackagePrivate`j, 
           Blank[Integer]], 
          Condition[
           Pattern[TypeSystem`Parts`PackagePrivate`k, 
            Blank[Integer]], TypeSystem`Parts`PackagePrivate`k != 0]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[Integer]]] := TypeSystem`Parts`PackagePrivate`clipneg[
         Floor[(
           TypeSystem`Parts`PackagePrivate`fix[
            TypeSystem`Parts`PackagePrivate`j, 
             TypeSystem`Parts`PackagePrivate`n] - 
           TypeSystem`Parts`PackagePrivate`fix[
           TypeSystem`Parts`PackagePrivate`i, 
            TypeSystem`Parts`PackagePrivate`n] + 
           TypeSystem`Parts`PackagePrivate`k)/
          TypeSystem`Parts`PackagePrivate`k]], TypeSystem`SpanLength[
         BlankNullSequence[]] := TypeSystem`UnknownLength, 
       TypeSystem`Parts`PackagePrivate`clipneg[
         Pattern[TypeSystem`Parts`PackagePrivate`i, 
          Blank[]]] := If[
         Negative[TypeSystem`Parts`PackagePrivate`i], 0, 
         TypeSystem`Parts`PackagePrivate`i], 
       TypeSystem`Parts`PackagePrivate`fix[
         Pattern[TypeSystem`Parts`PackagePrivate`i, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`n, 
          Blank[]]] := TypeSystem`Parts`PackagePrivate`clipneg[
         If[
          TrueQ[TypeSystem`Parts`PackagePrivate`i < 0], 
          TypeSystem`Parts`PackagePrivate`i + 
          TypeSystem`Parts`PackagePrivate`n + 1, 
          If[
          TypeSystem`Parts`PackagePrivate`i === All, 
           TypeSystem`Parts`PackagePrivate`n, 
           Min[
           TypeSystem`Parts`PackagePrivate`i, 
            TypeSystem`Parts`PackagePrivate`n]]]], TypeSystem`TypeQ[
         Property[
          Pattern[TypeSystem`Predicates`PackagePrivate`x, 
           Blank[]], 
          BlankNullSequence[]]] := 
       TypeSystem`TypeQ[TypeSystem`Predicates`PackagePrivate`x], 
       TypeSystem`TypeQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`x, 
          Blank[]]] := 
       MatchQ[TypeSystem`Predicates`PackagePrivate`x, 
         TypeSystem`$TypePattern], TypeSystem`$TypePattern = Alternatives[
         Blank[TypeSystem`Vector], 
         Blank[TypeSystem`Tuple], 
         Blank[TypeSystem`Assoc], 
         Blank[TypeSystem`Struct], 
         Blank[TypeSystem`Atom], TypeSystem`AnyType, TypeSystem`UnknownType, 
         Blank[TypeSystem`FailureType], 
         Blank[TypeSystem`Either], 
         Blank[TypeSystem`TypeSymbol]], 
       Attributes[TypeSystem`Either] = {Flat, OneIdentity, Orderless}, 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`Either]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], 
       TagSet[TypeSystem`Either, 
        MessageName[TypeSystem`Either, "usage"], 
        "Either[t1, t2, ...] represents one of several different types."], 
       UpSetDelayed[
        NonCommutativeMultiply[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`type, 
          Blank[TypeSystem`TypeSymbol]]], 
        TypeSystem`TypeApply[
        TypeSystem`Types`PackagePrivate`f, {
         TypeSystem`Types`PackagePrivate`type}]], 
       TagSetDelayed[TypeSystem`TypeSymbol, 
        MakeBoxes[
         TypeSystem`TypeSymbol[
          Pattern[TypeSystem`Types`PackagePrivate`s, 
           Blank[String]]], StandardForm], 
        With[{TypeSystem`Types`PackagePrivate`color = ColorData[100][
            LetterNumber[
             StringTake[TypeSystem`Types`PackagePrivate`s, 1]]]}, 
         FrameBox[
          StyleBox[
          TypeSystem`Types`PackagePrivate`s, Italic, FontFamily -> "Courier", 
           Larger], Background -> 
          Lighter[TypeSystem`Types`PackagePrivate`color, 0.6], FrameStyle -> 
          TypeSystem`Types`PackagePrivate`color, 
          FrameMargins -> {{3, 5}, {1, 1}}]]], 
       TagSetDelayed[TypeSystem`TypeSymbol, 
        MakeBoxes[
         TypeSystem`TypeSymbol[
          Pattern[TypeSystem`Types`PackagePrivate`f, 
           BlankSequence[]], 
          Pattern[TypeSystem`Types`PackagePrivate`s, 
           Blank[String]]], StandardForm], 
        ToBoxes[
         Compose[TypeSystem`Types`PackagePrivate`f, 
          RawBoxes[
           MakeBoxes[
            TypeSystem`TypeSymbol[TypeSystem`Types`PackagePrivate`s]]]]]], 
       TagSet[TypeSystem`TypeSymbol, 
        MessageName[TypeSystem`TypeSymbol, "usage"], 
        "TypeSymbol[\"\!\(\*StyleBox[\"name\", \"TI\"]\)\"]"], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`FoldRecurse], {3, 3}],
        GeneralUtilities`FoldRecurse[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`init, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       Module[{GeneralUtilities`General`PackagePrivate`e, 
          GeneralUtilities`General`PackagePrivate`fs}, 
         GeneralUtilities`General`PackagePrivate`e = 
          GeneralUtilities`FoldEmit[
           GeneralUtilities`General`PackagePrivate`f, 
            GeneralUtilities`General`PackagePrivate`init, 
            GeneralUtilities`General`PackagePrivate`list]; {
           GeneralUtilities`General`PackagePrivate`e, 
            GeneralUtilities`General`PackagePrivate`fs} = 
          GeneralUtilities`General`PackagePrivate`e; 
         Apply[Composition, GeneralUtilities`General`PackagePrivate`fs][
          GeneralUtilities`General`PackagePrivate`e]], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`FoldRecurse]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 3, 3]; Fail], 
       TagSet[GeneralUtilities`FoldRecurse, 
        MessageName[GeneralUtilities`FoldRecurse, "usage"], 
        "\!\(\*RowBox[{\"FoldRecurse\", \"[\", RowBox[{StyleBox[\"f\", \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"x\", StyleBox[\"0\", \"TR\"]], \
\"TI\"], \",\",  RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"u\", \
StyleBox[\"0\", \"TR\"]], \"TI\"], \",\",  StyleBox[SubscriptBox[\"u\", \
StyleBox[\"1\", \"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"], \
\",\",  StyleBox[SubscriptBox[\"u\", StyleBox[\"n\", \"TI\"]], \"TI\"]}], \"}\
\"}]}], \"]\"}]\) recursively calculates \!\(\*StyleBox[\"f\", \"TI\"]\)[\!\(\
\*StyleBox[SubscriptBox[\"x\", StyleBox[\"i\", \"TI\"]], \"TI\"]\), \
\!\(\*StyleBox[SubscriptBox[\"u\", StyleBox[\"i\", \"TI\"]], \"TI\"]\)] to \
produce Composition[\!\(\*StyleBox[SubscriptBox[\"g\", StyleBox[\"1\", \
\"TR\"]], \"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"g\", StyleBox[\"2\", \
\"TR\"]], \"TI\"]\), \[Ellipsis], \!\(\*StyleBox[SubscriptBox[\"g\", \
StyleBox[\"n\", \"TI\"]], \"TI\"]\)] applied to \
\!\(\*StyleBox[SubscriptBox[\"x\", StyleBox[\"n\", \"TI\"]], \"TI\"]\), where \
each \!\(\*StyleBox[\"f\", \"TI\"]\)[\!\(\*StyleBox[SubscriptBox[\"x\", \
StyleBox[\"i\", \"TI\"]], \"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"u\", \
StyleBox[\"i\", \"TI\"]], \"TI\"]\)] should give \
{\!\(\*StyleBox[SubscriptBox[\"x\", StyleBox[\"i+1\", \"TI\"]], \"TI\"]\), \!\
\(\*StyleBox[SubscriptBox[\"g\", StyleBox[\"i+1\", \"TI\"]], \"TI\"]\)}."], 
       UpSet[
        Internal`ArgumentCountRegistry[GeneralUtilities`FoldEmit], {3, 3}], 
       GeneralUtilities`FoldEmit[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`init, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := Catch[
         With[{
          GeneralUtilities`General`PackagePrivate`r = 
           GeneralUtilities`General`PackagePrivate`iFoldEmit[
            GeneralUtilities`General`PackagePrivate`f, 
             GeneralUtilities`General`PackagePrivate`init, 
             GeneralUtilities`General`PackagePrivate`list]}, {
           Part[GeneralUtilities`General`PackagePrivate`r, -1, 1], 
           Part[GeneralUtilities`General`PackagePrivate`r, 
            Span[2, All], 2]}], 
         GeneralUtilities`General`PackagePrivate`iFoldEmit], 
       Pattern[Developer`Private`LHS$, 
         Blank[GeneralUtilities`FoldEmit]] := 
       RuleCondition[
        Developer`CheckArgumentCount[Developer`Private`LHS$, 3, 3]; Fail], 
       TagSet[GeneralUtilities`FoldEmit, 
        MessageName[GeneralUtilities`FoldEmit, "usage"], 
        "\!\(\*RowBox[{\"FoldEmit\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"x\", StyleBox[\"0\", \"TR\"]], \"TI\"], \
\",\",  RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"u\", StyleBox[\"0\", \
\"TR\"]], \"TI\"], \",\",  StyleBox[SubscriptBox[\"u\", StyleBox[\"1\", \
\"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"], \",\",  \
StyleBox[SubscriptBox[\"u\", StyleBox[\"n\", \"TI\"]], \"TI\"]}], \"}\"}]}], \
\"]\"}]\) recursively calculates \!\(\*StyleBox[\"f\", \
\"TI\"]\)[\!\(\*StyleBox[SubscriptBox[\"x\", StyleBox[\"i\", \"TI\"]], \
\"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"u\", StyleBox[\"i\", \"TI\"]], \
\"TI\"]\)] to produce {\!\(\*StyleBox[SubscriptBox[\"x\", StyleBox[\"n\", \
\"TI\"]], \"TI\"]\), {\!\(\*StyleBox[SubscriptBox[\"v\", StyleBox[\"1\", \"TR\
\"]], \"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"v\", StyleBox[\"2\", \"TR\"]], \
\"TI\"]\), \[Ellipsis], \!\(\*StyleBox[SubscriptBox[\"v\", StyleBox[\"n\", \
\"TI\"]], \"TI\"]\)}}, where each \!\(\*StyleBox[\"f\", \
\"TI\"]\)[\!\(\*StyleBox[SubscriptBox[\"x\", StyleBox[\"i\", \"TI\"]], \
\"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"u\", StyleBox[\"i\", \"TI\"]], \
\"TI\"]\)] should give the {\!\(\*StyleBox[SubscriptBox[\"x\", StyleBox[\"i+1\
\", \"TI\"]], \"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"v\", StyleBox[\"i+1\", \
\"TI\"]], \"TI\"]\)} to use in the next iteration."], 
       GeneralUtilities`General`PackagePrivate`iFoldEmit[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`init, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := FoldList[If[
          Not[
           ListQ[#]], 
          Throw[$Failed, GeneralUtilities`General`PackagePrivate`iFoldEmit], 
          GeneralUtilities`General`PackagePrivate`f[
           First[#], #2]]& , {
         GeneralUtilities`General`PackagePrivate`init, None}, 
         GeneralUtilities`General`PackagePrivate`list], 
       TypeSystem`Parts`PackagePrivate`rpart[
         Pattern[TypeSystem`Parts`PackagePrivate`type, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`part, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`last, 
          Blank[]]] := 
       Which[Head[TypeSystem`Parts`PackagePrivate`type] === 
         TypeSystem`FailureType, {
         TypeSystem`Parts`PackagePrivate`type, Identity}, 
         TypeSystem`Parts`PackagePrivate`type === TypeSystem`AnyType, {
         TypeSystem`AnyType, Identity}, 
         TypeSystem`ScalarPartQ[TypeSystem`Parts`PackagePrivate`part], {
          TypeSystem`Parts`PackagePrivate`spart[
          TypeSystem`Parts`PackagePrivate`type, 
           TypeSystem`Parts`PackagePrivate`part], Identity}, 
         TypeSystem`VectorPartQ[TypeSystem`Parts`PackagePrivate`part], 
         If[TypeSystem`Parts`PackagePrivate`last, {
           TypeSystem`Parts`PackagePrivate`svpart[
           TypeSystem`Parts`PackagePrivate`type, 
            TypeSystem`Parts`PackagePrivate`part], Identity}, 
          TypeSystem`Parts`PackagePrivate`vpart[
          TypeSystem`Parts`PackagePrivate`type, 
           TypeSystem`Parts`PackagePrivate`part]], True, {
          TypeSystem`PartFailure[
          "Spec", TypeSystem`Parts`PackagePrivate`type, 
           TypeSystem`Parts`PackagePrivate`part], Identity}], 
       TypeSystem`FunctionTypeApply[
         HoldPattern[Pattern[TypeSystem`Inference`PackagePrivate`body, 
           Blank[]]& ], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := TypeSystem`Inference`PackagePrivate`bodyType[
         HoldComplete[TypeSystem`Inference`PackagePrivate`body], 
         TypeSystem`Inference`PackagePrivate`args], 
       TypeSystem`FunctionTypeApply[
         HoldPattern[
          Function[
           Pattern[TypeSystem`Inference`PackagePrivate`sym, 
            Blank[Symbol]], 
           Pattern[TypeSystem`Inference`PackagePrivate`body, 
            Blank[]]]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := TypeSystem`Inference`PackagePrivate`bodyType[
         ReplaceAll[
          HoldComplete[TypeSystem`Inference`PackagePrivate`body], {
          HoldPattern[TypeSystem`Inference`PackagePrivate`sym] -> #, 
           Pattern[TypeSystem`Inference`PackagePrivate`f, 
             Blank[Function]] :> TypeSystem`Inference`PackagePrivate`f}], 
         TypeSystem`Inference`PackagePrivate`args], 
       TypeSystem`FunctionTypeApply[
         HoldPattern[
          Function[{
            Pattern[TypeSystem`Inference`PackagePrivate`syms, 
             BlankNullSequence[Symbol]]}, 
           Pattern[TypeSystem`Inference`PackagePrivate`body, 
            Blank[]]]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := TypeSystem`Inference`PackagePrivate`bodyType[
         ReplaceAll[
          HoldComplete[TypeSystem`Inference`PackagePrivate`body], {
          Pattern[TypeSystem`Inference`PackagePrivate`sym, 
             HoldPattern[
              Alternatives[TypeSystem`Inference`PackagePrivate`syms]]] :> 
           Block[{}, 
             Condition[
              Slot[
               First[
                First[
                 Position[
                  Hold[TypeSystem`Inference`PackagePrivate`syms], 
                  Unevaluated[TypeSystem`Inference`PackagePrivate`sym]]]]], 
              True]]}], TypeSystem`Inference`PackagePrivate`args], 
       TypeSystem`FunctionTypeApply[
         BlankNullSequence[]] := TypeSystem`UnknownType, 
       TypeSystem`Inference`PackagePrivate`bodyType[
         Pattern[TypeSystem`Inference`PackagePrivate`body, 
          Blank[]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := Module[{}, 
         Apply[TypeSystem`Inference`PackagePrivate`exprType, 
          ReplaceAll[TypeSystem`Inference`PackagePrivate`body, {Verbatim[Slot][
              Alternatives[
               Pattern[TypeSystem`Inference`PackagePrivate`p, 
                Blank[String]], 
               Pattern[TypeSystem`Inference`PackagePrivate`p, 
                Blank[Integer]]]] :> Block[{}, 
              Condition[
               Replace[
                TypeSystem`Inference`PackagePrivate`insertSlot[
                TypeSystem`Inference`PackagePrivate`args, 
                 TypeSystem`Inference`PackagePrivate`p], $Failed[
                  Pattern[TypeSystem`Inference`PackagePrivate`msg, 
                   Blank[String]]] :> Return[
                  TypeSystem`FailureType[
                  Function, TypeSystem`Inference`PackagePrivate`msg, "Slot" -> 
                   TypeSystem`Inference`PackagePrivate`p, "Function" -> 
                   Apply[Function, TypeSystem`Inference`PackagePrivate`body], 
                   "Arguments" -> 
                   Apply[TypeSystem`SkeletonForm, 
                    TypeSystem`Inference`PackagePrivate`args]], Module]], 
               True]], Pattern[TypeSystem`Inference`PackagePrivate`f2, 
              Blank[Function]] :> TypeSystem`Inference`PackagePrivate`f2}]]], 
       TypeSystem`Inference`PackagePrivate`bodyType[
         BlankNullSequence[]] := TypeSystem`UnknownType, 
       Attributes[TypeSystem`Inference`PackagePrivate`exprType] = {
        HoldAllComplete}, TypeSystem`Inference`PackagePrivate`exprType[
         Pattern[TypeSystem`Inference`PackagePrivate`e, 
          Blank[List]]] := TypeSystem`Tuple[
         Map[TypeSystem`Inference`PackagePrivate`exprType, 
          Unevaluated[TypeSystem`Inference`PackagePrivate`e]]], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Pattern[TypeSystem`Inference`PackagePrivate`a, 
          Association[
           Repeated[Blank[String] -> Blank[]]]]] := TypeSystem`Struct[
         MapAt[TypeSystem`Inference`PackagePrivate`exprType, 
          Unevaluated[TypeSystem`Inference`PackagePrivate`a], {All, 2}]], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Pattern[TypeSystem`Inference`PackagePrivate`e, 
          Blank[Association]]] := If[
         AssociationQ[
          Unevaluated[TypeSystem`Inference`PackagePrivate`e]], 
         If[
          Apply[And, 
           Keys[
            KeyMap[
            TypeSystem`Inference`PackagePrivate`StringQUn, 
             TypeSystem`Inference`PackagePrivate`e]]], 
          TypeSystem`Struct[
           TypeSystem`Inference`PackagePrivate`MapUn[
           TypeSystem`Inference`PackagePrivate`exprType, 
            TypeSystem`Inference`PackagePrivate`e]], 
          TypeSystem`Assoc[TypeSystem`UnknownType, TypeSystem`UnknownType]], 
         TypeSystem`UnknownType], TypeSystem`Inference`PackagePrivate`exprType[
         Alternatives[
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[Integer]], 
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[Real]], 
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[String]]]] := TypeSystem`Atom[
         Head[TypeSystem`Inference`PackagePrivate`a]], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Alternatives[True, False]] := TypeSystem`Atom[TypeSystem`Boolean], 
       TypeSystem`Inference`PackagePrivate`exprType[
         If[
          Blank[], 
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[]], 
          Pattern[TypeSystem`Inference`PackagePrivate`b, 
           Blank[]]]] := TypeSystem`TypeUnion[
         TypeSystem`Inference`PackagePrivate`exprType[
         TypeSystem`Inference`PackagePrivate`a], 
         TypeSystem`Inference`PackagePrivate`exprType[
         TypeSystem`Inference`PackagePrivate`b]], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Part[
          Pattern[TypeSystem`Inference`PackagePrivate`e, 
           Blank[]], 
          Pattern[TypeSystem`Inference`PackagePrivate`p, 
           BlankNullSequence[]]]] := TypeSystem`TypePart[
         TypeSystem`Inference`PackagePrivate`exprType[
         TypeSystem`Inference`PackagePrivate`e], 
         TypeSystem`Inference`PackagePrivate`p], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Alternatives[
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[TypeSystem`Atom]], 
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[TypeSystem`Struct]], 
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[TypeSystem`Assoc]], 
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[TypeSystem`Vector]], 
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[TypeSystem`Tuple]]]] := 
       TypeSystem`Inference`PackagePrivate`t, 
       TypeSystem`Inference`PackagePrivate`exprType[
         ConstantArray[
          Pattern[TypeSystem`Inference`PackagePrivate`body, 
           Blank[]], 
          Pattern[TypeSystem`Inference`PackagePrivate`n, 
           Blank[]]]] := TypeSystem`Vector[
         TypeSystem`Inference`PackagePrivate`weakEval[
         TypeSystem`Inference`PackagePrivate`body], 
         TypeSystem`Inference`PackagePrivate`n], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Pattern[TypeSystem`Inference`PackagePrivate`head, 
          Blank[Symbol]][
          Pattern[TypeSystem`Inference`PackagePrivate`args, 
           BlankNullSequence[]]]] := 
       TypeSystem`InternalTypeApply[TypeSystem`Inference`PackagePrivate`head, 
         TypeSystem`Inference`PackagePrivate`MapUn[
         TypeSystem`Inference`PackagePrivate`weakEval, {
          TypeSystem`Inference`PackagePrivate`args}]], Condition[
         TypeSystem`Inference`PackagePrivate`exprType[
          Pattern[TypeSystem`Inference`PackagePrivate`head, 
           Blank[Symbol]][
           Pattern[TypeSystem`Inference`PackagePrivate`args1, 
            Blank[]]][
           Pattern[TypeSystem`Inference`PackagePrivate`args2, 
            BlankNullSequence[]]]], 
         MemberQ[TypeSystem`$OperatorForms, 
          Unevaluated[TypeSystem`Inference`PackagePrivate`head]]] := 
       TypeSystem`InternalTypeApply[
         (TypeSystem`Inference`PackagePrivate`head[#]& )[
          TypeSystem`Inference`PackagePrivate`MapUnSeq[
          TypeSystem`Inference`PackagePrivate`weakEval, 
           TypeSystem`Inference`PackagePrivate`args1]], 
         TypeSystem`Inference`PackagePrivate`MapUn[
         TypeSystem`Inference`PackagePrivate`weakEval, {
          TypeSystem`Inference`PackagePrivate`args2}]], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Pattern[TypeSystem`Inference`PackagePrivate`s, 
          Blank[Symbol]]] := 
       TypeSystem`Inference`PackagePrivate`symbolType[
        TypeSystem`Inference`PackagePrivate`s], 
       TypeSystem`Inference`PackagePrivate`exprType[
         Blank[]] := TypeSystem`AnyType, 
       Attributes[TypeSystem`Inference`PackagePrivate`StringQUn] = {
        HoldAllComplete}, TypeSystem`Inference`PackagePrivate`StringQUn[
         Blank[String]] := True, TypeSystem`Inference`PackagePrivate`StringQUn[
         BlankNullSequence[]] := False, 
       Attributes[TypeSystem`Inference`PackagePrivate`MapUn] = {HoldRest}, 
       TypeSystem`Inference`PackagePrivate`MapUn[
         Pattern[TypeSystem`Inference`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Inference`PackagePrivate`expr, 
          Blank[]]] := Map[TypeSystem`Inference`PackagePrivate`f, 
         Unevaluated[TypeSystem`Inference`PackagePrivate`expr]], 
       Attributes[TypeSystem`Inference`PackagePrivate`weakEval] = {
        HoldAllComplete}, TypeSystem`Inference`PackagePrivate`weakEval[
         Pattern[TypeSystem`Inference`PackagePrivate`x, 
          Blank[List]]] := 
       TypeSystem`Inference`PackagePrivate`MapUn[
        TypeSystem`Inference`PackagePrivate`weakEval2, 
         TypeSystem`Inference`PackagePrivate`x], 
       TypeSystem`Inference`PackagePrivate`weakEval[
         Pattern[TypeSystem`Inference`PackagePrivate`x, 
          Blank[]]] := 
       TypeSystem`Inference`PackagePrivate`weakEval2[
        TypeSystem`Inference`PackagePrivate`x], 
       Attributes[TypeSystem`Inference`PackagePrivate`weakEval2] = {
        HoldAllComplete}, 
       TypeSystem`Inference`PackagePrivate`weakEval2[
        Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[]] -> Pattern[TypeSystem`Inference`PackagePrivate`b, 
           Blank[]]] := 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         TypeSystem`Inference`PackagePrivate`a] -> 
        TypeSystem`Inference`PackagePrivate`weakEval2[
         TypeSystem`Inference`PackagePrivate`b], 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         Pattern[TypeSystem`Inference`PackagePrivate`t, 
          Alternatives[True, False]]] := 
       TypeSystem`Inference`PackagePrivate`t, 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         Alternatives[
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[Integer]], 
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[Real]], 
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[String]]]] := TypeSystem`Inference`PackagePrivate`a, 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         Pattern[TypeSystem`Inference`PackagePrivate`a, {
           Repeated[
            Alternatives[
             Blank[Integer], 
             Blank[Real], 
             Blank[String]]]}]] := TypeSystem`Inference`PackagePrivate`a, 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         PatternTest[
          Pattern[TypeSystem`Inference`PackagePrivate`s, 
           Blank[Symbol]], Developer`HoldSymbolQ]] := 
       TypeSystem`Inference`PackagePrivate`symbolType[
        TypeSystem`Inference`PackagePrivate`s], 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         Pattern[TypeSystem`Inference`PackagePrivate`f, 
          Blank[Function]]] := TypeSystem`Inference`PackagePrivate`f, 
       TypeSystem`Inference`PackagePrivate`weakEval2[
         Pattern[TypeSystem`Inference`PackagePrivate`expr, 
          Blank[]]] := 
       TypeSystem`Inference`PackagePrivate`exprType[
        TypeSystem`Inference`PackagePrivate`expr], 
       Attributes[TypeSystem`Inference`PackagePrivate`symbolType] = {
        HoldAllComplete}, TypeSystem`Inference`PackagePrivate`symbolType[
         Pattern[TypeSystem`Inference`PackagePrivate`s, 
          Blank[Symbol]]] := Replace[
         OwnValues[
         TypeSystem`Inference`PackagePrivate`s], {{} :> 
          TypeSystem`AnyType, {Verbatim[
              HoldPattern[TypeSystem`Inference`PackagePrivate`s]] :> 
            Pattern[TypeSystem`Inference`PackagePrivate`val, 
              Blank[]]} :> If[
            TypeSystem`Inference`PackagePrivate`autoloadingRHSQ[
            TypeSystem`Inference`PackagePrivate`val], 
            (TypeSystem`Inference`PackagePrivate`exprType[#]& )[
             Quiet[TypeSystem`Inference`PackagePrivate`s]], 
            TypeSystem`Inference`PackagePrivate`exprType[
            TypeSystem`Inference`PackagePrivate`val]], Blank[] :> 
          TypeSystem`AnyType}], TypeSystem`Inference`PackagePrivate`symbolType[
         Blank[]] := TypeSystem`AnyType, 
       Attributes[TypeSystem`Inference`PackagePrivate`autoloadingRHSQ] = {
        HoldAllComplete}, TypeSystem`Inference`PackagePrivate`autoloadingRHSQ[
         Verbatim[Condition][
          System`Dump`AutoLoad[
           BlankNullSequence[]], System`Dump`TestLoad]] := True, 
       TypeSystem`Inference`PackagePrivate`autoloadingRHSQ[
         Package`ActivateLoad[
          BlankNullSequence[]]] := True, 
       TypeSystem`Inference`PackagePrivate`autoloadingRHSQ[
         Blank[]] := False, System`Dump`TestLoad := 
       Names["System`$SystemInstall"] === {}, TypeSystem`InternalTypeApply[
         Pattern[TypeSystem`Inference`PackagePrivate`head, 
          Blank[]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[]]] := 
       If[TypeSystem`Inference`PackagePrivate`$reccount > 10, 
         TypeSystem`UnknownType, 
         Block[{
          TypeSystem`Inference`PackagePrivate`$reccount = 
           TypeSystem`Inference`PackagePrivate`$reccount + 1}, 
          TypeSystem`Inference`PackagePrivate`apply0[
          TypeSystem`Inference`PackagePrivate`head, 
           TypeSystem`Inference`PackagePrivate`args]]], 
       TypeSystem`Inference`PackagePrivate`$reccount = 0, 
       TypeSystem`$OperatorForms = {
        Prepend, Append, GroupBy, CountsBy, Count, Position, FirstPosition, 
         SortBy, ReverseSortBy, KeySelect, Select, SelectFirst, Delete, 
         Extract, Replace, ReplacePart, ReplaceAll, Cases, DeleteCases, 
         FirstCase, AnyTrue, AllTrue, NoneTrue, KeyExistsQ, KeySortBy, 
         KeyTake, KeyDrop, MaximalBy, MinimalBy, MatchQ, FreeQ, MemberQ, 
         TakeLargest, TakeSmallest, Lookup, Merge, Map, AssociationMap, 
         KeyMap, Apply, Scan, MapIndexed, KeyValueMap, Insert, TakeLargestBy, 
         TakeSmallestBy}, 
       Attributes[TypeSystem`Inference`PackagePrivate`MapUnSeq] = {HoldRest}, 
       TypeSystem`Inference`PackagePrivate`MapUnSeq[
         Pattern[TypeSystem`Inference`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Inference`PackagePrivate`expr, 
          BlankNullSequence[]]] := Apply[Sequence, 
         Map[TypeSystem`Inference`PackagePrivate`f, 
          Unevaluated[{TypeSystem`Inference`PackagePrivate`expr}]]], 
       TypeSystem`Inference`PackagePrivate`insertSlot[
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]], 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[Integer]]] := 
       If[1 <= Abs[TypeSystem`Inference`PackagePrivate`p] <= 
         Length[TypeSystem`Inference`PackagePrivate`args], 
         Part[
         TypeSystem`Inference`PackagePrivate`args, 
          TypeSystem`Inference`PackagePrivate`p], 
         $Failed["slotn"]], TypeSystem`Inference`PackagePrivate`insertSlot[{
          Pattern[TypeSystem`Inference`PackagePrivate`a, 
           Blank[Association]], 
          BlankNullSequence[]}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := 
       Lookup[TypeSystem`Inference`PackagePrivate`a, 
         TypeSystem`Inference`PackagePrivate`p, 
         $Failed["slota"]], TypeSystem`Inference`PackagePrivate`insertSlot[{
          Pattern[TypeSystem`Inference`PackagePrivate`s, 
           Blank[TypeSystem`Struct]], 
          BlankNullSequence[]}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := Replace[
         TypeSystem`TypeValues[
         TypeSystem`Inference`PackagePrivate`s, 
          TypeSystem`Inference`PackagePrivate`p], 
         Blank[TypeSystem`FailureType] :> $Failed["slota"]], 
       TypeSystem`Inference`PackagePrivate`insertSlot[{
          TypeSystem`Assoc[
           TypeSystem`Atom[String], 
           Pattern[TypeSystem`Inference`PackagePrivate`v, 
            Blank[]], 
           Blank[]], 
          BlankNullSequence[]}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := TypeSystem`Inference`PackagePrivate`v, 
       TypeSystem`Inference`PackagePrivate`insertSlot[{
          TypeSystem`Assoc[
           TypeSystem`Atom[
            Pattern[TypeSystem`Inference`PackagePrivate`e, 
             Blank[TypeSystem`Enumeration]]], 
           Pattern[TypeSystem`Inference`PackagePrivate`v, 
            Blank[]], 
           Blank[]], 
          BlankNullSequence[]}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := If[
         MemberQ[
         TypeSystem`Inference`PackagePrivate`e, 
          TypeSystem`Inference`PackagePrivate`p], 
         TypeSystem`Inference`PackagePrivate`v, 
         $Failed["slota"]], TypeSystem`Inference`PackagePrivate`insertSlot[{
          TypeSystem`Assoc[TypeSystem`AnyType, 
           Pattern[TypeSystem`Inference`PackagePrivate`v, 
            Blank[]], 
           Blank[]], 
          BlankNullSequence[]}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := TypeSystem`Inference`PackagePrivate`v, 
       TypeSystem`Inference`PackagePrivate`insertSlot[{TypeSystem`AnyType}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := TypeSystem`AnyType, 
       TypeSystem`Inference`PackagePrivate`insertSlot[{
          Pattern[TypeSystem`Inference`PackagePrivate`z, 
           Blank[]], 
          BlankNullSequence[]}, 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := $Failed["slot1"], 
       TypeSystem`Inference`PackagePrivate`insertSlot[
         Blank[], 
         Pattern[TypeSystem`Inference`PackagePrivate`p, 
          Blank[String]]] := $Failed["slot1"], 
       TypeSystem`Inference`PackagePrivate`insertSlot[
         BlankSequence[]] := TypeSystem`AnyType, 
       UpSetDelayed[
        TextString[
         Pattern[TypeSystem`Summary`PackagePrivate`sf, 
          Blank[TypeSystem`SkeletonForm]]], 
        StringJoin[
         Riffle[
          Map[ToString[
            TypeSystem`Summary`PackagePrivate`skell[#], InputForm]& , 
           Apply[List, TypeSystem`Summary`PackagePrivate`sf]], ", "]]], 
       UpSetDelayed[
        ToString[
         Pattern[TypeSystem`Summary`PackagePrivate`sf, 
          Blank[TypeSystem`SkeletonForm]]], 
        TextString[TypeSystem`Summary`PackagePrivate`sf]], 
       TagSetDelayed[TypeSystem`SkeletonForm, 
        MakeBoxes[
         TypeSystem`SkeletonForm[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[]]], StandardForm], 
        Format[
         TypeSystem`Summary`PackagePrivate`skell[
         TypeSystem`Summary`PackagePrivate`t], StandardForm]], 
       TagSetDelayed[TypeSystem`SkeletonForm, 
        MakeBoxes[
         TypeSystem`SkeletonForm[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           BlankSequence[]]], StandardForm], 
        Format[
         Row[
          Map[
          TypeSystem`Summary`PackagePrivate`skell, {
           TypeSystem`Summary`PackagePrivate`t}], ","], StandardForm]], 
       TagSet[TypeSystem`SkeletonForm, 
        MessageName[TypeSystem`SkeletonForm, "usage"], 
        "SkeletonForm[arg] formats as arg directly if it is a small value, \
otherwise formats as a pattern that summarizes the structure of arg.\n\
SkeletonForm[arg1, arg2, ...] formats as a comma-separated list of the \
skeletonized argi."], TypeSystem`Summary`PackagePrivate`skell[
         Alternatives[
          Pattern[TypeSystem`Summary`PackagePrivate`d, 
           Blank[List]], 
          Pattern[TypeSystem`Summary`PackagePrivate`d, 
           Blank[Association]]]] := 
       If[Length[TypeSystem`Summary`PackagePrivate`d] < 4, 
         Map[
         TypeSystem`Summary`PackagePrivate`skell2, 
          TypeSystem`Summary`PackagePrivate`d], 
         TypeSystem`Summary`PackagePrivate`iPatternForm[
          TypeSystem`DeduceType[
          TypeSystem`Summary`PackagePrivate`d, "Homo"]]], 
       TypeSystem`Summary`PackagePrivate`skell[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`Summary`PackagePrivate`skell2[
        TypeSystem`Summary`PackagePrivate`t], 
       TypeSystem`Summary`PackagePrivate`skell2[
         Alternatives[
          Pattern[TypeSystem`Summary`PackagePrivate`x, 
           Blank[Integer]], 
          Pattern[TypeSystem`Summary`PackagePrivate`x, 
           Blank[Real]], 
          Pattern[TypeSystem`Summary`PackagePrivate`x, 
           Blank[Key]]]] := TypeSystem`Summary`PackagePrivate`x, 
       TypeSystem`Summary`PackagePrivate`skell2[
         Condition[
          Pattern[TypeSystem`Summary`PackagePrivate`s, 
           Blank[String]], StringLength[TypeSystem`Summary`PackagePrivate`s] < 
          8]] := TypeSystem`Summary`PackagePrivate`s, 
       TypeSystem`Summary`PackagePrivate`skell2[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Alternatives[True, False]]] := TypeSystem`Summary`PackagePrivate`t, 
       TypeSystem`Summary`PackagePrivate`skell2[
         Blank[Symbol]] := Blank[Symbol], 
       TypeSystem`Summary`PackagePrivate`skell2[
         Blank[Function]] := Blank[Function], 
       TypeSystem`Summary`PackagePrivate`skell2[
         PatternTest[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[]], TypeSystem`TypeQ]] := 
       TypeSystem`Summary`PackagePrivate`iPatternForm[
        TypeSystem`Summary`PackagePrivate`t], 
       TypeSystem`Summary`PackagePrivate`skell2[
         Pattern[TypeSystem`Summary`PackagePrivate`x, 
          Blank[]]] := TypeSystem`Summary`PackagePrivate`iPatternForm[
         TypeSystem`DeduceType[TypeSystem`Summary`PackagePrivate`x]], 
       TypeSystem`Summary`PackagePrivate`iPatternForm[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := ReplaceRepeated[
         TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Summary`PackagePrivate`t], Verbatim[Repeated][
           Verbatim[Blank][
            Pattern[TypeSystem`Summary`PackagePrivate`s, 
             BlankNullSequence[]]]] :> 
         BlankSequence[TypeSystem`Summary`PackagePrivate`s]], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Struct[
          Pattern[TypeSystem`Summary`PackagePrivate`keys, 
           Blank[]], 
          Pattern[TypeSystem`Summary`PackagePrivate`vals, 
           Blank[]]]] := 
       AssociationThread[TypeSystem`Summary`PackagePrivate`keys, 
         Table[
          Blank[], {
           Length[TypeSystem`Summary`PackagePrivate`vals]}]], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Assoc[
          Blank[], TypeSystem`AnyType, 
          Blank[]]] := Blank[Association], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Assoc[TypeSystem`AnyType, 
          Blank[], 
          Blank[]]] := Blank[Association], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Summary`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Summary`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := Apply[Association, {
          Repeated[
          TypeSystem`Summary`PackagePrivate`form1[
            TypeSystem`Summary`PackagePrivate`k] -> 
           TypeSystem`Summary`PackagePrivate`form1[
            TypeSystem`Summary`PackagePrivate`v]]}], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Vector[
          Pattern[TypeSystem`Summary`PackagePrivate`a, 
           Blank[TypeSystem`Atom]], 
          Pattern[TypeSystem`Summary`PackagePrivate`n, 
           Alternatives[1, 2, 3]]]] := ConstantArray[
         TypeSystem`Summary`PackagePrivate`form1[
         TypeSystem`Summary`PackagePrivate`a], 
         TypeSystem`Summary`PackagePrivate`n], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Vector[TypeSystem`AnyType, 
          Pattern[TypeSystem`Summary`PackagePrivate`n, 
           Alternatives[1, 2, 3]]]] := ConstantArray[
         Blank[], TypeSystem`Summary`PackagePrivate`n], 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Vector[TypeSystem`AnyType, 
          Blank[]]] := Blank[List], TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Vector[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[]], 
          Blank[]]] := {
         Repeated[
          TypeSystem`Summary`PackagePrivate`form1[
          TypeSystem`Summary`PackagePrivate`t]]}, 
       TypeSystem`Summary`PackagePrivate`form2[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[]]]] := 
       Map[TypeSystem`Summary`PackagePrivate`form1, 
         TypeSystem`Summary`PackagePrivate`t], 
       TypeSystem`Summary`PackagePrivate`form2[
         Pattern[TypeSystem`Summary`PackagePrivate`a, 
          Blank[TypeSystem`Atom]]] := 
       TypeSystem`Summary`PackagePrivate`form1[
        TypeSystem`Summary`PackagePrivate`a], 
       TypeSystem`Summary`PackagePrivate`form2[
         Alternatives[TypeSystem`AnyType, TypeSystem`UnknownType]] := Blank[],
        TypeSystem`Summary`PackagePrivate`form2[
         Blank[]] := Blank[], 
       Attributes[TypeSystem`Summary`PackagePrivate`form1] = {HoldAll}, 
       TypeSystem`Summary`PackagePrivate`form1[
         TypeSystem`Atom[TypeSystem`Boolean]] := Alternatives[True, False], 
       TypeSystem`Summary`PackagePrivate`form1[
         Alternatives[
          Blank[TypeSystem`Struct], 
          Blank[TypeSystem`Assoc]]] := Blank[Association], 
       TypeSystem`Summary`PackagePrivate`form1[
         Alternatives[
          Blank[TypeSystem`Vector], 
          Blank[TypeSystem`Tuple]]] := Blank[List], 
       TypeSystem`Summary`PackagePrivate`form1[
         TypeSystem`Atom[
          Pattern[TypeSystem`Summary`PackagePrivate`head, 
           Blank[Symbol]]]] := Blank[TypeSystem`Summary`PackagePrivate`head], 
       TypeSystem`Summary`PackagePrivate`form1[
         TypeSystem`Atom[
          Entity[
           Pattern[TypeSystem`Summary`PackagePrivate`type, 
            Blank[String]]]]] := 
       Entity[TypeSystem`Summary`PackagePrivate`type, 
         Blank[]], TypeSystem`Summary`PackagePrivate`form1[
         TypeSystem`Atom[
          Quantity[
           Blank[], 
           Pattern[TypeSystem`Summary`PackagePrivate`unit, 
            Blank[]]]]] := Quantity[
         Blank[], TypeSystem`Summary`PackagePrivate`unit], 
       TypeSystem`Summary`PackagePrivate`form1[
         TypeSystem`Atom[
          Pattern[TypeSystem`Summary`PackagePrivate`a, 
           Blank[TypeSystem`Enumeration]]]] := 
       Apply[Alternatives, TypeSystem`Summary`PackagePrivate`a], 
       TypeSystem`Summary`PackagePrivate`form1[
         Alternatives[TypeSystem`AnyType, TypeSystem`UnknownType]] := Blank[],
        TypeSystem`Summary`PackagePrivate`form1[
         Blank[]] := Blank[], TypeSystem`DeduceType[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Alternatives[
           Blank[TypeSystem`Vector], 
           Blank[TypeSystem`Tuple], 
           Blank[TypeSystem`Assoc], 
           Blank[TypeSystem`Struct], 
           Blank[TypeSystem`Atom], TypeSystem`AnyType, TypeSystem`UnknownType, 
           Blank[TypeSystem`FailureType], 
           Blank[TypeSystem`Either], 
           Blank[TypeSystem`TypeSymbol]]]] := 
       TypeSystem`Deduction`PackagePrivate`t, TypeSystem`DeduceType[
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[]]] := 
       TypeSystem`Deduction`PackagePrivate`deduce[
        TypeSystem`Deduction`PackagePrivate`data], TypeSystem`DeduceType[
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`as, 
          Blank[]]] := 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
        TypeSystem`Deduction`PackagePrivate`data, 
         TypeSystem`Deduction`PackagePrivate`as], 
       TagSet[TypeSystem`DeduceType, 
        MessageName[TypeSystem`DeduceType, "usage"], 
        "\!\(\*RowBox[{\"DeduceType\", \"[\", RowBox[{StyleBox[\"data\", \"TI\
\"]}], \"]\"}]\) will attempt to infer a type that is consistent with the \
given data.\n\!\(\*RowBox[{\"DeduceType\", \"[\", RowBox[{StyleBox[\"data\", \
\"TI\"], \",\",  StyleBox[\"hint\", \"TI\"]}], \"]\"}]\) \"hints\" to \
DeduceType to prefer a particular outer construct (Struct, Tuple, etc.).\n\
\[Bullet] The returned type will be some combination of the constructs \
Struct, Tuple, Vector and Assoc, and atomic types."], 
       Attributes[TypeSystem`Deduction`PackagePrivate`deduce] = {HoldAll}, 
       TypeSystem`Deduction`PackagePrivate`deduce[{}] := 
       TypeSystem`Vector[TypeSystem`UnknownType, TypeSystem`AnyLength], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Except[
          HoldPattern[
           Real[
            BlankNullSequence[]]], 
          Blank[Real]]] := TypeSystem`Atom[Real], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Except[
          HoldPattern[
           String[
            BlankNullSequence[]]], 
          Blank[String]]] := TypeSystem`Atom[String], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Except[
          HoldPattern[
           Integer[
            BlankNullSequence[]]], 
          Blank[Integer]]] := TypeSystem`Atom[Integer], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         HoldPattern[
          Rational[
           Except[
            HoldPattern[
             Integer[
              BlankNullSequence[]]], 
            Blank[Integer]], 
           Except[
            HoldPattern[
             Integer[
              BlankNullSequence[]]], 
            Blank[Integer]]]]] := TypeSystem`Atom[Rational], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Alternatives[False, True]] := TypeSystem`Atom[TypeSystem`Boolean], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         PatternTest[
          Blank[Image], ImageQ]] := TypeSystem`Atom[Image], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         PatternTest[
          Blank[Image3D], ImageQ]] := TypeSystem`Atom[Image], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         PatternTest[
          Blank[Graph], GraphQ]] := TypeSystem`Atom[Graph], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Blank[Graphics]] := TypeSystem`Atom[Graphics], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         HoldPattern[
          Quantity[
           Blank[], 
           PatternTest[
            Pattern[TypeSystem`Deduction`PackagePrivate`unit, 
             Blank[]], KnownUnitQ]]]] := TypeSystem`Atom[
         Quantity[1, TypeSystem`Deduction`PackagePrivate`unit]], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Entity[
          Pattern[TypeSystem`Deduction`PackagePrivate`type, 
           Blank[]], 
          Blank[]]] := TypeSystem`Atom[
         Entity[TypeSystem`Deduction`PackagePrivate`type]], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Blank[Hyperlink]] := TypeSystem`Atom[Hyperlink], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         HoldPattern[
          IPAddress[
           PatternTest[
            Blank[String], StringQ]]]] := TypeSystem`Atom[IPAddress], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         HoldPattern[
          Blank[ResourceObject]]] := TypeSystem`Atom[ResourceObject], 
       Condition[
         TypeSystem`Deduction`PackagePrivate`deduce[
          Pattern[TypeSystem`Deduction`PackagePrivate`s, 
           Blank[Symbol]][
           BlankNullSequence[]]], 
         MemberQ[
         TypeSystem`$SimpleAtomicHeads, 
          TypeSystem`Deduction`PackagePrivate`s]] := 
       TypeSystem`Atom[TypeSystem`Deduction`PackagePrivate`s], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Blank[Missing]] := TypeSystem`UnknownType, 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[List]]] := Which[
         Developer`PackedArrayQ[TypeSystem`Deduction`PackagePrivate`e], 
         TypeSystem`Deduction`PackagePrivate`packedtype[
         TypeSystem`Deduction`PackagePrivate`e], 
         Developer`StringVectorQ[TypeSystem`Deduction`PackagePrivate`e], 
         TypeSystem`Vector[
          TypeSystem`DeduceStringVectorType[
          TypeSystem`Deduction`PackagePrivate`e], 
          Length[TypeSystem`Deduction`PackagePrivate`e]], 
         Developer`AssociationVectorQ[TypeSystem`Deduction`PackagePrivate`e], 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Vector], 
         Length[TypeSystem`Deduction`PackagePrivate`e] > 16, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Vector], 
         Not[
          TypeSystem`Deduction`PackagePrivate`SameHeadsQ[
          TypeSystem`Deduction`PackagePrivate`e]], 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Tuple], 
         VectorQ[TypeSystem`Deduction`PackagePrivate`e, TypeSystem`TypeQ], 
         TypeSystem`Tuple[TypeSystem`Deduction`PackagePrivate`e], True, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Vector]], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         PatternTest[
          Pattern[TypeSystem`Deduction`PackagePrivate`e, 
           Blank[Association]], AssociationQ]] := 
       TypeSystem`DeduceAssociationType[
        TypeSystem`Deduction`PackagePrivate`e], 
       TypeSystem`Deduction`PackagePrivate`deduce[
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := If[
         NumericQ[TypeSystem`Deduction`PackagePrivate`x], 
         TypeSystem`Atom[Real], 
         If[
          TypeSystem`TypeQ[TypeSystem`Deduction`PackagePrivate`x], 
          TypeSystem`Deduction`PackagePrivate`x, TypeSystem`AnyType]], 
       TypeSystem`$SimpleAtomicHeads = 
       Hold[DateObject, TimeObject, TemporalData, Image, GeoPosition, Graph, 
         Graphics, GeoGraphics, Sound, CloudObject, File, URL, Hyperlink, 
         HTTPResponse, HTTPRequest], 
       TypeSystem`Deduction`PackagePrivate`packedtype[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[List]]] := TypeSystem`Vector[
         TypeSystem`Atom[
          Which[
           Developer`PackedArrayQ[
           TypeSystem`Deduction`PackagePrivate`e, Integer], Integer, 
           Developer`PackedArrayQ[
           TypeSystem`Deduction`PackagePrivate`e, Real], Real, 
           Developer`PackedArrayQ[
           TypeSystem`Deduction`PackagePrivate`e, Complex], Complex, True, 
           TypeSystem`AnyType]], 
         Dimensions[TypeSystem`Deduction`PackagePrivate`e]], 
       TypeSystem`DeduceStringVectorType[
         Pattern[TypeSystem`Deduction`PackagePrivate`list, 
          Blank[]]] := TypeSystem`Atom[
         If[3 <= Length[TypeSystem`Deduction`PackagePrivate`list] <= 10000, 
          Block[{TypeSystem`Deduction`PackagePrivate`uniq = Union[
              Cases[TypeSystem`Deduction`PackagePrivate`list, 
               Blank[String]]]}, 
           If[
           1 <= Length[TypeSystem`Deduction`PackagePrivate`uniq] <= 
            Min[6, Length[TypeSystem`Deduction`PackagePrivate`list] - 2], 
            Apply[
            TypeSystem`Enumeration, TypeSystem`Deduction`PackagePrivate`uniq],
             String]], String]], 
       Attributes[TypeSystem`Deduction`PackagePrivate`deduceAs] = {HoldAll}, 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[List]], 
         Alternatives[TypeSystem`Vector, "Homo"]] := TypeSystem`Vector[
         TypeSystem`DeduceListType[TypeSystem`Deduction`PackagePrivate`e], 
         Length[TypeSystem`Deduction`PackagePrivate`e]], 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[List]], 
         Alternatives[TypeSystem`Tuple, "Hetero"]] := TypeSystem`Tuple[
         Map[
         TypeSystem`Deduction`PackagePrivate`deduce, 
          TypeSystem`Deduction`PackagePrivate`e]], 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[Association]], 
         Alternatives[TypeSystem`Assoc, "Homo"]] := 
       If[Length[TypeSystem`Deduction`PackagePrivate`e] == 1, 
         TypeSystem`Assoc[
          TypeSystem`Deduction`PackagePrivate`deduce[
           Evaluate[
            First[
             Keys[TypeSystem`Deduction`PackagePrivate`e]]]], 
          TypeSystem`Deduction`PackagePrivate`deduce[
           Evaluate[
            First[
             Values[TypeSystem`Deduction`PackagePrivate`e]]]], 1], 
         TypeSystem`Assoc[
          TypeSystem`DeduceListType[
           Keys[TypeSystem`Deduction`PackagePrivate`e]], 
          TypeSystem`DeduceListType[
           Values[TypeSystem`Deduction`PackagePrivate`e]], 
          Length[TypeSystem`Deduction`PackagePrivate`e]]], 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[Association]], 
         Alternatives[TypeSystem`Struct, "Hetero"]] := If[
         Developer`StringVectorQ[
          Keys[TypeSystem`Deduction`PackagePrivate`e]], 
         TypeSystem`Struct[
          Map[
          TypeSystem`Deduction`PackagePrivate`deduce, 
           TypeSystem`Deduction`PackagePrivate`e]], 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Assoc]], 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[]], 
         Blank[]] := 
       TypeSystem`Deduction`PackagePrivate`deduce[
        TypeSystem`Deduction`PackagePrivate`e], TypeSystem`DeduceListType[
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[]]] := 
       TypeSystem`DeduceListType[
        TypeSystem`Deduction`PackagePrivate`data, None], 
       TypeSystem`DeduceListType[{}, 
         Pattern[TypeSystem`Deduction`PackagePrivate`hint, 
          Blank[]]] := TypeSystem`UnknownType, TypeSystem`DeduceListType[{
          Pattern[TypeSystem`Deduction`PackagePrivate`e, 
           Blank[]]}, 
         Pattern[TypeSystem`Deduction`PackagePrivate`hint, 
          Blank[]]] := 
       TypeSystem`Deduction`PackagePrivate`deduceAs[
        TypeSystem`Deduction`PackagePrivate`e, 
         TypeSystem`Deduction`PackagePrivate`hint], TypeSystem`DeduceListType[
         Pattern[TypeSystem`Deduction`PackagePrivate`list, 
          Blank[List]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`ihint, 
          Blank[]]] := 
       Module[{TypeSystem`Deduction`PackagePrivate`type, 
          TypeSystem`Deduction`PackagePrivate`len, 
          TypeSystem`Deduction`PackagePrivate`dim, 
          TypeSystem`Deduction`PackagePrivate`first, 
          TypeSystem`Deduction`PackagePrivate`last, 
          TypeSystem`Deduction`PackagePrivate`hint = 
          TypeSystem`Deduction`PackagePrivate`ihint, 
          TypeSystem`Deduction`PackagePrivate`tmp, 
          TypeSystem`Deduction`PackagePrivate`notAtomic = Null}, 
         TypeSystem`Deduction`PackagePrivate`first = 
          First[TypeSystem`Deduction`PackagePrivate`list]; 
         TypeSystem`Deduction`PackagePrivate`last = 
          Last[TypeSystem`Deduction`PackagePrivate`list]; If[
           And[TypeSystem`Deduction`PackagePrivate`hint =!= TypeSystem`Tuple, 
            Or[
             AtomQ[TypeSystem`Deduction`PackagePrivate`first], 
             AtomQ[
              Part[TypeSystem`Deduction`PackagePrivate`list, 2]], 
             AtomQ[TypeSystem`Deduction`PackagePrivate`last]]], 
           TypeSystem`Deduction`PackagePrivate`tmp = 
            TypeSystem`DeduceAtomicArrayType[
             TypeSystem`Deduction`PackagePrivate`list]; 
           If[TypeSystem`Deduction`PackagePrivate`tmp =!= $Failed, 
             Return[TypeSystem`Deduction`PackagePrivate`tmp]]; 
           TypeSystem`Deduction`PackagePrivate`notAtomic = True; Null]; 
         TypeSystem`Deduction`PackagePrivate`len = 
          Length[TypeSystem`Deduction`PackagePrivate`list]; If[
           And[TypeSystem`Deduction`PackagePrivate`len > 2, 
            Developer`AssociationVectorQ[
            TypeSystem`Deduction`PackagePrivate`list]], 
           TypeSystem`Deduction`PackagePrivate`type = 
            TypeSystem`DeduceAssociationVectorType[
             TypeSystem`Deduction`PackagePrivate`list]; 
           If[TypeSystem`Deduction`PackagePrivate`type =!= $Failed, 
             Return[TypeSystem`Deduction`PackagePrivate`type]]; Null]; If[
           And[
           1 < TypeSystem`Deduction`PackagePrivate`len < 16384, 
            Length[TypeSystem`Deduction`PackagePrivate`dim = 
              Dimensions[TypeSystem`Deduction`PackagePrivate`list, 2]] == 2], 
           TypeSystem`Deduction`PackagePrivate`dim = 
            Last[TypeSystem`Deduction`PackagePrivate`dim]; 
           Which[TypeSystem`Deduction`PackagePrivate`dim == 0, 
             Return[
              TypeSystem`Vector[
              TypeSystem`UnknownType, TypeSystem`AnyLength]], 
             TypeSystem`Deduction`PackagePrivate`dim < 2, Null, 
             MatrixQ[
             TypeSystem`Deduction`PackagePrivate`list, 
              Internal`RealValuedNumberQ], 
             If[
              Developer`PackedArrayQ[
               Developer`ToPackedArray[
               TypeSystem`Deduction`PackagePrivate`list]], 
              Return[
               TypeSystem`Vector[
                TypeSystem`Atom[
                 Head[
                  Part[TypeSystem`Deduction`PackagePrivate`list, 1, 1]]], 
                TypeSystem`Deduction`PackagePrivate`dim]], 
              TypeSystem`Deduction`PackagePrivate`type = 
               Apply[TypeSystem`Deduction`PackagePrivate`deduceAs, {
                  First[TypeSystem`Deduction`PackagePrivate`list], 
                  TypeSystem`Deduction`PackagePrivate`hint}]; Return[
                Fold[
                TypeSystem`FoldTypeData, 
                 TypeSystem`Deduction`PackagePrivate`type, 
                 Rest[TypeSystem`Deduction`PackagePrivate`list]]]], True, 
             Null]; If[
            TypeSystem`Deduction`PackagePrivate`dim < 
             TypeSystem`Deduction`PackagePrivate`len, 
             TypeSystem`Deduction`PackagePrivate`type = 
              Map[TypeSystem`DeduceListType[#, TypeSystem`Vector]& , 
                Transpose[TypeSystem`Deduction`PackagePrivate`list]]; If[
               Apply[SameQ, TypeSystem`Deduction`PackagePrivate`type], 
               Return[
                TypeSystem`Vector[
                 First[TypeSystem`Deduction`PackagePrivate`type], 
                 Length[TypeSystem`Deduction`PackagePrivate`type]]], 
               Return[
                TypeSystem`Tuple[TypeSystem`Deduction`PackagePrivate`type]]]; 
             Null]; TypeSystem`Deduction`PackagePrivate`hint = 
            TypeSystem`Vector; Null]; 
         Which[TypeSystem`Deduction`PackagePrivate`hint =!= None, Null, 
           And[
            AssociationQ[TypeSystem`Deduction`PackagePrivate`first], 
            AssociationQ[TypeSystem`Deduction`PackagePrivate`last], 
            Developer`StringVectorQ[
            TypeSystem`Deduction`PackagePrivate`tmp = 
             Keys[TypeSystem`Deduction`PackagePrivate`first]], 
            TypeSystem`Deduction`PackagePrivate`tmp === 
            Keys[TypeSystem`Deduction`PackagePrivate`last]], 
           TypeSystem`Deduction`PackagePrivate`hint = TypeSystem`Struct, 
           And[
            ListQ[TypeSystem`Deduction`PackagePrivate`first], 
            ListQ[TypeSystem`Deduction`PackagePrivate`last], 
            Length[TypeSystem`Deduction`PackagePrivate`first] === 
            Length[TypeSystem`Deduction`PackagePrivate`last]], 
           TypeSystem`Deduction`PackagePrivate`hint = TypeSystem`Tuple]; If[
           And[
           TypeSystem`Deduction`PackagePrivate`len > 
            TypeSystem`$DeductionWindowSize, 
            TypeSystem`PackageScope`PossibleNonUniformListQ[
            TypeSystem`Deduction`PackagePrivate`list]], 
           Return[TypeSystem`AnyType]]; 
         TypeSystem`Deduction`PackagePrivate`type = 
          Apply[TypeSystem`Deduction`PackagePrivate`deduceAs, {
             First[TypeSystem`Deduction`PackagePrivate`list], 
             TypeSystem`Deduction`PackagePrivate`hint}]; 
         Block[{TypeSystem`$DeductionWindowSize = 
            Ceiling[TypeSystem`$DeductionWindowSize 0.5]}, 
           If[
           TypeSystem`Deduction`PackagePrivate`len < 
            2 TypeSystem`$DeductionWindowSize, 
            TypeSystem`Deduction`PackagePrivate`type = 
             Fold[TypeSystem`FoldTypeData, 
               TypeSystem`Deduction`PackagePrivate`type, 
               Rest[TypeSystem`Deduction`PackagePrivate`list]]; Null, 
            TypeSystem`Deduction`PackagePrivate`type = 
             Fold[TypeSystem`FoldTypeData, 
               TypeSystem`Deduction`PackagePrivate`type, 
               Take[
               TypeSystem`Deduction`PackagePrivate`list, {
                2, TypeSystem`$DeductionWindowSize}]]; 
            If[TypeSystem`Deduction`PackagePrivate`type === 
              TypeSystem`AnyType, 
              Return[TypeSystem`Deduction`PackagePrivate`type]]; 
            TypeSystem`Deduction`PackagePrivate`type = 
             Fold[TypeSystem`FoldTypeData, 
               TypeSystem`Deduction`PackagePrivate`type, 
               Take[
               TypeSystem`Deduction`PackagePrivate`list, -
                TypeSystem`$DeductionWindowSize]]; If[
              And[TypeSystem`Deduction`PackagePrivate`notAtomic === True, 
               MatchQ[TypeSystem`Deduction`PackagePrivate`type, 
                Blank[TypeSystem`Atom]]], 
              TypeSystem`Deduction`PackagePrivate`type = 
               Fold[TypeSystem`FoldTypeData, 
                 TypeSystem`Deduction`PackagePrivate`type, 
                 Take[
                 TypeSystem`Deduction`PackagePrivate`list, {
                  TypeSystem`$DeductionWindowSize + 
                   1, -TypeSystem`$DeductionWindowSize - 1}]]; Null]; Null]]; 
         TypeSystem`Deduction`PackagePrivate`type], 
       TypeSystem`DeduceAtomicArrayType[
         Pattern[TypeSystem`Deduction`PackagePrivate`list, 
          Blank[List]]] := 
       Block[{TypeSystem`Deduction`PackagePrivate`tmp}, 
         TypeSystem`Deduction`PackagePrivate`tmp = 
          TypeSystem`Deduction`PackagePrivate`iDeduceAtomicArrayType[
           TypeSystem`Deduction`PackagePrivate`list]; 
         If[TypeSystem`Deduction`PackagePrivate`tmp =!= $Failed, 
           Return[TypeSystem`Deduction`PackagePrivate`tmp]]; 
         TypeSystem`Deduction`PackagePrivate`tmp = 
          DeleteCases[TypeSystem`Deduction`PackagePrivate`list, 
            Blank[Missing]]; 
         If[Length[TypeSystem`Deduction`PackagePrivate`tmp] === 
           Length[TypeSystem`Deduction`PackagePrivate`list], 
           Return[$Failed]]; 
         TypeSystem`Deduction`PackagePrivate`iDeduceAtomicArrayType[
          TypeSystem`Deduction`PackagePrivate`tmp]], 
       TypeSystem`Deduction`PackagePrivate`iDeduceAtomicArrayType[
         Pattern[TypeSystem`Deduction`PackagePrivate`list, 
          Blank[List]]] := Which[
         Developer`PackedArrayQ[TypeSystem`Deduction`PackagePrivate`list], 
         First[
          TypeSystem`Deduction`PackagePrivate`packedtype[
          TypeSystem`Deduction`PackagePrivate`list]], 
         Developer`StringVectorQ[TypeSystem`Deduction`PackagePrivate`list], 
         TypeSystem`DeduceStringVectorType[
         TypeSystem`Deduction`PackagePrivate`list], 
         VectorQ[TypeSystem`Deduction`PackagePrivate`list, IntegerQ], 
         TypeSystem`Atom[Integer], 
         VectorQ[
         TypeSystem`Deduction`PackagePrivate`list, 
          Internal`RealValuedNumberQ], 
         TypeSystem`Atom[Real], 
         VectorQ[TypeSystem`Deduction`PackagePrivate`list, BooleanQ], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         VectorQ[TypeSystem`Deduction`PackagePrivate`list, QuantityQ], 
         TypeSystem`DeduceQuantityVectorType[
         TypeSystem`Deduction`PackagePrivate`list], True, $Failed], 
       TypeSystem`DeduceQuantityVectorType[
         Pattern[TypeSystem`Deduction`PackagePrivate`list, 
          Blank[]]] := 
       Block[{TypeSystem`Deduction`PackagePrivate`unit}, 
         TypeSystem`Deduction`PackagePrivate`unit = DeleteDuplicates[
            Part[TypeSystem`Deduction`PackagePrivate`list, All, 2]]; 
         If[Length[TypeSystem`Deduction`PackagePrivate`unit] === 1, 
           TypeSystem`Atom[
            Apply[Quantity, TypeSystem`Deduction`PackagePrivate`unit]], 
           TypeSystem`AnyType]], TypeSystem`DeduceAssociationVectorType[
         Pattern[TypeSystem`Deduction`PackagePrivate`list, 
          Blank[]]] := 
       Block[{TypeSystem`Deduction`PackagePrivate`keys, 
          TypeSystem`Deduction`PackagePrivate`vals}, 
         TypeSystem`Deduction`PackagePrivate`keys = Keys[
            First[TypeSystem`Deduction`PackagePrivate`list]]; If[
           Not[
            And[
             Developer`NotEmptyQ[TypeSystem`Deduction`PackagePrivate`keys], 
             Developer`StringVectorQ[
             TypeSystem`Deduction`PackagePrivate`keys], 
             TypeSystem`Deduction`PackagePrivate`keys == Keys[
               Last[TypeSystem`Deduction`PackagePrivate`list]]]], 
           Return[$Failed]]; If[Max[
             Map[Length, TypeSystem`Deduction`PackagePrivate`list]] != 
           Length[TypeSystem`Deduction`PackagePrivate`keys], 
           Return[$Failed]]; 
         TypeSystem`Deduction`PackagePrivate`vals = Transpose[
            Lookup[
            TypeSystem`Deduction`PackagePrivate`list, 
             TypeSystem`Deduction`PackagePrivate`keys, 
             Return[$Failed, Block]]]; 
         TypeSystem`Struct[TypeSystem`Deduction`PackagePrivate`keys, 
           Map[
           TypeSystem`DeduceListType[#, TypeSystem`Vector]& , 
            TypeSystem`Deduction`PackagePrivate`vals]]], 
       TypeSystem`FoldTypeData[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[TypeSystem`Vector]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[List]]] := 
       TypeSystem`FoldType[TypeSystem`Deduction`PackagePrivate`t, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`data, TypeSystem`Vector]], 
       TypeSystem`FoldTypeData[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[List]]] := 
       TypeSystem`FoldType[TypeSystem`Deduction`PackagePrivate`t, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`data, TypeSystem`Tuple]], 
       TypeSystem`FoldTypeData[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[TypeSystem`Assoc]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[Association]]] := 
       TypeSystem`FoldType[TypeSystem`Deduction`PackagePrivate`t, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`data, TypeSystem`Assoc]], 
       TypeSystem`FoldTypeData[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[TypeSystem`Struct]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[Association]]] := 
       TypeSystem`FoldType[TypeSystem`Deduction`PackagePrivate`t, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`data, TypeSystem`Struct]], 
       TypeSystem`FoldTypeData[TypeSystem`AnyType, 
         Blank[]] := TypeSystem`AnyType, TypeSystem`FoldTypeData[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[]], 
         Pattern[TypeSystem`Deduction`PackagePrivate`data, 
          Blank[]]] := 
       TypeSystem`FoldType[TypeSystem`Deduction`PackagePrivate`t, 
         TypeSystem`Deduction`PackagePrivate`deduce[
         TypeSystem`Deduction`PackagePrivate`data]], 
       TypeSystem`$DeductionWindowSize = 32, 
       TypeSystem`Deduction`PackagePrivate`SameHeadsQ[
         Pattern[TypeSystem`Deduction`PackagePrivate`x, 
          Blank[]]] := Length[
          DeleteCases[
           DeleteDuplicates[
            Map[Head, TypeSystem`Deduction`PackagePrivate`x]], Missing]] <= 1,
        TypeSystem`DeduceAssociationType[
         Pattern[TypeSystem`Deduction`PackagePrivate`e, 
          Blank[]]] := Which[
         Not[
          AssociationQ[TypeSystem`Deduction`PackagePrivate`e]], 
         TypeSystem`AnyType, Length[TypeSystem`Deduction`PackagePrivate`e] == 
         0, 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 
         Length[TypeSystem`Deduction`PackagePrivate`e] == 1, 
         TypeSystem`Assoc[
          TypeSystem`Deduction`PackagePrivate`deduce[
           Evaluate[
            First[
             Keys[TypeSystem`Deduction`PackagePrivate`e]]]], 
          TypeSystem`Deduction`PackagePrivate`deduce[
           Evaluate[
            First[
             Values[TypeSystem`Deduction`PackagePrivate`e]]]], 1], 
         Length[TypeSystem`Deduction`PackagePrivate`e] > 16, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Assoc], 
         Developer`StringVectorQ[
          Keys[TypeSystem`Deduction`PackagePrivate`e]], 
         If[
          Developer`AssociationVectorQ[
           Values[TypeSystem`Deduction`PackagePrivate`e]], 
          TypeSystem`Deduction`PackagePrivate`deduceAs[
          TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Assoc], 
          
          Block[{TypeSystem`Deduction`PackagePrivate`res = 
            TypeSystem`Deduction`PackagePrivate`deduceAs[
             TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Struct], 
            TypeSystem`Deduction`PackagePrivate`union}, 
           If[
            And[
            Head[TypeSystem`Deduction`PackagePrivate`res] === 
             TypeSystem`Struct, 
             TypeSystem`Deduction`PackagePrivate`SameHeadsQ[
              Last[TypeSystem`Deduction`PackagePrivate`res]]], 
            TypeSystem`Deduction`PackagePrivate`union = 
             TypeSystem`TypeInner[TypeSystem`Deduction`PackagePrivate`res]; 
            If[TypeSystem`Deduction`PackagePrivate`typeSpecifity[
               TypeSystem`Deduction`PackagePrivate`union] >= 
              TypeSystem`Deduction`PackagePrivate`typeSpecifity[
               TypeSystem`Deduction`PackagePrivate`res], 
              TypeSystem`Assoc[
               TypeSystem`Atom[
                Apply[TypeSystem`Enumeration, 
                 Keys[TypeSystem`Deduction`PackagePrivate`e]]], 
               TypeSystem`Deduction`PackagePrivate`union, 
               Length[TypeSystem`Deduction`PackagePrivate`e]], 
              TypeSystem`Deduction`PackagePrivate`res], 
            TypeSystem`Deduction`PackagePrivate`res]]], True, 
         TypeSystem`Deduction`PackagePrivate`deduceAs[
         TypeSystem`Deduction`PackagePrivate`e, TypeSystem`Assoc]], 
       TypeSystem`Deduction`PackagePrivate`typeSpecifity[
         Pattern[TypeSystem`Deduction`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Deduction`PackagePrivate`t] - 10 
        Count[TypeSystem`Deduction`PackagePrivate`t, 
          Alternatives[TypeSystem`AnyType, TypeSystem`UnknownType], {
          0, Infinity}], TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Vector[
          Pattern[TypeSystem`Deduction`PackagePrivate`t, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`Deduction`PackagePrivate`ts[
        TypeSystem`Deduction`PackagePrivate`t], 
       TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Deduction`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Deduction`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Deduction`PackagePrivate`k] + 
        TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Deduction`PackagePrivate`v], 
       TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Struct[
          Blank[], 
          Pattern[TypeSystem`Deduction`PackagePrivate`v, 
           Blank[]]]] := Max[
         Map[
         TypeSystem`Deduction`PackagePrivate`ts, 
          TypeSystem`Deduction`PackagePrivate`v]], 
       TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Deduction`PackagePrivate`t, 
           Blank[]]]] := Max[
         Map[
         TypeSystem`Deduction`PackagePrivate`ts, 
          TypeSystem`Deduction`PackagePrivate`t]], 
       TypeSystem`Deduction`PackagePrivate`ts[
         Alternatives[TypeSystem`AnyType, TypeSystem`UnknownType]] := 0, 
       TypeSystem`Deduction`PackagePrivate`ts[
         TypeSystem`Atom[
          Pattern[TypeSystem`Deduction`PackagePrivate`a, 
           Blank[]]]] := 
       Replace[TypeSystem`Deduction`PackagePrivate`a, {
         Blank[TypeSystem`Enumeration] :> 2, Integer :> 2, Blank[] :> 1}], 
       GeneralUtilities`HeldFunctionQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
          Blank[]]] := 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
        GeneralUtilities`Predicates`PackagePrivate`s, 
         Alternatives[HoldFirst, HoldRest, HoldAll, HoldAllComplete]], 
       Attributes[GeneralUtilities`Predicates`PackagePrivate`hasAttr] = {
        HoldAllComplete}, GeneralUtilities`Predicates`PackagePrivate`hasAttr[
         PatternTest[
          Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
           Blank[Symbol]], Developer`HoldSymbolQ], 
         Pattern[GeneralUtilities`Predicates`PackagePrivate`x, 
          Blank[]]] := MemberQ[
         Attributes[GeneralUtilities`Predicates`PackagePrivate`s], 
         GeneralUtilities`Predicates`PackagePrivate`x], 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
         Verbatim[Function][
          Blank[], 
          Blank[], 
          Pattern[GeneralUtilities`Predicates`PackagePrivate`l, 
           Blank[List]]], 
         Pattern[GeneralUtilities`Predicates`PackagePrivate`x, 
          Blank[]]] := 
       MemberQ[GeneralUtilities`Predicates`PackagePrivate`l, 
         GeneralUtilities`Predicates`PackagePrivate`x], 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
         Verbatim[Function][
          Blank[], 
          Blank[], 
          Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
           Blank[Symbol]]], 
         Pattern[GeneralUtilities`Predicates`PackagePrivate`x, 
          Blank[]]] := 
       MatchQ[GeneralUtilities`Predicates`PackagePrivate`s, 
         GeneralUtilities`Predicates`PackagePrivate`x], 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
         Blank[], 
         Blank[]] := False, TypeSystem`Inference`PackagePrivate`apply1[
         Alternatives[{}, 
          Blank[Missing]], 
         Blank[]] := If[
         GeneralUtilities`SystemSymbolQ[
         TypeSystem`Inference`PackagePrivate`$head], 
         If[StringTake[
            SymbolName[TypeSystem`Inference`PackagePrivate`$head], -1] === 
          "Q", 
          TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType], 
         TypeSystem`UnknownType], TypeSystem`Inference`PackagePrivate`apply1[
         Pattern[TypeSystem`Inference`PackagePrivate`rules, 
          Blank[List]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[]]] := 
       GeneralUtilities`WhenNot[TypeSystem`ValidTypeQ, TypeSystem`AnyType][
         Replace[TypeSystem`Inference`PackagePrivate`args, 
          Append[
          TypeSystem`Inference`PackagePrivate`rules, Blank[] :> 
           TypeSystem`Inference`PackagePrivate`apply2[
            TypeSystem`Inference`PackagePrivate`rules, 
             TypeSystem`Inference`PackagePrivate`args]]]], 
       GeneralUtilities`SystemSymbolQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
          Blank[]]] := And[
         Developer`SymbolQ[GeneralUtilities`Predicates`PackagePrivate`s], 
         StringMatchQ[
          Context[GeneralUtilities`Predicates`PackagePrivate`s], "System`*"]],
        Attributes[GeneralUtilities`WhenNot] = {HoldRest}, 
       GeneralUtilities`WhenNot[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`g, 
          Blank[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`x, 
          Blank[]]] := If[
         Not[
          TrueQ[
           GeneralUtilities`General`PackagePrivate`f[
           GeneralUtilities`General`PackagePrivate`x]]], 
         GeneralUtilities`General`PackagePrivate`g, 
         GeneralUtilities`General`PackagePrivate`x], GeneralUtilities`WhenNot[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`g, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`rest, 
          BlankSequence[]]][
         Pattern[GeneralUtilities`General`PackagePrivate`x, 
          Blank[]]] := If[
         Not[
          TrueQ[
           GeneralUtilities`General`PackagePrivate`f[
           GeneralUtilities`General`PackagePrivate`x]]], 
         GeneralUtilities`General`PackagePrivate`g, 
         GeneralUtilities`WhenNot[
         GeneralUtilities`General`PackagePrivate`rest][
         GeneralUtilities`General`PackagePrivate`x]], 
       TagSet[GeneralUtilities`WhenNot, 
        MessageName[GeneralUtilities`WhenNot, "usage"], 
        "\!\(\*RowBox[{\"WhenNot\", \"[\", RowBox[{StyleBox[\"test\", \
\"TI\"], \",\",  StyleBox[\"body\", \"TI\"]}], \"]\", \"[\", \
RowBox[{StyleBox[\"e\", \"TI\"]}], \"]\"}]\) evaluates \
\!\(\*StyleBox[\"body\", \"TI\"]\) if \!\(\*StyleBox[\"test\", \"TI\"]\)[\!\(\
\*StyleBox[\"e\", \"TI\"]\)] is not True, otherwise yields \!\(\*StyleBox[\"e\
\", \"TI\"]\) unchanged.\n\!\(\*RowBox[{\"WhenNot\", \"[\", \
RowBox[{StyleBox[SubscriptBox[\"test\", StyleBox[\"1\", \"TR\"]], \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"body\", StyleBox[\"1\", \"TR\"]], \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"test\", StyleBox[\"2\", \"TR\"]], \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"body\", StyleBox[\"2\", \"TR\"]], \"TI\"], \
\",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\", \"[\", \
RowBox[{StyleBox[\"e\", \"TI\"]}], \"]\"}]\) evaluates the tests in turn \
until one is not True, otherwise yields \!\(\*StyleBox[\"e\", \"TI\"]\) \
unchanged."], TypeSystem`ValidTypeQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`Predicates`PackagePrivate`valid[
        TypeSystem`Predicates`PackagePrivate`t], 
       TypeSystem`Inference`PackagePrivate`apply2[
         Pattern[TypeSystem`Inference`PackagePrivate`rules, 
          Blank[List]], 
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[]]] := 
       Module[{TypeSystem`Inference`PackagePrivate`rules2 = 
          Append[TypeSystem`Inference`PackagePrivate`rules, Blank[] -> None], 
          TypeSystem`Inference`PackagePrivate`result, 
          TypeSystem`Inference`PackagePrivate`len, 
          TypeSystem`Inference`PackagePrivate`signatures}, If[
           GeneralUtilities`OrderlessFunctionQ[
           TypeSystem`Inference`PackagePrivate`$head], 
           TypeSystem`Inference`PackagePrivate`signatures = Join[
              Rest[
               Permutations[TypeSystem`Inference`PackagePrivate`args]], 
              Catenate[
               Map[Permutations, 
                TypeSystem`Inference`PackagePrivate`generalizations[
                TypeSystem`Inference`PackagePrivate`args]]]]; Null, 
           TypeSystem`Inference`PackagePrivate`signatures = 
            TypeSystem`Inference`PackagePrivate`generalizations[
             TypeSystem`Inference`PackagePrivate`args]; Null]; Scan[Replace[
            Replace[#, TypeSystem`Inference`PackagePrivate`rules2], 
            Pattern[TypeSystem`Inference`PackagePrivate`e, 
              Except[None]] :> 
            Return[TypeSystem`Inference`PackagePrivate`e, Module]]& , 
           TypeSystem`Inference`PackagePrivate`signatures]; If[
           GeneralUtilities`ListableFunctionQ[
           TypeSystem`Inference`PackagePrivate`$head], Switch[{
              Count[TypeSystem`Inference`PackagePrivate`args, 
               Blank[TypeSystem`Vector]], 
              Count[TypeSystem`Inference`PackagePrivate`args, 
               Blank[TypeSystem`Tuple]]}, {1, 0}, 
             TypeSystem`Inference`PackagePrivate`len = 
              FirstCase[
               TypeSystem`Inference`PackagePrivate`args, TypeSystem`Vector[
                  Blank[], 
                  Pattern[TypeSystem`Inference`PackagePrivate`n, 
                   Blank[]]] :> TypeSystem`Inference`PackagePrivate`n]; 
             TypeSystem`Inference`PackagePrivate`result = TypeSystem`Vector[
                TypeSystem`Inference`PackagePrivate`apply1[
                TypeSystem`Inference`PackagePrivate`rules, 
                 Replace[
                 TypeSystem`Inference`PackagePrivate`args, TypeSystem`Vector[
                    Pattern[TypeSystem`Inference`PackagePrivate`x, 
                    Blank[]], TypeSystem`Inference`PackagePrivate`len] :> 
                  TypeSystem`Inference`PackagePrivate`x, {1}]], 
                TypeSystem`Inference`PackagePrivate`len]; 
             Return[TypeSystem`Inference`PackagePrivate`result, Module], {0, 
             1}, TypeSystem`Inference`PackagePrivate`len = 
              FirstCase[
               TypeSystem`Inference`PackagePrivate`args, 
                Pattern[TypeSystem`Inference`PackagePrivate`t, 
                  Blank[TypeSystem`Tuple]] :> 
                TypeSystem`TypeLength[TypeSystem`Inference`PackagePrivate`t]]; 
             TypeSystem`Inference`PackagePrivate`result = TypeSystem`Tuple[
                Table[
                 TypeSystem`Inference`PackagePrivate`apply1[
                 TypeSystem`Inference`PackagePrivate`rules, 
                  Replace[
                  TypeSystem`Inference`PackagePrivate`args, 
                   Pattern[TypeSystem`Inference`PackagePrivate`t, 
                    Blank[TypeSystem`Tuple]] :> 
                   TypeSystem`TypeValues[
                    TypeSystem`Inference`PackagePrivate`t, 
                    TypeSystem`Inference`PackagePrivate`i], {1}]], {
                 TypeSystem`Inference`PackagePrivate`i, 
                  TypeSystem`Inference`PackagePrivate`len}]]; 
             Return[TypeSystem`Inference`PackagePrivate`result, Module], 
             Blank[], 
             Return[TypeSystem`UnknownType, Module]]; Null]; 
         TypeSystem`UnknownType], GeneralUtilities`OrderlessFunctionQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
          Blank[]]] := 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
        GeneralUtilities`Predicates`PackagePrivate`s, Orderless], 
       TypeSystem`Inference`PackagePrivate`generalizations[{
          Pattern[TypeSystem`Inference`PackagePrivate`sub, 
           Blank[List]], 
          Pattern[TypeSystem`Inference`PackagePrivate`args, 
           Blank[List]]}] := Tuples[{
          TypeSystem`Inference`PackagePrivate`generalizations[
          TypeSystem`Inference`PackagePrivate`sub], 
          TypeSystem`Inference`PackagePrivate`generalizations[
          TypeSystem`Inference`PackagePrivate`args]}], 
       TypeSystem`Inference`PackagePrivate`generalizations[
         Pattern[TypeSystem`Inference`PackagePrivate`args, 
          Blank[List]]] := DeleteDuplicates[
         DeleteCases[TypeSystem`Inference`PackagePrivate`args][
          Tuples[
           Map[
           TypeSystem`Inference`PackagePrivate`generalize, 
            TypeSystem`Inference`PackagePrivate`args]]]], 
       TypeSystem`Inference`PackagePrivate`generalize[
         TypeSystem`Vector[
          Pattern[TypeSystem`Inference`PackagePrivate`t, 
           Blank[]], 
          Pattern[TypeSystem`Inference`PackagePrivate`n, 
           Blank[]]]] := 
       Map[TypeSystem`Vector[#, TypeSystem`Inference`PackagePrivate`n]& , 
         TypeSystem`Inference`PackagePrivate`generalize[
         TypeSystem`Inference`PackagePrivate`t]], 
       TypeSystem`Inference`PackagePrivate`generalize[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Inference`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Inference`PackagePrivate`v, 
           Blank[]], 
          Pattern[TypeSystem`Inference`PackagePrivate`n, 
           Blank[]]]] := 
       Map[TypeSystem`Assoc[
         TypeSystem`Inference`PackagePrivate`k, #, 
          TypeSystem`Inference`PackagePrivate`n]& , 
         TypeSystem`Inference`PackagePrivate`generalize[
         TypeSystem`Inference`PackagePrivate`v]], 
       TypeSystem`Inference`PackagePrivate`generalize[
         Pattern[TypeSystem`Inference`PackagePrivate`a, 
          TypeSystem`Atom[
           TypeSystem`Enumeration[
            BlankSequence[String]]]]] := {
        TypeSystem`Inference`PackagePrivate`a, 
         TypeSystem`Atom[String]}, 
       TypeSystem`Inference`PackagePrivate`generalize[
         Pattern[TypeSystem`Inference`PackagePrivate`t, 
          Alternatives[
           Blank[TypeSystem`Vector], 
           Blank[TypeSystem`Tuple], 
           Blank[TypeSystem`Assoc], 
           Blank[TypeSystem`Struct], 
           Blank[TypeSystem`Atom], TypeSystem`AnyType, TypeSystem`UnknownType, 
           Blank[TypeSystem`FailureType], 
           Blank[TypeSystem`Either], 
           Blank[TypeSystem`TypeSymbol]]]] := 
       TypeSystem`Inference`PackagePrivate`weaken[
        TypeSystem`Inference`PackagePrivate`t], 
       TypeSystem`Inference`PackagePrivate`generalize[
         Pattern[TypeSystem`Inference`PackagePrivate`e, 
          Blank[]]] := Prepend[TypeSystem`Inference`PackagePrivate`e][
         TypeSystem`Inference`PackagePrivate`weaken[
          TypeSystem`DeduceType[TypeSystem`Inference`PackagePrivate`e]]], 
       TypeSystem`Inference`PackagePrivate`weaken[
         Pattern[TypeSystem`Inference`PackagePrivate`t, 
          Blank[]]] := If[
         MatchQ[TypeSystem`Inference`PackagePrivate`t, 
          Alternatives[
           Blank[TypeSystem`Struct], 
           Blank[TypeSystem`Tuple]]], {TypeSystem`Inference`PackagePrivate`t, 
          TypeSystem`TypeWeaken[TypeSystem`Inference`PackagePrivate`t]}, {
         TypeSystem`Inference`PackagePrivate`t}], TypeSystem`TypeWeaken[
         TypeSystem`Struct[
          Pattern[TypeSystem`Utilities`PackagePrivate`keys, 
           Blank[]], 
          Pattern[TypeSystem`Utilities`PackagePrivate`vals, 
           Blank[]]]] := TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`TypeUnion[TypeSystem`Utilities`PackagePrivate`vals], 
         Length[TypeSystem`Utilities`PackagePrivate`vals]], 
       TypeSystem`TypeWeaken[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Utilities`PackagePrivate`types, 
           Blank[]]]] := TypeSystem`Vector[
         TypeSystem`TypeUnion[TypeSystem`Utilities`PackagePrivate`types], 
         Length[TypeSystem`Utilities`PackagePrivate`types]], 
       TypeSystem`TypeWeaken[
         Pattern[TypeSystem`Utilities`PackagePrivate`t, 
          Blank[]]] := TypeSystem`Utilities`PackagePrivate`t, 
       GeneralUtilities`ListableFunctionQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
          Blank[]]] := 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
        GeneralUtilities`Predicates`PackagePrivate`s, Listable], 
       TypeSystem`$SubSignatures = 
       Association[GeneralUtilities`ApplyThrough -> {{{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[Association]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`expr, 
               Blank[]]}} :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`vtypes = 
              Map[TypeSystem`InternalTypeApply[#, {
                 TypeSystem`ZSignatures`PackagePrivate`expr}]& , 
                Values[TypeSystem`ZSignatures`PackagePrivate`a]], 
              TypeSystem`ZSignatures`PackagePrivate`keys = 
              Keys[TypeSystem`ZSignatures`PackagePrivate`a]}, 
             If[
              VectorQ[TypeSystem`ZSignatures`PackagePrivate`keys, StringQ], 
              TypeSystem`Struct[
              TypeSystem`ZSignatures`PackagePrivate`keys, 
               TypeSystem`ZSignatures`PackagePrivate`vtypes], 
              TypeSystem`Assoc[
               TypeSystem`DeduceListType[
               TypeSystem`ZSignatures`PackagePrivate`keys], 
               TypeSystem`TypeUnion[
               TypeSystem`ZSignatures`PackagePrivate`vtypes], 
               Length[TypeSystem`ZSignatures`PackagePrivate`a]]]], {{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[List]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`expr, 
               Blank[]]}} :> TypeSystem`Tuple[
             Map[
             TypeSystem`InternalTypeApply[#, {
               TypeSystem`ZSignatures`PackagePrivate`expr}]& , 
              TypeSystem`ZSignatures`PackagePrivate`a]]}, Key -> {{{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[]]}, {
              TypeSystem`Assoc[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]]}} :> TypeSystem`ZSignatures`PackagePrivate`v, {{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[String]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[TypeSystem`Struct]]}} :> 
           TypeSystem`TypeValues[
            TypeSystem`ZSignatures`PackagePrivate`s, 
             TypeSystem`ZSignatures`PackagePrivate`x]}, Composition -> {{{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`b, 
               Blank[]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`args, 
               BlankNullSequence[]]}} :> 
           TypeSystem`InternalTypeApply[
            TypeSystem`ZSignatures`PackagePrivate`a, {
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`b, {
               TypeSystem`ZSignatures`PackagePrivate`args}]}], {{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`rest, 
               BlankSequence[]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`args, 
               BlankNullSequence[]]}} :> 
           TypeSystem`InternalTypeApply[
            TypeSystem`ZSignatures`PackagePrivate`a, {
              TypeSystem`InternalTypeApply[
               Composition[TypeSystem`ZSignatures`PackagePrivate`rest], {
               TypeSystem`ZSignatures`PackagePrivate`args}]}]}, 
         RightComposition -> {{{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`b, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`args, 
               BlankNullSequence[]]}} :> 
           TypeSystem`InternalTypeApply[
            TypeSystem`ZSignatures`PackagePrivate`a, {
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`b, {
               TypeSystem`ZSignatures`PackagePrivate`args}]}], {{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`rest, 
               BlankSequence[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]]}, {
              Pattern[TypeSystem`ZSignatures`PackagePrivate`args, 
               BlankNullSequence[]]}} :> 
           TypeSystem`InternalTypeApply[
            TypeSystem`ZSignatures`PackagePrivate`a, {
              TypeSystem`InternalTypeApply[
               RightComposition[TypeSystem`ZSignatures`PackagePrivate`rest], {
               TypeSystem`ZSignatures`PackagePrivate`args}]}]}], 
       TypeSystem`Inference`PackagePrivate`NonSimpleNumericFunctionQ[
         Pattern[TypeSystem`Inference`PackagePrivate`s, 
          Blank[]]] := And[
         GeneralUtilities`NumericFunctionQ[
         TypeSystem`Inference`PackagePrivate`s], 
         Not[
          MatchQ[
          TypeSystem`Inference`PackagePrivate`s, 
           TypeSystem`Inference`PackagePrivate`$NonSimpleNumericFunctions]]], 
       GeneralUtilities`NumericFunctionQ[
         Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
          Blank[]]] := 
       GeneralUtilities`Predicates`PackagePrivate`hasAttr[
        GeneralUtilities`Predicates`PackagePrivate`s, NumericFunction], 
       TypeSystem`Inference`PackagePrivate`$NonSimpleNumericFunctions = 
       Alternatives[Round, Ceiling, Floor, IntegerPart], 
       Attributes[TypeSystem`Inference`PackagePrivate`RealAtomQ] = {
        HoldFirst}, TypeSystem`Inference`PackagePrivate`RealAtomQ[
         Alternatives[
          Blank[Real], 
          TypeSystem`Atom[Real]]] := True, 
       TypeSystem`Inference`PackagePrivate`RealAtomQ[
         Alternatives[
          Blank[TemporalData], 
          TypeSystem`Atom[TemporalData]]] := True, 
       TypeSystem`Inference`PackagePrivate`RealAtomQ[
         Blank[]] := False, TypeSystem`$Signatures = Association[Identity -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`t}, List -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`Vector[TypeSystem`ZSignatures`PackagePrivate`t, 1], 
           Condition[{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               BlankSequence[]]}, 
             
             VectorQ[{TypeSystem`ZSignatures`PackagePrivate`t}, 
              TypeSystem`TypeQ]] :> 
           TypeSystem`Tuple[{TypeSystem`ZSignatures`PackagePrivate`t}]}, 
         Keys -> {{
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[]], 
              Blank[]]} :> TypeSystem`Vector[TypeSystem`StringT, 
             Length[TypeSystem`ZSignatures`PackagePrivate`s]], {
             TypeSystem`Vector[
              Alternatives[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
                Blank[TypeSystem`Assoc]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
                Blank[TypeSystem`Struct]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             Keys, {TypeSystem`ZSignatures`PackagePrivate`a}], 
             TypeSystem`ZSignatures`PackagePrivate`n]}, Values -> {{
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Struct[
              Blank[], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]]]} :> 
           TypeSystem`Tuple[TypeSystem`ZSignatures`PackagePrivate`v], {
             TypeSystem`Vector[
              Alternatives[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
                Blank[TypeSystem`Assoc]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
                Blank[TypeSystem`Struct]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             Values, {TypeSystem`ZSignatures`PackagePrivate`a}], 
             TypeSystem`ZSignatures`PackagePrivate`n]}, Length -> {{
             Blank[]} :> TypeSystem`IntegerT}, Dimensions -> {{
             Blank[]} :> TypeSystem`Vector[TypeSystem`IntegerT]}, Reverse -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
               Blank[TypeSystem`Assoc]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
               Blank[TypeSystem`Vector]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`c, {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]]]} :> TypeSystem`Struct[
             Reverse[TypeSystem`ZSignatures`PackagePrivate`k], 
             Reverse[TypeSystem`ZSignatures`PackagePrivate`v]], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]]} :> TypeSystem`Tuple[
             Reverse[TypeSystem`ZSignatures`PackagePrivate`t]]}, Range -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[Integer]]} :> TypeSystem`Vector[TypeSystem`IntegerT, 
             Max[TypeSystem`ZSignatures`PackagePrivate`n, 0]]}, 
         ConstantArray -> {{
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]], TypeSystem`TypeQ], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Alternatives[
               Blank[Integer], {
                BlankSequence[Integer]}]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`t, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]], TypeSystem`TypeQ], 
             TypeSystem`Atom[Integer]} :> 
           TypeSystem`Vector[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         Most -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n - 1], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n - 1], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`ks, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`vs, 
               Blank[]]]} :> TypeSystem`Struct[
             Most[TypeSystem`ZSignatures`PackagePrivate`ks], 
             Most[TypeSystem`ZSignatures`PackagePrivate`vs]], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]]} :> TypeSystem`Tuple[
             Most[TypeSystem`ZSignatures`PackagePrivate`t]]}, Rest -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n - 1], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n - 1], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`ks, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`vs, 
               Blank[]]]} :> TypeSystem`Struct[
             Rest[TypeSystem`ZSignatures`PackagePrivate`ks], 
             Rest[TypeSystem`ZSignatures`PackagePrivate`vs]], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]]} :> TypeSystem`Tuple[
             Rest[TypeSystem`ZSignatures`PackagePrivate`t]]}, First -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Assoc]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Vector]]]} :> 
           TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`x], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Tuple]]]} :> First[
             TypeSystem`TypeValues[TypeSystem`ZSignatures`PackagePrivate`x]]},
          Last -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Assoc]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Vector]]]} :> 
           TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`x], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Tuple]]]} :> Last[
             TypeSystem`TypeValues[TypeSystem`ZSignatures`PackagePrivate`x]]},
          Map -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[TypeSystem`Tuple]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[TypeSystem`Assoc]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[TypeSystem`Vector]]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {#}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s]}, KeyMap -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Assoc[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
              TypeSystem`ZSignatures`PackagePrivate`k}], 
             TypeSystem`ZSignatures`PackagePrivate`v, TypeSystem`AnyLength]}, 
         KeySelect -> {{
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, TypeSystem`AnyLength]}, 
         MapIndexed -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
              TypeSystem`ZSignatures`PackagePrivate`a, 
               TypeSystem`Tuple[{TypeSystem`IntegerT}]}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
              TypeSystem`ZSignatures`PackagePrivate`a, 
               TypeSystem`Tuple[{TypeSystem`AnyType}]}], 
             TypeSystem`ZSignatures`PackagePrivate`n]}, MapThread -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Vector[
                  Blank[], 
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                   Blank[]]]]}]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, 
              Map[
              TypeSystem`TypeInner, TypeSystem`ZSignatures`PackagePrivate`v]],
              TypeSystem`ZSignatures`PackagePrivate`n]}, DeleteMissing -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Alternatives[
               Blank[Integer], Infinity]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`DMMap[
            TypeSystem`ZSignatures`PackagePrivate`t, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Alternatives[
               Blank[Integer], Infinity]], 
             Alternatives[
              Blank[Integer], Infinity]} :> 
           TypeSystem`ZSignatures`PackagePrivate`DMMap[
            TypeSystem`ZSignatures`PackagePrivate`t, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, RandomSample -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Vector]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`t, {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Assoc]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[Integer]]} :> 
           TypeSystem`SetLength[
            TypeSystem`ZSignatures`PackagePrivate`t, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, RandomChoice -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Vector]]]} :> 
           TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`t], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Assoc]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[Integer]]} :> 
           TypeSystem`SetLength[
            TypeSystem`ZSignatures`PackagePrivate`t, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, Part -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`rest, 
              BlankSequence[]]} :> 
           TypeSystem`StrictTypePart[
            TypeSystem`ZSignatures`PackagePrivate`t, 
             TypeSystem`ZSignatures`PackagePrivate`rest]}, Take -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Alternatives[
              TypeSystem`Atom[Integer], 
              TypeSystem`Tuple[{
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer]}]]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Tuple]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`spec, 
              Alternatives[
               Blank[Integer], {
                Blank[Integer], 
                Blank[Integer]}]]} :> Quiet[
             Check[
              Replace[
              TypeSystem`ZSignatures`PackagePrivate`t, {TypeSystem`Struct[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                   Blank[]], 
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                   Blank[]]] :> TypeSystem`Struct[
                  Take[
                  TypeSystem`ZSignatures`PackagePrivate`k, 
                   TypeSystem`ZSignatures`PackagePrivate`spec], 
                  Take[
                  TypeSystem`ZSignatures`PackagePrivate`v, 
                   TypeSystem`ZSignatures`PackagePrivate`spec]], 
                TypeSystem`Tuple[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                   Blank[]]] :> TypeSystem`Tuple[
                  Take[
                  TypeSystem`ZSignatures`PackagePrivate`v, 
                   TypeSystem`ZSignatures`PackagePrivate`spec]]}], 
              TypeSystem`ZSignatures`PackagePrivate`rangeFailure[
              Take, TypeSystem`ZSignatures`PackagePrivate`t, 
               TypeSystem`ZSignatures`PackagePrivate`spec, 
               TypeSystem`TypeLength[
               TypeSystem`ZSignatures`PackagePrivate`t]]]], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Assoc]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Vector]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`spec, 
              Alternatives[
               Blank[Integer], {
                Blank[Integer], 
                Blank[Integer]}]]} :> 
           TypeSystem`SetLength[TypeSystem`ZSignatures`PackagePrivate`t, 
             Replace[
              TypeSystem`ZSignatures`PackagePrivate`toNewLen[Take, 
               TypeSystem`TypeLength[TypeSystem`ZSignatures`PackagePrivate`t],
                TypeSystem`ZSignatures`PackagePrivate`spec], $Failed :> 
              TypeSystem`ZSignatures`PackagePrivate`rangeFailure[
               Take, TypeSystem`ZSignatures`PackagePrivate`t, 
                TypeSystem`ZSignatures`PackagePrivate`spec, 
                TypeSystem`TypeLength[
                TypeSystem`ZSignatures`PackagePrivate`t]]]]}, Drop -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Alternatives[
              TypeSystem`Atom[Integer], 
              TypeSystem`Tuple[{
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer]}]]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Tuple]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`spec, 
              Alternatives[
               Blank[Integer], {
                Blank[Integer], 
                Blank[Integer]}]]} :> Quiet[
             Check[
              Replace[
              TypeSystem`ZSignatures`PackagePrivate`t, {TypeSystem`Struct[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                   Blank[]], 
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                   Blank[]]] :> TypeSystem`Struct[
                  Drop[
                  TypeSystem`ZSignatures`PackagePrivate`k, 
                   TypeSystem`ZSignatures`PackagePrivate`spec], 
                  Drop[
                  TypeSystem`ZSignatures`PackagePrivate`v, 
                   TypeSystem`ZSignatures`PackagePrivate`spec]], 
                TypeSystem`Tuple[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                   Blank[]]] :> TypeSystem`Tuple[
                  Drop[
                  TypeSystem`ZSignatures`PackagePrivate`v, 
                   TypeSystem`ZSignatures`PackagePrivate`spec]]}], 
              TypeSystem`ZSignatures`PackagePrivate`rangeFailure[
              Drop, TypeSystem`ZSignatures`PackagePrivate`t, 
               TypeSystem`ZSignatures`PackagePrivate`spec, 
               TypeSystem`TypeLength[
               TypeSystem`ZSignatures`PackagePrivate`t]]]], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Assoc]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[TypeSystem`Vector]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`spec, 
              Alternatives[
               Blank[Integer], {
                Blank[Integer], 
                Blank[Integer]}]]} :> 
           TypeSystem`SetLength[TypeSystem`ZSignatures`PackagePrivate`t, 
             Replace[
              TypeSystem`ZSignatures`PackagePrivate`toNewLen[Drop, 
               TypeSystem`TypeLength[TypeSystem`ZSignatures`PackagePrivate`t],
                TypeSystem`ZSignatures`PackagePrivate`spec], $Failed :> 
              TypeSystem`ZSignatures`PackagePrivate`rangeFailure[
               Drop, TypeSystem`ZSignatures`PackagePrivate`t, 
                TypeSystem`ZSignatures`PackagePrivate`spec, 
                TypeSystem`TypeLength[
                TypeSystem`ZSignatures`PackagePrivate`t]]]]}, Prepend -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`len, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`len + 1], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]], 
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`TypeQ]} :> TypeSystem`Tuple[
             Prepend[
             TypeSystem`ZSignatures`PackagePrivate`t, 
              TypeSystem`ZSignatures`PackagePrivate`a]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[TypeSystem`Struct]]} :> 
           TypeSystem`InternalTypeApply[
            Join, {TypeSystem`ZSignatures`PackagePrivate`t, 
              TypeSystem`ZSignatures`PackagePrivate`s}], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Assoc]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`r, {
               BlankNullSequence[Rule]}]} :> 
           If[Length[TypeSystem`ZSignatures`PackagePrivate`r] == 0, 
             TypeSystem`ZSignatures`PackagePrivate`x, 
             TypeSystem`InternalTypeApply[
             Prepend, {TypeSystem`ZSignatures`PackagePrivate`x, 
               Association[TypeSystem`ZSignatures`PackagePrivate`r]}]], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`vals, 
               Blank[]]], Pattern[TypeSystem`ZSignatures`PackagePrivate`key, 
               Blank[String]] -> 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`val, 
               Blank[]]} :> If[
             MemberQ[
             TypeSystem`ZSignatures`PackagePrivate`keys, 
              TypeSystem`ZSignatures`PackagePrivate`key], 
             With[{TypeSystem`ZSignatures`PackagePrivate`pos = First[
                 FirstPosition[
                 TypeSystem`ZSignatures`PackagePrivate`keys, 
                  TypeSystem`ZSignatures`PackagePrivate`key]]}, 
              TypeSystem`Struct[
               Prepend[
                Delete[
                TypeSystem`ZSignatures`PackagePrivate`keys, 
                 TypeSystem`ZSignatures`PackagePrivate`pos], 
                TypeSystem`ZSignatures`PackagePrivate`key], 
               Prepend[
                Delete[
                TypeSystem`ZSignatures`PackagePrivate`vals, 
                 TypeSystem`ZSignatures`PackagePrivate`pos], 
                TypeSystem`FoldTypeData[
                 Part[
                 TypeSystem`ZSignatures`PackagePrivate`vals, 
                  TypeSystem`ZSignatures`PackagePrivate`pos], 
                 TypeSystem`ZSignatures`PackagePrivate`val]]]], 
             TypeSystem`Struct[
              Prepend[
              TypeSystem`ZSignatures`PackagePrivate`keys, 
               TypeSystem`ZSignatures`PackagePrivate`key], 
              Prepend[TypeSystem`ZSignatures`PackagePrivate`vals, 
               TypeSystem`DeduceType[
               TypeSystem`ZSignatures`PackagePrivate`val]]]], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], Pattern[TypeSystem`ZSignatures`PackagePrivate`key, 
               Blank[String]] -> 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`val, 
               Blank[]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`FoldTypeData[
             TypeSystem`ZSignatures`PackagePrivate`v, 
              TypeSystem`ZSignatures`PackagePrivate`val]]}, Append -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`len, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`len + 1], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]], 
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`TypeQ]} :> TypeSystem`Tuple[
             Append[
             TypeSystem`ZSignatures`PackagePrivate`t, 
              TypeSystem`ZSignatures`PackagePrivate`a]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[TypeSystem`Struct]]} :> 
           TypeSystem`InternalTypeApply[
            Join, {TypeSystem`ZSignatures`PackagePrivate`s, 
              TypeSystem`ZSignatures`PackagePrivate`t}], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
               Blank[TypeSystem`Assoc]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`r, {
               BlankNullSequence[Rule]}]} :> 
           If[Length[TypeSystem`ZSignatures`PackagePrivate`r] == 0, 
             TypeSystem`ZSignatures`PackagePrivate`x, 
             TypeSystem`InternalTypeApply[
             Append, {TypeSystem`ZSignatures`PackagePrivate`x, 
               Association[TypeSystem`ZSignatures`PackagePrivate`r]}]], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`vals, 
               Blank[]]], Pattern[TypeSystem`ZSignatures`PackagePrivate`key, 
               Blank[String]] -> 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`val, 
               Blank[]]} :> If[
             MemberQ[
             TypeSystem`ZSignatures`PackagePrivate`keys, 
              TypeSystem`ZSignatures`PackagePrivate`key], 
             With[{TypeSystem`ZSignatures`PackagePrivate`pos = First[
                 FirstPosition[
                 TypeSystem`ZSignatures`PackagePrivate`keys, 
                  TypeSystem`ZSignatures`PackagePrivate`key]]}, 
              TypeSystem`Struct[
               Append[
                Delete[
                TypeSystem`ZSignatures`PackagePrivate`keys, 
                 TypeSystem`ZSignatures`PackagePrivate`pos], 
                TypeSystem`ZSignatures`PackagePrivate`key], 
               Append[
                Delete[
                TypeSystem`ZSignatures`PackagePrivate`vals, 
                 TypeSystem`ZSignatures`PackagePrivate`pos], 
                TypeSystem`FoldTypeData[
                 Part[
                 TypeSystem`ZSignatures`PackagePrivate`vals, 
                  TypeSystem`ZSignatures`PackagePrivate`pos], 
                 TypeSystem`ZSignatures`PackagePrivate`val]]]], 
             TypeSystem`Struct[
              Append[
              TypeSystem`ZSignatures`PackagePrivate`keys, 
               TypeSystem`ZSignatures`PackagePrivate`key], 
              Append[TypeSystem`ZSignatures`PackagePrivate`vals, 
               TypeSystem`DeduceType[
               TypeSystem`ZSignatures`PackagePrivate`val]]]], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], Pattern[TypeSystem`ZSignatures`PackagePrivate`key, 
               Blank[String]] -> 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`val, 
               Blank[]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`FoldTypeData[
             TypeSystem`ZSignatures`PackagePrivate`v, 
              TypeSystem`ZSignatures`PackagePrivate`val]]}, Join -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              BlankSequence[TypeSystem`Struct]]} :> TypeSystem`ConvertStruct[
             Apply[Join, 
              Map[
              TypeSystem`ConvertStruct, {
               TypeSystem`ZSignatures`PackagePrivate`t}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              BlankSequence[TypeSystem`Assoc]]} :> TypeSystem`Assoc[
             TypeSystem`TypeUnion[
              Map[First, {TypeSystem`ZSignatures`PackagePrivate`t}]], 
             TypeSystem`TypeUnion[
              Map[
              TypeSystem`TypeInner, {
               TypeSystem`ZSignatures`PackagePrivate`t}]], 
             Total[
              Map[
              TypeSystem`TypeLength, {
               TypeSystem`ZSignatures`PackagePrivate`t}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              BlankSequence[TypeSystem`Vector]]} :> TypeSystem`Vector[
             TypeSystem`TypeUnion[
              Map[
              TypeSystem`TypeInner, {
               TypeSystem`ZSignatures`PackagePrivate`t}]], 
             Total[
              Map[
              TypeSystem`TypeLength, {
               TypeSystem`ZSignatures`PackagePrivate`t}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              BlankSequence[TypeSystem`Tuple]]} :> 
           Join[TypeSystem`ZSignatures`PackagePrivate`t, 2]}, Union -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Tuple]]]} :> 
           TypeSystem`WeakenLength[
            TypeSystem`ZSignatures`PackagePrivate`t], {} :> 
           TypeSystem`Vector[TypeSystem`UnknownType, 0], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Repeated[
               Alternatives[
                Blank[TypeSystem`Vector], 
                Blank[TypeSystem`Tuple]]]]} :> TypeSystem`WeakenLength[
             TypeSystem`TypeUnion[TypeSystem`ZSignatures`PackagePrivate`t]]}, 
         DeleteDuplicates -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         DeleteDuplicatesBy -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Blank[]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         Intersection -> {{} :> TypeSystem`Vector[TypeSystem`UnknownType, 0], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Repeated[
               Alternatives[
                Blank[TypeSystem`Vector], 
                Blank[TypeSystem`Tuple]]]]} :> TypeSystem`WeakenLength[
             TypeSystem`TypeUnion[TypeSystem`ZSignatures`PackagePrivate`t]]}, 
         Complement -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Tuple]]], 
             RepeatedNull[
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Tuple]]]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         Normal -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct]]]} :> 
           TypeSystem`Vector[TypeSystem`AnyType, 
             TypeSystem`TypeLength[TypeSystem`ZSignatures`PackagePrivate`t]]},
          GroupBy -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Except[
              Alternatives[
               Blank[List], 
               Blank[Rule], 
               Blank[RuleDelayed]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
               Blank[]]], 
             Optional[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
               Blank[]], Identity]} :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`t = 
              TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`c]}, 
             TypeSystem`Assoc[
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`f, {
               TypeSystem`ZSignatures`PackagePrivate`t}], 
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`r, {
                TypeSystem`TypeWrapper[
                TypeSystem`ZSignatures`PackagePrivate`c, 
                 TypeSystem`AnyLength][
                TypeSystem`ZSignatures`PackagePrivate`t]}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
               Blank[]] -> Pattern[TypeSystem`ZSignatures`PackagePrivate`g, 
               Blank[]], 
             Optional[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
               Blank[]], Identity]} :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`t = 
              TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`c]}, 
             TypeSystem`Assoc[
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`f, {
               TypeSystem`ZSignatures`PackagePrivate`t}], 
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`r, {
                TypeSystem`TypeWrapper[
                TypeSystem`ZSignatures`PackagePrivate`c, TypeSystem`AnyLength][
                 TypeSystem`InternalTypeApply[
                 TypeSystem`ZSignatures`PackagePrivate`g, {
                  TypeSystem`ZSignatures`PackagePrivate`t}]]}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Condition[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
               Blank[List]], Length[TypeSystem`ZSignatures`PackagePrivate`f] == 
              1], 
             Optional[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
               Blank[]], Identity]} :> 
           TypeSystem`InternalTypeApply[
            GroupBy, {TypeSystem`ZSignatures`PackagePrivate`c, 
              Part[TypeSystem`ZSignatures`PackagePrivate`f, 1], 
              TypeSystem`ZSignatures`PackagePrivate`r}], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, {
               Repeated[
                Except[
                 Alternatives[
                  Blank[Rule], 
                  Blank[RuleDelayed]]]]}], 
             Optional[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
               Blank[]], Identity]} :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`t = 
              TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`c]}, 
             TypeSystem`Assoc[
              TypeSystem`InternalTypeApply[
               Part[TypeSystem`ZSignatures`PackagePrivate`f, 1], {
               TypeSystem`ZSignatures`PackagePrivate`t}], 
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`r, {
                TypeSystem`InternalTypeApply[GroupBy, {
                  TypeSystem`TypeWrapper[
                  TypeSystem`ZSignatures`PackagePrivate`c, 
                   TypeSystem`AnyLength][
                  TypeSystem`ZSignatures`PackagePrivate`t], 
                  Rest[TypeSystem`ZSignatures`PackagePrivate`f]}]}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`rules, {
               Repeated[
                Alternatives[Rule, RuleDelayed][
                 Blank[], 
                 Blank[]]]}], 
             Optional[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
               Blank[]], Identity]} :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`t = 
              TypeSystem`TypeInner[TypeSystem`ZSignatures`PackagePrivate`c]}, 
             TypeSystem`Assoc[
              TypeSystem`InternalTypeApply[
               Part[TypeSystem`ZSignatures`PackagePrivate`rules, 1, 1], {
               TypeSystem`ZSignatures`PackagePrivate`t}], 
              TypeSystem`InternalTypeApply[
              TypeSystem`ZSignatures`PackagePrivate`r, {
                TypeSystem`InternalTypeApply[GroupBy, {
                  TypeSystem`TypeWrapper[
                  TypeSystem`ZSignatures`PackagePrivate`c, 
                   TypeSystem`AnyLength][
                   TypeSystem`InternalTypeApply[
                    Part[TypeSystem`ZSignatures`PackagePrivate`rules, 1, 2], {
                    TypeSystem`ZSignatures`PackagePrivate`t}]], 
                  Rest[TypeSystem`ZSignatures`PackagePrivate`rules]}]}]]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`c, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`list, 
              Blank[List]], 
             Optional[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
               Blank[]], Identity]} :> 
           TypeSystem`TypeMap[TypeSystem`InternalTypeApply[GroupBy, {#, 
               Rest[TypeSystem`ZSignatures`PackagePrivate`list]}]& , 
             TypeSystem`InternalTypeApply[
             GroupBy, {TypeSystem`ZSignatures`PackagePrivate`c, 
               Part[TypeSystem`ZSignatures`PackagePrivate`list, 1], 
               TypeSystem`ZSignatures`PackagePrivate`r}]]}, Counts -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`v, TypeSystem`IntegerT]}, 
         CountsBy -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> TypeSystem`Assoc[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
              TypeSystem`ZSignatures`PackagePrivate`v}], 
             TypeSystem`IntegerT]}, Sort -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`v}, SortBy -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]], 
             Blank[]} :> TypeSystem`ZSignatures`PackagePrivate`v}, 
         ReverseSort -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`v}, ReverseSortBy -> {{
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]], 
             Blank[]} :> TypeSystem`ZSignatures`PackagePrivate`v}, Select -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`Vector[TypeSystem`ZSignatures`PackagePrivate`v], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v]}, SelectFirst -> {{
             Alternatives[
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]], 
              TypeSystem`Assoc[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]]], 
             Blank[]} :> TypeSystem`ZSignatures`PackagePrivate`v}, 
         FirstCase -> {{
             Alternatives[
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]], 
              TypeSystem`Assoc[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]]], 
             Blank[]} :> TypeSystem`ZSignatures`PackagePrivate`v}, Cases -> {{
             Alternatives[
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]], 
              TypeSystem`Assoc[
               Blank[], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`rhs, 
              Blank[]]} :> If[
             GeneralUtilities`RuleQ[
             TypeSystem`ZSignatures`PackagePrivate`rhs], 
             TypeSystem`Vector[TypeSystem`UnknownType], 
             TypeSystem`Vector[TypeSystem`ZSignatures`PackagePrivate`v]]}, 
         DeleteCases -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Blank[]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         AnyTrue -> {{
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Assoc], 
              Blank[TypeSystem`Tuple], 
              Blank[TypeSystem`Struct]], 
             Blank[]} :> TypeSystem`BooleanT}, AllTrue -> {{
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Assoc], 
              Blank[TypeSystem`Tuple], 
              Blank[TypeSystem`Struct]], 
             Blank[]} :> TypeSystem`BooleanT}, NoneTrue -> {{
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Assoc], 
              Blank[TypeSystem`Tuple], 
              Blank[TypeSystem`Struct]], 
             Blank[]} :> TypeSystem`BooleanT}, VectorQ -> {{
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Assoc], 
              Blank[TypeSystem`Struct], 
              Blank[TypeSystem`Tuple]]} :> TypeSystem`BooleanT, {
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Assoc], 
              Blank[TypeSystem`Struct], 
              Blank[TypeSystem`Tuple]], 
             Blank[]} :> TypeSystem`BooleanT}, MaximalBy -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Blank[]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         MinimalBy -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Assoc], 
               Blank[TypeSystem`Struct], 
               Blank[TypeSystem`Tuple]]], 
             Blank[]} :> 
           TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]}, 
         TakeLargest -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, TakeSmallest -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, TakeLargestBy -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, TakeSmallestBy -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, KeyValueMap -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Struct[
              Blank[], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`vals, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
               TypeSystem`Atom[String], 
               TypeSystem`TypeInner[
               TypeSystem`ZSignatures`PackagePrivate`vals]}], 
             Length[TypeSystem`ZSignatures`PackagePrivate`vals]], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
              TypeSystem`ZSignatures`PackagePrivate`k, 
               TypeSystem`ZSignatures`PackagePrivate`v}], 
             TypeSystem`ZSignatures`PackagePrivate`n]}, AssociationThread -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`e1, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`e2, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`e1, 
             TypeSystem`ZSignatures`PackagePrivate`e2, 
             TypeSystem`ZSignatures`PackagePrivate`n]}, AssociationMap -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`e1, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`e1, 
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, {
              TypeSystem`ZSignatures`PackagePrivate`e1}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             Blank[TypeSystem`Assoc]} :> TypeSystem`UnknownType}, Lookup -> {{
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`v, {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]], 
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Vector[
              TypeSystem`Assoc[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
              Blank[]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`v, 
             TypeSystem`ZSignatures`PackagePrivate`m], {
             TypeSystem`Vector[
              TypeSystem`Assoc[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[]]], 
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`Vector[
             TypeSystem`ZSignatures`PackagePrivate`v, 
              TypeSystem`ZSignatures`PackagePrivate`n], 
             TypeSystem`ZSignatures`PackagePrivate`m], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`key, 
              Blank[String]]} :> 
           TypeSystem`TypeValues[
            TypeSystem`ZSignatures`PackagePrivate`s, 
             TypeSystem`ZSignatures`PackagePrivate`key], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, {
               BlankSequence[String]}]} :> TypeSystem`Tuple[
             Map[
             TypeSystem`TypeValues[
              TypeSystem`ZSignatures`PackagePrivate`s, #]& , 
              TypeSystem`ZSignatures`PackagePrivate`keys]], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[TypeSystem`Struct]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`key, 
              Blank[]]} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             Lookup, {
              TypeSystem`ZSignatures`PackagePrivate`s, 
               TypeSystem`ZSignatures`PackagePrivate`key}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`data, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`default, 
              Blank[]]} :> TypeSystem`TypeUnion[
             TypeSystem`InternalTypeApply[
             Lookup, {
              TypeSystem`ZSignatures`PackagePrivate`data, 
               TypeSystem`ZSignatures`PackagePrivate`keys}], 
             TypeSystem`ExpressionType[
             TypeSystem`ZSignatures`PackagePrivate`default]]}, 
         GeneralUtilities`AssociationTranspose -> {{
             TypeSystem`Vector[
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`Vector[
             TypeSystem`ZSignatures`PackagePrivate`x, 
              TypeSystem`ZSignatures`PackagePrivate`n], 
             TypeSystem`ZSignatures`PackagePrivate`m], {
             TypeSystem`Vector[
              TypeSystem`Tuple[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Tuple[
             Map[
             TypeSystem`Vector[#, TypeSystem`ZSignatures`PackagePrivate`n]& , 
              TypeSystem`ZSignatures`PackagePrivate`x]], {
             TypeSystem`Vector[
              TypeSystem`Struct[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`vals, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Struct[TypeSystem`ZSignatures`PackagePrivate`keys, 
             Map[
             TypeSystem`Vector[#, TypeSystem`ZSignatures`PackagePrivate`n]& , 
              TypeSystem`ZSignatures`PackagePrivate`vals]], {
             TypeSystem`Vector[
              Blank[TypeSystem`Assoc], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`UnknownType, {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              TypeSystem`Struct[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`keys2, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`vals, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Struct[TypeSystem`ZSignatures`PackagePrivate`keys2, 
             Map[
             TypeSystem`Assoc[
              TypeSystem`ZSignatures`PackagePrivate`k, #, 
               TypeSystem`ZSignatures`PackagePrivate`n]& , 
              TypeSystem`ZSignatures`PackagePrivate`vals]], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              TypeSystem`Tuple[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`vals, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Tuple[
             Map[
             TypeSystem`Assoc[
              TypeSystem`ZSignatures`PackagePrivate`k, #, 
               TypeSystem`ZSignatures`PackagePrivate`n]& , 
              TypeSystem`ZSignatures`PackagePrivate`vals]], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`x, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`Assoc[
             TypeSystem`ZSignatures`PackagePrivate`k, 
              TypeSystem`ZSignatures`PackagePrivate`x, 
              TypeSystem`ZSignatures`PackagePrivate`n], 
             TypeSystem`ZSignatures`PackagePrivate`m], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              TypeSystem`Assoc[
               Blank[], 
               Blank[], 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`UnknownType, {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], TypeSystem`AnyType, TypeSystem`AnyLength]} :> 
           TypeSystem`UnknownType, {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Struct[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`keys2, 
                   Blank[]], 
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`vals2, 
                   Blank[]]]]}]]} :> 
           TypeSystem`Struct[TypeSystem`ZSignatures`PackagePrivate`keys2, 
             Map[
             TypeSystem`Struct[
              TypeSystem`ZSignatures`PackagePrivate`keys, 
               TypeSystem`ZSignatures`PackagePrivate`vals2]& , 
              TypeSystem`ZSignatures`PackagePrivate`v]], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Vector[
                  Blank[], 
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                   Blank[]]]]}]]} :> TypeSystem`Vector[
             TypeSystem`Struct[TypeSystem`ZSignatures`PackagePrivate`keys, 
              Map[
              TypeSystem`TypeInner, TypeSystem`ZSignatures`PackagePrivate`v]],
              TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Assoc[
                  Blank[], 
                  Blank[], 
                  Blank[]]]}]]} :> TypeSystem`UnknownType, {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Tuple[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                   Blank[]]]]}]]} :> TypeSystem`Vector[
             Map[
             TypeSystem`Struct[
              TypeSystem`ZSignatures`PackagePrivate`keys, #]& , 
              TypeSystem`ZSignatures`PackagePrivate`t], 
             Length[TypeSystem`ZSignatures`PackagePrivate`t]], {
             TypeSystem`Struct[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`keys, 
               Blank[]], 
              PatternTest[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[List]], 
               TypeSystem`ZSignatures`PackagePrivate`homogenizableQ]]} :> 
           Replace[TypeSystem`ZSignatures`PackagePrivate`$homogenized, {
             TypeSystem`Tuple[
                Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                 Blank[]]] :> TypeSystem`Tuple[
                Map[
                TypeSystem`Struct[TypeSystem`ZSignatures`PackagePrivate`keys, 
                  Table[#, 
                   Length[TypeSystem`ZSignatures`PackagePrivate`keys]]]& , 
                 TypeSystem`ZSignatures`PackagePrivate`t]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                Blank[]] :> 
              TypeSystem`InternalTypeApply[
               GeneralUtilities`AssociationTranspose, {
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`ZSignatures`PackagePrivate`t, 
                  Length[TypeSystem`ZSignatures`PackagePrivate`keys]]}]}], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Tuple[
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                   Blank[]]]]}]]} :> Map[TypeSystem`Vector[#, 
              Length[TypeSystem`ZSignatures`PackagePrivate`v]]& , 
             TypeSystem`ZSignatures`PackagePrivate`t], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Vector[
                  Blank[], 
                  Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                   Blank[]]]]}]]} :> TypeSystem`Vector[
             TypeSystem`Tuple[
              Map[
              TypeSystem`TypeInner, TypeSystem`ZSignatures`PackagePrivate`v]],
              TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, {
                Repeated[
                 TypeSystem`Assoc[
                  Blank[], 
                  Blank[], 
                  Blank[]]]}]]} :> TypeSystem`UnknownType, {
             TypeSystem`Tuple[
              PatternTest[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[List]], 
               TypeSystem`ZSignatures`PackagePrivate`homogenizableQ]]} :> 
           TypeSystem`InternalTypeApply[
            GeneralUtilities`AssociationTranspose, {
              TypeSystem`Vector[
              TypeSystem`ZSignatures`PackagePrivate`$homogenized, 
               Length[TypeSystem`ZSignatures`PackagePrivate`v]]}], {
            TypeSystem`AnyType} :> TypeSystem`AnyType, {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`FailureType[
            Transpose, "nmtx", "Arguments" -> 
             TypeSystem`PatternForm[
              TypeSystem`ZSignatures`PackagePrivate`t]], {
             BlankNullSequence[]} :> (
            MessageName[Dataset, "trans"] = 
             "Dataset objects do not support arbitrary transpose operations."; 
            TypeSystem`FailureType[Dataset, "trans"])}, Greater -> {{
             Blank[TypeSystem`Atom], 
             Blank[TypeSystem`Atom]} :> TypeSystem`BooleanT}, 
         GreaterEqual -> {{
             Blank[TypeSystem`Atom], 
             Blank[TypeSystem`Atom]} :> TypeSystem`BooleanT}, Less -> {{
             Blank[TypeSystem`Atom], 
             Blank[TypeSystem`Atom]} :> TypeSystem`BooleanT}, LessEqual -> {{
             Blank[TypeSystem`Atom], 
             Blank[TypeSystem`Atom]} :> TypeSystem`BooleanT}, Equal -> {{
             Blank[TypeSystem`Atom], 
             Blank[TypeSystem`Atom]} :> TypeSystem`BooleanT}, Unequal -> {{
             Blank[TypeSystem`Atom], 
             Blank[TypeSystem`Atom]} :> TypeSystem`BooleanT}, SameQ -> {{
             BlankNullSequence[]} :> TypeSystem`BooleanT}, UnsameQ -> {{
             BlankNullSequence[]} :> TypeSystem`BooleanT}, N -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`NType[
            TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`ZSignatures`PackagePrivate`NType[
            TypeSystem`ZSignatures`PackagePrivate`t]}, Round -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t]}, Ceiling -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t]}, Floor -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t]}, IntegerPart -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
            TypeSystem`ZSignatures`PackagePrivate`t]}, CommonName -> {{
             TypeSystem`Atom[
              HoldPattern[
               Blank[Entity]]]} :> TypeSystem`StringT, {
             TypeSystem`Vector[
              TypeSystem`Atom[
               HoldPattern[
                Blank[Entity]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`StringT, TypeSystem`ZSignatures`PackagePrivate`n]}, 
         QuantityMagnitude -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`QMType[
            TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
              Blank[]], 
             Blank[]} :> 
           TypeSystem`ZSignatures`PackagePrivate`QMType[
            TypeSystem`ZSignatures`PackagePrivate`t]}, Minus -> {{
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`NumericTypeQ]} :> 
           TypeSystem`ZSignatures`PackagePrivate`a}, Plus -> {{
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`NumericTypeQ], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`a, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Rational]} :> TypeSystem`RationalT, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Atom[Rational], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v1, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v2, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Plus, {TypeSystem`ZSignatures`PackagePrivate`v1, 
               TypeSystem`ZSignatures`PackagePrivate`v2}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Plus, {TypeSystem`ZSignatures`PackagePrivate`v, 
               TypeSystem`ZSignatures`PackagePrivate`a}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[Plus, {#, #}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[
             Plus, {#, TypeSystem`ZSignatures`PackagePrivate`a}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]]} :> 
           TypeSystem`Atom[TypeSystem`ZSignatures`PackagePrivate`q], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
                Blank[Quantity]]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
            TypeSystem`ZSignatures`PackagePrivate`q + 
             TypeSystem`ZSignatures`PackagePrivate`r]}, Subtract -> {{
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`NumericTypeQ], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`a, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Rational]} :> TypeSystem`RationalT, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Atom[Rational], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v1, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v2, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Subtract, {
              TypeSystem`ZSignatures`PackagePrivate`v1, 
               TypeSystem`ZSignatures`PackagePrivate`v2}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Subtract, {
              TypeSystem`ZSignatures`PackagePrivate`v, 
               TypeSystem`ZSignatures`PackagePrivate`a}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[Subtract, {#, #}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[
             Subtract, {#, TypeSystem`ZSignatures`PackagePrivate`a}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]]} :> 
           TypeSystem`Atom[TypeSystem`ZSignatures`PackagePrivate`q], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
                Blank[Quantity]]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
            TypeSystem`ZSignatures`PackagePrivate`q - 
             TypeSystem`ZSignatures`PackagePrivate`r]}, Times -> {{
             PatternTest[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`NumericTypeQ], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`a, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Rational]} :> TypeSystem`RationalT, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Atom[Rational], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v1, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v2, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Times, {TypeSystem`ZSignatures`PackagePrivate`v1, 
               TypeSystem`ZSignatures`PackagePrivate`v2}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Times, {TypeSystem`ZSignatures`PackagePrivate`v, 
               TypeSystem`ZSignatures`PackagePrivate`a}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[Times, {#, #}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[
             Times, {#, TypeSystem`ZSignatures`PackagePrivate`a}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              Alternatives[Integer, Rational, Real]]} :> 
           TypeSystem`Atom[TypeSystem`ZSignatures`PackagePrivate`q], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
                Blank[Quantity]]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
            TypeSystem`ZSignatures`PackagePrivate`q 
             TypeSystem`ZSignatures`PackagePrivate`r]}, Divide -> {{
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v1, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v2, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Divide, {
              TypeSystem`ZSignatures`PackagePrivate`v1, 
               TypeSystem`ZSignatures`PackagePrivate`v2}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Assoc[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`Assoc[TypeSystem`ZSignatures`PackagePrivate`k, 
             TypeSystem`InternalTypeApply[
             Divide, {
              TypeSystem`ZSignatures`PackagePrivate`v, 
               TypeSystem`ZSignatures`PackagePrivate`a}], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[Divide, {#, #}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[TypeSystem`Struct]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[TypeSystem`Atom]]} :> 
           TypeSystem`TypeMap[
            TypeSystem`InternalTypeApply[
             Divide, {#, TypeSystem`ZSignatures`PackagePrivate`a}]& , 
             TypeSystem`ZSignatures`PackagePrivate`s], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              Alternatives[Integer, Rational, Real]]} :> 
           TypeSystem`Atom[TypeSystem`ZSignatures`PackagePrivate`q], {
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`q, 
                Blank[Quantity]]]], 
             TypeSystem`Atom[
              HoldPattern[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`r, 
                Blank[Quantity]]]]} :> 
           TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
            TypeSystem`ZSignatures`PackagePrivate`q/
             TypeSystem`ZSignatures`PackagePrivate`r], {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              Alternatives[Integer, Rational]]} :> TypeSystem`RationalT, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[
              Alternatives[Real, Integer, Rational]]} :> TypeSystem`RealT, {
             TypeSystem`Atom[Rational], 
             TypeSystem`Atom[
              Alternatives[Integer, Rational]]} :> TypeSystem`RationalT, {
             TypeSystem`Atom[Rational], 
             TypeSystem`Atom[Real]} :> TypeSystem`RealT}, Power -> {{
             Alternatives[
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Rational]], 
             TypeSystem`Atom[Integer]} :> TypeSystem`RationalT, {
             Blank[], 
             Alternatives[
              TypeSystem`Atom[Rational], 
              TypeSystem`Atom[Real]]} :> TypeSystem`RealT, {
             TypeSystem`Atom[Real], 
             Blank[]} :> TypeSystem`RealT}, StringLength -> {{
             TypeSystem`Atom[String]} :> TypeSystem`IntegerT, {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> 
           TypeSystem`Vector[
            TypeSystem`IntegerT, TypeSystem`ZSignatures`PackagePrivate`n]}, 
         StringDrop -> {{
             TypeSystem`Atom[String], 
             TypeSystem`Atom[Integer]} :> TypeSystem`StringT, {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Atom[Integer]} :> 
           TypeSystem`Vector[
            TypeSystem`StringT, TypeSystem`ZSignatures`PackagePrivate`n], 
           Condition[{
              TypeSystem`Atom[String], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                Blank[Integer]]}}, TypeSystem`ZSignatures`PackagePrivate`m <= 
             TypeSystem`ZSignatures`PackagePrivate`n] :> TypeSystem`StringT, 
           Condition[{
              TypeSystem`Vector[
               TypeSystem`Atom[String], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                Blank[Integer]]}}, TypeSystem`ZSignatures`PackagePrivate`m <= 
             TypeSystem`ZSignatures`PackagePrivate`n] :> 
           TypeSystem`Vector[
            TypeSystem`StringT, TypeSystem`ZSignatures`PackagePrivate`k]}, 
         StringTake -> {{
             TypeSystem`Atom[String], 
             TypeSystem`Atom[Integer]} :> TypeSystem`StringT, {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             TypeSystem`Atom[Integer]} :> 
           TypeSystem`Vector[
            TypeSystem`StringT, TypeSystem`ZSignatures`PackagePrivate`n], 
           Condition[{
              TypeSystem`Atom[String], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                Blank[Integer]]}}, TypeSystem`ZSignatures`PackagePrivate`m <= 
             TypeSystem`ZSignatures`PackagePrivate`n] :> TypeSystem`StringT, 
           Condition[{
              TypeSystem`Vector[
               TypeSystem`Atom[String], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                Blank[Integer]]}}, TypeSystem`ZSignatures`PackagePrivate`m <= 
             TypeSystem`ZSignatures`PackagePrivate`n] :> 
           TypeSystem`Vector[
            TypeSystem`StringT, TypeSystem`ZSignatures`PackagePrivate`k]}, 
         StringSplit -> {{
             TypeSystem`Atom[String]} :> 
           TypeSystem`Vector[TypeSystem`StringT], {
             TypeSystem`Atom[String], 
             Blank[]} :> TypeSystem`Vector[TypeSystem`StringT], {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]]} :> TypeSystem`Vector[
             TypeSystem`Vector[TypeSystem`StringT], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Blank[]} :> TypeSystem`Vector[
             TypeSystem`Vector[TypeSystem`StringT], 
             TypeSystem`ZSignatures`PackagePrivate`n]}, 
         StringJoin -> {Condition[{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               BlankNullSequence[]]}, 
             
             AllTrue[{TypeSystem`ZSignatures`PackagePrivate`t}, 
              TypeSystem`TreeQ[#, String]& ]] :> TypeSystem`StringT}, 
         StringCount -> {{
             TypeSystem`Atom[String], 
             Blank[]} :> TypeSystem`IntegerT, {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`len, 
               Blank[]]], 
             Blank[]} :> 
           TypeSystem`Vector[
            TypeSystem`IntegerT, TypeSystem`ZSignatures`PackagePrivate`len]}, 
         StringPosition -> {{
             TypeSystem`Atom[String], 
             Blank[]} :> TypeSystem`Vector[
             TypeSystem`Vector[TypeSystem`IntegerT, 2]], {
             TypeSystem`Vector[
              TypeSystem`Atom[String], TypeSystem`AnyLength], 
             Blank[]} :> TypeSystem`Vector[
             TypeSystem`Vector[TypeSystem`IntegerT, 2]]}, StringFreeQ -> {{
             TypeSystem`Atom[String], 
             Blank[]} :> TypeSystem`BooleanT, {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`len, 
               Blank[]]], 
             Blank[]} :> 
           TypeSystem`Vector[
            TypeSystem`BooleanT, TypeSystem`ZSignatures`PackagePrivate`len]}, 
         StringMatchQ -> {{
             TypeSystem`Atom[String], 
             Blank[]} :> TypeSystem`BooleanT, {
             TypeSystem`Vector[
              TypeSystem`Atom[String], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`len, 
               Blank[]]], 
             Blank[]} :> 
           TypeSystem`Vector[
            TypeSystem`BooleanT, TypeSystem`ZSignatures`PackagePrivate`len]}, 
         StringReverse -> {{
             TypeSystem`Atom[String]} :> TypeSystem`StringT}, Apply -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Vector[
              TypeSystem`Tuple[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], {1}} :> TypeSystem`Vector[
             TypeSystem`InternalTypeApply[
             TypeSystem`ZSignatures`PackagePrivate`f, 
              TypeSystem`ZSignatures`PackagePrivate`t], 
             TypeSystem`ZSignatures`PackagePrivate`n], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]]} :> 
           TypeSystem`InternalTypeApply[
            TypeSystem`ZSignatures`PackagePrivate`f, 
             TypeSystem`ZSignatures`PackagePrivate`t], {
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             Blank[]} :> TypeSystem`UnknownType}, Compose -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
              Blank[]]} :> 
           TypeSystem`InternalTypeApply[
            TypeSystem`ZSignatures`PackagePrivate`f, {
             TypeSystem`ZSignatures`PackagePrivate`a}]}, Max -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Atom[Real], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`a, Condition[{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               BlankNullSequence[]]}, 
             VectorQ[{TypeSystem`ZSignatures`PackagePrivate`t}, 
              TypeSystem`TreeQ[#, 
               Alternatives[Integer, Real, Rational, 
                HoldPattern[
                 Blank[Quantity]]]]& ]] :> TypeSystem`TypeUnion[
             Map[TypeSystem`Atom, 
              
              TypeSystem`TypeAtoms[{
               TypeSystem`ZSignatures`PackagePrivate`t}]]]}, Min -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Atom[Real], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]]} :> TypeSystem`ZSignatures`PackagePrivate`a, Condition[{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               BlankNullSequence[]]}, 
             
             VectorQ[{TypeSystem`ZSignatures`PackagePrivate`t}, 
              TypeSystem`TreeQ[#, 
               Alternatives[Integer, Real, Rational, 
                HoldPattern[
                 Blank[Quantity]]]]& ]] :> TypeSystem`TypeUnion[
             Map[TypeSystem`Atom, 
              
              TypeSystem`TypeAtoms[{
               TypeSystem`ZSignatures`PackagePrivate`t}]]]}, Median -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Atom[Real], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]]} :> 
           TypeSystem`InternalTypeApply[Times, {
              TypeSystem`InternalTypeApply[
              Total, {TypeSystem`ZSignatures`PackagePrivate`v}], 
              TypeSystem`RationalT}]}, Mean -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Atom[Real], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]]} :> 
           TypeSystem`InternalTypeApply[Times, {
              TypeSystem`InternalTypeApply[
              Total, {TypeSystem`ZSignatures`PackagePrivate`v}], 
              TypeSystem`RationalT}]}, Variance -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Atom[Real], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]]} :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`r = 
              TypeSystem`InternalTypeApply[
               Total, {TypeSystem`ZSignatures`PackagePrivate`v}]}, 
             TypeSystem`InternalTypeApply[Times, {
               TypeSystem`InternalTypeApply[
               Times, {
                TypeSystem`ZSignatures`PackagePrivate`r, 
                 TypeSystem`ZSignatures`PackagePrivate`r}], 
               TypeSystem`RationalT}]]}, StandardDeviation -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Atom[Real], {
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Vector]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[TypeSystem`Assoc]]]} :> 
           TypeSystem`InternalTypeApply[Times, {
              TypeSystem`InternalTypeApply[
              Total, {TypeSystem`ZSignatures`PackagePrivate`v}], 
              TypeSystem`RealT}]}, MinMax -> {{
             TypeSystem`Atom[
              HoldPattern[TemporalData]]} :> TypeSystem`Vector[
             TypeSystem`Atom[Real], 2], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]]} :> 
           TypeSystem`Vector[TypeSystem`ZSignatures`PackagePrivate`a, 2], 
           Condition[{
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               BlankNullSequence[]]}, 
             
             VectorQ[{TypeSystem`ZSignatures`PackagePrivate`t}, 
              TypeSystem`TreeQ[#, 
               Alternatives[Integer, Real, Rational, 
                HoldPattern[
                 Blank[Quantity]]]]& ]] :> (TypeSystem`Vector[#, 2]& )[
             TypeSystem`TypeUnion[
              Map[TypeSystem`Atom, 
               
               TypeSystem`TypeAtoms[{
                TypeSystem`ZSignatures`PackagePrivate`t}]]]]}, Total -> {{
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Blank[]]} :> 
           TypeSystem`InternalTypeApply[
            Plus, {TypeSystem`ZSignatures`PackagePrivate`a, 
              TypeSystem`ZSignatures`PackagePrivate`a}], {
             TypeSystem`Assoc[
              Blank[], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
               Blank[]], 
              Blank[]]} :> 
           TypeSystem`InternalTypeApply[
            Plus, {TypeSystem`ZSignatures`PackagePrivate`v, 
              TypeSystem`ZSignatures`PackagePrivate`v}], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]]} :> 
           TypeSystem`InternalTypeApply[
            Plus, TypeSystem`ZSignatures`PackagePrivate`t]}, Differences -> {{
             Pattern[TypeSystem`ZSignatures`PackagePrivate`type, 
              Blank[]]} :> 
           TypeSystem`InternalTypeApply[
            Differences, {TypeSystem`ZSignatures`PackagePrivate`type, 1}], 
           Condition[{
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                Blank[Integer]]], 
              Alternatives[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], {
                Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                 Blank[Integer]]}]}, 
             Inequality[
             TypeSystem`ZSignatures`PackagePrivate`n, Greater, 
              TypeSystem`ZSignatures`PackagePrivate`m, GreaterEqual, 0]] :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n - 
             TypeSystem`ZSignatures`PackagePrivate`m], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[Integer]]], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[Integer]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]]}]} :> 
           TypeSystem`Vector[TypeSystem`UnknownType, TypeSystem`AnyLength], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`AnyLength], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[Integer]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]]}]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, TypeSystem`AnyLength], 
           Condition[{
              TypeSystem`Vector[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
                Blank[Integer]]], 
              Alternatives[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], {
                Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                 Blank[Integer]]}], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[Integer]]}, 
             Inequality[
             TypeSystem`ZSignatures`PackagePrivate`n, Greater, 
              TypeSystem`ZSignatures`PackagePrivate`m 
              RealAbs[TypeSystem`ZSignatures`PackagePrivate`s], GreaterEqual, 
              0]] :> TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, 
             TypeSystem`ZSignatures`PackagePrivate`n - 
             TypeSystem`ZSignatures`PackagePrivate`m 
             RealAbs[TypeSystem`ZSignatures`PackagePrivate`s]], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[Integer]]], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[Integer]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]]}], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[Integer]]} :> 
           TypeSystem`Vector[TypeSystem`UnknownType, TypeSystem`AnyLength], {
             TypeSystem`Vector[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
               Blank[]], TypeSystem`AnyLength], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[Integer]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]]}], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[Integer]]} :> 
           TypeSystem`Vector[
            TypeSystem`ZSignatures`PackagePrivate`a, TypeSystem`AnyLength], 
           Condition[{
              TypeSystem`Tuple[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                Blank[]]], 
              Alternatives[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], {
                Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                 Blank[Integer]]}]}, 
             Inequality[
              Length[TypeSystem`ZSignatures`PackagePrivate`t], Greater, 
              TypeSystem`ZSignatures`PackagePrivate`m, GreaterEqual, 0]] :> 
           With[{TypeSystem`ZSignatures`PackagePrivate`types = 
              Apply[TypeSystem`TypeUnion, 
                Partition[
                TypeSystem`ZSignatures`PackagePrivate`t, 
                 TypeSystem`ZSignatures`PackagePrivate`m + 1, 1], {1}]}, 
             If[
              Apply[SameQ, TypeSystem`ZSignatures`PackagePrivate`types], 
              TypeSystem`Vector[
               First[TypeSystem`ZSignatures`PackagePrivate`types], 
               Length[TypeSystem`ZSignatures`PackagePrivate`types]], 
              TypeSystem`Tuple[
              TypeSystem`ZSignatures`PackagePrivate`types]]], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[Integer]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]]}]} :> 
           TypeSystem`Vector[TypeSystem`UnknownType, TypeSystem`AnyLength], 
           Condition[{
              TypeSystem`Tuple[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
                Blank[]]], 
              Alternatives[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]], {
                Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                 Blank[Integer]]}], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
               Blank[Integer]]}, 
             Inequality[
              Length[TypeSystem`ZSignatures`PackagePrivate`t], Greater, 
              TypeSystem`ZSignatures`PackagePrivate`m 
              RealAbs[TypeSystem`ZSignatures`PackagePrivate`s], GreaterEqual, 
              0]] :> With[{
             TypeSystem`ZSignatures`PackagePrivate`abss = 
              RealAbs[TypeSystem`ZSignatures`PackagePrivate`s]}, 
             
             With[{TypeSystem`ZSignatures`PackagePrivate`types = 
               Apply[TypeSystem`TypeUnion, 
                 Map[
                 Take[TypeSystem`ZSignatures`PackagePrivate`t, {#, # + 
                    TypeSystem`ZSignatures`PackagePrivate`m 
                    TypeSystem`ZSignatures`PackagePrivate`abss, 
                    TypeSystem`ZSignatures`PackagePrivate`abss}]& , 
                  Range[
                  Length[TypeSystem`ZSignatures`PackagePrivate`t] - 
                   TypeSystem`ZSignatures`PackagePrivate`m 
                   TypeSystem`ZSignatures`PackagePrivate`abss]], {1}]}, 
              If[
               Apply[SameQ, TypeSystem`ZSignatures`PackagePrivate`types], 
               TypeSystem`Vector[
                First[TypeSystem`ZSignatures`PackagePrivate`types], 
                Length[TypeSystem`ZSignatures`PackagePrivate`types]], 
               TypeSystem`Tuple[
               TypeSystem`ZSignatures`PackagePrivate`types]]]], {
             TypeSystem`Tuple[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
               Blank[]]], 
             Alternatives[
              Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
               Blank[Integer]], {
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[Integer]]}], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`s, 
              Blank[Integer]]} :> 
           TypeSystem`Vector[TypeSystem`UnknownType, TypeSystem`AnyLength], {
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Tuple]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`m, {
               PatternTest[
                BlankSequence[Integer], NonNegative]}]} :> 
           TypeSystem`UnknownType, {
             Alternatives[
              Blank[TypeSystem`Vector], 
              Blank[TypeSystem`Tuple]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`m, {
               PatternTest[
                BlankSequence[Integer], NonNegative]}], 
             Alternatives[
              PatternTest[
               Blank[Integer], Developer`MachineIntegerQ], {
               PatternTest[
                BlankSequence[Integer], Developer`MachineIntegerQ]}]} :> 
           TypeSystem`UnknownType, {TypeSystem`AnyType, 
             Alternatives[
              PatternTest[
               Blank[Integer], NonNegative], {
               PatternTest[
                BlankSequence[Integer], NonNegative]}]} :> 
           TypeSystem`UnknownType, {TypeSystem`AnyType, 
             Alternatives[
              PatternTest[
               Blank[Integer], NonNegative], {
               PatternTest[
                BlankSequence[Integer], NonNegative]}], 
             Alternatives[
              PatternTest[
               Blank[Integer], Developer`MachineIntegerQ], {
               PatternTest[
                BlankSequence[Integer], Developer`MachineIntegerQ]}]} :> 
           TypeSystem`UnknownType}, Merge -> {{
             TypeSystem`Vector[
              TypeSystem`Assoc[
               Pattern[TypeSystem`ZSignatures`PackagePrivate`k, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`v, 
                Blank[]], 
               Pattern[TypeSystem`ZSignatures`PackagePrivate`m, 
                Blank[]]], 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`ZSignatures`PackagePrivate`k, TypeSystem`AnyType, 
             TypeSystem`AnyLength], {
             TypeSystem`Vector[
              Alternatives[
               Blank[TypeSystem`Vector], 
               Blank[TypeSystem`Tuple], 
               Blank[TypeSystem`Struct]], TypeSystem`AnyLength], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength], {
             TypeSystem`Vector[TypeSystem`AnyType, 
              Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
               Blank[]]], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength], {
             Blank[TypeSystem`Tuple], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength], {
             Blank[TypeSystem`Struct], 
             Pattern[TypeSystem`ZSignatures`PackagePrivate`f, 
              Blank[]]} :> 
           TypeSystem`Assoc[
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength]}], 
       TypeSystem`StringT = TypeSystem`Atom[String], TypeSystem`IntegerT = 
       TypeSystem`Atom[Integer], TypeSystem`TypeMap[
         Blank[], 
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`TypeSymbol]]] := TypeSystem`Types`PackagePrivate`t,
        TypeSystem`TypeMap[
         Blank[], TypeSystem`AnyType] := TypeSystem`AnyType, 
       TypeSystem`TypeMap[
         Blank[], TypeSystem`UnknownType] := TypeSystem`UnknownType, 
       TypeSystem`TypeMap[
         Blank[], 
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[TypeSystem`FailureType]]] := 
       TypeSystem`Types`PackagePrivate`f, TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`a, 
          Blank[TypeSystem`Atom]]] := TypeSystem`Types`PackagePrivate`a, 
       TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`a, 
          Blank[TypeSystem`Atom]], 
         Pattern[TypeSystem`Types`PackagePrivate`e, 
          Blank[]]] := TypeSystem`Types`PackagePrivate`e, TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`v, 
          Blank[TypeSystem`Vector]]] := TypeSystem`AsPart[All, 
         MapAt[
         TypeSystem`Types`PackagePrivate`f, TypeSystem`Types`PackagePrivate`v,
           1]], Condition[
         TypeSystem`TypeMap[
          Pattern[TypeSystem`Types`PackagePrivate`f, 
           Blank[]], 
          TypeSystem`Vector[
           Pattern[TypeSystem`Types`PackagePrivate`v, 
            Blank[]], 
           Pattern[TypeSystem`Types`PackagePrivate`len, 
            Blank[]]], 
          Pattern[TypeSystem`Types`PackagePrivate`d, 
           Blank[List]]], 
         TypeSystem`LengthConformsQ[
          Length[TypeSystem`Types`PackagePrivate`d], 
          TypeSystem`Types`PackagePrivate`len]] := Table[
         TypeSystem`AsPart[TypeSystem`Types`PackagePrivate`i, 
          TypeSystem`Types`PackagePrivate`f[TypeSystem`Types`PackagePrivate`v, 
           Part[
           TypeSystem`Types`PackagePrivate`d, 
            TypeSystem`Types`PackagePrivate`i]]], {
         TypeSystem`Types`PackagePrivate`i, 
          Length[TypeSystem`Types`PackagePrivate`d]}], TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Blank[TypeSystem`Vector], 
         Alternatives[
          Pattern[TypeSystem`Types`PackagePrivate`m, 
           Blank[Missing]], 
          Pattern[TypeSystem`Types`PackagePrivate`m, 
           Blank[Failure]]]] := TypeSystem`Types`PackagePrivate`m, 
       TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         TypeSystem`Struct[
          Pattern[TypeSystem`Types`PackagePrivate`keys, 
           Blank[List]], 
          Pattern[TypeSystem`Types`PackagePrivate`values, 
           Blank[List]]]] := 
       TypeSystem`Struct[TypeSystem`Types`PackagePrivate`keys, 
         MapThread[TypeSystem`AsPart[#, 
           TypeSystem`Types`PackagePrivate`f[#2]]& , {
          TypeSystem`Types`PackagePrivate`keys, 
           TypeSystem`Types`PackagePrivate`values}]], Condition[
         TypeSystem`TypeMap[
          Pattern[TypeSystem`Types`PackagePrivate`f, 
           Blank[]], 
          TypeSystem`Struct[
           Pattern[TypeSystem`Types`PackagePrivate`keys, 
            Blank[]], 
           Pattern[TypeSystem`Types`PackagePrivate`vals, 
            Blank[]]], 
          Pattern[TypeSystem`Types`PackagePrivate`d, 
           Blank[Association]]], 
         And[
          AssociationQ[TypeSystem`Types`PackagePrivate`d], 
          SubsetQ[TypeSystem`Types`PackagePrivate`keys, 
           Keys[TypeSystem`Types`PackagePrivate`d]]]] := 
       MapThread[TypeSystem`AsPart[#, 
          TypeSystem`Types`PackagePrivate`f[#2, 
           TypeSystem`Types`PackagePrivate`d[#]]]& , {
         TypeSystem`Types`PackagePrivate`keys, 
          TypeSystem`Types`PackagePrivate`vals}], TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`s, 
          TypeSystem`Struct[
           Pattern[TypeSystem`Types`PackagePrivate`keys, 
            Blank[]], 
           Pattern[TypeSystem`Types`PackagePrivate`vals, 
            Blank[]]]], 
         Alternatives[
          Pattern[TypeSystem`Types`PackagePrivate`m, 
           Blank[Missing]], 
          Pattern[TypeSystem`Types`PackagePrivate`m, 
           Blank[Failure]]]] := 
       TypeSystem`TypeMap[
        TypeSystem`Types`PackagePrivate`f, TypeSystem`Types`PackagePrivate`s, 
         AssociationMap[
         TypeSystem`Types`PackagePrivate`m& , 
          TypeSystem`Types`PackagePrivate`keys]], TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]]] := TypeSystem`Tuple[
         MapIndexed[TypeSystem`AsPart[
           First[#2], 
           TypeSystem`Types`PackagePrivate`f[#]]& , 
          First[TypeSystem`Types`PackagePrivate`t]]], Condition[
         TypeSystem`TypeMap[
          Pattern[TypeSystem`Types`PackagePrivate`f, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`t, 
           Blank[TypeSystem`Tuple]], 
          Pattern[TypeSystem`Types`PackagePrivate`d, 
           Blank[List]]], 
         TypeSystem`TypeLength[TypeSystem`Types`PackagePrivate`t] == 
         Length[TypeSystem`Types`PackagePrivate`d]] := 
       MapIndexed[TypeSystem`AsPart[
          First[#2], 
          TypeSystem`Types`PackagePrivate`f[#, 
           Part[TypeSystem`Types`PackagePrivate`d, 
            First[#2]]]]& , 
         First[TypeSystem`Types`PackagePrivate`t]], TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`t, 
          Blank[TypeSystem`Tuple]], 
         Alternatives[
          Pattern[TypeSystem`Types`PackagePrivate`m, 
           Blank[Missing]], 
          Pattern[TypeSystem`Types`PackagePrivate`m, 
           Blank[Failure]]]] := 
       TypeSystem`TypeMap[
        TypeSystem`Types`PackagePrivate`f, TypeSystem`Types`PackagePrivate`t, 
         ConstantArray[TypeSystem`Types`PackagePrivate`m, 
          Length[
           First[TypeSystem`Types`PackagePrivate`t]]]], TypeSystem`TypeMap[
         Pattern[TypeSystem`Types`PackagePrivate`f, 
          Blank[]], 
         TypeSystem`Assoc[
          Pattern[TypeSystem`Types`PackagePrivate`key, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`value, 
           Blank[]], 
          Pattern[TypeSystem`Types`PackagePrivate`len, 
           Blank[]]]] := TypeSystem`AsPart[Values, 
         TypeSystem`Assoc[TypeSystem`Types`PackagePrivate`key, 
          TypeSystem`Types`PackagePrivate`f[
          TypeSystem`Types`PackagePrivate`value], 
          TypeSystem`Types`PackagePrivate`len]], Condition[
         TypeSystem`TypeMap[
          Pattern[TypeSystem`Types`PackagePrivate`f, 
           Blank[]], 
          TypeSystem`Assoc[
           Pattern[TypeSystem`Types`PackagePrivate`key, 
            Blank[]], 
           Pattern[TypeSystem`Types`PackagePrivate`value, 
            Blank[]], 
           Pattern[TypeSystem`Types`PackagePrivate`len, 
            Blank[]]], 
          Pattern[TypeSystem`Types`PackagePrivate`data, 
           Blank[Association]]], 
         And[
          AssociationQ[TypeSystem`Types`PackagePrivate`data], 
          TypeSystem`LengthConformsQ[
          TypeSystem`Types`PackagePrivate`data, 
           TypeSystem`Types`PackagePrivate`len]]] := 
       MapIndexed[TypeSystem`AsPart[
          First[#2], 
          TypeSystem`Types`PackagePrivate`f[
          TypeSystem`Types`PackagePrivate`value, #]]& , 
         TypeSystem`Types`PackagePrivate`data], 
       Attributes[TypeSystem`AsPart] = {HoldRest}, TypeSystem`AsPart[
         Pattern[TypeSystem`Types`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`Types`PackagePrivate`body, 
          Blank[]]] := 
       Block[{TypeSystem`$Parts = 
          Append[TypeSystem`$Parts, TypeSystem`Types`PackagePrivate`path]}, 
         TypeSystem`Types`PackagePrivate`body], TypeSystem`AsPart[
         Pattern[TypeSystem`Types`PackagePrivate`path, 
          Blank[]]] := Function[TypeSystem`Types`PackagePrivate`x, 
         TypeSystem`AsPart[
         TypeSystem`Types`PackagePrivate`path, 
          TypeSystem`Types`PackagePrivate`x], {HoldAll}], 
       TypeSystem`$Parts = {}, TypeSystem`LengthConformsQ[
         Alternatives[
          Pattern[TypeSystem`Predicates`PackagePrivate`x, 
           Blank[List]], 
          Pattern[TypeSystem`Predicates`PackagePrivate`x, 
           Blank[Association]]], 
         Pattern[TypeSystem`Predicates`PackagePrivate`type, 
          Blank[]]] := TypeSystem`LengthConformsQ[
         Length[TypeSystem`Predicates`PackagePrivate`x], 
         TypeSystem`Predicates`PackagePrivate`type], 
       TypeSystem`LengthConformsQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`len, 
          Blank[]], 
         Pattern[TypeSystem`Predicates`PackagePrivate`type, 
          Alternatives[
           Blank[TypeSystem`Vector], 
           Blank[TypeSystem`Tuple], 
           Blank[TypeSystem`Assoc], 
           Blank[TypeSystem`Struct], 
           Blank[TypeSystem`Atom], TypeSystem`AnyType, TypeSystem`UnknownType, 
           Blank[TypeSystem`FailureType], 
           Blank[TypeSystem`Either], 
           Blank[TypeSystem`TypeSymbol]]]] := 
       TypeSystem`LengthConformsQ[TypeSystem`Predicates`PackagePrivate`len, 
         TypeSystem`TypeLength[TypeSystem`Predicates`PackagePrivate`type]], 
       TypeSystem`LengthConformsQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`len, 
          Blank[]], 
         Pattern[TypeSystem`Predicates`PackagePrivate`len2, 
          Blank[]]] := 
       Or[TypeSystem`Predicates`PackagePrivate`len === 
         TypeSystem`Predicates`PackagePrivate`len2, 
         Not[
          TypeSystem`FixedLengthQ[
          TypeSystem`Predicates`PackagePrivate`len2]]], 
       TypeSystem`WeakenLength[
         TypeSystem`Vector[
          Pattern[TypeSystem`Utilities`PackagePrivate`t, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`Vector[
        TypeSystem`Utilities`PackagePrivate`t, TypeSystem`AnyLength], 
       TypeSystem`WeakenLength[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Utilities`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Utilities`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`Assoc[
        TypeSystem`Utilities`PackagePrivate`k, 
         TypeSystem`Utilities`PackagePrivate`v, TypeSystem`AnyLength], 
       TypeSystem`WeakenLength[
         TypeSystem`Struct[
          Pattern[TypeSystem`Utilities`PackagePrivate`keys, 
           Blank[]], 
          Pattern[TypeSystem`Utilities`PackagePrivate`vals, 
           Blank[]]]] := TypeSystem`Assoc[TypeSystem`StringT, 
         TypeSystem`TypeUnion[TypeSystem`Utilities`PackagePrivate`vals], 
         TypeSystem`AnyLength], TypeSystem`WeakenLength[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Utilities`PackagePrivate`vals, 
           Blank[]]]] := TypeSystem`Vector[
         TypeSystem`TypeUnion[TypeSystem`Utilities`PackagePrivate`vals], 
         TypeSystem`AnyLength], TypeSystem`ZSignatures`PackagePrivate`DMMap[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
          Blank[]], 0] := TypeSystem`ZSignatures`PackagePrivate`t, 
       TypeSystem`ZSignatures`PackagePrivate`DMMap[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
          Blank[]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
          Blank[]]] := 
       TypeSystem`TypeMap[
        TypeSystem`ZSignatures`PackagePrivate`DMMap[#, 
          TypeSystem`ZSignatures`PackagePrivate`n - 1]& , 
         TypeSystem`WeakenLength[TypeSystem`ZSignatures`PackagePrivate`t]], 
       TypeSystem`SetLength[
         TypeSystem`Vector[
          Pattern[TypeSystem`Utilities`PackagePrivate`t, 
           Blank[]], 
          Blank[]], 
         Pattern[TypeSystem`Utilities`PackagePrivate`n, 
          Blank[]]] := 
       TypeSystem`Vector[
        TypeSystem`Utilities`PackagePrivate`t, 
         TypeSystem`Utilities`PackagePrivate`n], TypeSystem`SetLength[
         TypeSystem`Assoc[
          Pattern[TypeSystem`Utilities`PackagePrivate`k, 
           Blank[]], 
          Pattern[TypeSystem`Utilities`PackagePrivate`v, 
           Blank[]], 
          Blank[]], 
         Pattern[TypeSystem`Utilities`PackagePrivate`n, 
          Blank[]]] := 
       TypeSystem`Assoc[
        TypeSystem`Utilities`PackagePrivate`k, 
         TypeSystem`Utilities`PackagePrivate`v, 
         TypeSystem`Utilities`PackagePrivate`n], TypeSystem`SetLength[
         Pattern[TypeSystem`Utilities`PackagePrivate`t, 
          Blank[]], 
         Blank[]] := TypeSystem`Utilities`PackagePrivate`t, 
       TypeSystem`StrictTypePart[
         Pattern[TypeSystem`Parts`PackagePrivate`type, 
          Blank[]], 
         Pattern[TypeSystem`Parts`PackagePrivate`parts, 
          BlankSequence[]]] := 
       Block[{TypeSystem`Parts`PackagePrivate`$Strict = True}, 
         TypeSystem`TypePart[
         TypeSystem`Parts`PackagePrivate`type, 
          TypeSystem`Parts`PackagePrivate`parts]], 
       TypeSystem`ZSignatures`PackagePrivate`rangeFailure[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`head, 
          Blank[]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`expr, 
          Blank[]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`part, 
          Blank[]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`len, 
          Blank[]]] := 
       TypeSystem`FailureType[
        TypeSystem`ZSignatures`PackagePrivate`head, "Range", "Type" -> 
         TypeSystem`ZSignatures`PackagePrivate`expr, "Part" -> 
         TypeSystem`ZSignatures`PackagePrivate`part, "Length" -> 
         TypeSystem`ZSignatures`PackagePrivate`len], 
       TypeSystem`ZSignatures`PackagePrivate`toNewLen[
        Take, TypeSystem`AnyLength, 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
          Blank[Integer]]] := Abs[TypeSystem`ZSignatures`PackagePrivate`a], 
       TypeSystem`ZSignatures`PackagePrivate`toNewLen[
        Take, TypeSystem`AnyLength, {
          PatternTest[
           Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
            Blank[Integer]], Positive], 
          PatternTest[
           Pattern[TypeSystem`ZSignatures`PackagePrivate`b, 
            Blank[Integer]], Positive]}] := 
       If[TypeSystem`ZSignatures`PackagePrivate`b > 
         TypeSystem`ZSignatures`PackagePrivate`a - 1, 
         TypeSystem`ZSignatures`PackagePrivate`b - 
         TypeSystem`ZSignatures`PackagePrivate`a + 1, $Failed], 
       TypeSystem`ZSignatures`PackagePrivate`toNewLen[
         Blank[], TypeSystem`AnyLength, 
         Blank[]] := TypeSystem`AnyLength, 
       TypeSystem`ZSignatures`PackagePrivate`toNewLen[Take, 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
          Blank[Integer]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
          Blank[Integer]]] := 
       If[0 <= Abs[TypeSystem`ZSignatures`PackagePrivate`a] <= 
         TypeSystem`ZSignatures`PackagePrivate`n, 
         Abs[TypeSystem`ZSignatures`PackagePrivate`a], $Failed], 
       TypeSystem`ZSignatures`PackagePrivate`toNewLen[Drop, 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
          Blank[Integer]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
          Blank[Integer]]] := 
       If[0 <= Abs[TypeSystem`ZSignatures`PackagePrivate`a] <= 
         TypeSystem`ZSignatures`PackagePrivate`n, 
         TypeSystem`ZSignatures`PackagePrivate`n - Abs[
         TypeSystem`ZSignatures`PackagePrivate`a], $Failed], 
       TypeSystem`ZSignatures`PackagePrivate`toNewLen[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`head, 
          Blank[]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
          Blank[Integer]], {
          Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
           Blank[]], 
          Pattern[TypeSystem`ZSignatures`PackagePrivate`b, 
           Blank[]]}] := 
       Module[{TypeSystem`ZSignatures`PackagePrivate`A = 
          TypeSystem`ZSignatures`PackagePrivate`fixlen[
           TypeSystem`ZSignatures`PackagePrivate`n, 
            TypeSystem`ZSignatures`PackagePrivate`a], 
          TypeSystem`ZSignatures`PackagePrivate`B = 
          TypeSystem`ZSignatures`PackagePrivate`fixlen[
           TypeSystem`ZSignatures`PackagePrivate`n, 
            TypeSystem`ZSignatures`PackagePrivate`b]}, 
         If[
          And[
          1 <= TypeSystem`ZSignatures`PackagePrivate`A <= 
           TypeSystem`ZSignatures`PackagePrivate`n, 1 <= 
           TypeSystem`ZSignatures`PackagePrivate`B <= 
           TypeSystem`ZSignatures`PackagePrivate`n, 
           TypeSystem`ZSignatures`PackagePrivate`B >= 
           TypeSystem`ZSignatures`PackagePrivate`A - 1], 
          TypeSystem`ZSignatures`PackagePrivate`toNewLen[
          TypeSystem`ZSignatures`PackagePrivate`head, 
           TypeSystem`ZSignatures`PackagePrivate`n, 
           TypeSystem`ZSignatures`PackagePrivate`B - 
           TypeSystem`ZSignatures`PackagePrivate`A + 1], $Failed]], 
       TypeSystem`ZSignatures`PackagePrivate`fixlen[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`n, 
          Blank[]], 
         Pattern[TypeSystem`ZSignatures`PackagePrivate`a, 
          Blank[]]] := 
       If[TypeSystem`ZSignatures`PackagePrivate`a < 0, 
         TypeSystem`ZSignatures`PackagePrivate`n + 
         TypeSystem`ZSignatures`PackagePrivate`a + 1, 
         TypeSystem`ZSignatures`PackagePrivate`a], TypeSystem`ConvertStruct[
         TypeSystem`Struct[
          Pattern[TypeSystem`Utilities`PackagePrivate`keys, 
           Blank[]], 
          Pattern[TypeSystem`Utilities`PackagePrivate`vals, 
           Blank[]]]] := 
       AssociationThread[
        TypeSystem`Utilities`PackagePrivate`keys, 
         TypeSystem`Utilities`PackagePrivate`vals], TypeSystem`ConvertStruct[
         Pattern[TypeSystem`Utilities`PackagePrivate`a, 
          Blank[Association]]] := TypeSystem`Struct[
         Keys[TypeSystem`Utilities`PackagePrivate`a], 
         Values[TypeSystem`Utilities`PackagePrivate`a]], 
       GeneralUtilities`RuleQ[
         Alternatives[
          Blank[Rule], 
          Blank[RuleDelayed]]] := True, GeneralUtilities`RuleQ[
         Blank[]] := False, TypeSystem`BooleanT = 
       TypeSystem`Atom[TypeSystem`Boolean], 
       Attributes[TypeSystem`ExpressionType] = {HoldAllComplete}, 
       TypeSystem`ExpressionType[
         Pattern[TypeSystem`Inference`PackagePrivate`expr, 
          Blank[]]] := Replace[
         TypeSystem`Inference`PackagePrivate`exprType[
         TypeSystem`Inference`PackagePrivate`expr], {PatternTest[
            Pattern[TypeSystem`Inference`PackagePrivate`x, 
             Blank[]], TypeSystem`ValidTypeQ] :> 
          TypeSystem`Inference`PackagePrivate`x, 
          Pattern[TypeSystem`Inference`PackagePrivate`ft, 
            Blank[TypeSystem`FailureType]] :> 
          TypeSystem`Inference`PackagePrivate`ft, Blank[] -> 
          TypeSystem`UnknownType}], GeneralUtilities`AssociationTranspose[
         Association[]] := (Message[
          MessageName[Transpose, "nmtx"], 
          Association[]]; $Failed), 
       GeneralUtilities`AssociationTranspose[{}] := (Message[
          MessageName[Transpose, "nmtx"], {}]; $Failed), 
       GeneralUtilities`AssociationTranspose[
         PatternTest[
          Pattern[GeneralUtilities`General`PackagePrivate`assoc, 
           Blank[Association]], AssociationQ]] := 
       Block[{GeneralUtilities`General`PackagePrivate`vals, 
          GeneralUtilities`General`PackagePrivate`keys, 
          GeneralUtilities`General`PackagePrivate`ikeys}, 
         GeneralUtilities`General`PackagePrivate`vals = 
          Values[GeneralUtilities`General`PackagePrivate`assoc]; 
         GeneralUtilities`General`PackagePrivate`keys = 
          Keys[GeneralUtilities`General`PackagePrivate`assoc]; Which[
           Developer`AssociationVectorQ[
           GeneralUtilities`General`PackagePrivate`vals], 
           GeneralUtilities`General`PackagePrivate`ikeys = 
            Keys[GeneralUtilities`General`PackagePrivate`vals]; If[
             Apply[SameQ, GeneralUtilities`General`PackagePrivate`ikeys], 
             GeneralUtilities`General`PackagePrivate`ikeys = 
              First[GeneralUtilities`General`PackagePrivate`ikeys]; Null, 
             GeneralUtilities`General`PackagePrivate`vals = 
              KeyUnion[GeneralUtilities`General`PackagePrivate`vals]; 
             GeneralUtilities`General`PackagePrivate`ikeys = Keys[
                First[GeneralUtilities`General`PackagePrivate`vals]]; Null]; 
           GeneralUtilities`General`PackagePrivate`vals = Transpose[
              Values[GeneralUtilities`General`PackagePrivate`vals]]; 
           AssociationThread[GeneralUtilities`General`PackagePrivate`ikeys, 
             Map[
             AssociationThread[
              GeneralUtilities`General`PackagePrivate`keys, #]& , 
              GeneralUtilities`General`PackagePrivate`vals]], 
           And[
            VectorQ[GeneralUtilities`General`PackagePrivate`vals, ListQ], 
            ArrayDepth[GeneralUtilities`General`PackagePrivate`vals] >= 2], 
           Map[
           AssociationThread[
            GeneralUtilities`General`PackagePrivate`keys, #]& , 
            Transpose[GeneralUtilities`General`PackagePrivate`vals]], True, 
           Message[
             MessageName[Transpose, "nmtx"], 
             GeneralUtilities`General`PackagePrivate`assoc]; $Failed]], 
       GeneralUtilities`AssociationTranspose[
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[List]]] := Which[
         Developer`AssociationVectorQ[
         GeneralUtilities`General`PackagePrivate`list], 
         Block[{
          GeneralUtilities`General`PackagePrivate`keys, 
           GeneralUtilities`General`PackagePrivate`list2 = 
           GeneralUtilities`General`PackagePrivate`list}, 
          GeneralUtilities`General`PackagePrivate`keys = 
           Keys[GeneralUtilities`General`PackagePrivate`list2]; If[
            Apply[SameQ, GeneralUtilities`General`PackagePrivate`keys], 
            GeneralUtilities`General`PackagePrivate`keys = 
             First[GeneralUtilities`General`PackagePrivate`keys]; Null, 
            GeneralUtilities`General`PackagePrivate`list2 = 
             KeyUnion[GeneralUtilities`General`PackagePrivate`list2]; 
            GeneralUtilities`General`PackagePrivate`keys = Keys[
               First[GeneralUtilities`General`PackagePrivate`list2]]; Null]; 
          AssociationThread[GeneralUtilities`General`PackagePrivate`keys, 
            Transpose[
             Values[GeneralUtilities`General`PackagePrivate`list2]]]], 
         And[
          VectorQ[GeneralUtilities`General`PackagePrivate`list, ListQ], 
          ArrayDepth[GeneralUtilities`General`PackagePrivate`list] >= 2], 
         Transpose[GeneralUtilities`General`PackagePrivate`list], True, 
         Message[
           MessageName[Transpose, "nmtx"], 
           GeneralUtilities`General`PackagePrivate`list]; $Failed], 
       GeneralUtilities`AssociationTranspose[
         Pattern[GeneralUtilities`General`PackagePrivate`e, 
          Blank[]]] := (Message[
          MessageName[Transpose, "nmtx"], 
          GeneralUtilities`General`PackagePrivate`e]; $Failed), 
       GeneralUtilities`AssociationTranspose[
         BlankNullSequence[]] := $Failed, 
       TagSet[GeneralUtilities`AssociationTranspose, 
        MessageName[GeneralUtilities`AssociationTranspose, "usage"], 
        "\!\(\*RowBox[{\"AssociationTranspose\", \"[\", \
RowBox[{RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"assoc\", \
StyleBox[\"1\", \"TR\"]], \"TI\"], \",\",  StyleBox[SubscriptBox[\"assoc\", \
StyleBox[\"2\", \"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \
\"TR\"]}], \"}\"}]}], \"]\"}]\) gives an association of lists, such that part \
\!\(\*StyleBox[\"key\", \"TI\"]\), \!\(\*StyleBox[\"n\", \"TI\"]\) in the \
result is equal to part \!\(\*StyleBox[\"n\", \"TI\"]\), \!\(\*StyleBox[\"key\
\", \"TI\"]\) in the original list.\n\!\(\*RowBox[{\"AssociationTranspose\", \
\"[\", RowBox[{RowBox[{\"\[LeftAssociation]\", StyleBox[SubscriptBox[\"key\", \
StyleBox[\"1\", \"TR\"]], \"TI\"] , \"\[Rule]\",  \
StyleBox[SubscriptBox[\"list\", StyleBox[\"1\", \"TR\"]], \"TI\"], \",\",  \
StyleBox[SubscriptBox[\"key\", StyleBox[\"2\", \"TR\"]], \"TI\"] , \
\"\[Rule]\",  StyleBox[SubscriptBox[\"list\", StyleBox[\"2\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"], \
\"\[RightAssociation]\"}]}], \"]\"}]\) gives a list of associations, such \
that part \!\(\*StyleBox[\"n\", \"TI\"]\), \!\(\*StyleBox[\"key\", \"TI\"]\) \
in the result is equal to part \!\(\*StyleBox[\"key\", \"TI\"]\), \
\!\(\*StyleBox[\"n\", \"TI\"]\) in the original association.\n\
\!\(\*RowBox[{\"AssociationTranspose\", \"[\", RowBox[{RowBox[{\"\
\[LeftAssociation]\", StyleBox[SubscriptBox[\"key\", StyleBox[\"1\", \
\"TR\"]], \"TI\"] , \"\[Rule]\",  StyleBox[SubscriptBox[\"assoc\", \
StyleBox[\"1\", \"TR\"]], \"TI\"], \",\",  StyleBox[SubscriptBox[\"key\", \
StyleBox[\"2\", \"TR\"]], \"TI\"] , \"\[Rule]\",  \
StyleBox[SubscriptBox[\"assoc\", StyleBox[\"2\", \"TR\"]], \"TI\"], \",\",  \
StyleBox[\"\[Ellipsis]\", \"TR\"], \"\[RightAssociation]\"}]}], \"]\"}]\) \
gives an association of associations, such that part \
\!\(\*StyleBox[SubscriptBox[\"key\", StyleBox[\"1\", \"TR\"]], \"TI\"]\), \
\!\(\*StyleBox[SubscriptBox[\"key\", StyleBox[\"2\", \"TR\"]], \"TI\"]\) in \
the result is equal to part \!\(\*StyleBox[SubscriptBox[\"key\", StyleBox[\"2\
\", \"TR\"]], \"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"key\", StyleBox[\"1\", \
\"TR\"]], \"TI\"]\) in the original association."], 
       TypeSystem`ZSignatures`PackagePrivate`homogenizableQ[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
          Blank[List]]] := And[
         MatchQ[TypeSystem`ZSignatures`PackagePrivate`t, {
           Alternatives[
            Repeated[TypeSystem`ListT], 
            Repeated[TypeSystem`AssocT]]}], 
         Not[
          MatchQ[
          TypeSystem`ZSignatures`PackagePrivate`$homogenized = 
           TypeSystem`TypeUnion[TypeSystem`ZSignatures`PackagePrivate`t], 
           Alternatives[TypeSystem`UnknownType, TypeSystem`AnyType]]]], 
       TypeSystem`ListT = Alternatives[
         Blank[TypeSystem`Vector], 
         Blank[TypeSystem`Tuple]], TypeSystem`AssocT = Alternatives[
         Blank[TypeSystem`Assoc], 
         Blank[TypeSystem`Struct]], 
       UpSetDelayed[
        TextString[
         Pattern[TypeSystem`Summary`PackagePrivate`p, 
          Blank[TypeSystem`PatternForm]]], 
        ToString[
         Apply[
         TypeSystem`Summary`PackagePrivate`iPatternForm, 
          TypeSystem`Summary`PackagePrivate`p], InputForm]], 
       TagSetDelayed[TypeSystem`PatternForm, 
        MakeBoxes[
         TypeSystem`PatternForm[
          Pattern[TypeSystem`Summary`PackagePrivate`t, 
           Blank[]]], StandardForm], 
        Format[
         TypeSystem`Summary`PackagePrivate`iPatternForm[
         TypeSystem`Summary`PackagePrivate`t], StandardForm]], 
       TagSet[TypeSystem`PatternForm, 
        MessageName[TypeSystem`PatternForm, "usage"], 
        "PatternForm[type] formats a type as a simple pattern."], 
       TypeSystem`ZSignatures`PackagePrivate`NType[
         TypeSystem`Atom[
          Alternatives[Integer, Rational]]] := TypeSystem`RealT, 
       TypeSystem`ZSignatures`PackagePrivate`NType[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`TypeMap[
        TypeSystem`ZSignatures`PackagePrivate`NType, 
         TypeSystem`ZSignatures`PackagePrivate`t], TypeSystem`RealT = 
       TypeSystem`Atom[Real], 
       TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
         TypeSystem`Atom[
          Alternatives[Rational, Real]]] := TypeSystem`IntegerT, 
       TypeSystem`ZSignatures`PackagePrivate`ToIntegerType[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`TypeMap[
        TypeSystem`ZSignatures`PackagePrivate`ToIntegerType, 
         TypeSystem`ZSignatures`PackagePrivate`t], 
       TypeSystem`ZSignatures`PackagePrivate`QMType[
         TypeSystem`Atom[
          HoldPattern[
           Blank[Quantity]]]] := TypeSystem`RealT, 
       TypeSystem`ZSignatures`PackagePrivate`QMType[
         Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
          Blank[]]] := 
       TypeSystem`TypeMap[
        TypeSystem`ZSignatures`PackagePrivate`QMType, 
         TypeSystem`ZSignatures`PackagePrivate`t], TypeSystem`NumericTypeQ[
         TypeSystem`Atom[
          Alternatives[Integer, Real, Rational]]] := True, 
       TypeSystem`NumericTypeQ[
         TypeSystem`Vector[
          Pattern[TypeSystem`Predicates`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`NumericTypeQ[TypeSystem`Predicates`PackagePrivate`v], 
       TypeSystem`NumericTypeQ[
         Blank[]] := False, TypeSystem`RationalT = TypeSystem`Atom[Rational], 
       TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
         HoldPattern[Quantity][
          Blank[], 
          Pattern[TypeSystem`ZSignatures`PackagePrivate`t, 
           Blank[]]]] := TypeSystem`Atom[
         Quantity[1, TypeSystem`ZSignatures`PackagePrivate`t]], 
       TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
         Alternatives[
          Blank[Real], 
          Blank[Rational], 
          Blank[Real], 
          Blank[Integer]]] := TypeSystem`Atom[Real], 
       TypeSystem`ZSignatures`PackagePrivate`ToQuantityT[
         Blank[]] := TypeSystem`UnknownType, TypeSystem`TreeQ[
         Pattern[TypeSystem`Predicates`PackagePrivate`type, 
          Blank[]], 
         Pattern[TypeSystem`Predicates`PackagePrivate`patt, 
          Blank[]]] := 
       Block[{TypeSystem`Predicates`PackagePrivate`$patt = 
          TypeSystem`Predicates`PackagePrivate`patt}, 
         TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Predicates`PackagePrivate`type]], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Vector[
          Pattern[TypeSystem`Predicates`PackagePrivate`t, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`Predicates`PackagePrivate`treeq[
        TypeSystem`Predicates`PackagePrivate`t], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Struct[
          Blank[], 
          Pattern[TypeSystem`Predicates`PackagePrivate`v, 
           Blank[]]]] := 
       VectorQ[TypeSystem`Predicates`PackagePrivate`v, 
         TypeSystem`Predicates`PackagePrivate`treeq], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Tuple[
          Pattern[TypeSystem`Predicates`PackagePrivate`v, 
           Blank[]]]] := 
       VectorQ[TypeSystem`Predicates`PackagePrivate`v, 
         TypeSystem`Predicates`PackagePrivate`treeq], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Assoc[
          Blank[], 
          Pattern[TypeSystem`Predicates`PackagePrivate`v, 
           Blank[]], 
          Blank[]]] := 
       TypeSystem`Predicates`PackagePrivate`treeq[
        TypeSystem`Predicates`PackagePrivate`v], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Atom[
          TypeSystem`Enumeration[
           Pattern[TypeSystem`Predicates`PackagePrivate`v, 
            BlankSequence[]]]]] := 
       MatchQ[String, TypeSystem`Predicates`PackagePrivate`$patt], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         TypeSystem`Atom[
          Pattern[TypeSystem`Predicates`PackagePrivate`t, 
           Blank[]]]] := 
       MatchQ[TypeSystem`Predicates`PackagePrivate`t, 
         TypeSystem`Predicates`PackagePrivate`$patt], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         Alternatives[TypeSystem`AnyType, TypeSystem`UnknownType, 
          Blank[TypeSystem`FailureType]], 
         Blank[]] := Return[Indeterminate, Block], 
       TypeSystem`Predicates`PackagePrivate`treeq[
         Blank[]] := False, TypeSystem`TypeAtoms[
         Pattern[TypeSystem`Utilities`PackagePrivate`type, 
          Blank[]]] := DeleteDuplicates[
         Cases[
          ReplaceRepeated[
          TypeSystem`Utilities`PackagePrivate`type, TypeSystem`Assoc[
             Pattern[TypeSystem`Utilities`PackagePrivate`x, 
              Blank[]], 
             Pattern[TypeSystem`Utilities`PackagePrivate`y, 
              Blank[]], 
             Blank[]] :> 
           TypeSystem`Vector[TypeSystem`Utilities`PackagePrivate`y]], 
          TypeSystem`Atom[
            Pattern[TypeSystem`Utilities`PackagePrivate`a, 
             Blank[]]] :> TypeSystem`Utilities`PackagePrivate`a, {
          0, Infinity}]], TypeSystem`Summary`PackagePrivate`lengthBox[
         Pattern[TypeSystem`Summary`PackagePrivate`b, 
          Blank[]], TypeSystem`AnyLength] := 
       TypeSystem`Summary`PackagePrivate`b, 
       TypeSystem`Summary`PackagePrivate`lengthBox[
         Pattern[TypeSystem`Summary`PackagePrivate`b, 
          Blank[]], 
         Pattern[TypeSystem`Summary`PackagePrivate`n, 
          Blank[]]] := SubscriptBox[TypeSystem`Summary`PackagePrivate`b, 
         TypeSystem`Summary`PackagePrivate`lengthFieldBox[
         TypeSystem`Summary`PackagePrivate`n]], 
       TypeSystem`Summary`PackagePrivate`lengthFieldBox[
        TypeSystem`UnknownLength] := 
       StyleBox["?", FontColor -> GrayLevel[0.5]], 
       TypeSystem`Summary`PackagePrivate`lengthFieldBox[
         Pattern[TypeSystem`Summary`PackagePrivate`n, 
          Blank[Integer]]] := StyleBox[
         IntegerString[TypeSystem`Summary`PackagePrivate`n], FontFamily -> 
         "Arial", FontWeight -> Normal], 
       TypeSystem`Summary`PackagePrivate`listBox[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[List]]] := RowBox[{"{", 
          RowBox[
           Riffle[
           TypeSystem`Summary`PackagePrivate`t, 
            TypeSystem`Summary`PackagePrivate`$comma]], "}"}], 
       TypeSystem`Summary`PackagePrivate`$comma = 
       StyleBox[",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
       TypeSystem`Summary`PackagePrivate`assocBox[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[List]]] := RowBox[{"\[LeftAssociation]", 
          RowBox[
           Riffle[
            Apply[
            TypeSystem`Summary`PackagePrivate`ruleBox, 
             TypeSystem`Summary`PackagePrivate`t, {1}], 
            TypeSystem`Summary`PackagePrivate`$comma]], 
          "\[RightAssociation]"}], TypeSystem`Summary`PackagePrivate`ruleBox[
         Pattern[TypeSystem`Summary`PackagePrivate`k, 
          Blank[]], 
         Pattern[TypeSystem`Summary`PackagePrivate`v, 
          Blank[]]] := RowBox[{TypeSystem`Summary`PackagePrivate`k, 
          TypeSystem`Summary`PackagePrivate`deemph["\[Rule]"], 
          TypeSystem`Summary`PackagePrivate`v}], 
       TypeSystem`Summary`PackagePrivate`deemph[
         Pattern[TypeSystem`Summary`PackagePrivate`x, 
          Blank[]]] := 
       StyleBox[
        TypeSystem`Summary`PackagePrivate`x, FontColor -> GrayLevel[0.65], 
         FontWeight -> "Thin"], 
       Attributes[TypeSystem`Summary`PackagePrivate`fieldBox] = {
        HoldAllComplete}, TypeSystem`Summary`PackagePrivate`fieldBox[
         Pattern[TypeSystem`Summary`PackagePrivate`k, 
          Blank[]], 
         Pattern[TypeSystem`Summary`PackagePrivate`v, 
          Blank[]]] := {
         StyleBox[
         TypeSystem`Summary`PackagePrivate`k, FontColor -> Brown, FontFamily -> 
          "Verdana", FontWeight -> Normal], 
         TypeSystem`Summary`PackagePrivate`typeBox[
         TypeSystem`Summary`PackagePrivate`v]}, 
       TypeSystem`Summary`PackagePrivate`symbolAbbrev[
         Pattern[TypeSystem`Summary`PackagePrivate`t, 
          Blank[]]] := 
       Replace[TypeSystem`Summary`PackagePrivate`t, {
         Rational :> "Rat", Real :> "Real", Integer :> "Int", String :> "Str",
           TypeSystem`Boolean :> "Bool", Blank[] :> StringTake[
            SymbolName[TypeSystem`Summary`PackagePrivate`t], 1]}], 
       TypeSystem`$AtomTypePattern = HoldPattern[
         Alternatives[Integer, Real, String, TypeSystem`Boolean, Rational, 
          TypeSystem`Enumeration[
           BlankSequence[String]], DateObject, TimeObject, TemporalData, 
          Image, 
          Entity[
           Blank[String]], Entity, 
          PatternTest[
           Blank[Quantity], TypeSystem`ValidQuantityQ], GeoPosition, Graph, 
          Graphics, GeoGraphics, Sound, ResourceObject, CloudObject, File, 
          URL, Hyperlink, IPAddress, HTTPResponse, HTTPRequest, 
          TypeSystem`AnyType]], 
       TagSet[TypeSystem`$AtomTypePattern, 
        MessageName[TypeSystem`$AtomTypePattern, "usage"], 
        "$AtomTypePattern is a pattern that matches only the allowed argument \
Atom"], Attributes[TypeSystem`ValidQuantityQ] = {HoldAll}, 
       TypeSystem`ValidQuantityQ[
         Quantity[None, 
          Blank[]]] := True, TypeSystem`ValidQuantityQ[
         Quantity[
          MixedMagnitude[{
            PatternTest[
             BlankSequence[], System`Dump`HeldNumberQ]}], 
          Blank[]]] := True, TypeSystem`ValidQuantityQ[
         Quantity[
          PatternTest[
           Pattern[TypeSystem`Predicates`PackagePrivate`n, 
            Blank[]], System`Dump`HeldNumberQ], 
          Blank[]]] := True, TypeSystem`ValidQuantityQ[
         Blank[]] := False, 
       Attributes[System`Dump`HeldNumberQ] = {HoldAllComplete}, 
       System`Dump`HeldNumberQ[Pattern[System`Dump`numer, 
           Blank[]]/Pattern[System`Dump`denom, 
          Blank[]]] := And[
         System`Dump`HeldIntegerQ[System`Dump`numer], 
         System`Dump`HeldIntegerQ[System`Dump`denom]], System`Dump`HeldNumberQ[
         Pattern[System`Dump`z, 
          Blank[]]] := NumberQ[
         Unevaluated[System`Dump`z]], 
       Attributes[System`Dump`HeldIntegerQ] = {HoldAllComplete}, 
       System`Dump`HeldIntegerQ[
         Pattern[System`Dump`n, 
          Blank[Integer]]] := IntegerQ[
         Unevaluated[System`Dump`n]], System`Dump`HeldIntegerQ[
         Blank[]] = False, $CellContext`tempDataAssoc = Association[{
           GeoPosition[{42.386333, -71.222367}], 
           DateObject[{2019, 6, 25, 7, 34, 44}, "Instant", "Gregorian", -4.]} -> 
         Quantity[15, "DegreesCelsius"], {
           GeoPosition[{42.386455, -71.222277}], 
           DateObject[{2019, 6, 24, 7, 33, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[18, "DegreesCelsius"], {
           GeoPosition[{42.386304, -71.222405}], 
           
           DateObject[{2019, 6, 23, 15, 32, 53}, "Instant", 
            "Gregorian", -4.]} -> Quantity[27, "DegreesCelsius"], {
           GeoPosition[{51.071753, -114.091483}], 
           DateObject[{2019, 6, 22, 9, 30, 51}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071833, -114.091539}], 
           DateObject[{2019, 6, 21, 15, 55, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071653, -114.091445}], 
           
           DateObject[{2019, 6, 20, 10, 10, 17}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071803, -114.091511}], 
           DateObject[{2019, 6, 19, 9, 59, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.071893, -114.091518}], 
           DateObject[{2019, 6, 18, 8, 37, 15}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.07182, -114.091456}], 
           
           DateObject[{2019, 6, 17, 10, 11, 56}, "Instant", 
            "Gregorian", -4.]} -> Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.071654, -114.091343}], 
           DateObject[{2019, 6, 16, 8, 54, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.07169, -114.091564}], 
           DateObject[{2019, 6, 15, 9, 4, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.071745, -114.091492}], 
           
           DateObject[{2019, 6, 14, 10, 16, 29}, "Instant", 
            "Gregorian", -4.]} -> Quantity[14, "DegreesCelsius"], {
           GeoPosition[{51.071744, -114.091478}], 
           DateObject[{2019, 6, 13, 9, 58, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[15, "DegreesCelsius"], {
           GeoPosition[{51.071715, -114.091484}], 
           DateObject[{2019, 6, 12, 8, 50, 44}, "Instant", "Gregorian", -4.]} -> 
         Quantity[14, "DegreesCelsius"], {
           GeoPosition[{51.071666, -114.091485}], 
           DateObject[{2019, 6, 11, 9, 3, 30}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.071804, -114.091577}], 
           
           DateObject[{2019, 6, 10, 10, 24, 55}, "Instant", 
            "Gregorian", -4.]} -> Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.071812, -114.091531}], 
           DateObject[{2019, 6, 9, 8, 53, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.071759, -114.091516}], 
           DateObject[{2019, 6, 8, 8, 17, 20}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.071666, -114.091529}], 
           DateObject[{2019, 6, 7, 9, 31, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.071727, -114.091547}], 
           DateObject[{2019, 6, 6, 9, 52, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.071728, -114.09154}], 
           DateObject[{2019, 6, 5, 9, 47, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.071785, -114.091548}], 
           DateObject[{2019, 6, 4, 9, 2, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.071817, -114.091573}], 
           DateObject[{2019, 6, 3, 12, 21, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[19, "DegreesCelsius"], {
           GeoPosition[{51.071788, -114.091545}], 
           DateObject[{2019, 6, 2, 9, 28, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.071772, -114.091442}], 
           DateObject[{2019, 6, 1, 9, 20, 47}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071651, -114.091491}], 
           
           DateObject[{2019, 5, 31, 10, 10, 47}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.071806, -114.091578}], 
           DateObject[{2019, 5, 30, 9, 57, 45}, "Instant", "Gregorian", -4.]} -> 
         Quantity[14, "DegreesCelsius"], {
           GeoPosition[{51.071966, -114.091507}], 
           
           DateObject[{2019, 5, 29, 10, 16, 35}, "Instant", 
            "Gregorian", -4.]} -> Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.071713, -114.091571}], 
           DateObject[{2019, 5, 28, 8, 34, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.071758, -114.091539}], 
           
           DateObject[{2019, 5, 27, 10, 17, 41}, "Instant", 
            "Gregorian", -4.]} -> Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.07188, -114.091585}], 
           DateObject[{2019, 5, 26, 9, 33, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.071789, -114.091518}], 
           
           DateObject[{2019, 5, 25, 10, 15, 45}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071747, -114.091524}], 
           DateObject[{2019, 5, 24, 9, 27, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071733, -114.091586}], 
           
           DateObject[{2019, 5, 23, 10, 20, 22}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071937, -114.09153}], 
           DateObject[{2019, 5, 22, 9, 54, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.071716, -114.091479}], 
           DateObject[{2019, 5, 21, 9, 1, 45}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.071854, -114.091656}], 
           DateObject[{2019, 5, 20, 9, 18, 40}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.071811, -114.091572}], 
           DateObject[{2019, 5, 19, 9, 23, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.071597, -114.091556}], 
           DateObject[{2019, 5, 18, 8, 48, 33}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.071595, -114.09146}], 
           DateObject[{2019, 5, 17, 8, 2, 7}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.071774, -114.091548}], 
           
           DateObject[{2019, 5, 16, 16, 50, 34}, "Instant", 
            "Gregorian", -4.]} -> Missing["NotAvailable"], {
           GeoPosition[{46.809099, -71.219832}], 
           DateObject[{2019, 5, 15, 7, 59, 53}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{46.809072, -71.21997}], 
           DateObject[{2019, 5, 13, 7, 54, 4}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{46.809328, -71.217034}], 
           DateObject[{2019, 5, 12, 8, 31, 5}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{46.80905, -71.219626}], 
           DateObject[{2019, 5, 11, 7, 12, 44}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{41.483057, -81.702698}], 
           DateObject[{2019, 5, 9, 8, 1, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[18, "DegreesCelsius"], {
           GeoPosition[{41.483304, -81.702632}], 
           DateObject[{2019, 5, 8, 6, 56, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{41.483119, -81.702421}], 
           DateObject[{2019, 5, 7, 8, 20, 9}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{41.483031, -81.702584}], 
           DateObject[{2019, 5, 6, 8, 6, 31}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{41.483198, -81.70258}], 
           DateObject[{2019, 5, 5, 6, 57, 49}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{41.48329, -81.702439}], 
           DateObject[{2019, 5, 4, 9, 41, 40}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{41.483194, -81.703008}], 
           DateObject[{2019, 5, 3, 7, 58, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{41.483198, -81.702748}], 
           DateObject[{2019, 5, 2, 8, 42, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[14, "DegreesCelsius"], {
           GeoPosition[{51.071762, -114.091482}], 
           DateObject[{2019, 5, 1, 6, 18, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071697, -114.091476}], 
           DateObject[{2019, 4, 30, 8, 34, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071859, -114.091413}], 
           DateObject[{2019, 4, 29, 8, 45, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071785, -114.091446}], 
           DateObject[{2019, 4, 28, 9, 9, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071738, -114.091453}], 
           DateObject[{2019, 4, 27, 7, 56, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071813, -114.091474}], 
           DateObject[{2019, 4, 26, 8, 11, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071753, -114.091398}], 
           DateObject[{2019, 4, 25, 8, 43, 29}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.071704, -114.091502}], 
           DateObject[{2019, 4, 24, 8, 32, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071763, -114.091494}], 
           DateObject[{2019, 4, 23, 8, 25, 33}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{51.07173, -114.091514}], 
           DateObject[{2019, 4, 22, 8, 49, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071768, -114.091518}], 
           
           DateObject[{2019, 4, 21, 10, 10, 19}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.071784, -114.091539}], 
           
           DateObject[{2019, 4, 20, 10, 48, 55}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.07177, -114.091482}], 
           DateObject[{2019, 4, 19, 8, 52, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.071818, -114.091544}], 
           DateObject[{2019, 4, 18, 9, 21, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.07182, -114.091383}], 
           DateObject[{2019, 4, 17, 8, 34, 30}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071699, -114.091493}], 
           DateObject[{2019, 4, 16, 8, 12, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.07198, -114.091482}], 
           DateObject[{2019, 4, 15, 8, 7, 50}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071757, -114.091532}], 
           DateObject[{2019, 4, 14, 9, 22, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071835, -114.091554}], 
           DateObject[{2019, 4, 13, 10, 5, 43}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071708, -114.091502}], 
           DateObject[{2019, 4, 12, 8, 8, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.071791, -114.09151}], 
           DateObject[{2019, 4, 11, 8, 38, 30}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071918, -114.091487}], 
           DateObject[{2019, 4, 10, 8, 52, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071751, -114.091463}], 
           DateObject[{2019, 4, 9, 8, 22, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.071805, -114.091548}], 
           DateObject[{2019, 4, 8, 21, 48, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{51.630017, -121.3}], 
           DateObject[{2019, 4, 7, 15, 44, 46}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.63007, -121.300014}], 
           DateObject[{2019, 4, 6, 20, 8, 30}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.071655, -114.09139}], 
           DateObject[{2019, 4, 5, 4, 39, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071772, -114.091507}], 
           DateObject[{2019, 4, 4, 6, 18, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071728, -114.091533}], 
           DateObject[{2019, 4, 3, 8, 15, 34}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071774, -114.091457}], 
           DateObject[{2019, 4, 2, 8, 26, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071754, -114.091424}], 
           DateObject[{2019, 4, 1, 8, 37, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071778, -114.091502}], 
           DateObject[{2019, 3, 31, 9, 39, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071698, -114.091465}], 
           
           DateObject[{2019, 3, 30, 10, 53, 15}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071826, -114.091559}], 
           DateObject[{2019, 3, 29, 8, 26, 49}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.071748, -114.091512}], 
           DateObject[{2019, 3, 28, 9, 7, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071809, -114.091413}], 
           DateObject[{2019, 3, 27, 8, 53, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071737, -114.091513}], 
           DateObject[{2019, 3, 26, 8, 51, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071711, -114.09141}], 
           DateObject[{2019, 3, 25, 8, 25, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{53.507345, -113.286324}], 
           DateObject[{2019, 3, 24, 8, 56, 20}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{53.507386, -113.286157}], 
           DateObject[{2019, 3, 23, 8, 57, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071769, -114.091438}], 
           DateObject[{2019, 3, 22, 8, 55, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071607, -114.091421}], 
           DateObject[{2019, 3, 21, 8, 53, 51}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071685, -114.091521}], 
           DateObject[{2019, 3, 20, 8, 52, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071738, -114.091463}], 
           DateObject[{2019, 3, 19, 8, 41, 24}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071679, -114.091449}], 
           DateObject[{2019, 3, 18, 8, 29, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071722, -114.091589}], 
           DateObject[{2019, 3, 17, 11, 4, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071756, -114.091482}], 
           DateObject[{2019, 3, 16, 8, 14, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071668, -114.091475}], 
           DateObject[{2019, 3, 15, 7, 53, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071817, -114.091502}], 
           DateObject[{2019, 3, 14, 9, 9, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071752, -114.091474}], 
           DateObject[{2019, 3, 13, 8, 31, 58}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071722, -114.091506}], 
           DateObject[{2019, 3, 12, 8, 20, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.071853, -114.091555}], 
           DateObject[{2019, 3, 11, 8, 54, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071801, -114.091501}], 
           
           DateObject[{2019, 3, 10, 10, 51, 16}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071756, -114.09143}], 
           DateObject[{2019, 3, 9, 10, 12, 40}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.071724, -114.091462}], 
           DateObject[{2019, 3, 8, 8, 5, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.071743, -114.091468}], 
           DateObject[{2019, 3, 7, 8, 25, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.071768, -114.091478}], 
           DateObject[{2019, 3, 6, 8, 35, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-19, "DegreesCelsius"], {
           GeoPosition[{51.071748, -114.091475}], 
           DateObject[{2019, 3, 5, 5, 45, 51}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.071693, -114.09151}], 
           DateObject[{2019, 3, 4, 8, 51, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-21, "DegreesCelsius"], {
           GeoPosition[{51.071745, -114.09142}], 
           DateObject[{2019, 3, 3, 10, 5, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-26, "DegreesCelsius"], {
           GeoPosition[{51.07171, -114.091522}], 
           DateObject[{2019, 3, 2, 9, 42, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-28, "DegreesCelsius"], {
           GeoPosition[{51.071703, -114.091422}], 
           DateObject[{2019, 3, 1, 8, 11, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.071754, -114.091379}], 
           DateObject[{2019, 2, 28, 8, 19, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{51.07176, -114.091471}], 
           DateObject[{2019, 2, 27, 8, 28, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-20, "DegreesCelsius"], {
           GeoPosition[{51.071722, -114.091465}], 
           DateObject[{2019, 2, 26, 8, 12, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-24, "DegreesCelsius"], {
           GeoPosition[{51.071755, -114.091406}], 
           DateObject[{2019, 2, 25, 8, 15, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-23, "DegreesCelsius"], {
           GeoPosition[{51.071739, -114.091437}], 
           DateObject[{2019, 2, 24, 8, 54, 58}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{51.071754, -114.091462}], 
           DateObject[{2019, 2, 23, 9, 47, 11}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.071663, -114.091475}], 
           DateObject[{2019, 2, 22, 9, 1, 15}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-15, "DegreesCelsius"], {
           GeoPosition[{51.07175, -114.091422}], 
           DateObject[{2019, 2, 21, 8, 45, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-15, "DegreesCelsius"], {
           GeoPosition[{51.07173, -114.091418}], 
           
           DateObject[{2019, 2, 20, 10, 45, 44}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.071806, -114.091583}], 
           
           DateObject[{2019, 2, 19, 10, 32, 59}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.071763, -114.091496}], 
           DateObject[{2019, 2, 18, 9, 52, 45}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-20, "DegreesCelsius"], {
           GeoPosition[{51.071816, -114.091527}], 
           
           DateObject[{2019, 2, 17, 11, 14, 28}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-17, "DegreesCelsius"], {
           GeoPosition[{51.071732, -114.091456}], 
           DateObject[{2019, 2, 16, 9, 38, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{51.071668, -114.091483}], 
           DateObject[{2019, 2, 15, 7, 54, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-22, "DegreesCelsius"], {
           GeoPosition[{51.071696, -114.0915}], 
           DateObject[{2019, 2, 14, 8, 29, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-20, "DegreesCelsius"], {
           GeoPosition[{51.071773, -114.091455}], 
           DateObject[{2019, 2, 13, 8, 22, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-20, "DegreesCelsius"], {
           GeoPosition[{51.071721, -114.091492}], 
           DateObject[{2019, 2, 12, 8, 48, 31}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-27, "DegreesCelsius"], {
           GeoPosition[{51.071737, -114.091479}], 
           DateObject[{2019, 2, 11, 8, 14, 50}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-24, "DegreesCelsius"], {
           GeoPosition[{51.071752, -114.091488}], 
           DateObject[{2019, 2, 10, 9, 36, 10}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-28, "DegreesCelsius"], {
           GeoPosition[{51.071729, -114.091474}], 
           DateObject[{2019, 2, 9, 9, 40, 52}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-26, "DegreesCelsius"], {
           GeoPosition[{51.07173, -114.091484}], 
           DateObject[{2019, 2, 8, 7, 51, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-13, "DegreesCelsius"], {
           GeoPosition[{51.071757, -114.091457}], 
           DateObject[{2019, 2, 7, 8, 22, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-21, "DegreesCelsius"], {
           GeoPosition[{51.071775, -114.091501}], 
           DateObject[{2019, 2, 6, 8, 31, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-25, "DegreesCelsius"], {
           GeoPosition[{51.071681, -114.091408}], 
           DateObject[{2019, 2, 5, 9, 17, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-27, "DegreesCelsius"], {
           GeoPosition[{51.071766, -114.09177}], 
           DateObject[{2019, 2, 4, 8, 13, 11}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-27, "DegreesCelsius"], {
           GeoPosition[{51.071725, -114.091508}], 
           DateObject[{2019, 2, 3, 10, 38, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-25, "DegreesCelsius"], {
           GeoPosition[{51.0717, -114.091503}], 
           DateObject[{2019, 2, 2, 9, 25, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-17, "DegreesCelsius"], {
           GeoPosition[{51.071941, -114.091682}], 
           DateObject[{2019, 2, 1, 8, 31, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071852, -114.091511}], 
           
           DateObject[{2019, 1, 31, 10, 15, 34}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071775, -114.091412}], 
           DateObject[{2019, 1, 30, 8, 14, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-9, "DegreesCelsius"], {
           GeoPosition[{51.071954, -114.091793}], 
           DateObject[{2019, 1, 29, 8, 23, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.07194, -114.091716}], 
           DateObject[{2019, 1, 28, 8, 10, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071892, -114.09169}], 
           
           DateObject[{2019, 1, 27, 10, 17, 20}, "Instant", 
            "Gregorian", -4.]} -> Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.071798, -114.091405}], 
           DateObject[{2019, 1, 26, 9, 5, 44}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071905, -114.091585}], 
           DateObject[{2019, 1, 25, 8, 11, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.071784, -114.091512}], 
           DateObject[{2019, 1, 24, 8, 13, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-15, "DegreesCelsius"], {
           GeoPosition[{51.071758, -114.091555}], 
           DateObject[{2019, 1, 23, 8, 18, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071731, -114.091599}], 
           DateObject[{2019, 1, 22, 8, 52, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071879, -114.091426}], 
           DateObject[{2019, 1, 21, 7, 51, 6}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071843, -114.091617}], 
           DateObject[{2019, 1, 20, 9, 4, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071874, -114.09183}], 
           DateObject[{2019, 1, 19, 8, 7, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.071898, -114.091857}], 
           DateObject[{2019, 1, 18, 8, 25, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-17, "DegreesCelsius"], {
           GeoPosition[{51.071807, -114.091557}], 
           DateObject[{2019, 1, 17, 8, 4, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.071804, -114.091563}], 
           DateObject[{2019, 1, 16, 8, 32, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071793, -114.091478}], 
           DateObject[{2019, 1, 15, 8, 44, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071839, -114.091537}], 
           DateObject[{2019, 1, 14, 8, 31, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.071937, -114.091534}], 
           DateObject[{2019, 1, 13, 9, 40, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.071799, -114.091507}], 
           DateObject[{2019, 1, 12, 8, 24, 20}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.071804, -114.091551}], 
           DateObject[{2019, 1, 11, 8, 4, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071912, -114.091513}], 
           DateObject[{2019, 1, 10, 8, 42, 11}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071863, -114.091813}], 
           DateObject[{2019, 1, 9, 8, 15, 44}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071867, -114.091533}], 
           DateObject[{2019, 1, 8, 10, 15, 33}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.071828, -114.091535}], 
           DateObject[{2019, 1, 7, 9, 18, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071829, -114.091614}], 
           DateObject[{2019, 1, 6, 10, 22, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071821, -114.091598}], 
           DateObject[{2019, 1, 5, 8, 20, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071865, -114.091766}], 
           DateObject[{2019, 1, 4, 9, 37, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071847, -114.091658}], 
           DateObject[{2019, 1, 3, 10, 45, 51}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.071905, -114.091734}], 
           DateObject[{2019, 1, 2, 9, 48, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.071941, -114.091412}], 
           DateObject[{2019, 1, 1, 9, 54, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071881, -114.091747}], 
           
           DateObject[{2018, 12, 31, 10, 23, 59}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{51.071855, -114.091419}], 
           
           DateObject[{2018, 12, 30, 9, 55, 30}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071862, -114.091741}], 
           
           DateObject[{2018, 12, 29, 9, 48, 41}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.07187, -114.091674}], 
           
           DateObject[{2018, 12, 28, 8, 57, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071832, -114.091516}], 
           
           DateObject[{2018, 12, 27, 11, 7, 58}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071905, -114.091923}], 
           
           DateObject[{2018, 12, 26, 8, 58, 35}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071746, -114.091554}], 
           
           DateObject[{2018, 12, 25, 8, 54, 20}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{53.507315, -113.286054}], 
           
           DateObject[{2018, 12, 24, 8, 40, 19}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{53.507405, -113.286037}], 
           
           DateObject[{2018, 12, 23, 9, 10, 39}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{53.507378, -113.28629}], 
           
           DateObject[{2018, 12, 22, 8, 11, 55}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{53.507453, -113.286224}], 
           
           DateObject[{2018, 12, 21, 8, 20, 35}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071753, -114.091461}], 
           
           DateObject[{2018, 12, 20, 9, 32, 36}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071753, -114.091582}], 
           
           DateObject[{2018, 12, 19, 8, 51, 43}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.071843, -114.091652}], 
           
           DateObject[{2018, 12, 18, 10, 40, 18}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.071899, -114.09154}], 
           
           DateObject[{2018, 12, 17, 9, 19, 55}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071802, -114.091516}], 
           
           DateObject[{2018, 12, 16, 8, 21, 55}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.071832, -114.091724}], 
           DateObject[{2018, 12, 15, 9, 36, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.071867, -114.09155}], 
           
           DateObject[{2018, 12, 14, 9, 14, 45}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071908, -114.091793}], 
           
           DateObject[{2018, 12, 13, 8, 47, 53}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071798, -114.09152}], 
           
           DateObject[{2018, 12, 12, 8, 39, 26}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071926, -114.091619}], 
           
           DateObject[{2018, 12, 11, 17, 45, 42}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{44.988175, -122.988148}], 
           DateObject[{2018, 12, 10, 7, 5, 58}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071867, -114.092013}], 
           DateObject[{2018, 12, 9, 7, 9, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071748, -114.09156}], 
           DateObject[{2018, 12, 8, 9, 14, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071863, -114.091562}], 
           DateObject[{2018, 12, 7, 8, 23, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-13, "DegreesCelsius"], {
           GeoPosition[{51.071841, -114.091495}], 
           DateObject[{2018, 12, 6, 10, 3, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-17, "DegreesCelsius"], {
           GeoPosition[{51.071871, -114.091568}], 
           DateObject[{2018, 12, 5, 9, 34, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071712, -114.091566}], 
           DateObject[{2018, 12, 4, 9, 20, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071793, -114.091516}], 
           DateObject[{2018, 12, 3, 8, 41, 51}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.071811, -114.091529}], 
           DateObject[{2018, 12, 2, 9, 22, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.071763, -114.091511}], 
           
           DateObject[{2018, 12, 1, 12, 23, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.071916, -114.091772}], 
           
           DateObject[{2018, 11, 30, 8, 27, 52}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.071941, -114.091589}], 
           
           DateObject[{2018, 11, 29, 9, 51, 45}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071803, -114.091535}], 
           DateObject[{2018, 11, 28, 8, 28, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.071866, -114.091549}], 
           
           DateObject[{2018, 11, 27, 9, 25, 48}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.07189, -114.091576}], 
           
           DateObject[{2018, 11, 26, 9, 16, 18}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071851, -114.091779}], 
           
           DateObject[{2018, 11, 25, 8, 50, 38}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.07185, -114.091492}], 
           
           DateObject[{2018, 11, 24, 9, 23, 28}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.071822, -114.09151}], 
           DateObject[{2018, 11, 23, 8, 7, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071791, -114.091548}], 
           
           DateObject[{2018, 11, 22, 10, 16, 28}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.071894, -114.091592}], 
           DateObject[{2018, 11, 21, 9, 23, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071841, -114.091536}], 
           
           DateObject[{2018, 11, 20, 8, 53, 54}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.071878, -114.091634}], 
           
           DateObject[{2018, 11, 19, 8, 52, 12}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.071827, -114.091533}], 
           DateObject[{2018, 11, 18, 9, 36, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.071848, -114.09153}], 
           
           DateObject[{2018, 11, 17, 9, 24, 31}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-13, "DegreesCelsius"], {
           GeoPosition[{51.071813, -114.09151}], 
           
           DateObject[{2018, 11, 16, 11, 9, 47}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.071921, -114.091602}], 
           
           DateObject[{2018, 11, 15, 7, 29, 25}, "Instant", 
            "Gregorian", -4.]} -> Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.071934, -114.091588}], 
           
           DateObject[{2018, 11, 14, 7, 27, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[14, "DegreesCelsius"], {
           GeoPosition[{51.0718, -114.091498}], 
           
           DateObject[{2018, 11, 13, 10, 24, 21}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.071904, -114.091522}], 
           DateObject[{2018, 11, 12, 9, 30, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.071876, -114.091797}], 
           
           DateObject[{2018, 11, 11, 9, 26, 34}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071934, -114.091595}], 
           
           DateObject[{2018, 11, 10, 8, 50, 38}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.071834, -114.091513}], 
           DateObject[{2018, 11, 9, 7, 55, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.071783, -114.091473}], 
           DateObject[{2018, 11, 8, 8, 12, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.071783, -114.091516}], 
           DateObject[{2018, 11, 7, 8, 50, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.071863, -114.091503}], 
           DateObject[{2018, 11, 6, 9, 40, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-9, "DegreesCelsius"], {
           GeoPosition[{51.071775, -114.091486}], 
           DateObject[{2018, 11, 5, 7, 16, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.071822, -114.091625}], 
           DateObject[{2018, 11, 4, 9, 8, 52}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.071844, -114.091454}], 
           DateObject[{2018, 11, 3, 9, 20, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.071747, -114.091517}], 
           DateObject[{2018, 11, 2, 8, 22, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091758, -114.158234}], 
           DateObject[{2018, 11, 1, 8, 24, 34}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091802, -114.158188}], 
           
           DateObject[{2018, 10, 31, 8, 21, 20}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091787, -114.158173}], 
           DateObject[{2018, 10, 30, 9, 8, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091739, -114.158236}], 
           DateObject[{2018, 10, 29, 8, 23, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091815, -114.158283}], 
           
           DateObject[{2018, 10, 28, 9, 49, 12}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091798, -114.158163}], 
           DateObject[{2018, 10, 27, 9, 29, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.091811, -114.158199}], 
           
           DateObject[{2018, 10, 26, 9, 43, 59}, "Instant", 
            "Gregorian", -4.]} -> Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091787, -114.158227}], 
           
           DateObject[{2018, 10, 25, 9, 11, 42}, "Instant", 
            "Gregorian", -4.]} -> Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091775, -114.158278}], 
           
           DateObject[{2018, 10, 24, 8, 44, 34}, "Instant", 
            "Gregorian", -4.]} -> Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.091771, -114.158189}], 
           
           DateObject[{2018, 10, 23, 8, 42, 50}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091722, -114.158255}], 
           
           DateObject[{2018, 10, 22, 8, 25, 13}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091743, -114.158207}], 
           DateObject[{2018, 10, 21, 7, 21, 47}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.088565, -114.166484}], 
           
           DateObject[{2018, 10, 20, 8, 49, 34}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091839, -114.158459}], 
           
           DateObject[{2018, 10, 19, 8, 24, 54}, "Instant", 
            "Gregorian", -4.]} -> Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.091797, -114.15828}], 
           
           DateObject[{2018, 10, 18, 9, 29, 55}, "Instant", 
            "Gregorian", -4.]} -> Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.060616, -114.115251}], 
           DateObject[{2018, 10, 17, 7, 13, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.060632, -114.115184}], 
           DateObject[{2018, 10, 16, 9, 9, 50}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.060564, -114.115261}], 
           DateObject[{2018, 10, 15, 8, 23, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.091775, -114.158423}], 
           
           DateObject[{2018, 10, 14, 8, 39, 17}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091698, -114.158268}], 
           
           DateObject[{2018, 10, 13, 8, 46, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.09179, -114.158352}], 
           DateObject[{2018, 10, 12, 9, 9, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091689, -114.158295}], 
           
           DateObject[{2018, 10, 11, 8, 54, 20}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.09175, -114.158274}], 
           DateObject[{2018, 10, 10, 8, 52, 41}, "Instant", "Gregorian", -4.]}
           -> Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.09171, -114.158251}], 
           DateObject[{2018, 10, 9, 7, 35, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{53.507359, -113.286254}], 
           DateObject[{2018, 10, 8, 8, 54, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{53.507301, -113.286426}], 
           DateObject[{2018, 10, 7, 7, 51, 47}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091706, -114.158284}], 
           DateObject[{2018, 10, 6, 8, 47, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.0918, -114.158224}], 
           DateObject[{2018, 10, 5, 7, 54, 44}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091576, -114.15887}], 
           DateObject[{2018, 10, 4, 8, 31, 15}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091825, -114.158256}], 
           DateObject[{2018, 10, 3, 8, 32, 58}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.091717, -114.158509}], 
           DateObject[{2018, 10, 2, 8, 45, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091765, -114.158261}], 
           DateObject[{2018, 10, 1, 8, 31, 26}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.09182, -114.158154}], 
           DateObject[{2018, 9, 30, 9, 29, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091776, -114.15834}], 
           DateObject[{2018, 9, 29, 9, 46, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091719, -114.158592}], 
           DateObject[{2018, 9, 28, 10, 9, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091779, -114.158379}], 
           DateObject[{2018, 9, 27, 9, 25, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091747, -114.158461}], 
           DateObject[{2018, 9, 26, 9, 34, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.0917, -114.158158}], 
           DateObject[{2018, 9, 25, 9, 59, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.0918, -114.15839}], 
           DateObject[{2018, 9, 24, 8, 33, 10}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091749, -114.158173}], 
           DateObject[{2018, 9, 23, 9, 44, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091737, -114.158222}], 
           DateObject[{2018, 9, 22, 9, 46, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091689, -114.158638}], 
           DateObject[{2018, 9, 21, 8, 6, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.091759, -114.158387}], 
           DateObject[{2018, 9, 20, 7, 53, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.091765, -114.158589}], 
           DateObject[{2018, 9, 19, 8, 23, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091704, -114.158649}], 
           DateObject[{2018, 9, 18, 7, 48, 50}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091768, -114.158389}], 
           DateObject[{2018, 9, 17, 8, 36, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091732, -114.158569}], 
           
           DateObject[{2018, 9, 16, 10, 39, 37}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091729, -114.158616}], 
           DateObject[{2018, 9, 15, 8, 2, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091811, -114.158297}], 
           DateObject[{2018, 9, 14, 8, 59, 43}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.0918, -114.158398}], 
           DateObject[{2018, 9, 13, 8, 51, 26}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.06058, -114.1152}], 
           DateObject[{2018, 9, 12, 8, 39, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.060551, -114.115069}], 
           DateObject[{2018, 9, 11, 8, 44, 26}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.060626, -114.115109}], 
           DateObject[{2018, 9, 10, 7, 8, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.091758, -114.158459}], 
           DateObject[{2018, 9, 9, 10, 29, 9}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.091745, -114.158217}], 
           DateObject[{2018, 9, 8, 8, 26, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[15, "DegreesCelsius"], {
           GeoPosition[{51.091743, -114.158232}], 
           DateObject[{2018, 9, 7, 8, 16, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.091688, -114.158394}], 
           DateObject[{2018, 9, 6, 8, 4, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.091685, -114.158742}], 
           DateObject[{2018, 9, 5, 8, 44, 49}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091631, -114.158547}], 
           DateObject[{2018, 9, 4, 8, 12, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091783, -114.158331}], 
           DateObject[{2018, 9, 3, 7, 35, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{49.299726, -117.657973}], 
           DateObject[{2018, 9, 2, 6, 36, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{49.299871, -117.657488}], 
           DateObject[{2018, 9, 1, 6, 17, 10}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.299861, -117.657641}], 
           DateObject[{2018, 8, 31, 6, 35, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{49.299517, -117.657984}], 
           DateObject[{2018, 8, 30, 6, 1, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.299856, -117.657686}], 
           DateObject[{2018, 8, 29, 6, 3, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[15, "DegreesCelsius"], {
           GeoPosition[{51.097677, -115.357722}], 
           DateObject[{2018, 8, 28, 6, 18, 45}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.09765, -115.357761}], 
           DateObject[{2018, 8, 27, 6, 30, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.097708, -115.357725}], 
           DateObject[{2018, 8, 26, 6, 22, 58}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.097623, -115.357753}], 
           DateObject[{2018, 8, 25, 6, 22, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.097551, -115.357759}], 
           DateObject[{2018, 8, 24, 6, 28, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[14, "DegreesCelsius"], {
           GeoPosition[{51.091772, -114.158392}], 
           DateObject[{2018, 8, 23, 7, 21, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{51.451564, -112.70134}], 
           DateObject[{2018, 8, 22, 6, 19, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[18, "DegreesCelsius"], {
           GeoPosition[{51.451621, -112.701128}], 
           DateObject[{2018, 8, 21, 5, 46, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{51.451796, -112.70111}], 
           DateObject[{2018, 8, 20, 6, 18, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{51.091668, -114.158645}], 
           DateObject[{2018, 8, 19, 6, 40, 54}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.091789, -114.158339}], 
           DateObject[{2018, 8, 18, 7, 9, 45}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.091678, -114.158567}], 
           DateObject[{2018, 8, 17, 8, 49, 13}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.091671, -114.158647}], 
           DateObject[{2018, 8, 16, 9, 31, 17}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.091664, -114.158796}], 
           DateObject[{2018, 8, 15, 7, 44, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{51.091796, -114.158474}], 
           DateObject[{2018, 8, 14, 7, 54, 47}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.091692, -114.158798}], 
           DateObject[{2018, 8, 13, 7, 4, 36}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{51.091769, -114.158431}], 
           DateObject[{2018, 8, 12, 7, 43, 25}, "Instant", "Gregorian", -4.]} -> 
         Missing["NotAvailable"], {
           GeoPosition[{49.401197, 8.669245}], 
           DateObject[{2018, 8, 11, 6, 8, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[18, "DegreesCelsius"], {
           GeoPosition[{49.401622, 8.66901}], 
           DateObject[{2018, 8, 10, 8, 32, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[19, "DegreesCelsius"], {
           GeoPosition[{49.401586, 8.66935}], 
           DateObject[{2018, 8, 9, 8, 3, 52}, "Instant", "Gregorian", -4.]} -> 
         Quantity[28, "DegreesCelsius"], {
           GeoPosition[{49.401466, 8.669413}], 
           DateObject[{2018, 8, 8, 7, 46, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[26, "DegreesCelsius"], {
           GeoPosition[{49.40137, 8.669238}], 
           DateObject[{2018, 8, 7, 8, 2, 29}, "Instant", "Gregorian", -4.]} -> 
         Quantity[28, "DegreesCelsius"], {
           GeoPosition[{49.401415, 8.669158}], 
           DateObject[{2018, 8, 6, 7, 54, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401629, 8.669438}], 
           DateObject[{2018, 8, 5, 9, 17, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401403, 8.669258}], 
           DateObject[{2018, 8, 4, 8, 53, 29}, "Instant", "Gregorian", -4.]} -> 
         Quantity[31, "DegreesCelsius"], {
           GeoPosition[{49.401926, 8.669435}], 
           DateObject[{2018, 8, 3, 7, 32, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401612, 8.669325}], 
           DateObject[{2018, 8, 2, 8, 8, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401451, 8.669174}], 
           DateObject[{2018, 8, 1, 7, 53, 7}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401259, 8.669247}], 
           DateObject[{2018, 7, 31, 8, 43, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[28, "DegreesCelsius"], {
           GeoPosition[{49.401212, 8.66891}], 
           DateObject[{2018, 7, 30, 7, 51, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[28, "DegreesCelsius"], {
           GeoPosition[{49.401662, 8.669392}], 
           DateObject[{2018, 7, 29, 8, 50, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[25, "DegreesCelsius"], {
           GeoPosition[{49.401502, 8.669116}], 
           DateObject[{2018, 7, 28, 8, 38, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[25, "DegreesCelsius"], {
           GeoPosition[{49.40145, 8.669204}], 
           DateObject[{2018, 7, 27, 7, 42, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401307, 8.669145}], 
           DateObject[{2018, 7, 26, 7, 41, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401676, 8.669311}], 
           DateObject[{2018, 7, 25, 7, 49, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[26, "DegreesCelsius"], {
           GeoPosition[{49.4013, 8.669252}], 
           DateObject[{2018, 7, 24, 7, 46, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401323, 8.669171}], 
           DateObject[{2018, 7, 23, 8, 0, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.401344, 8.669115}], 
           DateObject[{2018, 7, 22, 10, 23, 23}, "Instant", 
            "Gregorian", -4.]} -> Quantity[24, "DegreesCelsius"], {
           GeoPosition[{49.40143, 8.669131}], 
           DateObject[{2018, 7, 21, 9, 40, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{49.401309, 8.669221}], 
           DateObject[{2018, 7, 20, 7, 57, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[24, "DegreesCelsius"], {
           GeoPosition[{49.401543, 8.669446}], 
           DateObject[{2018, 7, 19, 7, 44, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.40148, 8.669242}], 
           DateObject[{2018, 7, 18, 7, 48, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401716, 8.669399}], 
           DateObject[{2018, 7, 17, 7, 25, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401368, 8.669284}], 
           DateObject[{2018, 7, 16, 7, 54, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401608, 8.66943}], 
           DateObject[{2018, 7, 15, 10, 2, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401342, 8.669142}], 
           DateObject[{2018, 7, 14, 9, 11, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[25, "DegreesCelsius"], {
           GeoPosition[{49.4014, 8.669072}], 
           DateObject[{2018, 7, 13, 7, 27, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.401487, 8.669167}], 
           DateObject[{2018, 7, 12, 7, 36, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[19, "DegreesCelsius"], {
           GeoPosition[{49.401485, 8.669182}], 
           DateObject[{2018, 7, 11, 7, 45, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{49.401498, 8.669432}], 
           DateObject[{2018, 7, 10, 7, 51, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.401662, 8.669299}], 
           DateObject[{2018, 7, 9, 7, 54, 9}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401924, 8.669426}], 
           DateObject[{2018, 7, 8, 8, 5, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.401485, 8.669196}], 
           DateObject[{2018, 7, 7, 7, 47, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.401632, 8.669264}], 
           DateObject[{2018, 7, 6, 7, 54, 34}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401488, 8.669177}], 
           DateObject[{2018, 7, 5, 7, 43, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.401617, 8.6694}], 
           DateObject[{2018, 7, 4, 7, 15, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.40157, 8.669299}], 
           DateObject[{2018, 7, 3, 7, 26, 34}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401454, 8.669182}], 
           DateObject[{2018, 7, 2, 8, 4, 50}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401567, 8.669284}], 
           DateObject[{2018, 7, 1, 7, 48, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.40193, 8.669138}], 
           DateObject[{2018, 6, 30, 10, 6, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[27, "DegreesCelsius"], {
           GeoPosition[{49.401644, 8.669368}], 
           DateObject[{2018, 6, 29, 17, 4, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[29, "DegreesCelsius"], {
           GeoPosition[{49.401675, 8.669341}], 
           DateObject[{2018, 6, 28, 7, 31, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401537, 8.669196}], 
           DateObject[{2018, 6, 27, 7, 43, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{49.40302, 8.668722}], 
           DateObject[{2018, 6, 26, 7, 20, 30}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{49.401649, 8.669337}], 
           DateObject[{2018, 6, 25, 8, 7, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{49.401407, 8.66934}], 
           DateObject[{2018, 6, 24, 9, 18, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.401347, 8.669119}], 
           
           DateObject[{2018, 6, 23, 10, 34, 11}, "Instant", 
            "Gregorian", -4.]} -> Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.401554, 8.669266}], 
           DateObject[{2018, 6, 22, 7, 54, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[15, "DegreesCelsius"], {
           GeoPosition[{49.401511, 8.66918}], 
           DateObject[{2018, 6, 21, 7, 50, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401479, 8.669325}], 
           DateObject[{2018, 6, 20, 8, 7, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[24, "DegreesCelsius"], {
           GeoPosition[{49.401474, 8.669266}], 
           DateObject[{2018, 6, 19, 7, 38, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.401589, 8.66922}], 
           DateObject[{2018, 6, 18, 8, 4, 33}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{49.401603, 8.669585}], 
           DateObject[{2018, 6, 17, 11, 8, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401428, 8.669369}], 
           DateObject[{2018, 6, 16, 9, 52, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[24, "DegreesCelsius"], {
           GeoPosition[{49.401453, 8.669237}], 
           DateObject[{2018, 6, 15, 7, 50, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[19, "DegreesCelsius"], {
           GeoPosition[{49.401572, 8.669274}], 
           DateObject[{2018, 6, 14, 7, 39, 40}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.402031, 8.66878}], 
           DateObject[{2018, 6, 13, 8, 3, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.40174, 8.669503}], 
           DateObject[{2018, 6, 12, 7, 46, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.401764, 8.66906}], 
           DateObject[{2018, 6, 11, 7, 51, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401511, 8.669218}], 
           DateObject[{2018, 6, 10, 9, 31, 26}, "Instant", "Gregorian", -4.]} -> 
         Quantity[24, "DegreesCelsius"], {
           GeoPosition[{49.401505, 8.669195}], 
           DateObject[{2018, 6, 9, 9, 46, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[25, "DegreesCelsius"], {
           GeoPosition[{49.40154, 8.669479}], 
           DateObject[{2018, 6, 8, 7, 54, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"], {
           GeoPosition[{49.40151, 8.669432}], 
           DateObject[{2018, 6, 7, 7, 41, 24}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.40165, 8.669518}], 
           DateObject[{2018, 6, 6, 7, 41, 30}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401489, 8.669527}], 
           DateObject[{2018, 6, 5, 7, 52, 34}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401591, 8.669561}], 
           DateObject[{2018, 6, 4, 7, 41, 47}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.402039, 8.668711}], 
           DateObject[{2018, 6, 3, 9, 34, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401534, 8.669112}], 
           DateObject[{2018, 6, 2, 5, 45, 9}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401581, 8.669305}], 
           DateObject[{2018, 6, 1, 17, 34, 43}, "Instant", "Gregorian", -4.]} -> 
         Quantity[23, "DegreesCelsius"], {
           GeoPosition[{49.401557, 8.669037}], 
           DateObject[{2018, 5, 31, 9, 51, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[25, "DegreesCelsius"], {
           GeoPosition[{49.401442, 8.669257}], 
           DateObject[{2018, 5, 30, 7, 48, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[22, "DegreesCelsius"], {
           GeoPosition[{49.401144, 8.669341}], 
           DateObject[{2018, 5, 29, 7, 44, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[28, "DegreesCelsius"], {
           GeoPosition[{49.401546, 8.669059}], 
           DateObject[{2018, 5, 28, 7, 50, 33}, "Instant", "Gregorian", -4.]} -> 
         Quantity[24, "DegreesCelsius"], {
           GeoPosition[{49.401468, 8.669225}], 
           DateObject[{2018, 5, 27, 9, 1, 11}, "Instant", "Gregorian", -4.]} -> 
         Quantity[26, "DegreesCelsius"], {
           GeoPosition[{49.401632, 8.669451}], 
           DateObject[{2018, 5, 26, 8, 27, 23}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{49.401612, 8.669541}], 
           DateObject[{2018, 5, 25, 8, 28, 40}, "Instant", "Gregorian", -4.]} -> 
         Quantity[19, "DegreesCelsius"], {
           GeoPosition[{49.401569, 8.669598}], 
           DateObject[{2018, 5, 24, 7, 57, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.40177, 8.669229}], 
           DateObject[{2018, 5, 23, 8, 16, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.401622, 8.669168}], 
           DateObject[{2018, 5, 22, 8, 0, 9}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{49.401435, 8.669334}], 
           DateObject[{2018, 5, 21, 8, 5, 10}, "Instant", "Gregorian", -4.]} -> 
         Quantity[20, "DegreesCelsius"], {
           GeoPosition[{49.401666, 8.669373}], 
           
           DateObject[{2018, 5, 20, 13, 38, 24}, "Instant", 
            "Gregorian", -4.]} -> Quantity[17, "DegreesCelsius"], {
           GeoPosition[{49.401635, 8.669569}], 
           DateObject[{2018, 5, 19, 9, 37, 6}, "Instant", "Gregorian", -4.]} -> 
         Quantity[16, "DegreesCelsius"], {
           GeoPosition[{49.401496, 8.669451}], 
           DateObject[{2018, 5, 18, 6, 50, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{49.401724, 8.669449}], 
           DateObject[{2018, 5, 17, 5, 49, 0}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{49.401837, 8.669238}], 
           DateObject[{2018, 5, 16, 5, 35, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{49.401791, 8.66942}], 
           DateObject[{2018, 5, 15, 6, 11, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[14, "DegreesCelsius"], {
           GeoPosition[{49.401633, 8.669242}], 
           
           DateObject[{2018, 5, 14, 18, 38, 41}, "Instant", 
            "Gregorian", -4.]} -> Quantity[17, "DegreesCelsius"], {
           GeoPosition[{51.091758, -114.158501}], 
           DateObject[{2018, 5, 13, 9, 14, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.091813, -114.158568}], 
           DateObject[{2018, 5, 12, 9, 2, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091723, -114.158567}], 
           DateObject[{2018, 5, 11, 9, 17, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.091747, -114.158337}], 
           DateObject[{2018, 5, 9, 9, 18, 31}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.091729, -114.158206}], 
           DateObject[{2018, 5, 8, 9, 28, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.091743, -114.158323}], 
           DateObject[{2018, 5, 7, 9, 58, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.349838, -110.480654}], 
           DateObject[{2018, 5, 6, 10, 18, 20}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091728, -114.158259}], 
           DateObject[{2018, 5, 5, 8, 40, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.091832, -114.158389}], 
           DateObject[{2018, 5, 4, 8, 17, 10}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{51.091767, -114.158352}], 
           DateObject[{2018, 5, 3, 7, 41, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.091763, -114.158167}], 
           DateObject[{2018, 5, 2, 9, 8, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091759, -114.158242}], 
           DateObject[{2018, 5, 1, 10, 26, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091713, -114.158203}], 
           DateObject[{2018, 4, 30, 9, 58, 13}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091774, -114.158188}], 
           DateObject[{2018, 4, 29, 10, 9, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[12, "DegreesCelsius"], {
           GeoPosition[{51.091775, -114.158189}], 
           DateObject[{2018, 4, 28, 9, 47, 45}, "Instant", "Gregorian", -4.]} -> 
         Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.091736, -114.158196}], 
           
           DateObject[{2018, 4, 27, 11, 25, 43}, "Instant", 
            "Gregorian", -4.]} -> Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091726, -114.158632}], 
           
           DateObject[{2018, 4, 26, 13, 20, 18}, "Instant", 
            "Gregorian", -4.]} -> Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.091759, -114.158192}], 
           
           DateObject[{2018, 4, 25, 10, 24, 23}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.09173, -114.158236}], 
           DateObject[{2018, 4, 24, 9, 44, 29}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.060599, -114.115197}], 
           DateObject[{2018, 4, 23, 8, 49, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.060634, -114.115055}], 
           DateObject[{2018, 4, 22, 9, 0, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.060706, -114.115089}], 
           DateObject[{2018, 4, 21, 7, 32, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.060616, -114.114979}], 
           DateObject[{2018, 4, 20, 9, 46, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.060642, -114.115036}], 
           
           DateObject[{2018, 4, 19, 10, 38, 37}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.060636, -114.115024}], 
           DateObject[{2018, 4, 18, 9, 6, 22}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.060664, -114.114955}], 
           
           DateObject[{2018, 4, 17, 17, 36, 11}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.060633, -114.114961}], 
           DateObject[{2018, 4, 16, 8, 48, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.060513, -114.115141}], 
           DateObject[{2018, 4, 15, 9, 9, 24}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.09177, -114.158303}], 
           
           DateObject[{2018, 4, 14, 10, 41, 42}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.09172, -114.158304}], 
           DateObject[{2018, 4, 13, 11, 14, 6}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.091723, -114.158209}], 
           DateObject[{2018, 4, 12, 6, 46, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091731, -114.158195}], 
           DateObject[{2018, 4, 11, 8, 46, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091714, -114.158207}], 
           DateObject[{2018, 4, 10, 8, 26, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091771, -114.158276}], 
           DateObject[{2018, 4, 9, 8, 39, 49}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.091786, -114.158218}], 
           DateObject[{2018, 4, 8, 17, 9, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.091743, -114.158242}], 
           DateObject[{2018, 4, 7, 10, 47, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{51.09176, -114.158178}], 
           DateObject[{2018, 4, 6, 8, 12, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-15, "DegreesCelsius"], {
           GeoPosition[{51.091702, -114.158235}], 
           DateObject[{2018, 4, 5, 9, 33, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.091736, -114.158245}], 
           DateObject[{2018, 4, 4, 8, 9, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091726, -114.158173}], 
           DateObject[{2018, 4, 3, 6, 41, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091779, -114.158217}], 
           DateObject[{2018, 4, 2, 10, 46, 29}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091755, -114.158232}], 
           DateObject[{2018, 4, 1, 11, 33, 6}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091804, -114.158182}], 
           
           DateObject[{2018, 3, 31, 10, 40, 20}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-15, "DegreesCelsius"], {
           GeoPosition[{51.091764, -114.158235}], 
           DateObject[{2018, 3, 30, 8, 28, 11}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-9, "DegreesCelsius"], {
           GeoPosition[{51.091748, -114.158241}], 
           DateObject[{2018, 3, 29, 7, 30, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.091661, -114.158227}], 
           DateObject[{2018, 3, 28, 8, 29, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.09173, -114.158512}], 
           DateObject[{2018, 3, 27, 6, 59, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.349837, -110.480486}], 
           DateObject[{2018, 3, 26, 9, 34, 52}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.091754, -114.15818}], 
           DateObject[{2018, 3, 25, 8, 30, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.091766, -114.158603}], 
           DateObject[{2018, 3, 24, 9, 21, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091763, -114.158537}], 
           
           DateObject[{2018, 3, 23, 23, 32, 13}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.09181, -114.15845}], 
           DateObject[{2018, 3, 22, 9, 31, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.09174, -114.158168}], 
           DateObject[{2018, 3, 21, 8, 41, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.060618, -114.115142}], 
           DateObject[{2018, 3, 20, 6, 36, 59}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.060625, -114.115169}], 
           DateObject[{2018, 3, 19, 8, 31, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.060269, -114.114726}], 
           DateObject[{2018, 3, 18, 10, 57, 36}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.060624, -114.115015}], 
           DateObject[{2018, 3, 17, 10, 11, 6}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.060628, -114.114995}], 
           DateObject[{2018, 3, 16, 9, 29, 24}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.064118, -114.152406}], 
           DateObject[{2018, 3, 15, 9, 29, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.060368, -114.114866}], 
           DateObject[{2018, 3, 14, 8, 47, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.060598, -114.115048}], 
           DateObject[{2018, 3, 13, 6, 54, 8}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091814, -114.158368}], 
           DateObject[{2018, 3, 12, 8, 38, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091788, -114.158466}], 
           DateObject[{2018, 3, 11, 11, 4, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091688, -114.158229}], 
           DateObject[{2018, 3, 10, 7, 50, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.091798, -114.158378}], 
           DateObject[{2018, 3, 9, 8, 28, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091788, -114.15838}], 
           DateObject[{2018, 3, 8, 8, 7, 54}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091766, -114.158514}], 
           DateObject[{2018, 3, 7, 16, 51, 40}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.091698, -114.158284}], 
           DateObject[{2018, 3, 6, 6, 45, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-15, "DegreesCelsius"], {
           GeoPosition[{51.091738, -114.158207}], 
           DateObject[{2018, 3, 5, 9, 47, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.091809, -114.158347}], 
           DateObject[{2018, 3, 4, 9, 2, 25}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{51.091731, -114.158177}], 
           DateObject[{2018, 3, 3, 9, 25, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091706, -114.158231}], 
           DateObject[{2018, 3, 2, 8, 22, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-9, "DegreesCelsius"], {
           GeoPosition[{51.091726, -114.158224}], 
           DateObject[{2018, 3, 1, 8, 10, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.091684, -114.159209}], 
           DateObject[{2018, 2, 28, 8, 42, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.091669, -114.158721}], 
           
           DateObject[{2018, 2, 27, 18, 24, 31}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091682, -114.158243}], 
           DateObject[{2018, 2, 26, 8, 50, 51}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.091748, -114.158202}], 
           DateObject[{2018, 2, 25, 10, 8, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.091731, -114.158638}], 
           DateObject[{2018, 2, 24, 11, 1, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.091748, -114.158192}], 
           DateObject[{2018, 2, 23, 8, 43, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.091667, -114.158229}], 
           
           DateObject[{2018, 2, 22, 10, 28, 27}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.060621, -114.114991}], 
           
           DateObject[{2018, 2, 21, 10, 52, 21}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{51.060656, -114.115013}], 
           
           DateObject[{2018, 2, 20, 10, 10, 53}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{51.060585, -114.115185}], 
           
           DateObject[{2018, 2, 19, 10, 12, 39}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-20, "DegreesCelsius"], {
           GeoPosition[{51.060536, -114.115229}], 
           DateObject[{2018, 2, 18, 9, 39, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.060612, -114.115015}], 
           
           DateObject[{2018, 2, 17, 10, 22, 21}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.060657, -114.11497}], 
           DateObject[{2018, 2, 16, 8, 37, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.06062, -114.11502}], 
           DateObject[{2018, 2, 15, 8, 33, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.060639, -114.114965}], 
           DateObject[{2018, 2, 14, 8, 19, 24}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.060532, -114.115152}], 
           DateObject[{2018, 2, 13, 19, 8, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.060648, -114.115007}], 
           
           DateObject[{2018, 2, 12, 19, 28, 24}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.09174, -114.158207}], 
           DateObject[{2018, 2, 11, 9, 22, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.091757, -114.158242}], 
           
           DateObject[{2018, 2, 10, 13, 40, 14}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091806, -114.158399}], 
           DateObject[{2018, 2, 9, 14, 17, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-23, "DegreesCelsius"], {
           GeoPosition[{51.091818, -114.158347}], 
           DateObject[{2018, 2, 8, 9, 6, 35}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.091766, -114.158401}], 
           DateObject[{2018, 2, 7, 8, 35, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{51.091765, -114.158152}], 
           DateObject[{2018, 2, 6, 7, 20, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.091788, -114.158239}], 
           DateObject[{2018, 2, 5, 8, 9, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-13, "DegreesCelsius"], {
           GeoPosition[{51.091743, -114.158183}], 
           DateObject[{2018, 2, 4, 11, 21, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-22, "DegreesCelsius"], {
           GeoPosition[{51.091739, -114.158201}], 
           DateObject[{2018, 2, 3, 9, 45, 29}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-20, "DegreesCelsius"], {
           GeoPosition[{51.09178, -114.158427}], 
           DateObject[{2018, 2, 2, 8, 27, 20}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-19, "DegreesCelsius"], {
           GeoPosition[{51.091811, -114.158177}], 
           DateObject[{2018, 2, 1, 8, 18, 55}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-19, "DegreesCelsius"], {
           GeoPosition[{51.091681, -114.158226}], 
           DateObject[{2018, 1, 31, 7, 15, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.091731, -114.1582}], 
           DateObject[{2018, 1, 29, 8, 23, 52}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-16, "DegreesCelsius"], {
           GeoPosition[{51.091652, -114.159425}], 
           
           DateObject[{2018, 1, 28, 10, 12, 39}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{51.09179, -114.158192}], 
           DateObject[{2018, 1, 27, 9, 49, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-17, "DegreesCelsius"], {
           GeoPosition[{51.09174, -114.15861}], 
           
           DateObject[{2018, 1, 26, 11, 48, 16}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.09179, -114.158486}], 
           DateObject[{2018, 1, 25, 8, 43, 46}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091751, -114.158206}], 
           DateObject[{2018, 1, 24, 8, 13, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.091667, -114.159501}], 
           DateObject[{2018, 1, 23, 6, 23, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091804, -114.158421}], 
           DateObject[{2018, 1, 22, 8, 34, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091711, -114.158646}], 
           
           DateObject[{2018, 1, 21, 10, 13, 29}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091738, -114.158219}], 
           DateObject[{2018, 1, 20, 9, 29, 10}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091585, -114.159368}], 
           
           DateObject[{2018, 1, 19, 11, 42, 49}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091741, -114.158194}], 
           DateObject[{2018, 1, 18, 9, 13, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.091823, -114.158388}], 
           DateObject[{2018, 1, 17, 8, 24, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091768, -114.158527}], 
           DateObject[{2018, 1, 16, 6, 37, 41}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091685, -114.15823}], 
           DateObject[{2018, 1, 15, 8, 14, 4}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-9, "DegreesCelsius"], {
           GeoPosition[{51.091795, -114.158232}], 
           DateObject[{2018, 1, 14, 9, 37, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091803, -114.158404}], 
           
           DateObject[{2018, 1, 13, 10, 57, 56}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091808, -114.158367}], 
           DateObject[{2018, 1, 12, 8, 14, 24}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-23, "DegreesCelsius"], {
           GeoPosition[{51.091661, -114.158942}], 
           DateObject[{2018, 1, 11, 9, 25, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-26, "DegreesCelsius"], {
           GeoPosition[{51.091821, -114.158511}], 
           
           DateObject[{2018, 1, 10, 11, 24, 41}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-22, "DegreesCelsius"], {
           GeoPosition[{51.091793, -114.158504}], 
           DateObject[{2018, 1, 9, 17, 10, 37}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.09173, -114.158233}], 
           DateObject[{2018, 1, 8, 8, 2, 42}, "Instant", "Gregorian", -4.]} -> 
         Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.060649, -114.114978}], 
           DateObject[{2018, 1, 7, 11, 20, 21}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.060657, -114.115021}], 
           DateObject[{2018, 1, 6, 11, 19, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.06057, -114.115256}], 
           DateObject[{2018, 1, 5, 9, 47, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.060546, -114.115141}], 
           DateObject[{2018, 1, 4, 9, 12, 28}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091656, -114.158675}], 
           DateObject[{2018, 1, 3, 9, 51, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091738, -114.158797}], 
           DateObject[{2018, 1, 2, 11, 6, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-5, "DegreesCelsius"], {
           GeoPosition[{51.091764, -114.158583}], 
           DateObject[{2018, 1, 1, 17, 11, 36}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-19, "DegreesCelsius"], {
           GeoPosition[{51.091832, -114.158458}], 
           
           DateObject[{2017, 12, 31, 10, 58, 28}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-25, "DegreesCelsius"], {
           GeoPosition[{51.091799, -114.158446}], 
           
           DateObject[{2017, 12, 30, 12, 53, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-27, "DegreesCelsius"], {
           GeoPosition[{51.091814, -114.158167}], 
           DateObject[{2017, 12, 29, 11, 17, 12}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-25, "DegreesCelsius"], {
           GeoPosition[{51.091779, -114.158483}], 
           
           DateObject[{2017, 12, 28, 10, 48, 21}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-23, "DegreesCelsius"], {
           GeoPosition[{51.060168, -114.114573}], 
           
           DateObject[{2017, 12, 27, 10, 28, 23}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-18, "DegreesCelsius"], {
           GeoPosition[{51.060585, -114.115213}], 
           
           DateObject[{2017, 12, 26, 10, 30, 46}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-27, "DegreesCelsius"], {
           GeoPosition[{51.101497, -114.161511}], 
           
           DateObject[{2017, 12, 25, 11, 15, 38}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-21, "DegreesCelsius"], {
           GeoPosition[{53.507401, -113.286314}], 
           DateObject[{2017, 12, 24, 9, 38, 1}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-13, "DegreesCelsius"], {
           GeoPosition[{53.506493, -113.286239}], 
           
           DateObject[{2017, 12, 23, 10, 13, 37}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.091784, -114.158445}], 
           
           DateObject[{2017, 12, 22, 10, 44, 28}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.091629, -114.158937}], 
           
           DateObject[{2017, 12, 21, 9, 27, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.091727, -114.158895}], 
           
           DateObject[{2017, 12, 20, 8, 51, 16}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-11, "DegreesCelsius"], {
           GeoPosition[{51.091665, -114.158646}], 
           
           DateObject[{2017, 12, 19, 9, 15, 35}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.091766, -114.158212}], 
           DateObject[{2017, 12, 18, 9, 39, 53}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091715, -114.158291}], 
           
           DateObject[{2017, 12, 17, 9, 33, 12}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091787, -114.15846}], 
           DateObject[{2017, 12, 16, 8, 5, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091851, -114.15848}], 
           
           DateObject[{2017, 12, 15, 11, 9, 13}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.091762, -114.158441}], 
           
           DateObject[{2017, 12, 14, 11, 14, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091675, -114.158667}], 
           
           DateObject[{2017, 12, 13, 9, 46, 11}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091732, -114.158168}], 
           
           DateObject[{2017, 12, 12, 10, 51, 36}, "Instant", 
            "Gregorian", -4.]} -> Quantity[9, "DegreesCelsius"], {
           GeoPosition[{51.091751, -114.158238}], 
           
           DateObject[{2017, 12, 11, 10, 21, 24}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091603, -114.158702}], 
           
           DateObject[{2017, 12, 10, 13, 55, 43}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.09175, -114.158603}], 
           
           DateObject[{2017, 12, 9, 16, 33, 14}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091788, -114.158199}], 
           DateObject[{2017, 12, 8, 7, 1, 53}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091756, -114.158198}], 
           DateObject[{2017, 12, 7, 8, 40, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-3, "DegreesCelsius"], {
           GeoPosition[{51.091775, -114.158498}], 
           DateObject[{2017, 12, 6, 7, 45, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-4, "DegreesCelsius"], {
           GeoPosition[{51.091702, -114.158258}], 
           DateObject[{2017, 12, 5, 7, 32, 43}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091962, -114.158479}], 
           DateObject[{2017, 12, 4, 8, 23, 39}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-8, "DegreesCelsius"], {
           GeoPosition[{51.417168, -116.209514}], 
           DateObject[{2017, 12, 3, 8, 11, 17}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-6, "DegreesCelsius"], {
           GeoPosition[{51.416902, -116.210349}], 
           DateObject[{2017, 12, 2, 8, 33, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091661, -114.158735}], 
           DateObject[{2017, 12, 1, 7, 50, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091698, -114.158591}], 
           
           DateObject[{2017, 11, 30, 8, 30, 57}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.093205, -114.154701}], 
           
           DateObject[{2017, 11, 29, 8, 20, 58}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.091738, -114.158172}], 
           
           DateObject[{2017, 11, 28, 7, 41, 40}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091698, -114.158971}], 
           
           DateObject[{2017, 11, 27, 7, 45, 44}, "Instant", 
            "Gregorian", -4.]} -> Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.091731, -114.158745}], 
           DateObject[{2017, 11, 26, 10, 7, 9}, "Instant", "Gregorian", -4.]}
           -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091686, -114.158908}], 
           DateObject[{2017, 11, 25, 9, 31, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091766, -114.158684}], 
           
           DateObject[{2017, 11, 24, 7, 38, 21}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091582, -114.158934}], 
           
           DateObject[{2017, 11, 23, 17, 25, 49}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.09174, -114.158296}], 
           
           DateObject[{2017, 11, 22, 7, 54, 35}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.060596, -114.115152}], 
           
           DateObject[{2017, 11, 21, 7, 32, 30}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.060635, -114.115069}], 
           
           DateObject[{2017, 11, 20, 7, 41, 16}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.060599, -114.115204}], 
           
           DateObject[{2017, 11, 19, 9, 44, 56}, "Instant", 
            "Gregorian", -4.]} -> Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.060599, -114.11509}], 
           
           DateObject[{2017, 11, 18, 12, 56, 15}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091775, -114.158222}], 
           
           DateObject[{2017, 11, 17, 17, 41, 36}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-14, "DegreesCelsius"], {
           GeoPosition[{51.091346, -114.162266}], 
           
           DateObject[{2017, 11, 16, 7, 40, 48}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091687, -114.16062}], 
           DateObject[{2017, 11, 15, 8, 38, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-9, "DegreesCelsius"], {
           GeoPosition[{51.090961, -114.1621}], 
           
           DateObject[{2017, 11, 14, 7, 53, 12}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091279, -114.162026}], 
           
           DateObject[{2017, 11, 12, 13, 28, 25}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.086157, -114.164786}], 
           
           DateObject[{2017, 11, 11, 12, 9, 58}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.09173, -114.160028}], 
           
           DateObject[{2017, 11, 10, 18, 27, 33}, "Instant", 
            "Gregorian", -4.]} -> Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.091621, -114.158551}], 
           DateObject[{2017, 11, 9, 7, 51, 33}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-12, "DegreesCelsius"], {
           GeoPosition[{51.099228, -114.160919}], 
           DateObject[{2017, 11, 8, 22, 27, 2}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-7, "DegreesCelsius"], {
           GeoPosition[{51.092654, -114.158315}], 
           DateObject[{2017, 11, 6, 7, 46, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-13, "DegreesCelsius"], {
           GeoPosition[{51.091643, -114.161181}], 
           
           DateObject[{2017, 11, 5, 17, 38, 23}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-10, "DegreesCelsius"], {
           GeoPosition[{51.089651, -114.164603}], 
           DateObject[{2017, 11, 1, 8, 34, 16}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.090346, -114.161621}], 
           
           DateObject[{2017, 10, 29, 21, 45, 39}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091609, -114.161619}], 
           
           DateObject[{2017, 10, 28, 17, 42, 56}, "Instant", 
            "Gregorian", -4.]} -> Quantity[15, "DegreesCelsius"], {
           GeoPosition[{51.08614, -114.164662}], 
           
           DateObject[{2017, 10, 27, 19, 47, 46}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.086779, -114.16466}], 
           
           DateObject[{2017, 10, 26, 7, 31, 20}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091726, -114.161256}], 
           
           DateObject[{2017, 10, 24, 19, 16, 31}, "Instant", 
            "Gregorian", -4.]} -> Quantity[15, "DegreesCelsius"], {
           GeoPosition[{51.091423, -114.161202}], 
           
           DateObject[{2017, 10, 23, 7, 10, 19}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091818, -114.160147}], 
           
           DateObject[{2017, 10, 22, 20, 27, 32}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.060637, -114.115133}], 
           
           DateObject[{2017, 10, 21, 19, 6, 58}, "Instant", 
            "Gregorian", -4.]} -> Quantity[8, "DegreesCelsius"], {
           GeoPosition[{51.091702, -114.159755}], 
           
           DateObject[{2017, 10, 20, 16, 32, 35}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091672, -114.161208}], 
           
           DateObject[{2017, 10, 19, 7, 49, 41}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.091679, -114.160485}], 
           
           DateObject[{2017, 10, 18, 7, 59, 46}, "Instant", 
            "Gregorian", -4.]} -> Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.091737, -114.159014}], 
           
           DateObject[{2017, 10, 17, 7, 24, 50}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.091635, -114.155347}], 
           
           DateObject[{2017, 10, 16, 7, 55, 36}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.091441, -114.161912}], 
           
           DateObject[{2017, 10, 15, 12, 14, 41}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.09112, -114.161781}], 
           
           DateObject[{2017, 10, 14, 16, 36, 2}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.091032, -114.162097}], 
           
           DateObject[{2017, 10, 13, 7, 59, 49}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.091765, -114.160097}], 
           
           DateObject[{2017, 10, 12, 18, 42, 38}, "Instant", 
            "Gregorian", -4.]} -> Quantity[-1, "DegreesCelsius"], {
           GeoPosition[{51.090232, -114.162663}], 
           DateObject[{2017, 10, 10, 7, 23, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.09004, -114.1646}], 
           DateObject[{2017, 10, 9, 12, 3, 26}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.085597, -114.164431}], 
           DateObject[{2017, 10, 8, 9, 9, 18}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.093603, -114.159267}], 
           
           DateObject[{2017, 10, 7, 10, 20, 43}, "Instant", 
            "Gregorian", -4.]} -> Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.091528, -114.161916}], 
           DateObject[{2017, 10, 6, 7, 53, 38}, "Instant", "Gregorian", -4.]} -> 
         Quantity[11, "DegreesCelsius"], {
           GeoPosition[{51.090148, -114.1633}], 
           DateObject[{2017, 10, 4, 7, 49, 12}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.090268, -114.162738}], 
           DateObject[{2017, 10, 3, 7, 49, 27}, "Instant", "Gregorian", -4.]} -> 
         Quantity[-2, "DegreesCelsius"], {
           GeoPosition[{51.091783, -114.160469}], 
           DateObject[{2017, 10, 2, 7, 59, 33}, "Instant", "Gregorian", -4.]} -> 
         Quantity[1, "DegreesCelsius"], {
           GeoPosition[{51.06287, -114.116914}], 
           DateObject[{2017, 10, 1, 10, 35, 3}, "Instant", "Gregorian", -4.]} -> 
         Quantity[5, "DegreesCelsius"], {
           GeoPosition[{51.060859, -114.114555}], 
           
           DateObject[{2017, 9, 30, 21, 28, 26}, "Instant", 
            "Gregorian", -4.]} -> Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.060033, -114.114405}], 
           
           DateObject[{2017, 9, 29, 23, 35, 29}, "Instant", 
            "Gregorian", -4.]} -> Quantity[24, "DegreesCelsius"], {
           GeoPosition[{51.08842, -114.16461}], 
           
           DateObject[{2017, 9, 28, 19, 14, 52}, "Instant", 
            "Gregorian", -4.]} -> Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.091606, -114.161869}], 
           
           DateObject[{2017, 9, 25, 17, 58, 47}, "Instant", 
            "Gregorian", -4.]} -> Quantity[13, "DegreesCelsius"], {
           GeoPosition[{51.097523, -114.160792}], 
           
           DateObject[{2017, 9, 23, 19, 55, 21}, "Instant", 
            "Gregorian", -4.]} -> Quantity[10, "DegreesCelsius"], {
           GeoPosition[{51.087311, -114.164686}], 
           DateObject[{2017, 9, 22, 7, 25, 19}, "Instant", "Gregorian", -4.]} -> 
         Quantity[0, "DegreesCelsius"], {
           GeoPosition[{51.086898, -114.164683}], 
           DateObject[{2017, 9, 21, 7, 43, 14}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.093509, -114.162087}], 
           DateObject[{2017, 9, 20, 7, 35, 32}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.090788, -114.161895}], 
           DateObject[{2017, 9, 19, 8, 10, 44}, "Instant", "Gregorian", -4.]} -> 
         Quantity[3, "DegreesCelsius"], {
           GeoPosition[{51.093572, -114.16159}], 
           DateObject[{2017, 9, 18, 7, 44, 49}, "Instant", "Gregorian", -4.]} -> 
         Quantity[7, "DegreesCelsius"], {
           GeoPosition[{51.093758, -114.159204}], 
           
           DateObject[{2017, 9, 17, 11, 49, 56}, "Instant", 
            "Gregorian", -4.]} -> Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.093361, -114.158575}], 
           DateObject[{2017, 9, 15, 7, 41, 5}, "Instant", "Gregorian", -4.]} -> 
         Quantity[2, "DegreesCelsius"], {
           GeoPosition[{51.092006, -114.158533}], 
           
           DateObject[{2017, 9, 14, 11, 41, 37}, "Instant", 
            "Gregorian", -4.]} -> Quantity[4, "DegreesCelsius"], {
           GeoPosition[{51.093563, -114.160081}], 
           DateObject[{2017, 9, 13, 8, 3, 57}, "Instant", "Gregorian", -4.]} -> 
         Quantity[6, "DegreesCelsius"], {
           GeoPosition[{51.093478, -114.159931}], 
           DateObject[{2017, 9, 12, 7, 0, 48}, "Instant", "Gregorian", -4.]} -> 
         Quantity[21, "DegreesCelsius"]], 
       TypeSystem`Inference`PackagePrivate`$typeApplyCacheOccupancy = 5, 
       TypeSystem`ResetTypeApplyCache[] := (Clear[TypeSystem`TypeApply]; 
        TypeSystem`Inference`PackagePrivate`$typeApplyCacheOccupancy = 0; 
        TypeSystem`TypeApply[
           Pattern[TypeSystem`Inference`PackagePrivate`head, 
            Blank[]], 
           Pattern[TypeSystem`Inference`PackagePrivate`args, 
            Blank[]]] := (
          If[Increment[
             TypeSystem`Inference`PackagePrivate`$typeApplyCacheOccupancy] > 
            256, 
            TypeSystem`ResetTypeApplyCache[]]; TypeSystem`TypeApply[
             Verbatim[TypeSystem`Inference`PackagePrivate`head], 
             Verbatim[TypeSystem`Inference`PackagePrivate`args]] = 
           Block[{TypeSystem`$ThrowFailureType = True}, 
             Catch[
              TypeSystem`Inference`PackagePrivate`apply0[
              TypeSystem`Inference`PackagePrivate`head, 
               TypeSystem`Inference`PackagePrivate`args], 
              TypeSystem`FailureType]])), 
       TypeSystem`$NestedGridEntityPrefetchLimit = 512, 
       TypeSystem`NestedGrid`PackagePrivate`$EntityCache = Association[], 
       TypeSystem`NestedGrid`PackagePrivate`tooltipPathSetters[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := 
       ReplaceAll[
        TypeSystem`NestedGrid`PackagePrivate`e, {
         Alternatives[
           TypeSystem`NestedGrid`PackagePrivate`$PathSetter$, 
            TypeSystem`NestedGrid`PackagePrivate`$TooltipSetter$][
            Pattern[TypeSystem`NestedGrid`PackagePrivate`t, 
             Blank[]], 
            Pattern[TypeSystem`NestedGrid`PackagePrivate`v, 
             Blank[]]] :> Tooltip[TypeSystem`NestedGrid`PackagePrivate`t, 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
            TypeSystem`NestedGrid`PackagePrivate`v, 
             TypeSystem`NestedGrid`PackagePrivate`makePathElements]], 
          Alternatives[
            Blank[TypeSystem`NestedGrid`PackagePrivate`$PaginatorSetter$], 
            Blank[TypeSystem`NestedGrid`PackagePrivate`$MoreSetter$]] :> 
          Nothing}], TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pathTrailFunc, 
          Blank[]], 
         Optional[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`navFunc, 
           Blank[]], None]] := 
       Replace[TypeSystem`NestedGrid`PackagePrivate`path, {
         Alternatives[{}, Identity] :> "", Alternatives[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
             Blank[GeneralUtilities`Slice]], 
            Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
             Blank[List]]] :> Row[
            TypeSystem`NestedGrid`PackagePrivate`pathTrailFunc[
            TypeSystem`NestedGrid`PackagePrivate`s, 
             TypeSystem`NestedGrid`PackagePrivate`navFunc], 
            BaseStyle -> {
             FontFamily -> "Verdana", FontSize -> 
              N[3/4] TypeSystem`$FontSize}]}], TypeSystem`$FontSize = 12, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`makePathElements] = {
        HoldFirst}, TypeSystem`NestedGrid`PackagePrivate`makePathElements[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`list, 
          Blank[]], None] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`$RichAtomColor, 
          TypeSystem`NestedGrid`PackagePrivate`len, 
          TypeSystem`NestedGrid`PackagePrivate`indices, 
          TypeSystem`NestedGrid`PackagePrivate`res}, 
         TypeSystem`NestedGrid`PackagePrivate`$RichAtomColor = 
          RGBColor["#828282"]; 
         TypeSystem`NestedGrid`PackagePrivate`len = 
          Length[TypeSystem`NestedGrid`PackagePrivate`list]; 
         TypeSystem`NestedGrid`PackagePrivate`indices = 
          If[TypeSystem`NestedGrid`PackagePrivate`len <= 10, 
            TypeSystem`NestedGrid`PackagePrivate`len, 
            
            Join[{1, 2, 3}, {
             Floor[TypeSystem`NestedGrid`PackagePrivate`len/2] + 1}, 
             Range[
             TypeSystem`NestedGrid`PackagePrivate`len - 2, 
              TypeSystem`NestedGrid`PackagePrivate`len]]]; 
         TypeSystem`NestedGrid`PackagePrivate`res = Table[
            
            With[{TypeSystem`NestedGrid`PackagePrivate`subpath = 
              Take[TypeSystem`NestedGrid`PackagePrivate`list, 
                TypeSystem`NestedGrid`PackagePrivate`i]}, 
             Row[{
               If[
               TypeSystem`NestedGrid`PackagePrivate`i > 1, 
                TypeSystem`NestedGrid`PackagePrivate`$pathElement, Nothing], 
               TypeSystem`NestedGrid`PackagePrivate`fmtPathElem[
                Part[
                TypeSystem`NestedGrid`PackagePrivate`list, 
                 TypeSystem`NestedGrid`PackagePrivate`i]]}]], {
            TypeSystem`NestedGrid`PackagePrivate`i, 
             TypeSystem`NestedGrid`PackagePrivate`indices}]; 
         If[TypeSystem`NestedGrid`PackagePrivate`len > 10, 
           TypeSystem`NestedGrid`PackagePrivate`res = 
           Insert[TypeSystem`NestedGrid`PackagePrivate`res, 
             Style[
              
              Row[{TypeSystem`NestedGrid`PackagePrivate`$pathElement, 
                "\[Ellipsis]"}], ShowStringCharacters -> False], {{4}, {5}}]]; 
         TypeSystem`NestedGrid`PackagePrivate`res], 
       TypeSystem`NestedGrid`PackagePrivate`$RichAtomColor = 
       RGBColor[{33/74, 27/74, 117/370}], 
       TypeSystem`NestedGrid`PackagePrivate`$pathElement = Style[" \:203a ", 
         RGBColor[
         0.6509803921568628, 0.6509803921568628, 0.6509803921568628]], 
       TypeSystem`NestedGrid`PackagePrivate`fmtPathElem[All] := 
       Style["All", TypeSystem`NestedGrid`PackagePrivate`$PathElemColor], 
       TypeSystem`NestedGrid`PackagePrivate`fmtPathElem[
         Alternatives[
          Key[
           Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
            Blank[]]], {
           Key[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
             Blank[]]]}]] := Style[
         TypeSystem`NestedGrid`PackagePrivate`iFmtPathElem[
         TypeSystem`NestedGrid`PackagePrivate`e], 
         TypeSystem`NestedGrid`PackagePrivate`$PathElemColor], 
       TypeSystem`NestedGrid`PackagePrivate`fmtPathElem[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := Style[
         TypeSystem`NestedGrid`PackagePrivate`iFmtPathElem[
         TypeSystem`NestedGrid`PackagePrivate`e], 
         TypeSystem`NestedGrid`PackagePrivate`$PathElemColor], 
       TypeSystem`NestedGrid`PackagePrivate`$PathElemColor = GrayLevel[0.6], 
       TypeSystem`NestedGrid`PackagePrivate`iFmtPathElem[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`fmtdElem}, 
         TypeSystem`NestedGrid`PackagePrivate`fmtdElem = 
          TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
           TypeSystem`NestedGrid`PackagePrivate`e]; 
         If[ByteCount[TypeSystem`NestedGrid`PackagePrivate`fmtdElem] < 400, 
           TypeSystem`NestedGrid`PackagePrivate`fmtdElem, 
           Rasterize[
           TypeSystem`NestedGrid`PackagePrivate`e, 
            ImageSize -> {Automatic, TypeSystem`$FontSize}]]], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`m, 
          Blank[Missing]]] := 
       TypeSystem`NestedGrid`PackagePrivate`metastyle["\[LongDash]"], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         HoldPattern[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`g, 
           Blank[GeoPosition]]]] := RawBoxes[
         TypeSystem`NestedGrid`PackagePrivate`richBox[
          TextString[TypeSystem`NestedGrid`PackagePrivate`g]]], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         PatternTest[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
           Blank[String]], StringQ]] := 
       TypeSystem`NestedGrid`PackagePrivate`trimString[
        TypeSystem`NestedGrid`PackagePrivate`s], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`hl, 
          Blank[Hyperlink]]] := 
       Replace[TypeSystem`NestedGrid`PackagePrivate`hl, {Hyperlink[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
             Blank[String]]] :> Hyperlink[
            TypeSystem`NestedGrid`PackagePrivate`truncatedString[
            TypeSystem`NestedGrid`PackagePrivate`s, 50], 
            TypeSystem`NestedGrid`PackagePrivate`s], Blank[] :> 
          TypeSystem`NestedGrid`PackagePrivate`hl}], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         URL[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`link, 
           BlankSequence[]]]] := 
       Replace[TypeSystem`NestedGrid`PackagePrivate`link, {
         Blank[String] :> Hyperlink[
            TypeSystem`NestedGrid`PackagePrivate`truncatedString[
            TypeSystem`NestedGrid`PackagePrivate`link, 50], 
            URL[TypeSystem`NestedGrid`PackagePrivate`link]], Blank[] :> 
          Hyperlink[
            URL[TypeSystem`NestedGrid`PackagePrivate`link]]}], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`ro, 
          HoldPattern[
           Blank[ResourceObject]]]] := RawBoxes[
         ToBoxes[
          Row[{"ResourceObject", "[", "\"", 
            First[TypeSystem`NestedGrid`PackagePrivate`ro]["Name"], "\"", 
            "]"}]]], TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`f, 
          Blank[File]]] := TypeSystem`NestedGrid`PackagePrivate`f, 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          HoldPattern[
           Alternatives[
            Blank[Entity], 
            Blank[EntityClass], 
            Blank[EntityPropertyClass], 
            Blank[EntityProperty]]]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`cached}, 
         TypeSystem`NestedGrid`PackagePrivate`cached = 
          Lookup[TypeSystem`NestedGrid`PackagePrivate`$EntityCache, 
            TypeSystem`NestedGrid`PackagePrivate`e, 
            TypeSystem`NestedGrid`PackagePrivate`checkEFCache[
            TypeSystem`NestedGrid`PackagePrivate`e]]; If[
           MatchQ[
           TypeSystem`NestedGrid`PackagePrivate`cached, 
            TypeSystem`NestedGrid`PackagePrivate`$entitiesPattern], 
           TypeSystem`NestedGrid`PackagePrivate`cached, 
           RawBoxes[
            TypeSystem`NestedGrid`PackagePrivate`richBox[
            TypeSystem`NestedGrid`PackagePrivate`cached]]]], 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`elem, 
          HoldPattern[
           Alternatives[
            Blank[Row], 
            Blank[Column], 
            Blank[Style], 
            Blank[Item], 
            Blank[Grid], 
            Blank[Pane], 
            Blank[NumberForm], 
            Blank[Dataset], 
            Blank[Dynamic]]]]] := TypeSystem`NestedGrid`PackagePrivate`elem, 
       TypeSystem`NestedGrid`PackagePrivate`fmtAtom[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := RawBoxes[
         TypeSystem`NestedGrid`PackagePrivate`abox[
         TypeSystem`NestedGrid`PackagePrivate`e]], 
       TypeSystem`NestedGrid`PackagePrivate`metastyle[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := 
       Item[TypeSystem`NestedGrid`PackagePrivate`e, 
         Alignment -> {Left, Baseline}, BaseStyle -> LightGray], 
       TypeSystem`NestedGrid`PackagePrivate`richBox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[]]] := StyleBox[
         ToBoxes[TypeSystem`NestedGrid`PackagePrivate`x, StandardForm], 
         FontColor -> TypeSystem`NestedGrid`PackagePrivate`$RichAtomColor], 
       TypeSystem`NestedGrid`PackagePrivate`trimString[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
          Blank[]]] := 
       If[StringLength[TypeSystem`NestedGrid`PackagePrivate`s] < 100, 
         TypeSystem`NestedGrid`PackagePrivate`s, 
         StringJoin[
          Snippet[TypeSystem`NestedGrid`PackagePrivate`s], 
          " \[DescendingEllipsis] "]], 
       TypeSystem`NestedGrid`PackagePrivate`truncatedString[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`elem, 
          Blank[String]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`limit, 
          Blank[]]] := If[
         And[
          StringQ[TypeSystem`NestedGrid`PackagePrivate`elem], 
          StringLength[TypeSystem`NestedGrid`PackagePrivate`elem] > 
          TypeSystem`NestedGrid`PackagePrivate`limit], 
         StringJoin[
          StringTake[TypeSystem`NestedGrid`PackagePrivate`elem, 50], "..."], 
         TypeSystem`NestedGrid`PackagePrivate`elem], 
       TypeSystem`NestedGrid`PackagePrivate`checkEFCache[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := Replace[
         EntityFramework`CommonNameCache[
         TypeSystem`NestedGrid`PackagePrivate`e], Except[
           Blank[String]] :> 
         TypeSystem`NestedGrid`PackagePrivate`guessCommonName[
          TypeSystem`NestedGrid`PackagePrivate`e]], 
       EntityFramework`CommonNameCache[
         Pattern[EntityFramework`Caching`Private`args, 
          BlankNullSequence[]]] := 
       With[{EntityFramework`Caching`Private`res = Catch[
            EntityFramework`Caching`Private`iCommonNameCache[
            EntityFramework`Caching`Private`args], 
            EntityFramework`Caching`Private`$tag]}, 
         Condition[
         EntityFramework`Caching`Private`res, 
          EntityFramework`Caching`Private`res =!= $Failed]], 
       EntityFramework`Caching`Private`iCommonNameCache[{}] := {}, 
       EntityFramework`Caching`Private`iCommonNameCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Alternatives[
           Alternatives[
            Alternatives[
            Entity, EntityClass, EntityProperty, EntityPropertyClass][
             Blank[], 
             Blank[]], 
            EntityProperty[
             Blank[], 
             Blank[], 
             Blank[]]], {
            Repeated[
             Alternatives[
              Alternatives[
              Entity, EntityClass, EntityProperty, EntityPropertyClass][
               Blank[], 
               Blank[]], 
              EntityProperty[
               Blank[], 
               Blank[], 
               Blank[]]]]}]]] := Replace[
         If[
          ListQ[EntityFramework`Caching`Private`ent], 
          Fold[
          SubsetMap[
           EntityFramework`Caching`Private`getFromCache[#, "Label", 
             "LastUpdate" :> 1]& , #, #2]& , 
           EntityFramework`Caching`Private`ent, 
           Values[
            PositionIndex[
             EntityTypeName[EntityFramework`Caching`Private`ent]]]], 
          EntityFramework`Caching`Private`getFromCache[
          EntityFramework`Caching`Private`ent, "Label", "LastUpdate" :> 1]], {
         Missing["NotInCache", {
             Pattern[EntityFramework`Caching`Private`e, 
              Blank[]], "Label"}] :> 
          Missing["NotInCommonNameCache", {
            EntityFramework`Caching`Private`e}], Missing["OutdatedCache", {
             Pattern[EntityFramework`Caching`Private`e, 
              Blank[]], "Label", 
             Pattern[EntityFramework`Caching`Private`value, 
              Blank[]]}] :> 
          Missing["OutdatedCommonNameCache", {
            EntityFramework`Caching`Private`e, 
             EntityFramework`Caching`Private`value}]}, {
          Boole[
           ListQ[EntityFramework`Caching`Private`ent]]}], 
       EntityFramework`Caching`Private`iCommonNameCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], "CallbackFunction" -> 
         Pattern[EntityFramework`Caching`Private`callback, 
           Blank[]]] := EntityFramework`Caching`Private`applyCallback[
         EntityFramework`Caching`Private`iCommonNameCache[
         EntityFramework`Caching`Private`ent], 
         EntityFramework`Caching`Private`callback, {
         "NotInCommonNameCache", "OutdatedCommonNameCache", 
          EntityFramework`$RetrievalFailurePattern, EntityValue}], 
       EntityFramework`Caching`Private`iCommonNameCache[
         BlankNullSequence[]] := EntityFramework`Caching`Private`fail[], 
       EntityFramework`Caching`Private`getFromCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Alternatives[
           Alternatives[
            EntityProperty[
             Blank[String], 
             Blank[String], 
             Repeated[
              PatternTest[
               Blank[], EntityFramework`QualifierQ], {0, 1}]], 
            EntityProperty[
             Blank[String], 
             PatternTest[
              Blank[], EntityFramework`ConditionQ]]], 
           Blank[String]]], 
         Pattern[EntityFramework`Caching`Private`opts, 
          OptionsPattern[EntityFramework`CachedEntityFunction]]] := 
       Module[{EntityFramework`Caching`Private`res}, 
         EntityFramework`Caching`Private`res = 
          EntityFramework`Caching`Private`makeMissing[
           EntityFramework`Caching`Private`ent, 
            EntityFramework`Caching`Private`prop]; If[
           Not[
            TrueQ[Internal`$CacheEntityValue]], 
           Return[EntityFramework`Caching`Private`res]]; If[
           OptionValue["UseMemoryCache"], EntityFramework`Caching`Private`res = 
           EntityFramework`Caching`Private`retrieveRemaining[
            EntityFramework`Caching`Private`res, 
             EntityFramework`Caching`Private`getFromMemoryCache[
              SlotSequence[1], EntityFramework`Caching`Private`opts]& , 
             If[
              ListQ[EntityFramework`Caching`Private`ent], 1, 0]]]; If[
           OptionValue["UseFileCache"], EntityFramework`Caching`Private`res = 
           EntityFramework`Caching`Private`retrieveRemaining[
            EntityFramework`Caching`Private`res, 
             EntityFramework`Caching`Private`getFromFileCache[
              SlotSequence[1], EntityFramework`Caching`Private`opts]& , 
             If[
              ListQ[EntityFramework`Caching`Private`ent], 1, 0]]]; 
         If[EntityFramework`$UseReadOnlyCache, 
           EntityFramework`Caching`Private`res = 
           EntityFramework`Caching`Private`retrieveRemaining[
            EntityFramework`Caching`Private`res, 
             
             Function[{
              EntityFramework`Caching`Private`e, 
               EntityFramework`Caching`Private`p}, 
              
              With[{EntityFramework`Caching`Private`data = 
                EntityFramework`EntityValueReadOnlyCache[
                 EntityFramework`Caching`Private`e, 
                  EntityFramework`Caching`Private`p]}, 
               If[
                Or[
                 MatchQ[EntityFramework`Caching`Private`data, 
                  Alternatives[
                   Blank[EntityFramework`EntityValueReadOnlyCache], $Failed]], 
                 And[
                  ListQ[EntityFramework`Caching`Private`e], 
                  Or[
                   Not[
                    ListQ[EntityFramework`Caching`Private`data]], 
                   Length[EntityFramework`Caching`Private`data] =!= 
                   Length[EntityFramework`Caching`Private`e]]]], 
                EntityFramework`Caching`Private`makeMissing[
                EntityFramework`Caching`Private`e, 
                 EntityFramework`Caching`Private`p], 
                EntityFramework`Caching`Private`data]]], 
             If[
              ListQ[EntityFramework`Caching`Private`ent], 1, 0]]]; If[
           And[
            TrueQ[EntityFramework`$SendWAEvents], 
            Not[
             MatchQ[EntityFramework`Caching`Private`res, 
              If[
               ListQ[EntityFramework`Caching`Private`ent], {
                RepeatedNull[
                 Missing["NotInCache", 
                  Blank[]]]}, 
               Missing["NotInCache", 
                Blank[]]]]], EntityFramework`$SendWAEvents = False; 
            CloudSystem`Private`SendWAEvent["entity"] === False], Message[
             MessageName[CloudSystem`Cloud, "creditlimit"]]; 
           EntityFramework`Caching`Private`res = $Failed]; 
         EntityFramework`Caching`Private`res], 
       EntityFramework`Caching`Private`getFromCache[
         BlankNullSequence[]] := EntityFramework`Caching`Private`fail[], 
       EntityFramework`QualifierQ[
         Alternatives[
          Alternatives[Rule, RuleDelayed][
           Alternatives[
            Blank[String], 
            HoldPattern[UnitSystem]], 
           Blank[]], {
           RepeatedNull[
            Alternatives[Rule, RuleDelayed][
             Alternatives[
              Blank[String], 
              HoldPattern[UnitSystem]], 
             Blank[]]]}, 
          Association[
           RepeatedNull[
            Alternatives[Rule, RuleDelayed][
             Alternatives[
              Blank[String], 
              HoldPattern[UnitSystem]], 
             Blank[]]]]]] := True, EntityFramework`QualifierQ[
         Blank[]] := False, EntityFramework`ConditionQ[
         Alternatives[{}, 
          Association[], All]] := True, EntityFramework`ConditionQ[
         Alternatives[
          Alternatives[Rule, RuleDelayed][
           PatternTest[
            Blank[], Internal`PossibleEntityPropertyQ], 
           Blank[]], {
           RepeatedNull[
            Alternatives[Rule, RuleDelayed][
             PatternTest[
              Blank[], Internal`PossibleEntityPropertyQ], 
             Blank[]]]}, 
          Association[
           RepeatedNull[
            Alternatives[Rule, RuleDelayed][
             PatternTest[
              Blank[], Internal`PossibleEntityPropertyQ], 
             Blank[]]]]]] := True, EntityFramework`ConditionQ[
         Blank[]] := False, Internal`PossibleEntityPropertyQ[
         PatternTest[
          Blank[], StringQ]] := True, Internal`PossibleEntityPropertyQ[
         EntityProperty[
          Alternatives[
           PatternTest[
            Blank[], StringQ], 
           PatternTest[
            Blank[], Internal`PossibleEntityListQ]], 
          PatternTest[
           Blank[], StringQ], 
          Repeated[
           PatternTest[
            Blank[], EntityFramework`QualifierQ], {0, 1}]]] := True, 
       Internal`PossibleEntityPropertyQ[
         EntityProperty[
          Alternatives[
           PatternTest[
            Blank[], StringQ], 
           PatternTest[
            Blank[], Internal`PossibleEntityListQ]], 
          PatternTest[
           Blank[], StringQ], 
          PatternTest[
           Blank[], EntityFramework`QualifierQ], 
          Blank[String]]] := True, Internal`PossibleEntityPropertyQ[
         EntityProperty[
          Alternatives[
           PatternTest[
            Blank[], StringQ], 
           PatternTest[
            Blank[], Internal`PossibleEntityListQ]], 
          PatternTest[
           Blank[], EntityFramework`ConditionQ]]] := True, 
       Internal`PossibleEntityPropertyQ[
         EntityProperty[
          Alternatives[Rule, RuleDelayed][
           Blank[String], 
           Pattern[EntityFramework`Predicates`Private`type, 
            Blank[]]], 
          Pattern[EntityFramework`Predicates`Private`rest, 
           BlankSequence[]]]] := Internal`PossibleEntityPropertyQ[
         EntityProperty[
         EntityFramework`Predicates`Private`type, 
          EntityFramework`Predicates`Private`rest]], 
       Internal`PossibleEntityPropertyQ[
         EntityFunction[
          Alternatives[
           Blank[Symbol], {
            Blank[Symbol]}], 
          Blank[]]] := True, Internal`PossibleEntityPropertyQ[
         Dated[
          PatternTest[
           Blank[], Internal`PossibleEntityPropertyQ], 
          Blank[]]] := True, Internal`PossibleEntityPropertyQ[
         EntityFramework`Qualified[
          PatternTest[
           Blank[], Internal`PossibleEntityPropertyQ], 
          Blank[]]] := True, Internal`PossibleEntityPropertyQ[
         EntityFramework`EntityPropertySequence[
          PatternTest[
           BlankNullSequence[], Internal`PossibleEntityPropertyQ]]] := True, 
       Internal`PossibleEntityPropertyQ[
         EntityFramework`InverseEntityProperty[
          PatternTest[
           Blank[], StringQ], 
          PatternTest[
           Blank[], StringQ], 
          Repeated[
           PatternTest[
            Blank[], EntityFramework`QualifierQ], {0, 1}]]] := True, 
       Internal`PossibleEntityPropertyQ[
         Blank[]] := False, Internal`PossibleEntityListQ[{}] := True, 
       Internal`PossibleEntityListQ[{
          Repeated[
           Entity[
            Alternatives[
             PatternTest[
              Blank[], Internal`PossibleEntityListQ], 
             PatternTest[
              Blank[], StringQ]], 
            Blank[]]]}] := True, Internal`PossibleEntityListQ[{
          PatternTest[
           BlankSequence[], Internal`PossibleEntityQ]}] := True, 
       Internal`PossibleEntityListQ[
         EntityClass[
          PatternTest[
           Blank[], StringQ], 
          Alternatives[
           Blank[String], {
            Repeated[
             Alternatives[
              Blank[String], 
              Blank[Integer], 
              Blank[List]]]}, 
           PatternTest[
            Blank[], EntityFramework`ConditionQ]], 
          Repeated[
           Alternatives[All, 
            Span[
             Blank[Integer], 
             Blank[Integer]]], {0, 1}]]] := True, Internal`PossibleEntityListQ[
         EntityClass[
          PatternTest[
           Blank[], Internal`PossibleEntityListQ], 
          PatternTest[
           Blank[], EntityFramework`ConditionQ]]] := True, 
       Internal`PossibleEntityListQ[
         AggregatedEntityClass[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityListQ], 
           Blank[String]], 
          BlankSequence[]]] := True, Internal`PossibleEntityListQ[
         ExtendedEntityClass[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityListQ], 
           Blank[String]], 
          Blank[]]] := True, Internal`PossibleEntityListQ[
         Alternatives[Dated, 
          HoldPattern[GeoVariant], EntityFramework`Qualified][
          PatternTest[
           Blank[], Internal`PossibleEntityListQ], 
          Blank[]]] := True, Internal`PossibleEntityListQ[
         CombinedEntityClass[
          Repeated[
           Alternatives[
            PatternTest[
             Blank[], Internal`PossibleEntityListQ], 
            Blank[String], 
            Alternatives[Rule, RuleDelayed][
             PatternTest[
              Blank[], StringQ], 
             Alternatives[
              PatternTest[
               Blank[], Internal`PossibleEntityListQ], 
              Blank[String]]]], {2}], 
          BlankNullSequence[]]] := True, Internal`PossibleEntityListQ[
         FilteredEntityClass[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityListQ], 
           Blank[String]], 
          PatternTest[
           Blank[], Internal`PossibleEntityPropertyQ]]] := True, 
       Internal`PossibleEntityListQ[
         SampledEntityClass[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityListQ], 
           Blank[String]], 
          Blank[]]] := True, Internal`PossibleEntityListQ[
         SortedEntityClass[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityListQ], 
           Blank[String]], 
          BlankSequence[]]] := True, Internal`PossibleEntityListQ[
         Blank[]] := False, Internal`PossibleEntityQ[
         Entity[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityListQ], 
           PatternTest[
            Blank[], StringQ]], 
          Blank[]]] := True, Internal`PossibleEntityQ[
         PatternTest[
          Blank[Association], AssociationQ]] := True, Internal`PossibleEntityQ[
         EntityFramework`AverageEntity[
          PatternTest[
           Blank[], Internal`PossibleEntityListQ]]] := True, 
       Internal`PossibleEntityQ[
         Dated[
          PatternTest[
           Blank[], Internal`PossibleEntityQ], 
          Blank[]]] := True, Internal`PossibleEntityQ[
         EntityCopies[
          PatternTest[
           Blank[], Internal`PossibleEntityQ], 
          Blank[]]] := True, Internal`PossibleEntityQ[
         EntityGroup[
          PatternTest[
           Blank[], Internal`PossibleEntityListQ]]] := True, 
       Internal`PossibleEntityQ[
         EntityInstance[
          PatternTest[
           Blank[], Internal`PossibleEntityQ], 
          Blank[]]] := True, Internal`PossibleEntityQ[
         EntityFramework`ParameterizedEntity[
          PatternTest[
           Blank[], StringQ], 
          PatternTest[
           Blank[], EntityFramework`ConditionQ]]] := True, 
       Internal`PossibleEntityQ[
         EntityFramework`Qualified[
          PatternTest[
           Blank[], Internal`PossibleEntityQ], 
          Blank[]]] := True, Internal`PossibleEntityQ[
         HoldPattern[GeoVariant][
          Entity[
           PatternTest[
            Blank[], StringQ], 
           Blank[]], 
          Blank[]]] := True, Internal`PossibleEntityQ[
         Blank[]] := False, Pattern[EntityFramework`OperatorForms`Private`ent, 
         Blank[EntityFramework`AverageEntity]][
         Pattern[EntityFramework`OperatorForms`Private`prop, 
          Blank[String]], 
         PatternTest[
          Pattern[EntityFramework`OperatorForms`Private`qual, 
           Blank[]], EntityFramework`QualifierQ]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`Qualified[
            EntityFramework`OperatorForms`Private`prop, 
             EntityFramework`OperatorForms`Private`qual]]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`ent, 
         Blank[EntityFramework`AverageEntity]][
         Pattern[EntityFramework`OperatorForms`Private`args, 
          BlankSequence[]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`OperatorForms`Private`args]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`ent, 
         EntityFramework`Qualified[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityQ], 
           PatternTest[
            Blank[], Internal`PossibleEntityListQ]], 
          Blank[]]][
         Pattern[EntityFramework`OperatorForms`Private`args, 
          BlankSequence[]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`OperatorForms`Private`args]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`prop, 
         EntityFramework`Qualified[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityPropertyQ], 
           PatternTest[
            Blank[], Internal`PossibleEntityPropertyListQ]], 
          Blank[]]][
         Pattern[EntityFramework`OperatorForms`Private`sub, 
          Alternatives[
           Blank[String], {
            BlankSequence[String]}]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`prop, 
            EntityFramework`OperatorForms`Private`sub]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`prop, 
         EntityFramework`Qualified[
          Alternatives[
           PatternTest[
            Blank[], Internal`PossibleEntityPropertyQ], 
           PatternTest[
            Blank[], Internal`PossibleEntityPropertyListQ]], 
          Blank[]]][
         Pattern[EntityFramework`OperatorForms`Private`ent, 
          Blank[]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`OperatorForms`Private`prop]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], Internal`PossibleEntityPropertyListQ[{}] := 
       True, Internal`PossibleEntityPropertyListQ[{
          Repeated[
           EntityProperty[
            PatternTest[
             Blank[], StringQ], 
            PatternTest[
             Blank[], StringQ]]]}] := True, 
       Internal`PossibleEntityPropertyListQ[{
          PatternTest[
           BlankSequence[], Internal`PossibleEntityPropertyQ]}] := True, 
       Internal`PossibleEntityPropertyListQ[
         EntityPropertyClass[
          PatternTest[
           Blank[], StringQ], 
          Alternatives[All, 
           PatternTest[
            Blank[], StringQ], 
           PatternTest[
            Blank[], EntityFramework`ConditionQ]], 
          Repeated[
           Alternatives[All, 
            Span[
             Blank[Integer], 
             Blank[Integer]]], {0, 1}]]] := True, 
       Internal`PossibleEntityPropertyListQ[
         Alternatives[Dated, 
          HoldPattern[GeoVariant], EntityFramework`Qualified][
          PatternTest[
           Blank[], Internal`PossibleEntityPropertyListQ], 
          Blank[]]] := True, Internal`PossibleEntityPropertyListQ[
         Blank[]] := False, Pattern[EntityFramework`OperatorForms`Private`ent, 
         Blank[EntityFramework`ParameterizedEntity]][
         Pattern[EntityFramework`OperatorForms`Private`prop, 
          Blank[String]], 
         PatternTest[
          Pattern[EntityFramework`OperatorForms`Private`qual, 
           Blank[]], EntityFramework`QualifierQ]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`Qualified[
            EntityFramework`OperatorForms`Private`prop, 
             EntityFramework`OperatorForms`Private`qual]]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`ent, 
         Blank[EntityFramework`ParameterizedEntity]][
         Pattern[EntityFramework`OperatorForms`Private`args, 
          BlankSequence[]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`OperatorForms`Private`args]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`prop, 
         Blank[EntityFramework`EntityPropertySequence]][
         Pattern[EntityFramework`OperatorForms`Private`sub, 
          Alternatives[
           Blank[String], {
            BlankSequence[String]}]], 
         Pattern[EntityFramework`OperatorForms`Private`assoc, 
          Repeated[
           Blank[String], {0, 1}]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`prop, 
            EntityFramework`OperatorForms`Private`sub, 
            EntityFramework`OperatorForms`Private`assoc]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`prop, 
         Blank[EntityFramework`EntityPropertySequence]][
         Pattern[EntityFramework`OperatorForms`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`OperatorForms`Private`assoc, 
          Repeated[
           Blank[String], {0, 1}]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`OperatorForms`Private`prop, 
            EntityFramework`OperatorForms`Private`assoc]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`prop, 
         Blank[EntityFramework`InverseEntityProperty]][
         Pattern[EntityFramework`OperatorForms`Private`sub, 
          Alternatives[
           Blank[String], {
            BlankSequence[String]}]], 
         Pattern[EntityFramework`OperatorForms`Private`assoc, 
          Repeated[
           Blank[String], {0, 1}]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`prop, 
            EntityFramework`OperatorForms`Private`sub, 
            EntityFramework`OperatorForms`Private`assoc]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`OperatorForms`Private`prop, 
         Blank[EntityFramework`InverseEntityProperty]][
         Pattern[EntityFramework`OperatorForms`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`OperatorForms`Private`assoc, 
          Repeated[
           Blank[String], {0, 1}]]] := 
       With[{EntityFramework`OperatorForms`Private`res = 
          EntityValue[
           EntityFramework`OperatorForms`Private`ent, 
            EntityFramework`OperatorForms`Private`prop, 
            EntityFramework`OperatorForms`Private`assoc]}, 
         Condition[EntityFramework`OperatorForms`Private`res, 
          Not[
           MatchQ[EntityFramework`OperatorForms`Private`res, 
            Blank[EntityValue]]]]], 
       Pattern[EntityFramework`Caching`Private`cf, 
         Blank[EntityFramework`CachedEntityFunction]][
         Pattern[EntityFramework`Caching`Private`args, 
          BlankNullSequence[]]] := 
       With[{EntityFramework`Caching`Private`res = Catch[
            EntityFramework`Caching`Private`iCachedEntityFunction[
            EntityFramework`Caching`Private`cf, 
             EntityFramework`Caching`Private`args], 
            EntityFramework`Caching`Private`$tag]}, 
         Condition[
         EntityFramework`Caching`Private`res, 
          EntityFramework`Caching`Private`res =!= $Failed]], 
       Options[EntityFramework`CachedEntityFunction] = {
        "FailurePattern" -> Missing["RetrievalFailure"], "LastUpdate" -> 
         Missing["NotAvailable"], UpdateInterval -> Infinity, "UseFileCache" :> 
         EntityFramework`$UseFileCache, "UseMemoryCache" :> 
         EntityFramework`$UseMemoryCache}, 
       EntityFramework`Caching`Private`iCachedEntityFunction[
         Blank[], {}, 
         BlankNullSequence[]] := {}, 
       EntityFramework`Caching`Private`iCachedEntityFunction[
         EntityFramework`CachedEntityFunction[
          Pattern[EntityFramework`Caching`Private`f, 
           Blank[]], 
          Pattern[EntityFramework`Caching`Private`opts, 
           OptionsPattern[]]], 
         Pattern[EntityFramework`Caching`Private`ent, 
          Alternatives[
           Blank[Entity], {
            BlankSequence[Entity]}]], 
         Pattern[EntityFramework`Caching`Private`qual, 
          Repeated[
           PatternTest[
            Blank[], EntityFramework`QualifierQ], {0, 1}]]] := 
       Module[{EntityFramework`Caching`Private`failurePattern, 
          EntityFramework`Caching`Private`callback}, 
         EntityFramework`Caching`Private`failurePattern = 
          OptionValue[EntityFramework`CachedEntityFunction, "FailurePattern"]; 
         EntityFramework`Caching`Private`callback[
            Pattern[EntityFramework`Caching`Private`e, 
             Blank[]], 
            Pattern[EntityFramework`Caching`Private`p, 
             Blank[]]] := With[{EntityFramework`Caching`Private`r = If[
               MatchQ[EntityFramework`Caching`Private`f, 
                Blank[EntityFramework`BatchApplied]], 
               Replace[Except[
                  PatternTest[
                   Blank[List], Length[#] === 
                   Length[EntityFramework`Caching`Private`e]& ]] :> 
                EntityFramework`Caching`Private`fail[]][
                EntityFramework`Caching`Private`f[
                 EntityFramework`BatchList[EntityFramework`Caching`Private`e],
                  EntityFramework`Caching`Private`qual]], 
               Map[
               EntityFramework`Caching`Private`f[#, 
                 EntityFramework`Caching`Private`qual]& , 
                EntityFramework`Caching`Private`e]]}, 
            With[{EntityFramework`Caching`Private`pos = Part[
                 Position[EntityFramework`Caching`Private`r, 
                  PatternTest[
                   Blank[], 
                   Composition[Not, 
                    MatchQ[
                    EntityFramework`Caching`Private`failurePattern]]], {1}, 
                  Heads -> False], All, 1]}, 
              If[Length[EntityFramework`Caching`Private`pos] > 0, 
               EntityFramework`Caching`Private`addToCache[
                Part[
                EntityFramework`Caching`Private`e, 
                 EntityFramework`Caching`Private`pos], 
                EntityFramework`Caching`Private`p, 
                Part[
                EntityFramework`Caching`Private`r, 
                 EntityFramework`Caching`Private`pos], 
                EntityFramework`Caching`Private`opts]]]; 
            EntityFramework`Caching`Private`r]; 
         EntityFramework`Caching`Private`applyCallback[
           EntityFramework`Caching`Private`getFromCache[
           EntityFramework`Caching`Private`ent, 
            EntityFramework`Caching`Private`makeFunctionKey[
            EntityFramework`Caching`Private`f, 
             EntityFramework`Caching`Private`qual], 
            EntityFramework`Caching`Private`opts], 
           EntityFramework`Caching`Private`callback, {
           "NotInCache", "OutdatedCache", 
            EntityFramework`Caching`Private`failurePattern, 
            EntityFramework`CachedEntityFunction}]], 
       EntityFramework`Caching`Private`iCachedEntityFunction[
         BlankNullSequence[]] := EntityFramework`Caching`Private`fail[], 
       EntityFramework`BatchApplied[
         Pattern[EntityFramework`BatchApplied`Private`f, 
          Blank[]], 
         OptionsPattern[]][
         HoldPattern[EntityFramework`BatchList][
          Pattern[EntityFramework`BatchApplied`Private`l, 
           Blank[List]]], 
         Pattern[EntityFramework`BatchApplied`Private`rest, 
          BlankNullSequence[]]] := 
       With[{EntityFramework`BatchApplied`Private`batchSize = 
          OptionValue["BatchSize"]}, If[
           Not[
            Or[EntityFramework`BatchApplied`Private`batchSize === Infinity, 
             And[
              IntegerQ[EntityFramework`BatchApplied`Private`batchSize], 
              Positive[EntityFramework`BatchApplied`Private`batchSize]]]], 
           Message[
             MessageName[EntityFramework`BatchApplied, "ioppf"], "BatchSize", 
             EntityFramework`BatchApplied`Private`batchSize]; 
           Return[$Failed]]; If[
           Or[
           EntityFramework`BatchApplied`Private`batchSize === Infinity, 
            Length[EntityFramework`BatchApplied`Private`l] <= 
            EntityFramework`BatchApplied`Private`batchSize], 
           Replace[Except[
              PatternTest[
               Blank[List], Length[#] === 
               Length[EntityFramework`BatchApplied`Private`l]& ]] :> (Message[
               MessageName[EntityFramework`BatchApplied, "listres"], 
               Length[EntityFramework`BatchApplied`Private`l], 
               HoldForm[
                EntityFramework`BatchApplied`Private`f[
                EntityFramework`BatchApplied`Private`l, 
                 EntityFramework`BatchApplied`Private`rest]]]; $Failed)][
            EntityFramework`BatchApplied`Private`f[
            EntityFramework`BatchApplied`Private`l, 
             EntityFramework`BatchApplied`Private`rest]], 
           Module[{EntityFramework`BatchApplied`Private`tag}, 
            Catch[
             Apply[Join, 
              Map[
              Replace[$Failed :> 
                Throw[$Failed, EntityFramework`BatchApplied`Private`tag]][
                EntityFramework`BatchApplied[
                EntityFramework`BatchApplied`Private`f][
                 EntityFramework`BatchList[#], 
                 EntityFramework`BatchApplied`Private`rest]]& , 
               Partition[EntityFramework`BatchApplied`Private`l, 
                UpTo[EntityFramework`BatchApplied`Private`batchSize]]]], 
             EntityFramework`BatchApplied`Private`tag]]]], 
       EntityFramework`BatchApplied[
         Pattern[EntityFramework`BatchApplied`Private`f, 
          Blank[]], 
         OptionsPattern[]][
         Pattern[EntityFramework`BatchApplied`Private`x, 
          Blank[]], 
         Pattern[EntityFramework`BatchApplied`Private`rest, 
          BlankNullSequence[]]] := Replace[{{
            Pattern[EntityFramework`BatchApplied`Private`res, 
             Blank[]]} :> EntityFramework`BatchApplied`Private`res, 
          Blank[] :> (Message[
             MessageName[EntityFramework`BatchApplied, "listres"], 1, 
             HoldForm[
              
              EntityFramework`BatchApplied`Private`f[{
               EntityFramework`BatchApplied`Private`x}, 
               EntityFramework`BatchApplied`Private`rest]]]; $Failed)}][
         EntityFramework`BatchApplied`Private`f[{
          EntityFramework`BatchApplied`Private`x}, 
          EntityFramework`BatchApplied`Private`rest]], 
       Options[EntityFramework`BatchApplied] = {"BatchSize" -> Infinity}, 
       Pattern[EntityFramework`BatchApplied`Private`b, 
         EntityFramework`BatchList[
          Except[
           Blank[List], 
           Pattern[EntityFramework`BatchApplied`Private`x, 
            Blank[]]], 
          BlankNullSequence[]]] := (Message[
          MessageName[EntityFramework`BatchList, "list"], 
          HoldForm[EntityFramework`BatchApplied`Private`b], 1]; 
        Condition[Null, False]), EntityFramework`Caching`Private`fail[] := 
       Throw[$Failed, EntityFramework`Caching`Private`$tag], 
       EntityFramework`Caching`Private`$tag = "EntityCachingTag", 
       EntityFramework`Caching`Private`addToCache[
         Blank[], 
         Blank[], 
         Missing[
          Alternatives["RetrievalFailure", "EntityListDefaultInvalidList"], 
          BlankNullSequence[]], 
         BlankNullSequence[]] := Null, Condition[
         EntityFramework`Caching`Private`addToCache[
          Pattern[EntityFramework`Caching`Private`ent, 
           Blank[List]], 
          Pattern[EntityFramework`Caching`Private`prop, 
           Blank[]], 
          PatternTest[
           Pattern[EntityFramework`Caching`Private`value, 
            Blank[List]], 
           MemberQ[EntityFramework`$RetrievalFailurePattern]], 
          Pattern[EntityFramework`Caching`Private`rest, 
           BlankNullSequence[]]], Length[EntityFramework`Caching`Private`ent] === 
         Length[EntityFramework`Caching`Private`value]] := 
       With[{EntityFramework`Caching`Private`pos = Part[
            Position[EntityFramework`Caching`Private`value, 
             Except[EntityFramework`$RetrievalFailurePattern], {1}, Heads -> 
             False], All, 1]}, 
         If[Length[EntityFramework`Caching`Private`pos] > 0, 
           EntityFramework`Caching`Private`addToCache[
            Part[
            EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`pos], 
            EntityFramework`Caching`Private`prop, 
            Part[
            EntityFramework`Caching`Private`value, 
             EntityFramework`Caching`Private`pos], 
            EntityFramework`Caching`Private`rest]]; Null], 
       EntityFramework`Caching`Private`addToCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]], 
         OptionsPattern[EntityFramework`CachedEntityFunction]] := (If[
          Not[
           TrueQ[Internal`$CacheEntityValue]], 
          Return[Null]]; If[
          OptionValue["UseMemoryCache"], 
          EntityFramework`Caching`Private`addToMemoryCache[
          EntityFramework`Caching`Private`ent, 
           EntityFramework`Caching`Private`prop, 
           EntityFramework`Caching`Private`value]]; If[
          OptionValue["UseFileCache"], 
          EntityFramework`Caching`Private`addToFileCache[
          EntityFramework`Caching`Private`ent, 
           EntityFramework`Caching`Private`prop, 
           EntityFramework`Caching`Private`value]]; Null), 
       EntityFramework`Caching`Private`addToCache[
         BlankSequence[]] := Null, EntityFramework`$RetrievalFailurePattern = 
       Missing[
         Alternatives["RetrievalFailure", "EntityListDefaultInvalidList"], 
         BlankNullSequence[]], Internal`$CacheEntityValue = True, 
       EntityFramework`Caching`Private`addToMemoryCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]]] := 
       If[ByteCount[EntityFramework`Caching`Private`$memoryCache] < 
         EntityFramework`$MaxMemoryCacheSize, 
         AssociateTo[EntityFramework`Caching`Private`$memoryCache, 
          If[
           ListQ[EntityFramework`Caching`Private`ent], 
           Thread[Thread[{
               Map[
               EntityFramework`Caching`Private`normalize, 
                EntityFramework`Caching`Private`ent], 
               EntityFramework`Caching`Private`normalize[
               EntityFramework`Caching`Private`prop]}] -> 
            Thread[{EntityFramework`Caching`Private`value, 
               AbsoluteTime[]}]], 
           Map[EntityFramework`Caching`Private`normalize, {
             EntityFramework`Caching`Private`ent, 
              EntityFramework`Caching`Private`prop}] -> {
            EntityFramework`Caching`Private`value, 
             AbsoluteTime[]}]]], EntityFramework`Caching`Private`$memoryCache = 
       Association[{
           EntityClass["EntityType", {}], "Entities"} -> {{
            Entity["EntityType", "AdministrativeDivision"], 
            Entity["EntityType", "Aircraft"], 
            Entity["EntityType", "Airline"], 
            Entity["EntityType", "Airport"], 
            Entity["EntityType", "Alphabet"], 
            Entity["EntityType", "AmusementPark"], 
            Entity["EntityType", "AmusementParkRide"], 
            Entity["EntityType", "AmusementParkType"], 
            Entity["EntityType", "AnatomicalConceptIdentifier"], 
            Entity["EntityType", "AnatomicalFunctionalConcept"], 
            Entity["EntityType", "AnatomicalSpatialConcept"], 
            Entity["EntityType", "AnatomicalStructure"], 
            Entity["EntityType", "AnatomicalTemporalConcept"], 
            Entity["EntityType", "AnimalAnatomicalStructure"], 
            Entity["EntityType", "Artwork"], 
            Entity["EntityType", "AstronomicalObservatory"], 
            Entity["EntityType", "AstronomicalOrbit"], 
            Entity["EntityType", "AstronomicalRadioSource"], 
            Entity["EntityType", "AtmosphericLayer"], 
            Entity["EntityType", "AtomicLevel"], 
            Entity["EntityType", "AtomicLine"], 
            Entity["EntityType", "AutomobileAward"], 
            Entity["EntityType", "AutomobileDivision"], 
            Entity["EntityType", "AutomobileDriveWheel"], 
            Entity["EntityType", "AutomobileEngineType"], 
            Entity["EntityType", "AutomobileFuelType"], 
            Entity["EntityType", "AutomobileManufacturer"], 
            Entity["EntityType", "AutomobileModel"], 
            Entity["EntityType", "AutomobileOption"], 
            Entity["EntityType", "AutomobileSubTrim"], 
            Entity["EntityType", "AutomobileTransmissionType"], 
            Entity["EntityType", "AutomobileTrim"], 
            Entity["EntityType", "AutomobileType"], 
            Entity["EntityType", "BasicFoodGroup"], 
            Entity["EntityType", "BasketballGameType"], 
            Entity["EntityType", "BasketballTeam"], 
            Entity["EntityType", "Beach"], 
            Entity["EntityType", "BoardGame"], 
            Entity["EntityType", "Book"], 
            Entity["EntityType", "Bridge"], 
            Entity["EntityType", "BridgeType"], 
            Entity["EntityType", "BroadcastStation"], 
            Entity["EntityType", "BroadcastStationClassification"], 
            Entity["EntityType", "Building"], 
            Entity["EntityType", "Canal"], 
            Entity["EntityType", "Castle"], 
            Entity["EntityType", "CatBreed"], 
            Entity["EntityType", "Cave"], 
            Entity["EntityType", "Cemetery"], 
            Entity["EntityType", "Character"], 
            Entity["EntityType", "Chemical"], 
            Entity["EntityType", "ChemicalFunctionalGroup"], 
            Entity["EntityType", "City"], 
            Entity["EntityType", "ClimateType"], 
            Entity["EntityType", "Cloud"], 
            Entity["EntityType", "CognitiveTask"], 
            Entity["EntityType", "Color"], 
            Entity["EntityType", "ColorSet"], 
            Entity["EntityType", "Comet"], 
            Entity["EntityType", "Company"], 
            Entity["EntityType", "ComputationalComplexityClass"], 
            Entity["EntityType", "Concept"], 
            Entity["EntityType", "Constellation"], 
            Entity["EntityType", "ContinuedFraction"], 
            Entity["EntityType", "ContinuedFractionResult"], 
            Entity["EntityType", "ContinuedFractionSource"], 
            Entity["EntityType", "CookingAction"], 
            Entity["EntityType", "CookingEquipment"], 
            Entity["EntityType", "CookingEquipmentType"], 
            Entity["EntityType", "CookingMethod"], 
            Entity["EntityType", "CoordinateSystem"], 
            Entity["EntityType", "CosmologicalEpoch"], 
            Entity["EntityType", "Country"], 
            Entity["EntityType", "CrystalFamily"], 
            Entity["EntityType", "CrystallographicSpaceGroup"], 
            Entity["EntityType", "CrystalSystem"], 
            Entity["EntityType", "CurrencyDenomination"], 
            Entity["EntityType", "Dam"], 
            Entity["EntityType", "DeepSpaceProbe"], 
            Entity["EntityType", "Desert"], 
            Entity["EntityType", "DietaryReferenceIntakeType"], 
            Entity["EntityType", "DietaryReferenceStandard"], 
            Entity["EntityType", "DietaryRestriction"], 
            Entity["EntityType", "Digimon"], 
            Entity["EntityType", "Dinosaur"], 
            Entity["EntityType", "Disease"], 
            Entity["EntityType", "DisplayFormat"], 
            Entity["EntityType", "DistrictCourt"], 
            Entity["EntityType", "DogBreed"], 
            Entity["EntityType", "EarthImpact"], 
            Entity["EntityType", "EclipseType"], 
            Entity["EntityType", "Element"], 
            Entity["EntityType", "Emotion"], 
            Entity["EntityType", "EntityType"], 
            Entity["EntityType", "EquationBlock"], 
            Entity["EntityType", "EthnicGroup"], 
            Entity["EntityType", "Exoplanet"], 
            Entity["EntityType", "FamousAlgorithm"], 
            Entity["EntityType", "FamousChemistryProblem"], 
            Entity["EntityType", "FamousGem"], 
            Entity["EntityType", "FamousMathGame"], 
            Entity["EntityType", "FamousMathProblem"], 
            Entity["EntityType", "FamousPhysicsProblem"], 
            Entity["EntityType", "FictionalCharacter"], 
            Entity["EntityType", "FileFormat"], 
            Entity["EntityType", "Financial"], 
            Entity["EntityType", "FiniteGroup"], 
            Entity["EntityType", "Food"], 
            Entity["EntityType", "FoodAge"], 
            Entity["EntityType", "FoodAlcoholLabel"], 
            Entity["EntityType", "FoodBeefGrade"], 
            Entity["EntityType", "FoodBoneContent"], 
            Entity["EntityType", "FoodBrandName"], 
            Entity["EntityType", "FoodCaffeineLabel"], 
            Entity["EntityType", "FoodCalorieLabel"], 
            Entity["EntityType", "FoodComposition"], 
            Entity["EntityType", "FoodConcentration"], 
            Entity["EntityType", "FoodCrustType"], 
            Entity["EntityType", "FoodCulture"], 
            Entity["EntityType", "FoodDataSource"], 
            Entity["EntityType", "FoodFatLabel"], 
            Entity["EntityType", "FoodFatType"], 
            Entity["EntityType", "FoodFiberLabel"], 
            Entity["EntityType", "FoodFlavor"], 
            Entity["EntityType", "FoodGeometry"], 
            Entity["EntityType", "FoodGeometryType"], 
            Entity["EntityType", "FoodGlutenContent"], 
            Entity["EntityType", "FoodIngredient"], 
            Entity["EntityType", "FoodIngredientPurpose"], 
            Entity["EntityType", "FoodIntendedUse"], 
            Entity["EntityType", "FoodIronLabel"], 
            Entity["EntityType", "FoodItemSizeQualifier"], 
            Entity["EntityType", "FoodLocation"], 
            Entity["EntityType", "FoodManufacturer"], 
            Entity["EntityType", "FoodMeatColor"], 
            Entity["EntityType", "FoodMeatCut"], 
            Entity["EntityType", "FoodMeatQuality"], 
            Entity["EntityType", "FoodMoistureLevel"], 
            Entity["EntityType", "FoodNutritionalSupplement"], 
            Entity["EntityType", "FoodNutritionalSupplementNotAdded"], 
            Entity["EntityType", "FoodPackaging"], 
            Entity["EntityType", "FoodPart"], 
            Entity["EntityType", "FoodPattyCount"], 
            Entity["EntityType", "FoodPeelingType"], 
            Entity["EntityType", "FoodPlantPart"], 
            Entity["EntityType", "FoodPreparation"], 
            Entity["EntityType", "FoodProcessingType"], 
            Entity["EntityType", "FoodSeafoodVariety"], 
            Entity["EntityType", "FoodSeedContent"], 
            Entity["EntityType", "FoodServingType"], 
            Entity["EntityType", "FoodShape"], 
            Entity["EntityType", "FoodSize"], 
            Entity["EntityType", "FoodSkinContent"], 
            Entity["EntityType", "FoodSodiumLabel"], 
            Entity["EntityType", "FoodState"], 
            Entity["EntityType", "FoodStorageType"], 
            Entity["EntityType", "FoodSubBrandName"], 
            Entity["EntityType", "FoodSugarLabel"], 
            Entity["EntityType", "FoodSugarType"], 
            Entity["EntityType", "FoodTexture"], 
            Entity["EntityType", "FoodTrimmingLevel"], 
            Entity["EntityType", "FoodType"], 
            Entity["EntityType", "FoodTypeGroup"], 
            Entity["EntityType", "FoodVariety"], 
            Entity["EntityType", "FoodVegetablePart"], 
            Entity["EntityType", "Forest"], 
            Entity["EntityType", "FrequencyAllocation"], 
            Entity["EntityType", "FunctionalAnalysisSource"], 
            Entity["EntityType", "FunctionSpace"], 
            Entity["EntityType", "Galaxy"], 
            Entity["EntityType", "Gender"], 
            Entity["EntityType", "Gene"], 
            Entity["EntityType", "GeneralAnatomicalStructure"], 
            Entity["EntityType", "GeographicRegion"], 
            Entity["EntityType", "GeologicalLayer"], 
            Entity["EntityType", "GeologicalPeriod"], 
            Entity["EntityType", "GivenName"], 
            Entity["EntityType", "Glacier"], 
            Entity["EntityType", "GovernmentPosition"], 
            Entity["EntityType", "GrammaticalDependency"], 
            Entity["EntityType", "GrammaticalUnit"], 
            Entity["EntityType", "Graph"], 
            Entity["EntityType", "Handedness"], 
            Entity["EntityType", "HistoricalCountry"], 
            Entity["EntityType", "HistoricalEvent"], 
            Entity["EntityType", "HistoricalPeriod"], 
            Entity["EntityType", "HistoricalSite"], 
            Entity["EntityType", "HorseBreed"], 
            Entity["EntityType", "HorseBreedConservationStatus"], 
            Entity["EntityType", "HorseCoatColorAndPattern"], 
            Entity["EntityType", "HorseType"], 
            Entity["EntityType", "HorseUse"], 
            Entity["EntityType", "Hospital"], 
            Entity["EntityType", "ICDNine"], 
            Entity["EntityType", "ICDTen"], 
            Entity["EntityType", "Icon"], 
            Entity["EntityType", "IntegerSequence"], 
            Entity["EntityType", "InternetDomain"], 
            Entity["EntityType", "IPAddress"], 
            Entity["EntityType", "Island"], 
            Entity["EntityType", "ISO15924Group"], 
            Entity["EntityType", "Isotope"], 
            Entity["EntityType", "IUCNCategory"], 
            Entity["EntityType", "Knot"], 
            Entity["EntityType", "Lake"], 
            Entity["EntityType", "Lamina"], 
            Entity["EntityType", "Language"], 
            Entity["EntityType", "LanguageFamily"], 
            Entity["EntityType", "LanguageLocale"], 
            Entity["EntityType", "LanguageOfficialRecognition"], 
            Entity["EntityType", "LanguageScope"], 
            Entity["EntityType", "LanguageStatus"], 
            Entity["EntityType", "LanguageType"], 
            Entity["EntityType", "LanguaLTerm"], 
            Entity["EntityType", "Laser"], 
            Entity["EntityType", "Lattice"], 
            Entity["EntityType", "LatticeSystem"], 
            Entity["EntityType", "Leader"], 
            Entity["EntityType", "LibraryBranch"], 
            Entity["EntityType", "LibrarySystem"], 
            Entity["EntityType", "LightColor"], 
            Entity["EntityType", "LunarEclipse"], 
            Entity["EntityType", "MannedSpaceMission"], 
            Entity["EntityType", "MathematicalConstant"], 
            Entity["EntityType", "MathematicalFunction"], 
            Entity["EntityType", "MathWorld"], 
            Entity["EntityType", "MatterPhase"], 
            Entity["EntityType", "MeasurementDevice"], 
            Entity["EntityType", "MedicalTest"], 
            Entity["EntityType", "MeteorShower"], 
            Entity["EntityType", "MetropolitanArea"], 
            Entity["EntityType", "MilitaryConflict"], 
            Entity["EntityType", "MilitaryConflictType"], 
            Entity["EntityType", "Mine"], 
            Entity["EntityType", "Mineral"], 
            Entity["EntityType", "MinorPlanet"], 
            Entity["EntityType", "MLBAward"], 
            Entity["EntityType", "MLBDivision"], 
            Entity["EntityType", "MLBGame"], 
            Entity["EntityType", "MLBGameType"], 
            Entity["EntityType", "MLBLeague"], 
            Entity["EntityType", "MLBPlayer"], 
            Entity["EntityType", "MLBPosition"], 
            Entity["EntityType", "MLBSeriesType"], 
            Entity["EntityType", "MLBTeam"], 
            Entity["EntityType", "MoonPhase"], 
            Entity["EntityType", "Mountain"], 
            Entity["EntityType", "Movie"], 
            Entity["EntityType", "Museum"], 
            Entity["EntityType", "MusicAct"], 
            Entity["EntityType", "MusicAlbum"], 
            Entity["EntityType", "MusicAlbumRelease"], 
            Entity["EntityType", "MusicalInstrument"], 
            Entity["EntityType", "MusicWork"], 
            Entity["EntityType", "MusicWorkRecording"], 
            Entity["EntityType", "Mythology"], 
            Entity["EntityType", "NaturalHazard"], 
            Entity["EntityType", "NaturalResource"], 
            Entity["EntityType", "NBAConference"], 
            Entity["EntityType", "NBADivision"], 
            Entity["EntityType", "NBAPlayer"], 
            Entity["EntityType", "NBAPosition"], 
            Entity["EntityType", "NBATeam"], 
            Entity["EntityType", "NCAAFootballConference"], 
            Entity["EntityType", "NCAAFootballDivision"], 
            Entity["EntityType", "NCAAFootballPlayer"], 
            Entity["EntityType", "NCAAFootballTeam"], 
            Entity["EntityType", "NCAAMBConference"], 
            Entity["EntityType", "NCAAMBDivision"], 
            Entity["EntityType", "NCAAMBPlayer"], 
            Entity["EntityType", "NCAAMBTeam"], 
            Entity["EntityType", "Nebula"], 
            Entity["EntityType", "Neighborhood"], 
            Entity["EntityType", "NetworkService"], 
            Entity["EntityType", "Neuron"], 
            Entity["EntityType", "NFLConference"], 
            Entity["EntityType", "NFLDivision"], 
            Entity["EntityType", "NFLPlayer"], 
            Entity["EntityType", "NFLTeam"], 
            Entity["EntityType", "NonperiodicTiling"], 
            Entity["EntityType", "NotableComputer"], 
            Entity["EntityType", "NuclearExplosion"], 
            Entity["EntityType", "NuclearReactor"], 
            Entity["EntityType", "NuclearTestSite"], 
            Entity["EntityType", "Nutrient"], 
            Entity["EntityType", "ObjectStatus"], 
            Entity["EntityType", "Ocean"], 
            Entity["EntityType", "OilField"], 
            Entity["EntityType", "OperatingStatus"], 
            Entity["EntityType", "Park"], 
            Entity["EntityType", "ParkType"], 
            Entity["EntityType", "PartialDifferentialEquation"], 
            Entity["EntityType", "Particle"], 
            Entity["EntityType", "ParticleAccelerator"], 
            Entity["EntityType", "PartOfSpeech"], 
            Entity["EntityType", "Periodical"], 
            Entity["EntityType", "PeriodicTiling"], 
            Entity["EntityType", "Person"], 
            Entity["EntityType", "PersonOccupation"], 
            Entity["EntityType", "PersonTitle"], 
            Entity["EntityType", "PhysicalConstant"], 
            Entity["EntityType", "PhysicalEffect"], 
            Entity["EntityType", "PhysicalSystem"], 
            Entity["EntityType", "PilatesExercise"], 
            Entity["EntityType", "PlaneCurve"], 
            Entity["EntityType", "Planet"], 
            Entity["EntityType", "PlanetaryMoon"], 
            Entity["EntityType", "Plant"], 
            Entity["EntityType", "PLUCode"], 
            Entity["EntityType", "Pokemon"], 
            Entity["EntityType", "PokemonAbilities"], 
            Entity["EntityType", "PokemonGeneration"], 
            Entity["EntityType", "PokemonPokedexColor"], 
            Entity["EntityType", "PokemonType"], 
            Entity["EntityType", "Polyhedron"], 
            Entity["EntityType", "PopularCurve"], 
            Entity["EntityType", "PregnancyStage"], 
            Entity["EntityType", "PreservationStatus"], 
            Entity["EntityType", "Prison"], 
            Entity["EntityType", "PrisonSecurityLevel"], 
            Entity["EntityType", "PrisonType"], 
            Entity["EntityType", "PrivateSchool"], 
            Entity["EntityType", "ProgrammingLanguage"], 
            Entity["EntityType", "Protein"], 
            Entity["EntityType", "PublicSchool"], 
            Entity["EntityType", "Pulsar"], 
            Entity["EntityType", "Quasiparticle"], 
            Entity["EntityType", "Reef"], 
            Entity["EntityType", "Religion"], 
            Entity["EntityType", "ReserveLand"], 
            Entity["EntityType", "RiemannHypothesisFormulation"], 
            Entity["EntityType", "RiemannHypothesisSource"], 
            Entity["EntityType", "River"], 
            Entity["EntityType", "Rocket"], 
            Entity["EntityType", "RocketFunction"], 
            Entity["EntityType", "Satellite"], 
            Entity["EntityType", "SchoolDistrict"], 
            Entity["EntityType", "SeRFWord"], 
            Entity["EntityType", "Ship"], 
            Entity["EntityType", "Shipwreck"], 
            Entity["EntityType", "SNP"], 
            Entity["EntityType", "SolarEclipse"], 
            Entity["EntityType", "SolarSystemFeature"], 
            Entity["EntityType", "Solid"], 
            Entity["EntityType", "Sound"], 
            Entity["EntityType", "Source"], 
            Entity["EntityType", "SpaceCurve"], 
            Entity["EntityType", "SpaceWeather"], 
            Entity["EntityType", "Species"], 
            Entity["EntityType", "SportingOrganization"], 
            Entity["EntityType", "SportMatch"], 
            Entity["EntityType", "SportObject"], 
            Entity["EntityType", "Stadium"], 
            Entity["EntityType", "Star"], 
            Entity["EntityType", "StarCluster"], 
            Entity["EntityType", "StatisticalGroup"], 
            Entity["EntityType", "StormType"], 
            Entity["EntityType", "Supernova"], 
            Entity["EntityType", "Surface"], 
            Entity["EntityType", "Surname"], 
            Entity["EntityType", "TerrainType"], 
            Entity["EntityType", "TidalConstituent"], 
            Entity["EntityType", "TideStation"], 
            Entity["EntityType", "TimeZone"], 
            Entity["EntityType", "TopLevelDomain"], 
            Entity["EntityType", "TopologicalSpaceType"], 
            Entity["EntityType", "TrafficSign"], 
            Entity["EntityType", "Transparency"], 
            Entity["EntityType", "TropicalStorm"], 
            Entity["EntityType", "Tunnel"], 
            Entity["EntityType", "UnderseaFeature"], 
            Entity["EntityType", "University"], 
            Entity["EntityType", "USCongressionalDistrict"], 
            Entity["EntityType", "USDAFoodGroup"], 
            Entity["EntityType", "VisualArtsArtForm"], 
            Entity["EntityType", "VisualArtsArtGenre"], 
            Entity["EntityType", "Volcano"], 
            Entity["EntityType", "Waterfall"], 
            Entity["EntityType", "WeatherStation"], 
            Entity["EntityType", "WolframLanguageSymbol"], 
            Entity["EntityType", "Word"], 
            Entity["EntityType", "WordSense"], 
            Entity["EntityType", "WritingDirection"], 
            Entity["EntityType", "WritingScript"], 
            Entity["EntityType", "WritingScriptBaseline"], 
            Entity["EntityType", "WritingScriptFamily"], 
            Entity["EntityType", "WritingScriptLigature"], 
            Entity["EntityType", "WritingScriptStatus"], 
            Entity["EntityType", "WritingScriptType"], 
            Entity["EntityType", "WritingScriptWhiteSpace"], 
            Entity["EntityType", "WritingSystem"], 
            Entity["EntityType", "YogaPose"], 
            Entity["EntityType", "YogaPosition"], 
            Entity["EntityType", "YogaProp"], 
            Entity["EntityType", "YogaSequence"], 
            Entity["EntityType", "ZIPCode"]}, 
           3.7706225829230422`17.328988053425334*^9}, {
           EntityProperty["City", "Label", {}], "Normalization"} -> {
           EntityProperty["City", "Label"], 
           3.7705674499654201`17.328981703250054*^9}, {
           EntityProperty["City", "SubLabel", {}], "Normalization"} -> {
           Missing["UnknownProperty", {"City", "SubLabel"}], 
           3.7705674500373394`17.328981703258336*^9}, {
           Entity["City", {"Champaign", "Illinois", "UnitedStates"}], 
           EntityProperty["City", "Label", {}]} -> {
          "Champaign", 3.7646655337316865`17.32830138714499*^9}, {
           Entity["EntityType", "City"], 
           EntityProperty["EntityType", "Label", {}]} -> {
          "city", 3.7706225827432604`17.32898805340463*^9}], 
       EntityFramework`$MaxMemoryCacheSize = 500000000, 
       EntityFramework`Caching`Private`normalize[
         Pattern[EntityFramework`Caching`Private`head, 
          Alternatives[EntityClass, EntityProperty, EntityPropertyClass]][
          Pattern[EntityFramework`Caching`Private`type, 
           Blank[String]], 
          PatternTest[
           Pattern[EntityFramework`Caching`Private`cond, 
            Blank[]], EntityFramework`ConditionQ]]] := 
       EntityFramework`Caching`Private`head[
        EntityFramework`Caching`Private`type, 
         Sort[
          EntityFramework`NormalizeConditions[
          EntityFramework`Caching`Private`cond, 
           EntityFramework`Caching`Private`type]]], 
       EntityFramework`Caching`Private`normalize[
         EntityProperty[
          Pattern[EntityFramework`Caching`Private`type, 
           Blank[String]], 
          Pattern[EntityFramework`Caching`Private`name, 
           Blank[String]], 
          Optional[
           Pattern[EntityFramework`Caching`Private`qual, 
            Blank[]], {}]]] := 
       EntityProperty[
        EntityFramework`Caching`Private`type, 
         EntityFramework`Caching`Private`name, 
         EntityFramework`NormalizeQualifiers[
         EntityFramework`Caching`Private`qual]], 
       EntityFramework`Caching`Private`normalize[
         Pattern[EntityFramework`Caching`Private`x, 
          Blank[]]] := EntityFramework`Caching`Private`x, 
       EntityFramework`NormalizeConditions[
         Alternatives[{}, 
          Association[], All], 
         BlankNullSequence[]] := {}, EntityFramework`NormalizeConditions[
         PatternTest[
          Pattern[EntityFramework`Utilities`Private`assoc, 
           Blank[]], AssociationQ], 
         Pattern[EntityFramework`Utilities`Private`rest, 
          BlankNullSequence[]]] := EntityFramework`NormalizeConditions[
         Normal[EntityFramework`Utilities`Private`assoc], 
         EntityFramework`Utilities`Private`rest], 
       EntityFramework`NormalizeConditions[
         PatternTest[
          Pattern[EntityFramework`Utilities`Private`cond, 
           Blank[]], EntityFramework`ConditionQ]] := 
       Flatten[{EntityFramework`Utilities`Private`cond}], 
       EntityFramework`NormalizeConditions[
         PatternTest[
          Pattern[EntityFramework`Utilities`Private`cond, 
           Blank[]], EntityFramework`ConditionQ], 
         Pattern[EntityFramework`Utilities`Private`type, 
          Blank[String]]] := Apply[
         Function[{
          EntityFramework`Utilities`Private`p, 
           EntityFramework`Utilities`Private`v}, 
          (FixedPoint[
           Replace[{Alternatives[Rule, RuleDelayed][
               Pattern[EntityFramework`Utilities`Private`p1, 
                Blank[]], 
               Alternatives[Rule, RuleDelayed][
                Pattern[EntityFramework`Utilities`Private`p2, 
                 Blank[]], 
                Pattern[EntityFramework`Utilities`Private`value, 
                 Blank[]]]] :> (
              EntityFramework`EntityPropertySequence[
               EntityFramework`Utilities`Private`p1, 
                EntityFramework`Utilities`Private`p2] -> 
              EntityFramework`Utilities`Private`value), (
              EntityFramework`EntityPropertySequence[
                Pattern[EntityFramework`Utilities`Private`x, 
                 BlankNullSequence[]], 
                EntityFramework`EntityPropertySequence[
                 Pattern[EntityFramework`Utilities`Private`y, 
                  BlankSequence[]]], 
                Pattern[EntityFramework`Utilities`Private`z, 
                 BlankNullSequence[]]] -> 
              Pattern[EntityFramework`Utilities`Private`value, 
                Blank[]]) :> (
              EntityFramework`EntityPropertySequence[
               EntityFramework`Utilities`Private`x, 
                EntityFramework`Utilities`Private`y, 
                EntityFramework`Utilities`Private`z] -> 
              EntityFramework`Utilities`Private`value)}], #]& )[
           Apply[Rule, {
             Replace[Pattern[EntityFramework`Utilities`Private`s, 
                Blank[String]] :> 
              EntityProperty[
               EntityFramework`Utilities`Private`type, 
                EntityFramework`Utilities`Private`s]][
             EntityFramework`Utilities`Private`p], 
             EntityFramework`Utilities`Private`v}]]], 
         Flatten[{EntityFramework`Utilities`Private`cond}], {1}], 
       EntityFramework`NormalizeConditions[
         Pattern[EntityFramework`Utilities`Private`head, 
          Alternatives[EntityClass, EntityProperty]][
          Pattern[EntityFramework`Utilities`Private`type, 
           Blank[]], 
          PatternTest[
           Pattern[EntityFramework`Utilities`Private`cond, 
            Blank[]], EntityFramework`ConditionQ], 
          Pattern[EntityFramework`Utilities`Private`rest, 
           BlankNullSequence[]]]] := 
       EntityFramework`Utilities`Private`head[
        EntityFramework`Utilities`Private`type, 
         EntityFramework`NormalizeConditions[
         EntityFramework`Utilities`Private`cond, 
          EntityFramework`Utilities`Private`type], 
         EntityFramework`Utilities`Private`rest], 
       EntityFramework`NormalizeConditions[
         EntityPropertyClass[
          Pattern[EntityFramework`Utilities`Private`type, 
           Blank[]], 
          PatternTest[
           Pattern[EntityFramework`Utilities`Private`cond, 
            Blank[]], EntityFramework`ConditionQ], 
          Pattern[EntityFramework`Utilities`Private`rest, 
           BlankNullSequence[]]]] := 
       EntityPropertyClass[EntityFramework`Utilities`Private`type, 
         EntityFramework`NormalizeConditions[
         EntityFramework`Utilities`Private`cond], 
         EntityFramework`Utilities`Private`rest], 
       EntityFramework`NormalizeConditions[
         Pattern[EntityFramework`Utilities`Private`x, 
          Blank[]], 
         BlankNullSequence[]] := EntityFramework`Utilities`Private`x, 
       EntityFramework`NormalizeQualifiers[
         Association[]] := {}, EntityFramework`NormalizeQualifiers[{}] := {}, 
       EntityFramework`NormalizeQualifiers[
         Pattern[EntityFramework`Utilities`Private`prop, 
          EntityProperty[
           Blank[], 
           Blank[]]]] := EntityFramework`Utilities`Private`prop, 
       EntityFramework`NormalizeQualifiers[
         EntityProperty[
          Pattern[EntityFramework`Utilities`Private`type, 
           Blank[String]], 
          Pattern[EntityFramework`Utilities`Private`name, 
           Blank[String]], 
          PatternTest[
           Pattern[EntityFramework`Utilities`Private`qual, 
            Blank[]], EntityFramework`QualifierQ]]] := Replace[
         EntityFramework`NormalizeQualifiers[{
          EntityFramework`Utilities`Private`name, 
           EntityFramework`Utilities`Private`qual}], {
         Pattern[EntityFramework`Utilities`Private`p, 
            Blank[String]] :> 
          EntityProperty[
           EntityFramework`Utilities`Private`type, 
            EntityFramework`Utilities`Private`p], {
            Pattern[EntityFramework`Utilities`Private`p, 
             BlankSequence[]]} :> 
          EntityProperty[
           EntityFramework`Utilities`Private`type, 
            EntityFramework`Utilities`Private`p]}], 
       EntityFramework`NormalizeQualifiers[{
          Pattern[EntityFramework`Utilities`Private`name, 
           Blank[String]]}] := EntityFramework`Utilities`Private`name, 
       EntityFramework`NormalizeQualifiers[
         Alternatives[List, EntityFramework`Qualified][
          Pattern[EntityFramework`Utilities`Private`name, 
           Blank[String]], 
          Alternatives[{}, 
           Association[]]]] := EntityFramework`Utilities`Private`name, 
       EntityFramework`NormalizeQualifiers[
         Pattern[EntityFramework`Utilities`Private`assoc, 
          Blank[Association]]] := EntityFramework`NormalizeQualifiers[
         Normal[EntityFramework`Utilities`Private`assoc]], 
       EntityFramework`NormalizeQualifiers[
         PatternTest[
          Pattern[EntityFramework`Utilities`Private`rules, 
           Blank[]], EntityFramework`QualifierQ]] := SortBy[First][
         Flatten[{EntityFramework`Utilities`Private`rules}]], 
       EntityFramework`NormalizeQualifiers[
         Pattern[EntityFramework`Utilities`Private`head, 
          Alternatives[List, EntityFramework`Qualified]][
          Pattern[EntityFramework`Utilities`Private`name, 
           Blank[String]], 
          Pattern[EntityFramework`Utilities`Private`qual, 
           Blank[]]]] := Replace[Blank[][
           Pattern[EntityFramework`Utilities`Private`n, 
            Blank[]], {}] :> EntityFramework`Utilities`Private`n][
         EntityFramework`Utilities`Private`head[
         EntityFramework`Utilities`Private`name, 
          EntityFramework`NormalizeQualifiers[
          EntityFramework`Utilities`Private`qual]]], 
       EntityFramework`NormalizeQualifiers[
         Pattern[EntityFramework`Utilities`Private`x, 
          Blank[]]] := EntityFramework`Utilities`Private`x, 
       EntityFramework`Caching`Private`addToFileCache[
         Pattern[EntityFramework`Caching`Private`args, 
          BlankSequence[]]] := 
       EntityFramework`Caching`Private`withLockedFileCache[Catch[
          EntityFramework`Caching`Private`iAddToFileCache[
           SlotSequence[1]], EntityFramework`Caching`Private`$corruptCache, 
          Function[
          EntityFramework`Caching`Private`index, 
           EntityFramework`Caching`Private`clearCorruptCache[
            EntityFramework`Caching`Private`index]; $Failed]]& , {
         EntityFramework`Caching`Private`args}], 
       Attributes[EntityFramework`Caching`Private`withLockedFileCache] = {
        HoldRest}, EntityFramework`Caching`Private`withLockedFileCache[
         Pattern[EntityFramework`Caching`Private`f, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`args, 
          Blank[List]], 
         Optional[
          Pattern[EntityFramework`Caching`Private`alreadyLockedResult, 
           Blank[]], $Failed]] := 
       Module[{EntityFramework`Caching`Private`res, 
          EntityFramework`Caching`Private`file}, 
         EntityFramework`Caching`Private`file = 
          Apply[
           EntityFramework`Caching`Private`makeCacheFileName, 
            EntityFramework`Caching`Private`args]; If[
           StringQ[
            EntityFramework`Caching`Private`tryLockFile[
            EntityFramework`Caching`Private`file]], 
           EntityFramework`Caching`Private`res = 
            Apply[EntityFramework`Caching`Private`f, 
              EntityFramework`Caching`Private`args]; 
           EntityFramework`Caching`Private`unlockFile[
            EntityFramework`Caching`Private`file], 
           EntityFramework`Caching`Private`res = 
           EntityFramework`Caching`Private`alreadyLockedResult]; 
         EntityFramework`Caching`Private`res], 
       EntityFramework`Caching`Private`makeCacheFileName[
         Pattern[EntityFramework`Caching`Private`type, 
          Blank[String]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := 
       With[{EntityFramework`Caching`Private`typeKey = 
          EntityFramework`Caching`Private`makeTypeKey[
           EntityFramework`Caching`Private`type]}, 
         FileNameJoin[{
          EntityFramework`Caching`Private`$CacheRepositoryRootDirectory, 
           EntityFramework`Caching`Private`typeKey, 
           StringJoin[EntityFramework`Caching`Private`typeKey, "-", 
            EntityFramework`Caching`Private`makeKey[
            EntityFramework`Caching`Private`prop], ".dat"]}]], 
       EntityFramework`Caching`Private`makeCacheFileName[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := EntityFramework`Caching`Private`makeCacheFileName[
         EntityFramework`Caching`Private`getType[
         EntityFramework`Caching`Private`ent], 
         EntityFramework`Caching`Private`prop], 
       EntityFramework`Caching`Private`makeCacheFileName[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]], 
         Blank[]] := 
       EntityFramework`Caching`Private`makeCacheFileName[
        EntityFramework`Caching`Private`ent, 
         EntityFramework`Caching`Private`prop], 
       EntityFramework`Caching`Private`makeTypeKey[
         Pattern[EntityFramework`Caching`Private`type, 
          Blank[String]]] := StringJoin[
         IntegerString[
          Hash[EntityFramework`Caching`Private`type], 32]], 
       EntityFramework`Caching`Private`$CacheRepositoryRootDirectory := 
       FileNameJoin[{$UserBaseDirectory, "Knowledgebase"}], 
       EntityFramework`Caching`Private`makeKey[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Optional[
          Pattern[EntityFramework`Caching`Private`prop, 
           Blank[]], None]] := 
       EntityFramework`Caching`Private`keyFunction[
        EntityFramework`Caching`Private`prop][
         EntityFramework`Caching`Private`normalize[
         EntityFramework`Caching`Private`ent]], 
       EntityFramework`Caching`Private`keyFunction[
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := Composition[ToString, Hash], 
       EntityFramework`Caching`Private`getType[
         Pattern[EntityFramework`Caching`Private`type, 
          Blank[String]]] := EntityFramework`Caching`Private`type, 
       EntityFramework`Caching`Private`getType[
         Except[List][
          Pattern[EntityFramework`Caching`Private`type, 
           Blank[String]], 
          BlankSequence[]]] := EntityFramework`Caching`Private`type, 
       EntityFramework`Caching`Private`getType[{
          Repeated[
           Blank[][
            Pattern[EntityFramework`Caching`Private`type, 
             Blank[String]], 
            BlankSequence[]]]}] := EntityFramework`Caching`Private`type, 
       EntityFramework`Caching`Private`getType[
         BlankNullSequence[]] := EntityFramework`Caching`Private`fail[], 
       EntityFramework`Caching`Private`tryLockFile[
         Pattern[EntityFramework`Caching`Private`file, 
          Blank[String]]] := Quiet[
         Check[
          CreateFile[
           StringJoin[
           EntityFramework`Caching`Private`file, ".lock"]], $Failed, 
          MessageName[CreateFile, "filex"]], 
         MessageName[CreateFile, "filex"]], 
       EntityFramework`Caching`Private`unlockFile[
         Pattern[EntityFramework`Caching`Private`file, 
          Blank[String]]] := Quiet[
         DeleteFile[
          StringJoin[EntityFramework`Caching`Private`file, ".lock"]], 
         MessageName[DeleteFile, "fdnfnd"]], 
       EntityFramework`Caching`Private`iAddToFileCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Alternatives[
           Alternatives[
           Entity, EntityClass, EntityProperty, EntityPropertyClass][
            Blank[String], 
            BlankSequence[]], {
            Repeated[
             Alternatives[
             Entity, EntityClass, EntityProperty, EntityPropertyClass][
              Blank[String], 
              BlankSequence[]]]}, 
           Blank[String]]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Alternatives[
           Alternatives[
            EntityProperty[
             Blank[String], 
             Blank[String], 
             Repeated[
              PatternTest[
               Blank[], EntityFramework`QualifierQ], {0, 1}]], 
            EntityProperty[
             Blank[String], 
             PatternTest[
              Blank[], EntityFramework`ConditionQ]]], 
           Blank[String]]], 
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]]] := AbortProtect[
         Catch[
          
          Module[{EntityFramework`Caching`Private`dataFile, 
            EntityFramework`Caching`Private`pos}, 
           EntityFramework`Caching`Private`dataFile = 
            EntityFramework`Caching`Private`makeCacheFileName[
             EntityFramework`Caching`Private`ent, 
              EntityFramework`Caching`Private`prop]; If[
             FileExistsQ[EntityFramework`Caching`Private`dataFile], 
             EntityFramework`Caching`Private`checkFileSize[
             EntityFramework`Caching`Private`dataFile], 
             EntityFramework`Caching`Private`createDirectoryIfNeeded[
             EntityFramework`Caching`Private`dataFile]]; 
           EntityFramework`Caching`Private`streamEvaluate[
            EntityFramework`Caching`Private`dataFile, 
             Function[EntityFramework`Caching`Private`stream, 
              If[
               ListQ[EntityFramework`Caching`Private`ent], 
               Block[{EntityFramework`Caching`Private`time = AbsoluteTime[]}, 
                
                With[{EntityFramework`Caching`Private`strings = 
                  Map[EntityFramework`Caching`Private`makeDataExpToWrite, 
                    EntityFramework`Caching`Private`value]}, 
                 EntityFramework`Caching`Private`pos = Accumulate[
                    Prepend[
                    StringLength[
                    Most[EntityFramework`Caching`Private`strings]], 
                    StreamPosition[EntityFramework`Caching`Private`stream]]]; 
                 WriteString[EntityFramework`Caching`Private`stream, 
                   StringJoin[EntityFramework`Caching`Private`strings]]]], 
               EntityFramework`Caching`Private`pos = 
                StreamPosition[EntityFramework`Caching`Private`stream]; 
               WriteString[EntityFramework`Caching`Private`stream, 
                 EntityFramework`Caching`Private`makeDataExpToWrite[
                 EntityFramework`Caching`Private`value]]]], OpenAppend]; 
           EntityFramework`Caching`Private`addToIndex[
            EntityFramework`Caching`Private`dataFile, 
             EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`pos, 
             EntityFramework`Caching`Private`prop]], "Find"]], 
       EntityFramework`Caching`Private`checkFileSize[
         Pattern[EntityFramework`Caching`Private`dataFile, 
          Blank[String]]] := If[
         And[
          FileExistsQ[EntityFramework`Caching`Private`dataFile], 
          FileByteCount[EntityFramework`Caching`Private`dataFile] > 
          EntityFramework`Caching`Private`$MaxFileSize], 
         Throw[$Failed, "Find"]; Null], 
       EntityFramework`Caching`Private`$MaxFileSize := Replace["MaxByteCount", 
         Replace["FileBackedCachingOptions", 
          SystemOptions["FileBackedCachingOptions"]]], 
       EntityFramework`Caching`Private`createDirectoryIfNeeded[
         Pattern[EntityFramework`Caching`Private`file, 
          Blank[String]]] := 
       With[{EntityFramework`Caching`Private`dir = 
          DirectoryName[EntityFramework`Caching`Private`file]}, 
         If[
          Not[
           DirectoryQ[EntityFramework`Caching`Private`dir]], 
          CreateDirectory[EntityFramework`Caching`Private`dir]]], 
       EntityFramework`Caching`Private`streamEvaluate[
         Pattern[EntityFramework`Caching`Private`file, 
          Blank[String]], 
         Pattern[EntityFramework`Caching`Private`f, 
          Blank[]], 
         Optional[
          Pattern[EntityFramework`Caching`Private`mode, 
           Alternatives[OpenAppend, OpenRead, OpenWrite]], OpenRead]] := 
       AbortProtect[
         Module[{
          EntityFramework`Caching`Private`stream = 
           EntityFramework`Caching`Private`mode[
            EntityFramework`Caching`Private`file], 
           EntityFramework`Caching`Private`value}, 
          If[EntityFramework`Caching`Private`stream === $Failed, 
            Throw[$Failed, "Find"]]; 
          EntityFramework`Caching`Private`value = 
           EntityFramework`Caching`Private`f[
            EntityFramework`Caching`Private`stream]; 
          Close[EntityFramework`Caching`Private`stream]; 
          EntityFramework`Caching`Private`value]], 
       EntityFramework`Caching`Private`time := AbsoluteTime[], 
       EntityFramework`Caching`Private`makeDataExpToWrite[
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]]] := StringJoin[
         EntityFramework`Caching`Private`encodeData[
         EntityFramework`Caching`Private`value], 
         EntityFramework`Caching`Private`$recordDelimiter], 
       EntityFramework`Caching`Private`encodeData[
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]]] := 
       Compress[{
         EntityFramework`Caching`Private`value, 
          EntityFramework`Caching`Private`time}], 
       EntityFramework`Caching`Private`$recordDelimiter = 
       "//[y~t]/w?v=dQw4w9WgXcQ", EntityFramework`Caching`Private`addToIndex[
         Pattern[EntityFramework`Caching`Private`dataFile, 
          Blank[String]], 
         Except[
          Blank[List], 
          Pattern[EntityFramework`Caching`Private`ent, 
           Blank[]]], 
         Pattern[EntityFramework`Caching`Private`pos, 
          Blank[Integer]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := 
       EntityFramework`Caching`Private`addToIndex[
        EntityFramework`Caching`Private`dataFile, {
         EntityFramework`Caching`Private`ent}, {
         EntityFramework`Caching`Private`pos}, 
         EntityFramework`Caching`Private`prop], Condition[
         EntityFramework`Caching`Private`addToIndex[
          Pattern[EntityFramework`Caching`Private`dataFile, 
           Blank[String]], 
          Pattern[EntityFramework`Caching`Private`ent, 
           Blank[List]], 
          Pattern[EntityFramework`Caching`Private`pos, {
            BlankSequence[Integer]}], 
          Pattern[EntityFramework`Caching`Private`prop, 
           Blank[]]], Length[EntityFramework`Caching`Private`ent] === 
         Length[EntityFramework`Caching`Private`pos]] := 
       Module[{EntityFramework`Caching`Private`index, 
          EntityFramework`Caching`Private`indexFile}, 
         EntityFramework`Caching`Private`indexFile = 
          EntityFramework`Caching`Private`toIndexFile[
           EntityFramework`Caching`Private`dataFile, 1]; 
         EntityFramework`Caching`Private`index = 
          EntityFramework`Caching`Private`readIndex[
           EntityFramework`Caching`Private`indexFile]; 
         AssociateTo[EntityFramework`Caching`Private`index, 
           Thread[
           Map[EntityFramework`Caching`Private`makeKey[#, 
               EntityFramework`Caching`Private`prop]& , 
              EntityFramework`Caching`Private`ent] -> 
            Map[ToString, EntityFramework`Caching`Private`pos]]]; 
         If[Length[EntityFramework`Caching`Private`index] > 
           EntityFramework`Caching`Private`indexLength[1], If[
             FileExistsQ[EntityFramework`Caching`Private`indexFile], 
             DeleteFile[EntityFramework`Caching`Private`indexFile]]; 
           EntityFramework`Caching`Private`indexFile = 
            EntityFramework`Caching`Private`toIndexFile[
             EntityFramework`Caching`Private`dataFile, 2]; 
           EntityFramework`Caching`Private`index = Join[
              EntityFramework`Caching`Private`readIndex[
              EntityFramework`Caching`Private`indexFile], 
              EntityFramework`Caching`Private`index]]; 
         If[Length[EntityFramework`Caching`Private`index] === 0, 
           Return[]]; WriteString[EntityFramework`Caching`Private`indexFile, 
           StringRiffle[
            Apply[List, 
             Normal[EntityFramework`Caching`Private`index], {1}], "|", "-"]]; 
         Close[EntityFramework`Caching`Private`indexFile]; Null], 
       EntityFramework`Caching`Private`toIndexFile[
         PatternTest[
          Pattern[EntityFramework`Caching`Private`dataFile, 
           Blank[String]], 
          StringEndsQ[".dat"]], 
         Pattern[EntityFramework`Caching`Private`level, 
          Blank[Integer]]] := StringJoin[
         StringDrop[EntityFramework`Caching`Private`dataFile, -3], 
         ToString[EntityFramework`Caching`Private`level], ".index"], 
       EntityFramework`Caching`Private`readIndex[
         PatternTest[
          Pattern[EntityFramework`Caching`Private`indexFile, 
           Blank[String]], FileExistsQ]] := 
       With[{EntityFramework`Caching`Private`i = StringSplit[
            ReadList[
            EntityFramework`Caching`Private`indexFile, Record, 
             RecordSeparators -> "|"], "-"]}, 
         If[
          MatchQ[EntityFramework`Caching`Private`i, {
            RepeatedNull[{
              Blank[String], 
              Blank[String]}]}], 
          Association[
           Apply[Rule, EntityFramework`Caching`Private`i, {1}]], 
          Throw[
          EntityFramework`Caching`Private`indexFile, 
           EntityFramework`Caching`Private`$corruptCache]]], 
       EntityFramework`Caching`Private`readIndex[
         Blank[]] := Association[], 
       EntityFramework`Caching`Private`indexLength[1] = 10000, 
       EntityFramework`Caching`Private`clearCorruptCache[
         Pattern[EntityFramework`Caching`Private`file, 
          Blank[String]]] := Map[
         Composition[
          Function[EntityFramework`Caching`Private`f, 
           If[
            FileExistsQ[EntityFramework`Caching`Private`f], Quiet[
              Close[EntityFramework`Caching`Private`f], {
               MessageName[General, "openx"]}]; Quiet[
              DeleteFile[EntityFramework`Caching`Private`f], {
               MessageName[DeleteFile, "fdnfnd"]}]]], FileNameJoin[{
            DirectoryName[EntityFramework`Caching`Private`file], 
            StringJoin[
             FileBaseName[
              FileBaseName[EntityFramework`Caching`Private`file]], #]}]& ], {
         ".dat", ".1.index", ".2.index"}], 
       EntityFramework`Caching`Private`applyCallback[
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]], None, 
         Blank[]] := EntityFramework`Caching`Private`value, Condition[
         EntityFramework`Caching`Private`applyCallback[
          Pattern[EntityFramework`Caching`Private`value, 
           Blank[]], 
          Blank[], {
           Pattern[EntityFramework`Caching`Private`notInCache, 
            Blank[]], 
           Pattern[EntityFramework`Caching`Private`outdated, 
            Blank[]], 
           Blank[], 
           Blank[]}], 
         FreeQ[EntityFramework`Caching`Private`value, 
          Missing[
           Alternatives[
           EntityFramework`Caching`Private`notInCache, 
            EntityFramework`Caching`Private`outdated], 
           Blank[]]]] := EntityFramework`Caching`Private`value, 
       EntityFramework`Caching`Private`applyCallback[
         Pattern[EntityFramework`Caching`Private`value, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`callback, 
          Blank[]], {
          Pattern[EntityFramework`Caching`Private`notInCache, 
           Blank[]], 
          Pattern[EntityFramework`Caching`Private`outdated, 
           Blank[]], 
          Pattern[EntityFramework`Caching`Private`failurePattern, 
           Blank[]], 
          Pattern[EntityFramework`Caching`Private`messageHead, 
           Blank[]]}] := 
       Module[{EntityFramework`Caching`Private`res, 
          EntityFramework`Caching`Private`container, 
          EntityFramework`Caching`Private`issueMessage = True}, 
         EntityFramework`Caching`Private`res = 
          EntityFramework`Caching`Private`value; 
         EntityFramework`Caching`Private`res = 
          ReplaceAll[
           EntityFramework`Caching`Private`res, {
            Missing[EntityFramework`Caching`Private`notInCache, {
                Pattern[EntityFramework`Caching`Private`x, 
                 BlankNullSequence[]]}] :> 
             Inactive[EntityFramework`Caching`Private`callback][
              EntityFramework`Caching`Private`x], 
             Missing[EntityFramework`Caching`Private`outdated, {
                Pattern[EntityFramework`Caching`Private`x, 
                 BlankNullSequence[]], 
                Pattern[EntityFramework`Caching`Private`cached, 
                 Blank[]]}] :> EntityFramework`Caching`Private`container[
               Inactive[EntityFramework`Caching`Private`callback][
               EntityFramework`Caching`Private`x], 
               EntityFramework`Caching`Private`cached]}]; 
         With[{EntityFramework`Caching`Private`pos = 
            Position[{EntityFramework`Caching`Private`res}, 
              Inactive[EntityFramework`Caching`Private`callback][
               BlankNullSequence[]]]}, 
           If[Length[EntityFramework`Caching`Private`pos] === 0, 
             Return[EntityFramework`Caching`Private`value]]; {
             EntityFramework`Caching`Private`res} = ReplacePart[
              Thread[EntityFramework`Caching`Private`pos -> Activate[
                 EntityFramework`Caching`Private`makeBatches[
                  
                  Extract[{EntityFramework`Caching`Private`res}, 
                   EntityFramework`Caching`Private`pos]], 
                 EntityFramework`Caching`Private`callback]]][{
              EntityFramework`Caching`Private`res}]]; 
         EntityFramework`Caching`Private`res = 
          ReplaceAll[
           EntityFramework`Caching`Private`res, {
            EntityFramework`Caching`Private`container[
               PatternTest[
                Pattern[EntityFramework`Caching`Private`v, 
                 Blank[]], 
                FreeQ[#, EntityFramework`Caching`Private`failurePattern, {0, 
                 1}]& ], 
               Blank[]] :> EntityFramework`Caching`Private`v, 
             EntityFramework`Caching`Private`container[
               Blank[], 
               Pattern[EntityFramework`Caching`Private`cached, 
                Blank[]]] :> (
              If[EntityFramework`Caching`Private`issueMessage, Message[
                  MessageName[
                  EntityFramework`Caching`Private`messageHead, "outdcache"]]; 
                EntityFramework`Caching`Private`issueMessage = False]; 
              EntityFramework`Caching`Private`cached)}]; 
         EntityFramework`Caching`Private`res], 
       EntityFramework`Caching`Private`makeBatches[{}] := {}, 
       EntityFramework`Caching`Private`makeBatches[
         Pattern[EntityFramework`Caching`Private`l, {
           Repeated[
            Pattern[EntityFramework`Caching`Private`f, 
             Inactive[
              Blank[]]][
             Except[
              Alternatives[
               Blank[List], 
               Blank[String], 
               Blank[EntityClass], 
               Blank[EntityPropertyClass]]], 
             Except[
              Blank[List], 
              Pattern[EntityFramework`Caching`Private`prop, 
               Blank[]]]]]}]] := Condition[
         EntityFramework`Caching`Private`f[
          Part[EntityFramework`Caching`Private`l, All, 1], 
          EntityFramework`Caching`Private`prop], True], 
       EntityFramework`Caching`Private`makeBatches[
         Pattern[EntityFramework`Caching`Private`l, {
           Repeated[
            Pattern[EntityFramework`Caching`Private`f, 
             Inactive[
              Blank[]]][
             Except[
              Blank[List], 
              Pattern[EntityFramework`Caching`Private`ent, 
               Blank[]]], 
             Except[
              Alternatives[
               Blank[List], 
               Blank[String], 
               Blank[EntityPropertyClass]]]]]}]] := 
       EntityFramework`Caching`Private`f[EntityFramework`Caching`Private`ent, 
         Part[EntityFramework`Caching`Private`l, All, 2]], 
       EntityFramework`Caching`Private`makeBatches[
         Pattern[EntityFramework`Caching`Private`l, {
           Repeated[
            Pattern[EntityFramework`Caching`Private`f, 
             Inactive[
              Blank[]]][
             Except[
              Blank[List]]]]}]] := EntityFramework`Caching`Private`f[
         Part[EntityFramework`Caching`Private`l, All, 1]], 
       EntityFramework`Caching`Private`makeBatches[
         Pattern[EntityFramework`Caching`Private`expr, 
          Blank[]]] := EntityFramework`Caching`Private`expr, 
       EntityFramework`Caching`Private`makeFunctionKey[
         Pattern[EntityFramework`Caching`Private`f, 
          Blank[]]] := ToString[
         Hash[EntityFramework`Caching`Private`f]], 
       EntityFramework`Caching`Private`makeFunctionKey[
         Pattern[EntityFramework`Caching`Private`f, 
          Blank[]], 
         Alternatives[{}, 
          Association[]]] := 
       EntityFramework`Caching`Private`makeFunctionKey[
        EntityFramework`Caching`Private`f], 
       EntityFramework`Caching`Private`makeFunctionKey[
         Pattern[EntityFramework`Caching`Private`f, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`qual, 
          Blank[]]] := 
       EntityFramework`Caching`Private`makeFunctionKey[{
         EntityFramework`Caching`Private`f, 
          EntityFramework`NormalizeQualifiers[
          EntityFramework`Caching`Private`qual]}], 
       EntityFramework`$UseFileCache = True, EntityFramework`$UseMemoryCache = 
       True, EntityFramework`Caching`Private`makeMissing[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := 
       Map[Missing["NotInCache", {#, EntityFramework`Caching`Private`prop}]& ,
          EntityFramework`Caching`Private`ent, {
          If[
           ListQ[EntityFramework`Caching`Private`ent], 1, 0]}], 
       EntityFramework`Caching`Private`retrieveRemaining[
         Pattern[EntityFramework`Caching`Private`expr, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`ret, 
          Blank[]], 1] := 
       With[{EntityFramework`Caching`Private`pos = Map[First, 
            Position[EntityFramework`Caching`Private`expr, 
             Missing[
              Alternatives["NotInCache", "OutdatedCache"], 
              Blank[]], {1}, Heads -> False]]}, 
         If[EntityFramework`Caching`Private`pos === {}, 
           Return[EntityFramework`Caching`Private`expr]]; 
         ReplacePart[EntityFramework`Caching`Private`expr, 
           DeleteCases[Blank[] -> Missing["NotInCache", 
              Blank[]]][
            Thread[
            EntityFramework`Caching`Private`pos -> 
             EntityFramework`Caching`Private`ret[
               Part[
               EntityFramework`Caching`Private`expr, 
                EntityFramework`Caching`Private`pos, 2, 1], 
               Part[EntityFramework`Caching`Private`expr, 
                First[EntityFramework`Caching`Private`pos], 2, 2]]]]]], 
       EntityFramework`Caching`Private`retrieveRemaining[
         Pattern[EntityFramework`Caching`Private`expr, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`ret, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`level, 
          Blank[Integer]]] := 
       Replace[EntityFramework`Caching`Private`expr, {Missing["NotInCache", {
             Pattern[EntityFramework`Caching`Private`args, 
              BlankNullSequence[]]}] :> 
          EntityFramework`Caching`Private`ret[
           EntityFramework`Caching`Private`args], Missing["OutdatedCache", {
             Pattern[EntityFramework`Caching`Private`args, 
              BlankNullSequence[]], 
             Blank[]}] :> 
          With[{EntityFramework`Caching`Private`value = 
             EntityFramework`Caching`Private`ret[
              EntityFramework`Caching`Private`args]}, 
            Condition[EntityFramework`Caching`Private`value, 
             Not[
              MatchQ[EntityFramework`Caching`Private`value, 
               Missing["NotInCache", 
                Blank[]]]]]]}, {EntityFramework`Caching`Private`level}], 
       EntityFramework`Caching`Private`getFromMemoryCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Alternatives[
           Blank[][
            Pattern[EntityFramework`Caching`Private`type, 
             Blank[String]], 
            BlankSequence[]], 
           Pattern[EntityFramework`Caching`Private`type, 
            Blank[String]]]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]], 
         OptionsPattern[EntityFramework`CachedEntityFunction]] := 
       Replace[{Missing["KeyAbsent", 
            Blank[]] :> 
          Missing["NotInCache", {
            EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`prop}], {
            Pattern[EntityFramework`Caching`Private`value, 
             Blank[]], 
            PatternTest[
             Blank[], 
             LessThan[
              Apply[EntityFramework`Caching`Private`possibleLastUpdate, 
               OptionValue[{"LastUpdate", UpdateInterval}]]]]} :> 
          Missing["OutdatedCache", {
            EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`prop, 
             EntityFramework`Caching`Private`value}], {
            Pattern[EntityFramework`Caching`Private`value, 
             Blank[]], 
            Blank[]} :> EntityFramework`Caching`Private`value}][
         Lookup[EntityFramework`Caching`Private`$memoryCache, 
          Key[
           Map[
           EntityFramework`Caching`Private`normalize, {
            EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`prop}]]]], 
       EntityFramework`Caching`Private`getFromMemoryCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Alternatives[
           Alternatives[
            EntityProperty[
             Blank[String], 
             Blank[String], 
             Repeated[
              PatternTest[
               Blank[], EntityFramework`QualifierQ], {0, 1}]], 
            EntityProperty[
             Blank[String], 
             PatternTest[
              Blank[], EntityFramework`ConditionQ]]], 
           Blank[String]]], 
         OptionsPattern[EntityFramework`CachedEntityFunction]] := 
       Module[{EntityFramework`Caching`Private`lastUpdate}, 
         EntityFramework`Caching`Private`lastUpdate := (
           EntityFramework`Caching`Private`lastUpdate = 
           Apply[EntityFramework`Caching`Private`possibleLastUpdate, 
             OptionValue[{"LastUpdate", UpdateInterval}]]); MapThread[
           
           Function[{
            EntityFramework`Caching`Private`e, 
             EntityFramework`Caching`Private`v}, 
            Replace[{{
                Pattern[EntityFramework`Caching`Private`value, 
                 Blank[]], 
                PatternTest[
                 Blank[], 
                 LessThan[EntityFramework`Caching`Private`lastUpdate]]} :> 
              Missing["OutdatedCache", {
                EntityFramework`Caching`Private`e, 
                 EntityFramework`Caching`Private`prop, 
                 EntityFramework`Caching`Private`value}], {
                Pattern[EntityFramework`Caching`Private`value, 
                 Blank[]], 
                Blank[]} :> EntityFramework`Caching`Private`value}][
            EntityFramework`Caching`Private`v]], {
           EntityFramework`Caching`Private`ent, 
            If[
             ListQ[EntityFramework`Caching`Private`ent], ReplacePart[#, 
              With[{EntityFramework`Caching`Private`pos = Map[First, 
                  Position[#, 
                   Missing["KeyAbsent", 
                    Blank[]], {1}, Heads -> False]]}, 
               Thread[
               EntityFramework`Caching`Private`pos -> 
                Map[Missing[
                  "NotInCache", {#, EntityFramework`Caching`Private`prop}]& , 
                  Part[
                  EntityFramework`Caching`Private`ent, 
                   EntityFramework`Caching`Private`pos]]]]]& , 
             Replace[Missing["KeyAbsent", 
                Blank[]] :> 
              Missing["NotInCache", {
                EntityFramework`Caching`Private`ent, 
                 EntityFramework`Caching`Private`prop}]]][
             Lookup[EntityFramework`Caching`Private`$memoryCache, 
              If[
               ListQ[EntityFramework`Caching`Private`ent], 
               Map[Key, 
                Thread[{
                  Map[
                  EntityFramework`Caching`Private`normalize, 
                   EntityFramework`Caching`Private`ent], 
                  EntityFramework`Caching`Private`normalize[
                  EntityFramework`Caching`Private`prop]}]], 
               Key[
                Map[
                EntityFramework`Caching`Private`normalize, {
                 EntityFramework`Caching`Private`ent, 
                  EntityFramework`Caching`Private`prop}]]]]]}, 
           If[
            ListQ[EntityFramework`Caching`Private`ent], 1, 0]]], 
       EntityFramework`Caching`Private`possibleLastUpdate[
         Pattern[EntityFramework`Caching`Private`lu, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`int, 
          Blank[]]] := If[EntityFramework`$CacheUpdateCheck, 
         EntityFramework`Caching`Private`ipossibleLastUpdate[
         EntityFramework`Caching`Private`lu, 
          EntityFramework`Caching`Private`int], 0], 
       EntityFramework`$CacheUpdateCheck := (
        EntityFramework`$CacheUpdateCheck = 
        With[{EntityFramework`Private`v = 
           PersistentValue["CheckEntityValueCacheDate", "Local"]}, 
          If[
           BooleanQ[EntityFramework`Private`v], EntityFramework`Private`v, 
           True]]), EntityFramework`Caching`Private`ipossibleLastUpdate[
         PatternTest[
          Pattern[EntityFramework`Caching`Private`lu, 
           Blank[]], Internal`PossibleDateQ], 
         Blank[]] := AbsoluteTime[EntityFramework`Caching`Private`lu], 
       EntityFramework`Caching`Private`ipossibleLastUpdate[
         Blank[], Infinity] := 0, 
       EntityFramework`Caching`Private`ipossibleLastUpdate[
         Blank[], 
         Pattern[EntityFramework`Caching`Private`ui, 
          Blank[Integer]]] := 
       AbsoluteTime[] - EntityFramework`Caching`Private`ui, 
       EntityFramework`Caching`Private`ipossibleLastUpdate[
         Blank[], 
         HoldPattern[
          Pattern[EntityFramework`Caching`Private`ui, 
           Blank[Quantity]]]] := 
       EntityFramework`Caching`Private`possibleLastUpdate[Null, 
         QuantityMagnitude[EntityFramework`Caching`Private`ui, "Seconds"]], 
       EntityFramework`Caching`Private`ipossibleLastUpdate[
         Blank[], 
         Blank[]] := Infinity, 
       EntityFramework`Caching`Private`getFromFileCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`opts, 
          OptionsPattern[EntityFramework`CachedEntityFunction]]] := 
       EntityFramework`Caching`Private`withLockedFileCache[Catch[
          EntityFramework`Caching`Private`iGetFromFileCache[
           SlotSequence[1], EntityFramework`Caching`Private`opts], 
          EntityFramework`Caching`Private`$corruptCache, 
          Function[
          EntityFramework`Caching`Private`index, 
           EntityFramework`Caching`Private`clearCorruptCache[
            EntityFramework`Caching`Private`index]; 
           EntityFramework`Caching`Private`makeMissing[
            EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`prop]]]& , {
         EntityFramework`Caching`Private`ent, 
          EntityFramework`Caching`Private`prop}, 
         EntityFramework`Caching`Private`makeMissing[
         EntityFramework`Caching`Private`ent, 
          EntityFramework`Caching`Private`prop]], 
       EntityFramework`Caching`Private`iGetFromFileCache[
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Alternatives[
           Alternatives[
            EntityProperty[
             Blank[String], 
             Blank[String], 
             Repeated[
              PatternTest[
               Blank[], EntityFramework`QualifierQ], {0, 1}]], 
            EntityProperty[
             Blank[String], 
             PatternTest[
              Blank[], EntityFramework`ConditionQ]]], 
           Blank[String]]], 
         OptionsPattern[EntityFramework`CachedEntityFunction]] := Catch[
         Module[{
          EntityFramework`Caching`Private`res, 
           EntityFramework`Caching`Private`dataFile, 
           EntityFramework`Caching`Private`index, 
           EntityFramework`Caching`Private`lastUpdate, 
           EntityFramework`Caching`Private`forMemoryCache = Association[]}, 
          EntityFramework`Caching`Private`dataFile = 
           EntityFramework`Caching`Private`makeCacheFileName[
            EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`prop]; If[
            Not[
             FileExistsQ[EntityFramework`Caching`Private`dataFile]], 
            Return[
             EntityFramework`Caching`Private`makeMissing[
             EntityFramework`Caching`Private`ent, 
              EntityFramework`Caching`Private`prop]]]; 
          EntityFramework`Caching`Private`index = 
           EntityFramework`Caching`Private`getIndex[
            EntityFramework`Caching`Private`dataFile, 
             EntityFramework`Caching`Private`ent, 
             EntityFramework`Caching`Private`prop]; 
          EntityFramework`Caching`Private`lastUpdate := (
            EntityFramework`Caching`Private`lastUpdate = 
            Apply[EntityFramework`Caching`Private`possibleLastUpdate, 
              OptionValue[{"LastUpdate", UpdateInterval}]]); 
          EntityFramework`Caching`Private`res = 
           EntityFramework`Caching`Private`streamEvaluate[
            EntityFramework`Caching`Private`dataFile, 
             Function[EntityFramework`Caching`Private`stream, 
              Map[
               Function[EntityFramework`Caching`Private`e, 
                If[
                 KeyExistsQ[
                 EntityFramework`Caching`Private`index, 
                  EntityFramework`Caching`Private`e], Quiet[
                   Check[
                    SetStreamPosition[EntityFramework`Caching`Private`stream, 
                    EntityFramework`Caching`Private`index[
                    EntityFramework`Caching`Private`e]], 
                    Throw[
                    First[EntityFramework`Caching`Private`stream], 
                    EntityFramework`Caching`Private`$corruptCache], {
                    MessageName[SetStreamPosition, "stmrng"]}], {
                    MessageName[SetStreamPosition, "stmrng"]}]; Replace[{{
                    Pattern[EntityFramework`Caching`Private`value, 
                    Blank[]], 
                    PatternTest[
                    Blank[], 
                    LessThan[EntityFramework`Caching`Private`lastUpdate]]} :> 
                    Missing[
                    "OutdatedCache", {
                    EntityFramework`Caching`Private`e, 
                    EntityFramework`Caching`Private`prop, 
                    EntityFramework`Caching`Private`value}], 
                    Pattern[EntityFramework`Caching`Private`expr, {
                    Pattern[EntityFramework`Caching`Private`value, 
                    Blank[]], 
                    Blank[]}] :> (If[
                    OptionValue["UseMemoryCache"], 
                    AssociateTo[
                    EntityFramework`Caching`Private`forMemoryCache, {
                    EntityFramework`Caching`Private`e, 
                    EntityFramework`Caching`Private`prop} -> 
                    EntityFramework`Caching`Private`expr]]; 
                    EntityFramework`Caching`Private`value)}][
                   EntityFramework`Caching`Private`decodeData[
                    Read[
                    EntityFramework`Caching`Private`stream, Record, 
                    RecordSeparators -> 
                    EntityFramework`Caching`Private`$recordDelimiter], 
                    EntityFramework`Caching`Private`dataFile]], 
                 EntityFramework`Caching`Private`makeMissing[
                 EntityFramework`Caching`Private`e, 
                  EntityFramework`Caching`Private`prop]]], 
               EntityFramework`Caching`Private`ent, {
                If[
                 ListQ[EntityFramework`Caching`Private`ent], 1, 0]}]]]; If[
            OptionValue["UseMemoryCache"], 
            EntityFramework`Caching`Private`addToMemoryCacheRaw[
            EntityFramework`Caching`Private`forMemoryCache]]; 
          EntityFramework`Caching`Private`res], "Find"], 
       EntityFramework`Caching`Private`getIndex[
         Blank[], {}, 
         Blank[]] := Association[], EntityFramework`Caching`Private`getIndex[
         Pattern[EntityFramework`Caching`Private`dataFile, 
          Blank[String]], 
         Except[
          Blank[List], 
          Pattern[EntityFramework`Caching`Private`ent, 
           Blank[]]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := 
       EntityFramework`Caching`Private`getIndex[
        EntityFramework`Caching`Private`dataFile, {
         EntityFramework`Caching`Private`ent}, 
         EntityFramework`Caching`Private`prop], 
       EntityFramework`Caching`Private`getIndex[
         Pattern[EntityFramework`Caching`Private`dataFile, 
          Blank[String]], 
         Condition[
          Pattern[EntityFramework`Caching`Private`ent, 
           Blank[List]], Length[EntityFramework`Caching`Private`ent] > 
          EntityFramework`Caching`Private`$readFullIndexThreshold], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := 
       Module[{EntityFramework`Caching`Private`index = Apply[Join, 
            Table[
             EntityFramework`Caching`Private`readIndex[
              EntityFramework`Caching`Private`toIndexFile[
              EntityFramework`Caching`Private`dataFile, 
               EntityFramework`Caching`Private`level]], {
             EntityFramework`Caching`Private`level, 2}]], 
          EntityFramework`Caching`Private`res = Association[]}, Map[
           Function[EntityFramework`Caching`Private`e, 
            Replace[Pattern[EntityFramework`Caching`Private`i, 
               Blank[Integer]] :> 
             AssociateTo[
              EntityFramework`Caching`Private`res, 
               EntityFramework`Caching`Private`e -> 
               EntityFramework`Caching`Private`i]][
             Replace[Pattern[EntityFramework`Caching`Private`s, 
                Blank[String]] :> Quiet[
                Check[
                 ToExpression[EntityFramework`Caching`Private`s], 
                 Throw[
                 EntityFramework`Caching`Private`dataFile, 
                  EntityFramework`Caching`Private`$corruptCache]]]][
              EntityFramework`Caching`Private`index[
               EntityFramework`Caching`Private`makeKey[
               EntityFramework`Caching`Private`e, 
                EntityFramework`Caching`Private`prop]]]]], 
           EntityFramework`Caching`Private`ent]; 
         EntityFramework`Caching`Private`res], 
       EntityFramework`Caching`Private`getIndex[
         Pattern[EntityFramework`Caching`Private`dataFile, 
          Blank[String]], 
         Pattern[EntityFramework`Caching`Private`ent, 
          Blank[List]], 
         Pattern[EntityFramework`Caching`Private`prop, 
          Blank[]]] := 
       Module[{EntityFramework`Caching`Private`index, 
          EntityFramework`Caching`Private`indexFile, 
          EntityFramework`Caching`Private`stream}, 
         EntityFramework`Caching`Private`index = Association[]; 
         Do[EntityFramework`Caching`Private`indexFile = 
            EntityFramework`Caching`Private`toIndexFile[
             EntityFramework`Caching`Private`dataFile, 
              EntityFramework`Caching`Private`level]; If[
             Not[
              FileExistsQ[EntityFramework`Caching`Private`indexFile]], 
             Continue[]]; 
           EntityFramework`Caching`Private`stream = 
            OpenRead[EntityFramework`Caching`Private`indexFile]; Map[
             Function[EntityFramework`Caching`Private`e, 
              If[
               Not[
                KeyExistsQ[
                EntityFramework`Caching`Private`index, 
                 EntityFramework`Caching`Private`e]], 
               Replace[Pattern[EntityFramework`Caching`Private`i, 
                  Blank[Integer]] :> (
                 AssociateTo[
                  EntityFramework`Caching`Private`index, 
                   EntityFramework`Caching`Private`e -> 
                   EntityFramework`Caching`Private`i]; 
                 If[Length[EntityFramework`Caching`Private`index] === 
                   Length[EntityFramework`Caching`Private`ent], 
                   Close[EntityFramework`Caching`Private`stream]; Break[]; 
                   Null])][
                EntityFramework`Caching`Private`getKeyFromStream[
                EntityFramework`Caching`Private`stream, 
                 EntityFramework`Caching`Private`makeKey[
                 EntityFramework`Caching`Private`e, 
                  EntityFramework`Caching`Private`prop]]]]], 
             EntityFramework`Caching`Private`ent]; 
           Close[EntityFramework`Caching`Private`stream], {
           EntityFramework`Caching`Private`level, 2}]; 
         EntityFramework`Caching`Private`index], 
       EntityFramework`Caching`Private`$readFullIndexThreshold = 1000, 
       EntityFramework`Caching`Private`getKeyFromStream[
         Pattern[EntityFramework`Caching`Private`stream, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`key, 
          Blank[]]] := 
       Module[{EntityFramework`Caching`Private`res}, 
         SetStreamPosition[EntityFramework`Caching`Private`stream, 0]; 
         EntityFramework`Caching`Private`res = 
          Find[EntityFramework`Caching`Private`stream, 
            EntityFramework`Caching`Private`key, RecordSeparators -> "|"]; 
         If[EntityFramework`Caching`Private`res === EndOfFile, 
           Return[None]]; 
         EntityFramework`Caching`Private`res = 
          StringSplit[EntityFramework`Caching`Private`res, "-", 2]; 
         If[Length[EntityFramework`Caching`Private`res] =!= 2, 
           Throw[
            First[EntityFramework`Caching`Private`stream], 
            EntityFramework`Caching`Private`$corruptCache]]; 
         EntityFramework`Caching`Private`res = Quiet[
            Check[
             ToExpression[
              Part[EntityFramework`Caching`Private`res, 2]], 
             Throw[
              First[EntityFramework`Caching`Private`stream], 
              EntityFramework`Caching`Private`$corruptCache]]]; 
         EntityFramework`Caching`Private`res], 
       EntityFramework`Caching`Private`decodeData[
         Pattern[EntityFramework`Caching`Private`data, 
          Blank[]], 
         Pattern[EntityFramework`Caching`Private`file, 
          Blank[]]] := Quiet[
         Check[
          Uncompress[EntityFramework`Caching`Private`data], 
          Throw[
          EntityFramework`Caching`Private`file, 
           EntityFramework`Caching`Private`$corruptCache]]], 
       EntityFramework`Caching`Private`addToMemoryCacheRaw[
         Pattern[EntityFramework`Caching`Private`rules, 
          Association[
           BlankSequence[]]]] := 
       If[ByteCount[EntityFramework`Caching`Private`$memoryCache] + 
          ByteCount[EntityFramework`Caching`Private`rules] < 
         EntityFramework`$MaxMemoryCacheSize, 
         EntityFramework`Caching`Private`$memoryCache = 
          Join[EntityFramework`Caching`Private`$memoryCache, 
            KeyMap[
             Map[EntityFramework`Caching`Private`normalize], 
             EntityFramework`Caching`Private`rules]]; Null], 
       EntityFramework`$UseReadOnlyCache = False, 
       EntityFramework`$SendWAEvents = True, 
       TypeSystem`NestedGrid`PackagePrivate`guessCommonName[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := Replace[
         Last[TypeSystem`NestedGrid`PackagePrivate`e], {Condition[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
             Blank[String]], 
            StringFreeQ[TypeSystem`NestedGrid`PackagePrivate`s, "::"]] :> 
          TypeSystem`NestedGrid`PackagePrivate`decamel[
           TypeSystem`NestedGrid`PackagePrivate`s], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`s, {
             BlankNullSequence[String]}] :> StringRiffle[
            Map[
            TypeSystem`NestedGrid`PackagePrivate`decamel, 
             TypeSystem`NestedGrid`PackagePrivate`s], ", "], Blank[] :> 
          ToString[TypeSystem`NestedGrid`PackagePrivate`e, InputForm]}], 
       TypeSystem`NestedGrid`PackagePrivate`decamel[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
          Blank[]]] := 
       StringReplace[TypeSystem`NestedGrid`PackagePrivate`s, StringExpression[
           Pattern[
           TypeSystem`NestedGrid`PackagePrivate`l, 
            TypeSystem`NestedGrid`PackagePrivate`$lower], 
           Pattern[
           TypeSystem`NestedGrid`PackagePrivate`u, 
            TypeSystem`NestedGrid`PackagePrivate`$upper]] :> 
         StringJoin[
          TypeSystem`NestedGrid`PackagePrivate`l, " ", 
           TypeSystem`NestedGrid`PackagePrivate`u]], 
       TypeSystem`NestedGrid`PackagePrivate`$lower = {
        "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", 
         "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"}, 
       TypeSystem`NestedGrid`PackagePrivate`$upper = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
         "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`abox] = {
        HoldAllComplete}, TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[Integer]]] := 
       TextString[TypeSystem`NestedGrid`PackagePrivate`x], Condition[
         TypeSystem`NestedGrid`PackagePrivate`abox[
          Rational[
           Pattern[TypeSystem`NestedGrid`PackagePrivate`a, 
            Blank[Integer]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`b, 
            Blank[Integer]]]], Max[
           Abs[TypeSystem`NestedGrid`PackagePrivate`a], 
           Abs[TypeSystem`NestedGrid`PackagePrivate`b]] < 100] := StringJoin[
         TextString[TypeSystem`NestedGrid`PackagePrivate`a], "/", 
         TextString[TypeSystem`NestedGrid`PackagePrivate`b]], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Alternatives[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`r, 
           Blank[Rational]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`r, 
           Blank[Real]]]] := 
       TextString[TypeSystem`NestedGrid`PackagePrivate`r], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[String]]] := 
       MakeBoxes[TypeSystem`NestedGrid`PackagePrivate`x], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[GeoPosition]]] := 
       TextString[TypeSystem`NestedGrid`PackagePrivate`x], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         PatternTest[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
           Blank[Image]], ImageQ]] := ToBoxes[
         Row[{"  ", 
           Thumbnail[
           TypeSystem`NestedGrid`PackagePrivate`x, TypeSystem`$FontSize 5, 
            Padding -> None]}]], TypeSystem`NestedGrid`PackagePrivate`abox[
         PatternTest[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
           Blank[Image3D]], ImageQ]] := ToBoxes[
         Row[{"  ", 
           Thumbnail[
           TypeSystem`NestedGrid`PackagePrivate`x, TypeSystem`$FontSize 2, 
            Padding -> None]}]], TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[Graphics]]] := ToBoxes[
         Show[
         TypeSystem`NestedGrid`PackagePrivate`x, PlotRangeClipping -> True, 
          Frame -> True, FrameStyle -> LightGray, Ticks -> None, FrameTicks -> 
          None, Axes -> None, ImageSize -> TypeSystem`$FontSize 8]], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[DateObject]]] := TypeSystem`NestedGrid`PackagePrivate`richBox[
         DateString[TypeSystem`NestedGrid`PackagePrivate`x]], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Blank[TimeObject]]] := TypeSystem`NestedGrid`PackagePrivate`richBox[
         DateString[TypeSystem`NestedGrid`PackagePrivate`x]], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         HoldPattern[
          IPAddress[
           PatternTest[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
             Blank[String]], StringQ]]]] := 
       TypeSystem`NestedGrid`PackagePrivate`richBox[
        TypeSystem`NestedGrid`PackagePrivate`x], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
          Alternatives[True, False]]] := 
       If[TypeSystem`NestedGrid`PackagePrivate`x, "True", "False"], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`q, 
          Quantity[
           Pattern[TypeSystem`NestedGrid`PackagePrivate`v, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
            Blank[]]]]] := StyleBox[
         TypeSystem`NestedGrid`PackagePrivate`qbox[
         TypeSystem`NestedGrid`PackagePrivate`q], FontColor -> 
         TypeSystem`NestedGrid`PackagePrivate`$RichAtomColor], 
       TypeSystem`NestedGrid`PackagePrivate`abox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`other, 
          Blank[]]] := If[
         NumericQ[TypeSystem`NestedGrid`PackagePrivate`other], 
         TextString[
          N[TypeSystem`NestedGrid`PackagePrivate`other]], 
         StyleBox[
          MakeBoxes[TypeSystem`NestedGrid`PackagePrivate`other], FontFamily -> 
          "Source Code Pro", FontSize -> 13, ShowStringCharacters -> True]], 
       TypeSystem`NestedGrid`PackagePrivate`qbox[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`q, 
          Blank[]]] := Replace[
         MakeBoxes[TypeSystem`NestedGrid`PackagePrivate`q], {TemplateBox[{
             Pattern[TypeSystem`NestedGrid`PackagePrivate`num, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`post, 
              Blank[]], 
             BlankSequence[]}, "Quantity", 
            BlankSequence[]] :> RowBox[{
             TypeSystem`NestedGrid`PackagePrivate`fixnum[
             TypeSystem`NestedGrid`PackagePrivate`num], 
             TypeSystem`NestedGrid`PackagePrivate`post}], TemplateBox[{
             Pattern[TypeSystem`NestedGrid`PackagePrivate`num, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pre, 
              Blank[]], 
             BlankSequence[]}, "QuantityPrefix", 
            BlankNullSequence[]] :> 
          RowBox[{TypeSystem`NestedGrid`PackagePrivate`pre, 
             TypeSystem`NestedGrid`PackagePrivate`fixnum[
             TypeSystem`NestedGrid`PackagePrivate`num]}], TemplateBox[{
             Pattern[TypeSystem`NestedGrid`PackagePrivate`num, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`post, 
              Blank[]], 
             BlankSequence[]}, "Quantity", 
            BlankNullSequence[]] :> RowBox[{
             TypeSystem`NestedGrid`PackagePrivate`fixnum[
             TypeSystem`NestedGrid`PackagePrivate`num], 
             TypeSystem`NestedGrid`PackagePrivate`post}], TemplateBox[{
             Pattern[TypeSystem`NestedGrid`PackagePrivate`num, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pre, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`post, 
              Blank[]], 
             BlankSequence[]}, "QuantityPrefixPostfix", 
            BlankNullSequence[]] :> 
          RowBox[{TypeSystem`NestedGrid`PackagePrivate`pre, 
             TypeSystem`NestedGrid`PackagePrivate`fixnum[
             TypeSystem`NestedGrid`PackagePrivate`num], 
             TypeSystem`NestedGrid`PackagePrivate`pos}], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`other, 
            Blank[]] :> TypeSystem`NestedGrid`PackagePrivate`other, Blank[] :> 
          GeneralUtilities`UnmatchedCase[]}], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[String]]] := If[
         StringMatchQ[TypeSystem`NestedGrid`PackagePrivate`e, "*."], 
         StringDrop[TypeSystem`NestedGrid`PackagePrivate`e, -1], 
         TypeSystem`NestedGrid`PackagePrivate`e], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         FractionBox[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`a, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`b, 
           Blank[]]]] := 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[{
         TypeSystem`NestedGrid`PackagePrivate`a, "/", 
          TypeSystem`NestedGrid`PackagePrivate`b}], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         RowBox[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`list, 
           Blank[List]]]] := 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
        TypeSystem`NestedGrid`PackagePrivate`list], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, {
           BlankNullSequence[String]}]] := 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         StringJoin[TypeSystem`NestedGrid`PackagePrivate`e]], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[{"-", 
          FractionBox[
           Pattern[TypeSystem`NestedGrid`PackagePrivate`a, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`b, 
            Blank[]]]}] := 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[{
         "-", TypeSystem`NestedGrid`PackagePrivate`a, "/", 
          TypeSystem`NestedGrid`PackagePrivate`b}], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`list, 
          Blank[List]]] := RowBox[TypeSystem`NestedGrid`PackagePrivate`list], 
       TypeSystem`NestedGrid`PackagePrivate`fixnum[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := TypeSystem`NestedGrid`PackagePrivate`e, 
       Attributes[GeneralUtilities`UnmatchedCase] = {HoldAllComplete}, 
       GeneralUtilities`UnmatchedCase[] := 
       GeneralUtilities`Panic["UnmatchedCase"], GeneralUtilities`UnmatchedCase[
         Pattern[GeneralUtilities`Control`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`case, 
          Blank[]]] := 
       GeneralUtilities`Panic[
        "UnmatchedCase", "The case `` was not matched in a ``.", 
         HoldForm[GeneralUtilities`Control`PackagePrivate`case], 
         GeneralUtilities`Control`PackagePrivate`head], TypeSystem`SparseGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`opts, 
          BlankNullSequence[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`grid}, 
         TypeSystem`NestedGrid`PackagePrivate`grid = 
          ReplaceRepeated[
           TypeSystem`NestedGrid`PackagePrivate`e, 
            TypeSystem`NestedGrid`PackagePrivate`$HVRules]; 
         TypeSystem`NestedGrid`PackagePrivate`grid = 
          TypeSystem`NestedGrid`PackagePrivate`toGrid[
           TypeSystem`NestedGrid`PackagePrivate`grid]; 
         TypeSystem`NestedGrid`PackagePrivate`grid = 
          PadRight[
           TypeSystem`NestedGrid`PackagePrivate`grid, Automatic, 
            TypeSystem`NestedGrid`PackagePrivate`$Empty]; 
         TypeSystem`NestedGrid`PackagePrivate`grid = Grid[
            TypeSystem`NestedGrid`PackagePrivate`insertSpanFromBoth[
            TypeSystem`NestedGrid`PackagePrivate`grid], 
            TypeSystem`NestedGrid`PackagePrivate`opts, Alignment -> Left, 
            RowMinHeight -> 1.5, Dividers -> All, FrameStyle -> 
            TypeSystem`NestedGrid`PackagePrivate`$FrameStyle, 
            BaseStyle -> {
             FontFamily -> "Verdana", FontSize -> TypeSystem`$FontSize}]; 
         Deploy[
           Style[
           TypeSystem`NestedGrid`PackagePrivate`grid, LineBreakWithin -> 
            False, ContextMenu -> {}, NumberMarks -> False, ShowAutoStyles -> 
            False]]], 
       TypeSystem`NestedGrid`PackagePrivate`$HVRules = {
        Pattern[TypeSystem`NestedGrid`PackagePrivate`r, 
           TypeSystem`H[
            BlankNullSequence[], 
            Blank[TypeSystem`V], 
            BlankNullSequence[]]] :> 
         TypeSystem`NestedGrid`PackagePrivate`flattenH[
          TypeSystem`NestedGrid`PackagePrivate`r], TypeSystem`H[
           Pattern[TypeSystem`NestedGrid`PackagePrivate`l, 
            BlankNullSequence[]], 
           TypeSystem`H[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`m, 
             BlankNullSequence[]]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`r, 
            BlankNullSequence[]]] :> 
         TypeSystem`H[
          TypeSystem`NestedGrid`PackagePrivate`l, 
           TypeSystem`NestedGrid`PackagePrivate`m, 
           TypeSystem`NestedGrid`PackagePrivate`r], TypeSystem`V[
           Pattern[TypeSystem`NestedGrid`PackagePrivate`l, 
            BlankNullSequence[]], 
           TypeSystem`V[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`m, 
             BlankNullSequence[]]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`r, 
            BlankNullSequence[]]] :> 
         TypeSystem`V[
          TypeSystem`NestedGrid`PackagePrivate`l, 
           TypeSystem`NestedGrid`PackagePrivate`m, 
           TypeSystem`NestedGrid`PackagePrivate`r]}, 
       TypeSystem`NestedGrid`PackagePrivate`flattenH[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`r, 
          Blank[TypeSystem`H]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`elems, 
          TypeSystem`NestedGrid`PackagePrivate`maxHeight, 
          TypeSystem`NestedGrid`PackagePrivate`padded, 
          TypeSystem`NestedGrid`PackagePrivate`result}, 
         TypeSystem`NestedGrid`PackagePrivate`elems = ReplaceRepeated[
            Apply[List, TypeSystem`NestedGrid`PackagePrivate`r], 
            TypeSystem`NestedGrid`PackagePrivate`$HVRules]; 
         TypeSystem`NestedGrid`PackagePrivate`maxHeight = Max[
            Map[
            TypeSystem`NestedGrid`PackagePrivate`VHeight, 
             TypeSystem`NestedGrid`PackagePrivate`elems]]; 
         TypeSystem`NestedGrid`PackagePrivate`padded = 
          Map[TypeSystem`NestedGrid`PackagePrivate`padV[#, 
             TypeSystem`NestedGrid`PackagePrivate`maxHeight]& , 
            TypeSystem`NestedGrid`PackagePrivate`elems]; 
         TypeSystem`NestedGrid`PackagePrivate`result = Apply[TypeSystem`V, 
            MapThread[
            TypeSystem`H, TypeSystem`NestedGrid`PackagePrivate`padded]]; 
         TypeSystem`NestedGrid`PackagePrivate`result], 
       TypeSystem`NestedGrid`PackagePrivate`VHeight[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`c, 
          Blank[TypeSystem`V]]] := 
       Length[TypeSystem`NestedGrid`PackagePrivate`c], 
       TypeSystem`NestedGrid`PackagePrivate`VHeight[
         Blank[]] := 1, TypeSystem`NestedGrid`PackagePrivate`padV[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`c, 
          Blank[TypeSystem`V]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
          Blank[]]] := If[
         FreeQ[TypeSystem`NestedGrid`PackagePrivate`c, TypeSystem`H], 
         PadRight[
          Apply[List, TypeSystem`NestedGrid`PackagePrivate`c], 
          TypeSystem`NestedGrid`PackagePrivate`n, SpanFromAbove], 
         TypeSystem`NestedGrid`PackagePrivate`flattenV[
         TypeSystem`NestedGrid`PackagePrivate`c, 
          TypeSystem`NestedGrid`PackagePrivate`n]], 
       TypeSystem`NestedGrid`PackagePrivate`padV[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`c, 
          Blank[TypeSystem`H]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
          Blank[]]] := 
       PadRight[{TypeSystem`NestedGrid`PackagePrivate`c}, 
         TypeSystem`NestedGrid`PackagePrivate`n, 
         TypeSystem`NestedGrid`PackagePrivate`padH[
          TypeSystem`H[], 
          Length[TypeSystem`NestedGrid`PackagePrivate`c]]], 
       TypeSystem`NestedGrid`PackagePrivate`padV[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
          Blank[]]] := 
       PadRight[{TypeSystem`NestedGrid`PackagePrivate`e}, 
         TypeSystem`NestedGrid`PackagePrivate`n, SpanFromAbove], 
       TypeSystem`NestedGrid`PackagePrivate`flattenV[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`c, 
          Blank[TypeSystem`V]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`items, 
          TypeSystem`NestedGrid`PackagePrivate`widths, 
          TypeSystem`NestedGrid`PackagePrivate`maxWidth}, 
         TypeSystem`NestedGrid`PackagePrivate`items = ReplaceRepeated[
            Apply[List, TypeSystem`NestedGrid`PackagePrivate`c], 
            TypeSystem`NestedGrid`PackagePrivate`$HVRules]; 
         TypeSystem`NestedGrid`PackagePrivate`widths = 
          Map[TypeSystem`NestedGrid`PackagePrivate`HWidth, 
            Cases[TypeSystem`NestedGrid`PackagePrivate`items, 
             Blank[TypeSystem`H]]]; If[
           Not[
            Apply[Equal, TypeSystem`NestedGrid`PackagePrivate`widths]], 
           GeneralUtilities`Panic["NotHomogenous"]]; 
         TypeSystem`NestedGrid`PackagePrivate`maxWidth = 
          First[TypeSystem`NestedGrid`PackagePrivate`widths, 0]; PadRight[
           Map[
           TypeSystem`NestedGrid`PackagePrivate`padH[#, 
             TypeSystem`NestedGrid`PackagePrivate`maxWidth]& , 
            TypeSystem`NestedGrid`PackagePrivate`items], 
           TypeSystem`NestedGrid`PackagePrivate`n, 
           TypeSystem`NestedGrid`PackagePrivate`padH[
            TypeSystem`H[], TypeSystem`NestedGrid`PackagePrivate`maxWidth]]], 
       TypeSystem`NestedGrid`PackagePrivate`HWidth[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`h, 
          Blank[TypeSystem`H]]] := 
       Length[TypeSystem`NestedGrid`PackagePrivate`h], 
       TypeSystem`NestedGrid`PackagePrivate`padH[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`h, 
          Blank[TypeSystem`H]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
          Blank[]]] := 
       PadRight[
        TypeSystem`NestedGrid`PackagePrivate`h, 
         TypeSystem`NestedGrid`PackagePrivate`n, SpanFromAbove], 
       TypeSystem`NestedGrid`PackagePrivate`padH[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]], 
         Blank[]] := TypeSystem`NestedGrid`PackagePrivate`e, 
       TypeSystem`NestedGrid`PackagePrivate`toGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`v, 
          Blank[TypeSystem`V]]] := 
       Map[TypeSystem`NestedGrid`PackagePrivate`toRow, 
         Apply[List, TypeSystem`NestedGrid`PackagePrivate`v]], 
       TypeSystem`NestedGrid`PackagePrivate`toGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := {
         TypeSystem`NestedGrid`PackagePrivate`toRow[
         TypeSystem`NestedGrid`PackagePrivate`e]}, 
       TypeSystem`NestedGrid`PackagePrivate`toRow[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`h, 
          Blank[TypeSystem`H]]] := If[
         Not[
          TypeSystem`NestedGrid`PackagePrivate`simpleQ[
          TypeSystem`NestedGrid`PackagePrivate`h]], 
         TypeSystem`NestedGrid`PackagePrivate`invGrid[], 
         Apply[List, TypeSystem`NestedGrid`PackagePrivate`h]], 
       TypeSystem`NestedGrid`PackagePrivate`toRow[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`v, 
          Blank[TypeSystem`V]]] := 
       TypeSystem`NestedGrid`PackagePrivate`invGrid[], 
       TypeSystem`NestedGrid`PackagePrivate`toRow[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := If[
         Not[
          TypeSystem`NestedGrid`PackagePrivate`simpleQ[
          TypeSystem`NestedGrid`PackagePrivate`h]], 
         TypeSystem`NestedGrid`PackagePrivate`invGrid[], {
         TypeSystem`NestedGrid`PackagePrivate`e}], 
       TypeSystem`NestedGrid`PackagePrivate`simpleQ[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := FreeQ[TypeSystem`NestedGrid`PackagePrivate`e, 
         Alternatives[
          Blank[TypeSystem`H], 
          Blank[TypeSystem`V]], {1, Infinity}, Heads -> False], 
       TypeSystem`NestedGrid`PackagePrivate`invGrid[] := 
       GeneralUtilities`Panic["NotSimple"], 
       TypeSystem`NestedGrid`PackagePrivate`$Empty = 
       Item["", Background -> GrayLevel[0.85]], 
       TypeSystem`NestedGrid`PackagePrivate`insertSpanFromBoth[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`dims, 
          TypeSystem`NestedGrid`PackagePrivate`grid$ = 
          TypeSystem`NestedGrid`PackagePrivate`grid, 
          TypeSystem`NestedGrid`PackagePrivate`above, 
          TypeSystem`NestedGrid`PackagePrivate`left, 
          TypeSystem`NestedGrid`PackagePrivate`row, 
          TypeSystem`NestedGrid`PackagePrivate`col}, If[
           Or[
            FreeQ[
            TypeSystem`NestedGrid`PackagePrivate`grid$, SpanFromLeft, {2}], 
            FreeQ[
            TypeSystem`NestedGrid`PackagePrivate`grid$, SpanFromAbove, {2}]], 
           Return[TypeSystem`NestedGrid`PackagePrivate`grid$]; Null]; 
         TypeSystem`NestedGrid`PackagePrivate`zReturn[
          TypeSystem`NestedGrid`PackagePrivate`grid$]; 
         TypeSystem`NestedGrid`PackagePrivate`dims = 
          Dimensions[TypeSystem`NestedGrid`PackagePrivate`grid$]; 
         TypeSystem`NestedGrid`PackagePrivate`grid$ = 
          TypeSystem`NestedGrid`PackagePrivate`grid$; 
         Do[If[Min[TypeSystem`NestedGrid`PackagePrivate`pos] == 1, 
             Continue[]]; {
             TypeSystem`NestedGrid`PackagePrivate`above, 
              TypeSystem`NestedGrid`PackagePrivate`left} = 
            Extract[TypeSystem`NestedGrid`PackagePrivate`grid$, {
              TypeSystem`NestedGrid`PackagePrivate`pos - {1, 0}, 
               TypeSystem`NestedGrid`PackagePrivate`pos - {0, 1}}]; If[
             And[
              TypeSystem`NestedGrid`PackagePrivate`spanQ[
              TypeSystem`NestedGrid`PackagePrivate`above], 
              Or[
              TypeSystem`NestedGrid`PackagePrivate`left === SpanFromAbove, 
               TypeSystem`NestedGrid`PackagePrivate`left === SpanFromBoth]], {
               TypeSystem`NestedGrid`PackagePrivate`row, 
                TypeSystem`NestedGrid`PackagePrivate`col} = 
              TypeSystem`NestedGrid`PackagePrivate`pos; 
             Part[TypeSystem`NestedGrid`PackagePrivate`grid$, 
                TypeSystem`NestedGrid`PackagePrivate`row, 
                TypeSystem`NestedGrid`PackagePrivate`col] = SpanFromBoth; 
             Null], {TypeSystem`NestedGrid`PackagePrivate`pos, 
            Position[TypeSystem`NestedGrid`PackagePrivate`grid$, 
             Alternatives[SpanFromLeft, SpanFromAbove], {2}]}]; 
         TypeSystem`NestedGrid`PackagePrivate`grid$], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`grid$] = {Temporary}, 
       TypeSystem`NestedGrid`PackagePrivate`spanQ[
         Alternatives[SpanFromLeft, SpanFromBoth]] := True, 
       TypeSystem`NestedGrid`PackagePrivate`spanQ[
         Blank[]] := False, TypeSystem`NestedGrid`PackagePrivate`$FrameStyle = 
       GrayLevel[0.85], TypeSystem`DynamicNestedGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
          Blank[]], 
         Optional[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
           Blank[Integer]], 20]] := If[
         TrueQ[$DynamicEvaluation], 
         TypeSystem`NestedGrid[
         TypeSystem`NestedGrid`PackagePrivate`data, 
          TypeSystem`NestedGrid`PackagePrivate`n], 
         TypeSystem`NestedGrid`PackagePrivate`iDynamicNestedGrid[
          TypeSystem`PackageScope`toDataAndType[
          TypeSystem`NestedGrid`PackagePrivate`data], 
          TypeSystem`NestedGrid`PackagePrivate`n, 
          RandomInteger[2^31]]], 
       TypeSystem`NestedGrid`PackagePrivate`iDynamicNestedGrid[{
          Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`type, 
           Blank[]]}, 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`rows, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`len, 
          TypeSystem`NestedGrid`PackagePrivate`$bottomBar, 
          TypeSystem`NestedGrid`PackagePrivate`$topBar}, 
         TypeSystem`NestedGrid`PackagePrivate`len = 
          Length[TypeSystem`NestedGrid`PackagePrivate`data]; If[
           Not[
            FreeQ[TypeSystem`NestedGrid`PackagePrivate`type, 
             Alternatives[
             TypeSystem`NestedGrid`PackagePrivate`$entitiesPattern, Entity]]], 
           TypeSystem`NestedGrid`PackagePrivate`cacheEntities[
           TypeSystem`NestedGrid`PackagePrivate`data, 
            TypeSystem`NestedGrid`PackagePrivate`type]]; Deploy[
           
           DynamicModule[{
            TypeSystem`NestedGrid`PackagePrivate`$state, 
             TypeSystem`NestedGrid`PackagePrivate`$path, 
             TypeSystem`NestedGrid`PackagePrivate`$pos, 
             TypeSystem`NestedGrid`PackagePrivate`$grid, 
             TypeSystem`NestedGrid`PackagePrivate`$posCell, 
             TypeSystem`NestedGrid`PackagePrivate`$topBar, 
             TypeSystem`NestedGrid`PackagePrivate`$bottomBar}, 
            TypeSystem`NestedGrid`PackagePrivate`setInitialState[
             TypeSystem`NestedGrid`PackagePrivate`$state, 
              TypeSystem`NestedGrid`PackagePrivate`$path, 
              TypeSystem`NestedGrid`PackagePrivate`$pos, 
              TypeSystem`NestedGrid`PackagePrivate`$grid][
             TypeSystem`NestedGrid`PackagePrivate`data, 
              TypeSystem`NestedGrid`PackagePrivate`type, 
              TypeSystem`NestedGrid`PackagePrivate`rows, 
              TypeSystem`NestedGrid`PackagePrivate`outputID]; 
            TypeSystem`NestedGrid`PackagePrivate`$bottomBar = 
             TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
               TypeSystem`PackageScope`Pathbar[
               TypeSystem`NestedGrid`PackagePrivate`outputID]]; 
            TypeSystem`NestedGrid`PackagePrivate`$topBar = Dynamic[
               TypeSystem`NestedGrid`PackagePrivate`alignBar[
               TypeSystem`NestedGrid`PackagePrivate`$state][
                TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                 TypeSystem`PackageScope`Pathbar[
                 TypeSystem`NestedGrid`PackagePrivate`$path, 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state, 
                   TypeSystem`NestedGrid`PackagePrivate`$path, 
                   TypeSystem`NestedGrid`PackagePrivate`$pos, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid, 
                   TypeSystem`NestedGrid`PackagePrivate`outputID]]]], 
               TrackedSymbols :> {
                TypeSystem`NestedGrid`PackagePrivate`$path}]; Dynamic[
              Column[
               If[TypeSystem`NestedGrid`PackagePrivate`$path == {}, {
                 TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                 TypeSystem`NestedGrid`PackagePrivate`$grid, 
                  TypeSystem`NestedGrid`PackagePrivate`$state, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos], 
                 TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                  TypeSystem`NestedGrid`PackagePrivate`alignBar[
                  TypeSystem`NestedGrid`PackagePrivate`$state][
                  TypeSystem`NestedGrid`PackagePrivate`$bottomBar]]}, {
                TypeSystem`NestedGrid`PackagePrivate`$topBar, 
                 TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                 TypeSystem`NestedGrid`PackagePrivate`$grid, 
                  TypeSystem`NestedGrid`PackagePrivate`$state, 
                  TypeSystem`NestedGrid`PackagePrivate`$pos], 
                 TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                  TypeSystem`NestedGrid`PackagePrivate`alignBar[
                  TypeSystem`NestedGrid`PackagePrivate`$state][
                  TypeSystem`NestedGrid`PackagePrivate`$bottomBar]]}], 
               Spacings -> 
               If[TypeSystem`NestedGrid`PackagePrivate`$path == {}, 
                 0, {{}, {0, 0.05, 0}}]], 
              TrackedSymbols :> {
               TypeSystem`NestedGrid`PackagePrivate`$state, 
                TypeSystem`NestedGrid`PackagePrivate`$grid}], 
            BaseStyle -> {LineBreakWithin -> False}, Initialization :> 
            Block[{$ContextPath = $ContextPath}, 
              Needs["TypeSystem`"]], Deinitialization :> 
            TypeSystem`NestedGrid`PackagePrivate`deleteState[
             TypeSystem`NestedGrid`PackagePrivate`$state]]]], 
       TypeSystem`NestedGrid`PackagePrivate`$path = {}, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`setInitialState] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`setInitialState[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`type, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`rows, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`shape, 
          TypeSystem`NestedGrid`PackagePrivate`rowCount, 
          TypeSystem`NestedGrid`PackagePrivate`initialData}, 
         TypeSystem`NestedGrid`PackagePrivate`shape = 
          TypeSystem`PackageScope`chooseShape[
           TypeSystem`NestedGrid`PackagePrivate`data, 
            TypeSystem`NestedGrid`PackagePrivate`type, 
            TypeSystem`NestedGrid`PackagePrivate`rows]; 
         TypeSystem`NestedGrid`PackagePrivate`rowCount = Replace[
            TypeSystem`NestedGrid`PackagePrivate`getLimit[
            TypeSystem`NestedGrid`PackagePrivate`shape], Null -> 
            TypeSystem`NestedGrid`PackagePrivate`rows]; 
         TypeSystem`NestedGrid`PackagePrivate`initialData = 
          TypeSystem`NestedGrid`PackagePrivate`InsertCacheValue[
           TypeSystem`NestedGrid`PackagePrivate`data]; 
         TypeSystem`NestedGrid`PackagePrivate`state = 
          Data`UnorderedAssociation[
           "InitialData" -> TypeSystem`NestedGrid`PackagePrivate`initialData, 
            "InitialType" -> TypeSystem`NestedGrid`PackagePrivate`type, 
            "RowTarget" -> TypeSystem`NestedGrid`PackagePrivate`rows, "Shape" -> 
            TypeSystem`NestedGrid`PackagePrivate`shape, "Type" -> 
            TypeSystem`NestedGrid`PackagePrivate`type, "HandleQ" -> 
            TypeSystem`NestedGrid`PackagePrivate`handle =!= None, "RowCount" -> 
            TypeSystem`NestedGrid`PackagePrivate`rowCount, "Data" -> 
            TypeSystem`NestedGrid`PackagePrivate`initialData, "Length" -> 
            Length[TypeSystem`NestedGrid`PackagePrivate`data]]; 
         TypeSystem`NestedGrid`PackagePrivate`path = {}; 
         TypeSystem`NestedGrid`PackagePrivate`pos = 1; 
         TypeSystem`NestedGrid`PackagePrivate`updateGrid[
          TypeSystem`NestedGrid`PackagePrivate`grid, 
           TypeSystem`NestedGrid`PackagePrivate`state, 
           TypeSystem`NestedGrid`PackagePrivate`path, 
           TypeSystem`NestedGrid`PackagePrivate`pos][
          TypeSystem`NestedGrid`PackagePrivate`data, 
           TypeSystem`NestedGrid`PackagePrivate`outputID]; Null], 
       TypeSystem`NestedGrid`PackagePrivate`getLimit[
         TypeSystem`PackageScope`Limited[
          Blank[], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
           Blank[]], 
          Blank[]]] := TypeSystem`NestedGrid`PackagePrivate`n, 
       TypeSystem`NestedGrid`PackagePrivate`getLimit[
         TypeSystem`PackageScope`HeaderShape[
          Blank[], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`t, 
           Blank[]]]] := 
       TypeSystem`NestedGrid`PackagePrivate`getLimit[
        TypeSystem`NestedGrid`PackagePrivate`t], 
       TypeSystem`NestedGrid`PackagePrivate`getLimit[
         Blank[]] := Null, 
       TypeSystem`NestedGrid`PackagePrivate`InsertCacheValue[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`key}, 
         TypeSystem`NestedGrid`PackagePrivate`key = RandomInteger[2^31]; 
         TypeSystem`PackageScope`$DataCache[
           TypeSystem`NestedGrid`PackagePrivate`key] = 
          TypeSystem`NestedGrid`PackagePrivate`data; 
         TypeSystem`PackageScope`CacheHandle[
          TypeSystem`NestedGrid`PackagePrivate`key]], 
       TypeSystem`PackageScope`$DataCache = Association[743086951 -> {
           Association[
           "Pirate Name" -> "Admiral Blackbeard", "Favourite Foods" -> 
            "Vegetables, Fruits", "Allergies" -> "Dairy"], 
           Association[
           "Pirate Name" -> "Bonnie Pip Culliford", "Favourite Foods" -> 
            "Candy, Smoothies", "Allergies" -> "Spicy Foods"], 
           Association[
           "Pirate Name" -> "Buck Cutlass", "Favourite Foods" -> "Candy", 
            "Allergies" -> "Vegetables"], 
           Association[
           "Pirate Name" -> "Captain Crossblades", "Favourite Foods" -> 
            "Slushies, Pizza", "Allergies" -> "Salty Foods"], 
           Association[
           "Pirate Name" -> "Fairfax the Deckhand", "Favourite Foods" -> 
            "Vegetables, Fruits", "Allergies" -> "Salty Foods"], 
           Association[
           "Pirate Name" -> "Federismo Corvallio", "Favourite Foods" -> 
            "Gross Foods, Pizza", "Allergies" -> "Smoothies"], 
           Association[
           "Pirate Name" -> "Franchisco Corvallio", "Favourite Foods" -> 
            "Spicy Foods, Meats", "Allergies" -> "Candy"], 
           Association[
           "Pirate Name" -> "Gooblah the Grarrl", "Favourite Foods" -> 
            "Meats", "Allergies" -> "Slushies"], 
           Association[
           "Pirate Name" -> "Lucky McKyriggan", "Favourite Foods" -> 
            "Gross Foods", "Allergies" -> "Pizza"], 
           Association[
           "Pirate Name" -> "Ned the Skipper", "Favourite Foods" -> "Meats", 
            "Allergies" -> "Dairy"], 
           Association[
           "Pirate Name" -> "Ol' Stripey", "Favourite Foods" -> 
            "Meats, Slushies", "Allergies" -> "Breads"], 
           Association[
           "Pirate Name" -> "Orvinn the First Mate", "Favourite Foods" -> 
            "Candy, Slushies, Pizza", "Allergies" -> "Fruits"], 
           Association[
           "Pirate Name" -> "Peg Leg Percival", "Favourite Foods" -> 
            "Spicy Foods", "Allergies" -> "Smoothies"], 
           Association[
           "Pirate Name" -> "Puffo the Waister", "Favourite Foods" -> 
            "Candy, Smoothies, Slushies", "Allergies" -> "Meats"], 
           Association[
           "Pirate Name" -> "Scurvy Dan the Blade", "Favourite Foods" -> 
            "Salty Foods, Meats", "Allergies" -> "Candy"], 
           Association[
           "Pirate Name" -> "Sir Edmund Ogletree", "Favourite Foods" -> 
            "Dairy", "Allergies" -> "Breads"], 
           Association[
           "Pirate Name" -> "Squire Venable", "Favourite Foods" -> "Breads", 
            "Allergies" -> "Fruits"], 
           Association[
           "Pirate Name" -> "Stuff-A-Roo", "Favourite Foods" -> "Pizza", 
            "Allergies" -> "Neggs"], 
           Association[
           "Pirate Name" -> "The Tailhook Kid", "Favourite Foods" -> 
            "Vegetables", "Allergies" -> "Neggs"], 
           Association[
           "Pirate Name" -> "Young Sproggie", "Favourite Foods" -> 
            "Meats, Neggs", "Allergies" -> "Gross Foods"]}], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`updateGrid] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`updateGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`initialData, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]] := 
       TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`path, 
         TypeSystem`NestedGrid`PackagePrivate`grid = 
          DynamicModule[{
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
             TypeSystem`NestedGrid`PackagePrivate`self}, 
            TypeSystem`NestedGrid`PackagePrivate`self = EvaluationBox[]; 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
              TypeSystem`NestedGrid`PackagePrivate`state, 
               TypeSystem`NestedGrid`PackagePrivate`path, 
               TypeSystem`NestedGrid`PackagePrivate`pos, 
               TypeSystem`NestedGrid`PackagePrivate`grid, 
               TypeSystem`NestedGrid`PackagePrivate`outputID][
              TypeSystem`NestedGrid`PackagePrivate`initialData]; Dynamic[
              TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
              TypeSystem`NestedGrid`PackagePrivate`path, If[
                 Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                 
                 Module[{
                  TypeSystem`NestedGrid`PackagePrivate`tmpGrid = $Failed, 
                   TypeSystem`NestedGrid`PackagePrivate`tmpData = 
                   TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`state["Data"]]}, 
                  TypeSystem`NestedGrid`PackagePrivate`tmpGrid = 
                   If[TypeSystem`NestedGrid`PackagePrivate`tmpData === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`state, 
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`pos, 
                    TypeSystem`NestedGrid`PackagePrivate`grid, 
                    TypeSystem`NestedGrid`PackagePrivate`outputID][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid]; Null]]; 
               TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
               TypeSystem`NestedGrid`PackagePrivate`pos; If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                 TypeSystem`SparseGrid[
                  TypeSystem`H["(data no longer present)"]], 
                 If[GeneralUtilities`$DebugMode, 
                  
                  Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`state, 
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`pos]}], 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
              TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`pos}]]; 
         Null], Attributes[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath] = {HoldRest}, 
       TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`newPath, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`body, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`$path = 
          TypeSystem`NestedGrid`PackagePrivate`newPath, 
          TypeSystem`NestedGrid`PackagePrivate`$pathSlots = 
          GeneralUtilities`MatchIndices[
           TypeSystem`NestedGrid`PackagePrivate`newPath, 
            Alternatives[All, Values]]}, 
         TypeSystem`NestedGrid`PackagePrivate`body], 
       TypeSystem`NestedGrid`PackagePrivate`$pathSlots = {}, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`renderGrid] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`renderGrid[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`data, 
          Blank[]]] := 
       Catch[TypeSystem`NestedGrid`PackagePrivate`$outputID = 
          TypeSystem`NestedGrid`PackagePrivate`outputID; TypeSystem`SparseGrid[
           ReplaceAll[{TypeSystem`NestedGrid`PackagePrivate`$MoreSetter$[
               Pattern[TypeSystem`NestedGrid`PackagePrivate`p, 
                Blank[]]] :> (ContextMenu -> 
              TypeSystem`NestedGrid`PackagePrivate`makeMoreItemMenu[{
                TypeSystem`NestedGrid`PackagePrivate`state, 
                 TypeSystem`NestedGrid`PackagePrivate`path, 
                 TypeSystem`NestedGrid`PackagePrivate`pos, 
                 TypeSystem`NestedGrid`PackagePrivate`grid, 
                 TypeSystem`NestedGrid`PackagePrivate`outputID}, 
                TypeSystem`NestedGrid`PackagePrivate`p]), 
             TypeSystem`NestedGrid`PackagePrivate`$PaginatorSetter$[
               Pattern[TypeSystem`NestedGrid`PackagePrivate`p, 
                Blank[]]] :> (ContextMenu -> 
              TypeSystem`NestedGrid`PackagePrivate`makePaginatedItemMenu[{
                TypeSystem`NestedGrid`PackagePrivate`state, 
                 TypeSystem`NestedGrid`PackagePrivate`path, 
                 TypeSystem`NestedGrid`PackagePrivate`pos, 
                 TypeSystem`NestedGrid`PackagePrivate`grid, 
                 TypeSystem`NestedGrid`PackagePrivate`outputID}, 
                TypeSystem`NestedGrid`PackagePrivate`p]), 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`ts, 
               TypeSystem`NestedGrid`PackagePrivate`$TooltipSetter$[
                Pattern[TypeSystem`NestedGrid`PackagePrivate`t, 
                 Blank[]], 
                Pattern[TypeSystem`NestedGrid`PackagePrivate`v, 
                 Blank[]]]] :> If[$CloudEvaluation, 
               TypeSystem`NestedGrid`PackagePrivate`tooltipPathSetters[
               TypeSystem`NestedGrid`PackagePrivate`ts], 
               TypeSystem`NestedGrid`PackagePrivate`t], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`ps, 
               Blank[TypeSystem`NestedGrid`PackagePrivate`$PathSetter$]] :> 
             TypeSystem`NestedGrid`PackagePrivate`fmtPathSetter[
              TypeSystem`NestedGrid`PackagePrivate`state, 
               TypeSystem`NestedGrid`PackagePrivate`path, 
               TypeSystem`NestedGrid`PackagePrivate`pos, 
               TypeSystem`NestedGrid`PackagePrivate`grid, 
               TypeSystem`NestedGrid`PackagePrivate`outputID][
              TypeSystem`NestedGrid`PackagePrivate`ps]}][
            TypeSystem`PackageScope`Paginated[
             TypeSystem`NestedGrid`PackagePrivate`state["Shape"], 
             Dynamic[TypeSystem`NestedGrid`PackagePrivate`pos]][
             If[
              FailureQ[TypeSystem`NestedGrid`PackagePrivate`data], 
              Return[$Failed, Catch], 
              TypeSystem`NestedGrid`PackagePrivate`data]]], 
           BaseStyle -> {
            ContextMenu -> 
             TypeSystem`NestedGrid`PackagePrivate`makeDynamicNGContextMenu[
              TypeSystem`NestedGrid`PackagePrivate`state], FontFamily -> 
             "Verdana", FontSize -> TypeSystem`$FontSize}], 
         GeneralUtilities`PackageScope`CatchFailureTag, 
         GeneralUtilities`PackageScope`CatchFailureHandler[
         TypeSystem`NestedGrid`PackagePrivate`renderGrid]], 
       TypeSystem`NestedGrid`PackagePrivate`$outputID = 356976746, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`makeMoreItemMenu] = {
        HoldFirst}, TypeSystem`NestedGrid`PackagePrivate`makeMoreItemMenu[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`stateVars, 
          Blank[List]], 
         Optional[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
           Blank[]], {}]] := {
         MenuItem["Show 1 more row at this level", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`adjustLimits[
           TypeSystem`NestedGrid`PackagePrivate`stateVars, 
            TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 1]& , 
            TypeSystem`NestedGrid`PackagePrivate`path]], MenuEvaluator -> 
          Automatic], 
         MenuItem["Show 5 more rows at this level", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`adjustLimits[
           TypeSystem`NestedGrid`PackagePrivate`stateVars, 
            TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 5]& , 
            TypeSystem`NestedGrid`PackagePrivate`path]], MenuEvaluator -> 
          Automatic], Delimiter, 
         MenuItem["Show 1 fewer row at this level", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`adjustLimits[
           TypeSystem`NestedGrid`PackagePrivate`stateVars, 
            TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& , 
            TypeSystem`NestedGrid`PackagePrivate`path]], MenuEvaluator -> 
          Automatic], 
         MenuItem["Show 5 fewer rows at this level", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`adjustLimits[
           TypeSystem`NestedGrid`PackagePrivate`stateVars, 
            TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& , 
            TypeSystem`NestedGrid`PackagePrivate`path]], MenuEvaluator -> 
          Automatic]}, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`adjustLimits] = {
        HoldFirst}, TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
          Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
           Blank[]]}, 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`limVal, 
          Blank[Integer]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`limPath, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`newShape}, 
         TypeSystem`NestedGrid`PackagePrivate`newShape = 
          TypeSystem`NestedGrid`PackagePrivate`replaceLimits[
            TypeSystem`NestedGrid`PackagePrivate`state["Shape"], 
            Replace[{{
                Pattern[TypeSystem`NestedGrid`PackagePrivate`col, 
                 Blank[]], 
                Blank[]} :> 
              TypeSystem`NestedGrid`PackagePrivate`col 
               TypeSystem`NestedGrid`PackagePrivate`limVal, Blank[] -> 
              TypeSystem`NestedGrid`PackagePrivate`limVal}], 
            TypeSystem`NestedGrid`PackagePrivate`limPath]; 
         TypeSystem`NestedGrid`PackagePrivate`updateShape[
          TypeSystem`NestedGrid`PackagePrivate`state, 
           TypeSystem`NestedGrid`PackagePrivate`path, 
           TypeSystem`NestedGrid`PackagePrivate`pos, 
           TypeSystem`NestedGrid`PackagePrivate`grid, 
           TypeSystem`NestedGrid`PackagePrivate`outputID][
          TypeSystem`NestedGrid`PackagePrivate`newShape]], 
       TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
          Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
           Blank[]]}, 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`dxFunc, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`limPath, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`newShape}, 
         TypeSystem`NestedGrid`PackagePrivate`newShape = 
          TypeSystem`NestedGrid`PackagePrivate`replaceLimits[
            TypeSystem`NestedGrid`PackagePrivate`state["Shape"], 
            TypeSystem`NestedGrid`PackagePrivate`dxFunc, 
            TypeSystem`NestedGrid`PackagePrivate`limPath]; 
         TypeSystem`NestedGrid`PackagePrivate`updateShape[
          TypeSystem`NestedGrid`PackagePrivate`state, 
           TypeSystem`NestedGrid`PackagePrivate`path, 
           TypeSystem`NestedGrid`PackagePrivate`pos, 
           TypeSystem`NestedGrid`PackagePrivate`grid, 
           TypeSystem`NestedGrid`PackagePrivate`outputID][
          TypeSystem`NestedGrid`PackagePrivate`newShape]], 
       TypeSystem`NestedGrid`PackagePrivate`replaceLimits[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`shape, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`rFunc, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]]] := 
       ReplaceAll[
        TypeSystem`NestedGrid`PackagePrivate`shape, {
         TypeSystem`PackageScope`HeaderShape[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`h, 
             Blank[]], 
            TypeSystem`PackageScope`Limited[
             Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`lim, 
              Blank[]], TypeSystem`NestedGrid`PackagePrivate`path]] :> 
          TypeSystem`PackageScope`HeaderShape[
           TypeSystem`NestedGrid`PackagePrivate`h, 
            TypeSystem`PackageScope`Limited[
            TypeSystem`NestedGrid`PackagePrivate`s, 
             TypeSystem`NestedGrid`PackagePrivate`rFunc[
             TypeSystem`NestedGrid`PackagePrivate`lim], 
             TypeSystem`NestedGrid`PackagePrivate`path]], 
          TypeSystem`PackageScope`Limited[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
             TypeSystem`PackageScope`MulticolumnShape[
              Blank[], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`c, 
               Blank[]], 
              Blank[]]], 
            Pattern[TypeSystem`NestedGrid`PackagePrivate`lim, 
             Blank[]], TypeSystem`NestedGrid`PackagePrivate`path] :> 
          TypeSystem`PackageScope`Limited[
           TypeSystem`NestedGrid`PackagePrivate`s, 
            
            TypeSystem`NestedGrid`PackagePrivate`rFunc[{
             TypeSystem`NestedGrid`PackagePrivate`c, 
              TypeSystem`NestedGrid`PackagePrivate`lim}], 
            TypeSystem`NestedGrid`PackagePrivate`path], 
          TypeSystem`PackageScope`Limited[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`s, 
             Blank[]], 
            Pattern[TypeSystem`NestedGrid`PackagePrivate`lim, 
             Blank[]], TypeSystem`NestedGrid`PackagePrivate`path] :> 
          TypeSystem`PackageScope`Limited[
           TypeSystem`NestedGrid`PackagePrivate`s, 
            TypeSystem`NestedGrid`PackagePrivate`rFunc[
            TypeSystem`NestedGrid`PackagePrivate`lim], 
            TypeSystem`NestedGrid`PackagePrivate`path]}], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`updateShape] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`updateShape[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`shape, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`newPageSize, 
          TypeSystem`NestedGrid`PackagePrivate`rowCount}, 
         TypeSystem`NestedGrid`PackagePrivate`newPageSize = 
          TypeSystem`PackageScope`RowCount[
           TypeSystem`NestedGrid`PackagePrivate`shape]; 
         TypeSystem`NestedGrid`PackagePrivate`rowCount = 
          Replace[TypeSystem`NestedGrid`PackagePrivate`newPageSize, Null -> 
            TypeSystem`NestedGrid`PackagePrivate`state["RowTarget"]]; 
         AssociateTo[
          TypeSystem`NestedGrid`PackagePrivate`state, {
           "Shape" -> TypeSystem`NestedGrid`PackagePrivate`shape, "RowCount" -> 
            TypeSystem`NestedGrid`PackagePrivate`rowCount, "RowTarget" -> 
            TypeSystem`NestedGrid`PackagePrivate`newPageSize}]; 
         TypeSystem`NestedGrid`PackagePrivate`pos = 1; 
         TypeSystem`NestedGrid`PackagePrivate`updateGrid[
          TypeSystem`NestedGrid`PackagePrivate`grid, 
           TypeSystem`NestedGrid`PackagePrivate`state, 
           TypeSystem`NestedGrid`PackagePrivate`path, 
           TypeSystem`NestedGrid`PackagePrivate`pos][
           TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
            TypeSystem`NestedGrid`PackagePrivate`state["Data"]], 
           TypeSystem`NestedGrid`PackagePrivate`outputID]; Null], 
       TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
         TypeSystem`PackageScope`CacheHandle[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`key, 
           Blank[]]]] := 
       Lookup[TypeSystem`PackageScope`$DataCache, 
         TypeSystem`NestedGrid`PackagePrivate`key, 
         TypeSystem`NestedGrid`PackagePrivate`$NotCached], 
       TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[{
          Pattern[TypeSystem`NestedGrid`PackagePrivate`lim, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`cols, 
           Blank[]]}, 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`dx, 
          Blank[]]] := 
       Max[TypeSystem`NestedGrid`PackagePrivate`lim + 
         TypeSystem`NestedGrid`PackagePrivate`dx 
          TypeSystem`NestedGrid`PackagePrivate`cols, 0], 
       TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`lim, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`dx, 
          Blank[]]] := 
       Max[TypeSystem`NestedGrid`PackagePrivate`lim + 
         TypeSystem`NestedGrid`PackagePrivate`dx, 0], 
       Attributes[
        TypeSystem`NestedGrid`PackagePrivate`makePaginatedItemMenu] = {
        HoldFirst}, TypeSystem`NestedGrid`PackagePrivate`makePaginatedItemMenu[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`stateVars, 
          Blank[List]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`curr}, 
         TypeSystem`NestedGrid`PackagePrivate`curr = 
          Part[TypeSystem`NestedGrid`PackagePrivate`stateVars, 1][
           "RowTarget"]; Map[
           Function[TypeSystem`NestedGrid`PackagePrivate`next, 
            MenuItem[
             Switch[
             TypeSystem`NestedGrid`PackagePrivate`next, 1, "Hide", 
              TypeSystem`NestedGrid`PackagePrivate`$MaxRows, "Show all", 
              Blank[], 
              StringJoin["Show up to ", 
               IntegerString[TypeSystem`NestedGrid`PackagePrivate`next], 
               " rows"]], 
             KernelExecute[
              TypeSystem`NestedGrid`PackagePrivate`adjustLimits[
              TypeSystem`NestedGrid`PackagePrivate`stateVars, 
               TypeSystem`NestedGrid`PackagePrivate`next, 
               TypeSystem`NestedGrid`PackagePrivate`path]], MenuEvaluator -> 
             Automatic]], 
           DeleteDuplicates[
            
            Ceiling[{
             1, TypeSystem`NestedGrid`PackagePrivate`curr/2, 
              TypeSystem`NestedGrid`PackagePrivate`curr 1.5, 
              TypeSystem`NestedGrid`PackagePrivate`curr 5, 
              TypeSystem`NestedGrid`PackagePrivate`$MaxRows}]]]], 
       TypeSystem`NestedGrid`PackagePrivate`$MaxRows = 100000000, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`fmtPathSetter] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`fmtPathSetter[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]][
         TypeSystem`NestedGrid`PackagePrivate`$PathSetter$[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`expr, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`newPath, 
           Blank[]]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`setterFunc, 
          TypeSystem`NestedGrid`PackagePrivate`argPath, 
          TypeSystem`NestedGrid`PackagePrivate`buttonFunc}, 
         If[$CloudEvaluation, 
           TypeSystem`NestedGrid`PackagePrivate`setterFunc = Tooltip; 
           TypeSystem`NestedGrid`PackagePrivate`argPath = 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`newPath, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements], 
           TypeSystem`NestedGrid`PackagePrivate`setterFunc = 
            TypeSystem`NestedGrid`PackagePrivate`pathAnnotate; 
           TypeSystem`NestedGrid`PackagePrivate`argPath = 
            TypeSystem`NestedGrid`PackagePrivate`newPath]; 
         TypeSystem`NestedGrid`PackagePrivate`buttonFunc = 
          If[TypeSystem`$UseLinkHighlighting, 
            TypeSystem`NestedGrid`PackagePrivate`linkButton, 
            TypeSystem`NestedGrid`PackagePrivate`simpleButton]; 
         TypeSystem`NestedGrid`PackagePrivate`setterFunc[
           TypeSystem`NestedGrid`PackagePrivate`buttonFunc[
           TypeSystem`NestedGrid`PackagePrivate`expr, 
            TypeSystem`NestedGrid`PackagePrivate`updateState[
            TypeSystem`NestedGrid`PackagePrivate`state, 
             TypeSystem`NestedGrid`PackagePrivate`path, 
             TypeSystem`NestedGrid`PackagePrivate`pos, 
             TypeSystem`NestedGrid`PackagePrivate`grid, 
             TypeSystem`NestedGrid`PackagePrivate`outputID][
            TypeSystem`NestedGrid`PackagePrivate`newPath]], 
           TypeSystem`NestedGrid`PackagePrivate`argPath]], 
       TypeSystem`NestedGrid`PackagePrivate`pathAnnotate[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`n, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]]] := Pane[
         TypeSystem`NestedGrid`PackagePrivate`pathAnnotate[
         TypeSystem`NestedGrid`PackagePrivate`e, 
          TypeSystem`NestedGrid`PackagePrivate`path], 
         ImageSize -> {{TypeSystem`NestedGrid`PackagePrivate`n, Full}, 
           Automatic}, Alignment -> {Left, Baseline}], 
       TypeSystem`NestedGrid`PackagePrivate`pathAnnotate[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]]] := Annotation[TypeSystem`NestedGrid`PackagePrivate`e, 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
         TypeSystem`NestedGrid`PackagePrivate`$outputID][
          Apply[
          GeneralUtilities`Slice, TypeSystem`NestedGrid`PackagePrivate`path]],
          "Mouse"], TypeSystem`$UseLinkHighlighting = True, 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`linkButton] = {
        HoldRest}, TypeSystem`NestedGrid`PackagePrivate`linkButton[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`expr, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`body, 
          Blank[]]] := TypeSystem`NestedGrid`PackagePrivate`simpleButton[
         TypeSystem`NestedGrid`PackagePrivate`linkButtonIcon[
         TypeSystem`NestedGrid`PackagePrivate`expr], 
         TypeSystem`NestedGrid`PackagePrivate`body], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`simpleButton] = {
        HoldRest}, TypeSystem`NestedGrid`PackagePrivate`simpleButton[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`expr, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`body, 
          Blank[]]] := EventHandler[
         MouseAppearance[
         TypeSystem`NestedGrid`PackagePrivate`expr, "LinkHand"], {
          "MouseClicked", 1} :> TypeSystem`NestedGrid`PackagePrivate`body], 
       TypeSystem`NestedGrid`PackagePrivate`linkButtonIcon[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`expr, 
          Blank[]]] := Mouseover[TypeSystem`NestedGrid`PackagePrivate`expr, 
         Style[
          ReplaceAll[
          TypeSystem`NestedGrid`PackagePrivate`expr, (FontColor -> 
            Blank[]) :> (FontColor -> RGBColor["#4689ca"])], FontColor -> 
          RGBColor["#4689ca"]]], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`updateState] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`updateState[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`outputID, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`newPath, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`newPath$ = 
          TypeSystem`NestedGrid`PackagePrivate`newPath, 
          TypeSystem`NestedGrid`PackagePrivate`newType, 
          TypeSystem`NestedGrid`PackagePrivate`slice, 
          TypeSystem`NestedGrid`PackagePrivate`oldData, 
          TypeSystem`NestedGrid`PackagePrivate`newData, 
          TypeSystem`NestedGrid`PackagePrivate`rows, 
          TypeSystem`NestedGrid`PackagePrivate`newShape, 
          TypeSystem`NestedGrid`PackagePrivate`rowCount}, 
         While[Last[TypeSystem`NestedGrid`PackagePrivate`newPath$, Null] === 
           All, TypeSystem`NestedGrid`PackagePrivate`newPath$ = 
           Most[TypeSystem`NestedGrid`PackagePrivate`newPath$]]; 
         TypeSystem`NestedGrid`PackagePrivate`newType = TypeSystem`TypePart[
            TypeSystem`NestedGrid`PackagePrivate`state["InitialType"], 
            Apply[Sequence, TypeSystem`NestedGrid`PackagePrivate`newPath$]]; 
         TypeSystem`NestedGrid`PackagePrivate`slice = 
          Apply[GeneralUtilities`Slice, 
            TypeSystem`NestedGrid`PackagePrivate`newPath$]; 
         If[TypeSystem`NestedGrid`PackagePrivate`state["Data"] =!= 
           TypeSystem`NestedGrid`PackagePrivate`state["InitialData"], 
           TypeSystem`NestedGrid`PackagePrivate`DeleteCacheValue[
             TypeSystem`NestedGrid`PackagePrivate`state["Data"]]; Null]; 
         TypeSystem`NestedGrid`PackagePrivate`oldData = 
          TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
            TypeSystem`NestedGrid`PackagePrivate`state["InitialData"]]; 
         If[TypeSystem`NestedGrid`PackagePrivate`oldData === 
           TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
           Return[]]; 
         TypeSystem`NestedGrid`PackagePrivate`newData = 
          TypeSystem`NestedGrid`PackagePrivate`slice[
           TypeSystem`NestedGrid`PackagePrivate`oldData]; 
         TypeSystem`NestedGrid`PackagePrivate`rows = 
          TypeSystem`NestedGrid`PackagePrivate`state["RowTarget"]; If[
           MatchQ[TypeSystem`NestedGrid`PackagePrivate`newType, 
            Alternatives[TypeSystem`UnknownType, TypeSystem`AnyType]], 
           TypeSystem`NestedGrid`PackagePrivate`newType = 
           TypeSystem`DeduceType[
            TypeSystem`NestedGrid`PackagePrivate`newData]]; 
         TypeSystem`NestedGrid`PackagePrivate`newShape = 
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
           TypeSystem`NestedGrid`PackagePrivate`newPath$, 
            TypeSystem`PackageScope`chooseShape[
            TypeSystem`NestedGrid`PackagePrivate`oldData, 
             TypeSystem`NestedGrid`PackagePrivate`newType, 
             TypeSystem`NestedGrid`PackagePrivate`rows]]; 
         TypeSystem`NestedGrid`PackagePrivate`rowCount = Replace[
            TypeSystem`NestedGrid`PackagePrivate`getLimit[
            TypeSystem`NestedGrid`PackagePrivate`newShape], Null -> 
            TypeSystem`NestedGrid`PackagePrivate`rows]; 
         AssociateTo[
          TypeSystem`NestedGrid`PackagePrivate`state, {
           "Shape" -> TypeSystem`NestedGrid`PackagePrivate`newShape, "Type" -> 
            TypeSystem`NestedGrid`PackagePrivate`newType, "RowCount" -> 
            TypeSystem`NestedGrid`PackagePrivate`rowCount, "Data" -> 
            If[TypeSystem`NestedGrid`PackagePrivate`slice === Identity, 
              TypeSystem`NestedGrid`PackagePrivate`state["InitialData"], 
              TypeSystem`NestedGrid`PackagePrivate`InsertCacheValue[
              TypeSystem`NestedGrid`PackagePrivate`newData]], "Length" -> 
            Length[TypeSystem`NestedGrid`PackagePrivate`newData]}]; 
         TypeSystem`NestedGrid`PackagePrivate`pos = 1; 
         TypeSystem`NestedGrid`PackagePrivate`path = 
          TypeSystem`NestedGrid`PackagePrivate`newPath$; 
         TypeSystem`NestedGrid`PackagePrivate`updateGrid[
          TypeSystem`NestedGrid`PackagePrivate`grid, 
           TypeSystem`NestedGrid`PackagePrivate`state, 
           TypeSystem`NestedGrid`PackagePrivate`path, 
           TypeSystem`NestedGrid`PackagePrivate`pos][
          TypeSystem`NestedGrid`PackagePrivate`newData, 
           TypeSystem`NestedGrid`PackagePrivate`outputID]; Null], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`newPath$] = {
        Temporary}, TypeSystem`NestedGrid`PackagePrivate`DeleteCacheValue[
         TypeSystem`PackageScope`CacheHandle[
          Pattern[TypeSystem`NestedGrid`PackagePrivate`key, 
           Blank[]]]] := Unset[
         TypeSystem`PackageScope`$DataCache[
         TypeSystem`NestedGrid`PackagePrivate`key]], 
       Attributes[
        TypeSystem`NestedGrid`PackagePrivate`makeDynamicNGContextMenu] = {
        HoldFirst}, 
       TypeSystem`NestedGrid`PackagePrivate`makeDynamicNGContextMenu[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]]] := {
         MenuItem["Copy position to clipboard", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
           TypeSystem`NestedGrid`PackagePrivate`copyClip]], MenuEvaluator -> 
          Automatic], 
         MenuItem["Copy data to clipboard", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
           TypeSystem`NestedGrid`PackagePrivate`state, 
            TypeSystem`NestedGrid`PackagePrivate`copyClip]], MenuEvaluator -> 
          Automatic], Delimiter, 
         MenuItem["Paste position in new cell", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
           TypeSystem`NestedGrid`PackagePrivate`cellPaste]], MenuEvaluator -> 
          Automatic], 
         MenuItem["Paste data in new cell", 
          KernelExecute[
           TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
           TypeSystem`NestedGrid`PackagePrivate`state, 
            TypeSystem`NestedGrid`PackagePrivate`cellPaste]], MenuEvaluator -> 
          Automatic]}, TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`slice, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`f, 
          Blank[]]] := 
       Replace[TypeSystem`NestedGrid`PackagePrivate`slice, {
         Alternatives[None, Identity] :> Null, GeneralUtilities`Slice[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`a, 
             BlankNullSequence[]]] :> 
          TypeSystem`NestedGrid`PackagePrivate`f[{
            TypeSystem`NestedGrid`PackagePrivate`a}], Blank[] :> 
          GeneralUtilities`UnmatchedCase[]}], 
       TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`f, 
          Blank[]]] := 
       Replace[TypeSystem`NestedGrid`PackagePrivate`$lastPath, {
         Alternatives[None, Identity] :> Null, GeneralUtilities`Slice[
            Pattern[TypeSystem`NestedGrid`PackagePrivate`a, 
             BlankNullSequence[]]] :> 
          TypeSystem`NestedGrid`PackagePrivate`f[{
            TypeSystem`NestedGrid`PackagePrivate`a}], Blank[] :> 
          GeneralUtilities`UnmatchedCase[]}], 
       TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
       GeneralUtilities`Slice[19, 
         Key["Type"]], TypeSystem`NestedGrid`PackagePrivate`copyClip[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := CopyToClipboard[
         ExpressionCell[TypeSystem`NestedGrid`PackagePrivate`e, "Input"]], 
       TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`f, 
          Blank[]]] := 
       Block[{TypeSystem`NestedGrid`PackagePrivate`data}, 
         TypeSystem`NestedGrid`PackagePrivate`data = 
          TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
            TypeSystem`NestedGrid`PackagePrivate`state["InitialData"]]; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`data], 
           Return[$Failed]]; 
         Replace[TypeSystem`NestedGrid`PackagePrivate`$lastPath, {
           Alternatives[None, Identity] :> Null, 
            Pattern[TypeSystem`NestedGrid`PackagePrivate`slice, 
              Blank[GeneralUtilities`Slice]] :> 
            TypeSystem`NestedGrid`PackagePrivate`f[
              TypeSystem`NestedGrid`PackagePrivate`slice[
              TypeSystem`NestedGrid`PackagePrivate`data]], Blank[] :> 
            GeneralUtilities`UnmatchedCase[]}]; Null], 
       TypeSystem`NestedGrid`PackagePrivate`cellPaste[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`e, 
          Blank[]]] := CellPrint[
         ExpressionCell[TypeSystem`NestedGrid`PackagePrivate`e, "Input"]], 
       TypeSystem`NestedGrid`PackagePrivate`formatState[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]]] := Grid[
         Apply[{#, 
           Pane[#2, 400]}& , 
          Join[
           Normal[TypeSystem`NestedGrid`PackagePrivate`state], {
           "Pos" -> TypeSystem`NestedGrid`PackagePrivate`pos, "Path" -> 
            TypeSystem`NestedGrid`PackagePrivate`path}], {1}], Dividers -> 
         All, FrameStyle -> Gray, Alignment -> Left, 
         BaseStyle -> {FontSize -> 8}, RowMinHeight -> 2], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`makeFramedBar] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
          Blank[]]] := 
       Framed[TypeSystem`NestedGrid`PackagePrivate`bar, FrameStyle -> None, 
         ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
         ImageSize -> {Automatic, 14}], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`alignBar] = {HoldAll}, 
       TypeSystem`NestedGrid`PackagePrivate`alignBar[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]]][
         Pattern[TypeSystem`NestedGrid`PackagePrivate`rowElems, 
          BlankSequence[]]] := If[
         And[
         TypeSystem`NestedGrid`PackagePrivate`state["Length"] > 
          TypeSystem`NestedGrid`PackagePrivate`state["RowCount"], 
          Not[
           MatchQ[
            TypeSystem`NestedGrid`PackagePrivate`state["Shape"], 
            Alternatives[
             Blank[TypeSystem`PackageScope`AtomShape], 
             TypeSystem`PackageScope`UnknownShape]]]], 
         Row[{
           Spacer[16.75], TypeSystem`NestedGrid`PackagePrivate`rowElems}], 
         TypeSystem`NestedGrid`PackagePrivate`rowElems], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`displayScrollBar] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`grid, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]], 
         Pattern[TypeSystem`NestedGrid`PackagePrivate`pos, 
          Blank[]]] := If[
         And[
         TypeSystem`NestedGrid`PackagePrivate`state["Length"] > 
          TypeSystem`NestedGrid`PackagePrivate`state["RowCount"], 
          Not[
           MatchQ[
            TypeSystem`NestedGrid`PackagePrivate`state["Shape"], 
            Alternatives[
             Blank[TypeSystem`PackageScope`AtomShape], 
             TypeSystem`PackageScope`UnknownShape]]]], 
         Grid[{{
            TypeSystem`PackageScope`VerticalScrollbar[
             Dynamic[TypeSystem`NestedGrid`PackagePrivate`pos], 
             TypeSystem`NestedGrid`PackagePrivate`state["Length"], 
             TypeSystem`NestedGrid`PackagePrivate`state["RowCount"], 
             TypeSystem`NestedGrid`PackagePrivate`state["RowTarget"]], 
            TypeSystem`NestedGrid`PackagePrivate`grid}}, Alignment -> Top], 
         TypeSystem`NestedGrid`PackagePrivate`grid], 
       TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`expr, 
          Blank[]]] := 
       If[$CloudEvaluation, Nothing, 
         TypeSystem`NestedGrid`PackagePrivate`expr], 
       Attributes[TypeSystem`NestedGrid`PackagePrivate`deleteState] = {
        HoldAll}, TypeSystem`NestedGrid`PackagePrivate`deleteState[
         Pattern[TypeSystem`NestedGrid`PackagePrivate`state, 
          Blank[]]] := (TypeSystem`NestedGrid`PackagePrivate`DeleteCacheValue[
          TypeSystem`NestedGrid`PackagePrivate`state["InitialData"]]; 
        TypeSystem`NestedGrid`PackagePrivate`DeleteCacheValue[
          TypeSystem`NestedGrid`PackagePrivate`state["Data"]]; Null), 
       Dataset`$DatasetSummaryBarEnabled = True, Dataset`DataFormBoxes[
         HoldPattern[
          Dataset[
           Pattern[Dataset`FormattingDispatch`PackagePrivate`data, 
            Blank[]], 
           Pattern[Dataset`FormattingDispatch`PackagePrivate`type, 
            Blank[]], 
           Blank[]]], 
         Pattern[Dataset`FormattingDispatch`PackagePrivate`opts, 
          OptionsPattern[]]] := Dataset`DataFormBoxes[
         Dataset`ExtractRawData[
         Dataset`FormattingDispatch`PackagePrivate`data], 
         Dataset`FormattingDispatch`PackagePrivate`type, 
         Dataset`FormattingDispatch`PackagePrivate`opts], 
       Dataset`DataFormBoxes[
         Pattern[Dataset`FormattingDispatch`PackagePrivate`expr, 
          Blank[]], 
         PatternTest[
          Pattern[Dataset`FormattingDispatch`PackagePrivate`type, 
           Blank[]], TypeSystem`TypeQ], 
         OptionsPattern[]] := Block[{Dataset`$ElisionThreshold = Replace[
            OptionValue["Limit"], Except[
              Blank[Integer]] -> 64], 
          Dataset`FormattingDispatch`PackagePrivate`result, 
          Dataset`$EntityQueue = None, 
          Dataset`FormattingDispatch`PackagePrivate`entities}, 
         Dataset`FormattingDispatch`PackagePrivate`result = 
          GeneralUtilities`Match[
            OptionValue["Size"], Large :> Dataset`PackageScope`form3, Medium :> 
            Dataset`PackageScope`form2, Small :> Dataset`PackageScope`form1, 
            Dataset`PackageScope`form1][
           Dataset`FormattingDispatch`PackagePrivate`type, 
            Dataset`FormattingDispatch`PackagePrivate`expr]; 
         If[Dataset`$EntityQueue =!= None, 
           Dataset`FormattingDispatch`PackagePrivate`entities = 
            Internal`BagPart[Dataset`$EntityQueue, All]; 
           Internal`BulkFetchEntityNames[
            Dataset`FormattingDispatch`PackagePrivate`entities]; 
           Dataset`FormattingDispatch`PackagePrivate`result = 
            ReplaceAll[
             Dataset`FormattingDispatch`PackagePrivate`result, 
              Dataset`QueuedEntityBox[
                Pattern[Dataset`FormattingDispatch`PackagePrivate`e, 
                 Blank[]]] :> 
              Dataset`EntityBox[Dataset`FormattingDispatch`PackagePrivate`e]]; 
           Null]; Dataset`FormattingDispatch`PackagePrivate`result], 
       Options[Dataset`DataFormBoxes] = {
        "Limit" :> Dataset`$ElisionThreshold, "Size" -> Large}, 
       Dataset`ExtractRawData[
         Pattern[Dataset`Constructors`PackagePrivate`data, 
          Blank[]]] := Dataset`Constructors`PackagePrivate`data, 
       TagSet[Dataset`ExtractRawData, 
        MessageName[Dataset`ExtractRawData, "dataextr"], 
        "Data extraction failed."], Dataset`$ElisionThreshold = 64, 
       Dataset`$EntityQueue = "Disabled", 
       Attributes[GeneralUtilities`Match] = {HoldRest}, 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`Match]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`Match]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`Match]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], GeneralUtilities`Match[
         Pattern[GeneralUtilities`Control`PackagePrivate`args, 
          BlankSequence[]]] := First[
         GeneralUtilities`Control`PackagePrivate`mMatch0[
         GeneralUtilities`Control`PackagePrivate`args]], 
       TagSet[GeneralUtilities`Match, 
        MessageName[GeneralUtilities`Match, "usage"], 
        "\!\(\*RowBox[{\"Match\", \"[\", RowBox[{StyleBox[\"value\", \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"patt\", StyleBox[\"1\", \"TR\"]], \"TI\"] , \
\"\[RuleDelayed]\",  StyleBox[SubscriptBox[\"val\", StyleBox[\"1\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"patt\", StyleBox[\"2\", \"TR\"]], \
\"TI\"] , \"\[RuleDelayed]\",  StyleBox[SubscriptBox[\"val\", StyleBox[\"2\", \
\"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"], \",\",  \
StyleBox[\"default\", \"TI\"]}], \"]\"}]\) matches the \!\(\*StyleBox[\"value\
\", \"TI\"]\) to the \!\(\*StyleBox[SubscriptBox[\"patt\", StyleBox[\"i\", \
\"TI\"]], \"TI\"]\) in turn and gives the corresponding \
\!\(\*StyleBox[SubscriptBox[\"val\", StyleBox[\"i\", \"TI\"]], \"TI\"]\), or \
evaluates \!\(\*StyleBox[\"default\", \"TI\"]\) if none matched.\n\
\!\(\*RowBox[{\"Match\", \"[\", RowBox[{StyleBox[\"value\", \"TI\"], \",\",  \
RowBox[{StyleBox[\"patts\", \"TI\"], StyleBox[\"\[Ellipsis]\", \"TR\"]}], \",\
\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) panics if none of the \
\!\(\*StyleBox[\"patts\", \"TI\"]\) matched.\n\!\(\*RowBox[{\"Match\", \"[\", \
RowBox[{StyleBox[\"patts\", \"TI\"]}], \"]\"}]\) is the operator form of \
Match."], Attributes[GeneralUtilities`MacroEvaluate] = {HoldAllComplete}, 
       GeneralUtilities`MacroEvaluate[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := Catch[
         TimeConstrained[
          Replace[
           GeneralUtilities`MacroExpand[
           GeneralUtilities`Control`PackagePrivate`expr], {
           GeneralUtilities`Quoted[
              Pattern[GeneralUtilities`Control`PackagePrivate`q, 
               Blank[]]] :> GeneralUtilities`Control`PackagePrivate`q, 
            GeneralUtilities`Quoted[
              Pattern[GeneralUtilities`Control`PackagePrivate`q, 
               BlankNullSequence[]]] :> 
            GeneralUtilities`Control`PackagePrivate`q}], 10., Message[
            MessageName[GeneralUtilities`MacroEvaluate, "time"], 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`expr]]; $Failed], 
         GeneralUtilities`MacroEvaluate], 
       TagSet[GeneralUtilities`MacroEvaluate, 
        MessageName[GeneralUtilities`MacroEvaluate, "time"], 
        "Timeout while evaluating ``."], 
       TagSet[GeneralUtilities`MacroEvaluate, 
        MessageName[GeneralUtilities`MacroEvaluate, "usage"], 
        "\!\(\*RowBox[{\"MacroEvaluate\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) evaluates all macros present in \!\(\*StyleBox[\"expr\", \
\"TI\"]\) and then evaluates the result."], 
       Attributes[GeneralUtilities`MacroExpand] = {HoldAllComplete}, 
       GeneralUtilities`MacroExpand[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := If[
         TrueQ[GeneralUtilities`$MacroDebugMode], 
         Block[{
          GeneralUtilities`Control`PackagePrivate`$MacroInvocation$ = 
           GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`expr]}, 
          GeneralUtilities`Control`PackagePrivate`iMacroExpand[
          GeneralUtilities`Control`PackagePrivate`expr]], 
         Block[{
          GeneralUtilities`Control`PackagePrivate`$MacroInvocation$ = 
           GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`expr], 
           GeneralUtilities`EchoRaw = Identity, GeneralUtilities`EchoHold = 
           Identity, Echo = Identity}, 
          GeneralUtilities`Control`PackagePrivate`iMacroExpand[
          GeneralUtilities`Control`PackagePrivate`expr]]], 
       TagSet[GeneralUtilities`MacroExpand, 
        MessageName[GeneralUtilities`MacroExpand, "nested"], 
        "Nested SetDelayeds encountered during expansion of definition of ``. \
Use the Memoized macro instead."], 
       TagSet[GeneralUtilities`MacroExpand, 
        MessageName[GeneralUtilities`MacroExpand, "usage"], 
        "\!\(\*RowBox[{\"MacroExpand\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) evaluates all macros present in \!\(\*StyleBox[\"expr\", \
\"TI\"]\) and returns the result in a Quoted expression.\nAnywhere in a \
macro, ' can be used to inject EchoRaw calls, '' to inject EchoHold calls, \
and ''' to wrap a function in Tap."], 
       Attributes[GeneralUtilities`Control`PackagePrivate`iMacroExpand] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`iMacroExpand[
         TagSetDelayed[
          Pattern[GeneralUtilities`Control`PackagePrivate`tag, 
           Blank[]], 
          Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
           Blank[]], 
          Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]]] := Replace[
         GeneralUtilities`Control`PackagePrivate`iMacroExpand[
         GeneralUtilities`Control`PackagePrivate`lhs := 
          GeneralUtilities`Control`PackagePrivate`rhs], {
         GeneralUtilities`Quoted[
            Verbatim[SetDelayed][
             Pattern[GeneralUtilities`Control`PackagePrivate`lhs2, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`rhs2, 
              Blank[]]]] :> GeneralUtilities`ToQuoted[TagSetDelayed, 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`tag], 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`lhs2], 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`rhs2]], Blank[] :> 
          GeneralUtilities`Panic[]}], 
       GeneralUtilities`Control`PackagePrivate`iMacroExpand[
        Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
           Blank[]] := Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`$insd = If[
            Not[GeneralUtilities`Control`PackagePrivate`$insd], True, Message[
              MessageName[GeneralUtilities`MacroExpand, "nested"], 
              GeneralUtilities`$LHSHead]; Return[$Failed, Block]], 
          GeneralUtilities`$LHSHead = Apply[GeneralUtilities`Quoted, 
            GeneralUtilities`PatternHead[
            GeneralUtilities`Control`PackagePrivate`lhs]], 
          GeneralUtilities`$LHSPatternSymbols = Apply[GeneralUtilities`Quoted, 
            GeneralUtilities`PatternSymbols[
            GeneralUtilities`Control`PackagePrivate`lhs], {1}], 
          GeneralUtilities`$RHS = 
          GeneralUtilities`Quoted[
           GeneralUtilities`Control`PackagePrivate`rhs], 
          GeneralUtilities`Control`PackagePrivate`expanded}, 
         GeneralUtilities`Control`PackagePrivate`expanded = 
          GeneralUtilities`Control`PackagePrivate`iMacroExpand[
           GeneralUtilities`Control`PackagePrivate`rhs]; If[
           FreeQ[
           GeneralUtilities`Control`PackagePrivate`expanded, 
            GeneralUtilities`$LHS], 
           GeneralUtilities`Control`PackagePrivate`quotedSetDelayed[
           GeneralUtilities`Control`PackagePrivate`lhs, 
            GeneralUtilities`Control`PackagePrivate`expanded], 
           GeneralUtilities`Control`PackagePrivate`quotedSetDelayedWithLHS[
           GeneralUtilities`Control`PackagePrivate`lhs, 
            GeneralUtilities`Control`PackagePrivate`expanded]]], 
       GeneralUtilities`Control`PackagePrivate`iMacroExpand[
        Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
           Blank[]] = Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]] := 
       Block[{GeneralUtilities`$LHSHead = Apply[GeneralUtilities`Quoted, 
            GeneralUtilities`PatternHead[
            GeneralUtilities`Control`PackagePrivate`lhs]], 
          GeneralUtilities`$LHSPatternSymbols = {}, GeneralUtilities`$RHS = 
          GeneralUtilities`Quoted[
           GeneralUtilities`Control`PackagePrivate`rhs], 
          GeneralUtilities`Control`PackagePrivate`value}, 
         GeneralUtilities`Control`PackagePrivate`quotedSet[
         GeneralUtilities`Control`PackagePrivate`lhs, 
          GeneralUtilities`Control`PackagePrivate`iMacroExpand[
          GeneralUtilities`Control`PackagePrivate`rhs]]], 
       GeneralUtilities`Control`PackagePrivate`iMacroExpand[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`res, 
          GeneralUtilities`Control`PackagePrivate`$onExitQueue = 
          Association[]}, 
         GeneralUtilities`Control`PackagePrivate`res = ReplaceAll[
            HoldComplete[GeneralUtilities`Control`PackagePrivate`expr], 
            GeneralUtilities`Quoted -> 
            GeneralUtilities`Control`PackagePrivate`$Quoted$]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          ReplaceAll[
           GeneralUtilities`Control`PackagePrivate`res, 
            GeneralUtilities`Control`PackagePrivate`$MacroAliases]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          ReplaceRepeated[
           GeneralUtilities`Control`PackagePrivate`res, 
            GeneralUtilities`Control`PackagePrivate`$DesugaringRules]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; If[
           Not[
            FreeQ[GeneralUtilities`Control`PackagePrivate`res, 
             Blank[GeneralUtilities`Each]]], 
           GeneralUtilities`Control`PackagePrivate`res = 
            GeneralUtilities`Control`PackagePrivate`InsertEachVariables[
             GeneralUtilities`Control`PackagePrivate`res]; Null]; If[
           Not[
            FreeQ[GeneralUtilities`Control`PackagePrivate`res, 
             Blank[Condition]]], 
           GeneralUtilities`Control`PackagePrivate`res = 
            ReplaceRepeated[
             GeneralUtilities`Control`PackagePrivate`res, {
              HoldPattern[Pattern[GeneralUtilities`Control`PackagePrivate`L, 
                   BlankNullSequence[]]; Verbatim[Condition][
                   Pattern[GeneralUtilities`Control`PackagePrivate`e, 
                    Blank[]], 
                   Pattern[GeneralUtilities`Control`PackagePrivate`t, 
                    Blank[]]]; 
                 Pattern[GeneralUtilities`Control`PackagePrivate`R, 
                   BlankSequence[]]] :> (
                GeneralUtilities`Control`PackagePrivate`L; 
                If[GeneralUtilities`Control`PackagePrivate`t, 
                  GeneralUtilities`Control`PackagePrivate`e]; 
                GeneralUtilities`Control`PackagePrivate`R), 
               HoldPattern[Pattern[GeneralUtilities`Control`PackagePrivate`L, 
                   BlankNullSequence[]]; 
                 Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
                    Blank[]] = Verbatim[Condition][
                    Pattern[GeneralUtilities`Control`PackagePrivate`e, 
                    Blank[]], 
                    Pattern[GeneralUtilities`Control`PackagePrivate`t, 
                    Blank[]]]; 
                 Pattern[GeneralUtilities`Control`PackagePrivate`R, 
                   BlankSequence[]]] :> (
                GeneralUtilities`Control`PackagePrivate`L; 
                If[GeneralUtilities`Control`PackagePrivate`t, 
                  GeneralUtilities`Control`PackagePrivate`sym = 
                  GeneralUtilities`Control`PackagePrivate`e]; 
                GeneralUtilities`Control`PackagePrivate`R)}]; Null]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          GeneralUtilities`Control`PackagePrivate`MacroReplaceRepeated[
           GeneralUtilities`Control`PackagePrivate`res]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; If[
           Not[
            FreeQ[GeneralUtilities`Control`PackagePrivate`res, 
             Blank[CompoundExpression]]], If[
             Not[
              FreeQ[
              GeneralUtilities`Control`PackagePrivate`res, 
               GeneralUtilities`Control`PackagePrivate`$\
NullOptimizationTargets]], 
             GeneralUtilities`Control`PackagePrivate`res = 
              Fold[ReplaceRepeated, 
                GeneralUtilities`Control`PackagePrivate`res, 
                GeneralUtilities`Control`PackagePrivate`$\
NullOptimizationPipeline]; 
             GeneralUtilities`Control`PackagePrivate`$monitor[
              GeneralUtilities`Control`PackagePrivate`res]; Null, 
             GeneralUtilities`Control`PackagePrivate`res = 
             ReplaceRepeated[
              GeneralUtilities`Control`PackagePrivate`res, 
               HoldPattern[Pattern[GeneralUtilities`Control`PackagePrivate`L, 
                   BlankNullSequence[]]; 
                 Pattern[GeneralUtilities`Control`PackagePrivate`M, 
                   BlankSequence[]]; 
                 Pattern[GeneralUtilities`Control`PackagePrivate`R, 
                   BlankNullSequence[]]] :> (
                GeneralUtilities`Control`PackagePrivate`L; 
                GeneralUtilities`Control`PackagePrivate`M; 
                GeneralUtilities`Control`PackagePrivate`R)]]; 
           GeneralUtilities`Control`PackagePrivate`res = 
            ReplaceRepeated[
             GeneralUtilities`Control`PackagePrivate`res, 
              HoldPattern[Pattern[GeneralUtilities`Control`PackagePrivate`L, 
                  BlankNullSequence[]]; Null; 
                Pattern[GeneralUtilities`Control`PackagePrivate`R, 
                  BlankSequence[]]] :> (
               GeneralUtilities`Control`PackagePrivate`L; 
               GeneralUtilities`Control`PackagePrivate`R)]; Null]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          ReplaceRepeated[
           GeneralUtilities`Control`PackagePrivate`res, 
            GeneralUtilities`Control`PackagePrivate`$InliningRules]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          ReplaceRepeated[
           GeneralUtilities`Control`PackagePrivate`res, 
            GeneralUtilities`Control`PackagePrivate`$FinalRules]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; If[
           Not[
            FreeQ[
            GeneralUtilities`Control`PackagePrivate`res, 
             GeneralUtilities`Control`PackagePrivate`$Return$]], 
           GeneralUtilities`Control`PackagePrivate`res = 
           GeneralUtilities`Control`PackagePrivate`subReturn[
            GeneralUtilities`Control`PackagePrivate`res]]; 
         GeneralUtilities`Control`PackagePrivate`$monitor[
          GeneralUtilities`Control`PackagePrivate`res]; 
         GeneralUtilities`Control`PackagePrivate`$lastMacroExpr = None; 
         GeneralUtilities`Control`PackagePrivate`$lastMacroHead = None; 
         Apply[GeneralUtilities`Quoted, 
           GeneralUtilities`Control`PackagePrivate`res]], 
       GeneralUtilities`ToQuoted[
         Pattern[GeneralUtilities`Control`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`args, 
          BlankNullSequence[]]] := Replace[
         GeneralUtilities`Quoted[
          GeneralUtilities`Control`PackagePrivate`head[
          GeneralUtilities`Control`PackagePrivate`args]], 
         GeneralUtilities`Quoted[
           Pattern[GeneralUtilities`Control`PackagePrivate`q, 
            Blank[]]] :> GeneralUtilities`Control`PackagePrivate`q, {
         1, Infinity}], 
       TagSet[GeneralUtilities`ToQuoted, 
        MessageName[GeneralUtilities`ToQuoted, "usage"], 
        "\!\(\*RowBox[{\"ToQuoted\", \"[\", RowBox[{StyleBox[\"head\", \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"arg\", StyleBox[\"1\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"arg\", StyleBox[\"2\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) transforms to \
Quoted[\!\(\*StyleBox[\"head\", \
\"TI\"]\)[\!\(\*StyleBox[SubscriptBox[\"arg\", StyleBox[\"1\", \"TR\"]], \"TI\
\"]\), \!\(\*StyleBox[SubscriptBox[\"arg\", StyleBox[\"2\", \"TR\"]], \"TI\"]\
\), \[Ellipsis]]]."], GeneralUtilities`Control`PackagePrivate`$insd = False, 
       Attributes[GeneralUtilities`PatternHead] = {HoldAllComplete}, 
       GeneralUtilities`PatternHead[
         Verbatim[HoldPattern][
          Pattern[GeneralUtilities`Control`PackagePrivate`inner, 
           Blank[]]]] := 
       GeneralUtilities`PatternHead[
        GeneralUtilities`Control`PackagePrivate`inner], 
       GeneralUtilities`PatternHead[
         Verbatim[Pattern][
          Blank[], 
          Pattern[GeneralUtilities`Control`PackagePrivate`inner, 
           Blank[]]]] := 
       GeneralUtilities`PatternHead[
        GeneralUtilities`Control`PackagePrivate`inner], 
       GeneralUtilities`PatternHead[
         Verbatim[PatternTest][
          Pattern[GeneralUtilities`Control`PackagePrivate`inner, 
           Blank[]], 
          Blank[]]] := 
       GeneralUtilities`PatternHead[
        GeneralUtilities`Control`PackagePrivate`inner], 
       GeneralUtilities`PatternHead[
         Verbatim[Condition][
          Pattern[GeneralUtilities`Control`PackagePrivate`inner, 
           Blank[]], 
          Blank[]]] := 
       GeneralUtilities`PatternHead[
        GeneralUtilities`Control`PackagePrivate`inner], 
       GeneralUtilities`PatternHead[
         Verbatim[Blank][
          Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
           Blank[Symbol]]]] := 
       Hold[GeneralUtilities`Control`PackagePrivate`sym], 
       GeneralUtilities`PatternHead[
         Pattern[GeneralUtilities`Control`PackagePrivate`head, 
          Blank[]][
          BlankNullSequence[]]] := 
       GeneralUtilities`PatternHead[
        GeneralUtilities`Control`PackagePrivate`head], 
       GeneralUtilities`PatternHead[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[Symbol]]] := 
       Hold[GeneralUtilities`Control`PackagePrivate`sym], 
       GeneralUtilities`PatternHead[
         Pattern[GeneralUtilities`Control`PackagePrivate`x, 
          BlankNullSequence[]]] := $Failed, 
       TagSet[GeneralUtilities`PatternHead, 
        MessageName[GeneralUtilities`PatternHead, "usage"], 
        "\!\(\*RowBox[{\"PatternHead\", \"[\", RowBox[{StyleBox[\"patt\", \
\"TI\"]}], \"]\"}]\) gives the symbol to which a definition's left hand side \
will be bound, if any."], GeneralUtilities`$LHSPatternSymbols = {}, 
       Attributes[GeneralUtilities`PatternSymbols] = {HoldAllComplete}, 
       GeneralUtilities`PatternSymbols[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := DeleteDuplicates[
         Cases[
          Unevaluated[GeneralUtilities`Control`PackagePrivate`expr], 
          Verbatim[Pattern][
            PatternTest[
             Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
              Blank[Symbol]], Developer`HoldSymbolQ], 
            Blank[]] :> Hold[GeneralUtilities`Control`PackagePrivate`sym], {
          0, Infinity}, Heads -> True]], 
       Attributes[
        GeneralUtilities`Control`PackagePrivate`quotedSetDelayed] = {
        HoldFirst}, GeneralUtilities`Control`PackagePrivate`quotedSetDelayed[
         Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
          Blank[]], 
         GeneralUtilities`Quoted[
          Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]]] := 
       GeneralUtilities`Quoted[
        GeneralUtilities`Control`PackagePrivate`lhs := 
         GeneralUtilities`Control`PackagePrivate`rhs], 
       GeneralUtilities`Control`PackagePrivate`quotedSetDelayed[
         Blank[], 
         Blank[]] := $Failed, 
       Attributes[
        GeneralUtilities`Control`PackagePrivate`quotedSetDelayedWithLHS] = {
        HoldFirst}, 
       GeneralUtilities`Control`PackagePrivate`quotedSetDelayedWithLHS[
         Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
          Alternatives[
           PatternTest[
            Blank[Symbol], Developer`HoldSymbolQ], 
           PatternTest[
            Blank[Symbol], Developer`HoldSymbolQ][]]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`expanded, 
          Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`quotedSetDelayed[
        GeneralUtilities`Control`PackagePrivate`lhs, 
         ReplaceAll[
         GeneralUtilities`Control`PackagePrivate`expanded, 
          GeneralUtilities`$LHS :> 
          GeneralUtilities`Control`PackagePrivate`lhs]], 
       GeneralUtilities`Control`PackagePrivate`quotedSetDelayedWithLHS[
         Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`expanded, 
          Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`quotedSetDelayed[
         Pattern[
         System`Private`LHS, GeneralUtilities`Control`PackagePrivate`lhs], 
         ReplaceAll[
         GeneralUtilities`Control`PackagePrivate`expanded, 
          GeneralUtilities`$LHS :> System`Private`LHS]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`quotedSet] = {
        HoldFirst}, GeneralUtilities`Control`PackagePrivate`quotedSet[
         Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
          Blank[]], 
         GeneralUtilities`Quoted[
          Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]]] := 
       GeneralUtilities`Quoted[
        GeneralUtilities`Control`PackagePrivate`lhs = 
         GeneralUtilities`Control`PackagePrivate`rhs], 
       GeneralUtilities`Control`PackagePrivate`quotedSet[
         Blank[], 
         Blank[]] := $Failed, 
       GeneralUtilities`Control`PackagePrivate`$MacroAliases = {
        HoldPattern[GeneralUtilities`BagInsert] :> Internal`StuffBag, 
         HoldPattern[GeneralUtilities`BagPush] :> Internal`StuffBag, 
         HoldPattern[GeneralUtilities`PossibleFunctionQ] :> 
         System`Private`MightEvaluateWhenAppliedQ}, 
       GeneralUtilities`BagInsert := Internal`StuffBag, 
       TagSet[GeneralUtilities`BagInsert, 
        MessageName[GeneralUtilities`BagInsert, "usage"], 
        "BagInsert is badly named, use BagPush instead."], 
       GeneralUtilities`BagPush := Internal`StuffBag, 
       TagSet[GeneralUtilities`BagPush, 
        MessageName[GeneralUtilities`BagPush, "usage"], 
        "\!\(\*RowBox[{\"BagPush\", \"[\", RowBox[{StyleBox[\"bag\", \"TI\"], \
\",\",  StyleBox[\"value\", \"TI\"]}], \"]\"}]\) bushes a value onto the end \
of a bag.\n\!\(\*RowBox[{\"BagPush\", \"[\", RowBox[{StyleBox[\"bag\", \
\"TI\"], \",\",  StyleBox[\"values\", \"TI\"], \",\",  StyleBox[\"n\", \
\"TI\"]}], \"]\"}]\) treats \!\(\*StyleBox[\"values\", \"TI\"]\) as an array \
of values to push of depth \!\(\*StyleBox[\"n\", \"TI\"]\).\n\[Bullet] Use \
BagContents to obtain the contents of a bag.\n\[Bullet] Technically BagPush \
is an alias for Internal`StuffBag."], GeneralUtilities`PossibleFunctionQ := 
       System`Private`MightEvaluateWhenAppliedQ, 
       GeneralUtilities`Control`PackagePrivate`$DesugaringRules = 
       Dispatch[{HoldPattern[Echo] :> GeneralUtilities`EchoRaw, HoldPattern[
            Out[]] :> GeneralUtilities`$LHSHead, 
          HoldPattern[GeneralUtilities`$Unreachable] :> 
          GeneralUtilities`Control`PackagePrivate`Unreachable[
           GeneralUtilities`$LHSHead], HoldPattern[
            With[
             Pattern[GeneralUtilities`Control`PackagePrivate`s, 
              Blank[Set]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`body, 
              Blank[]]]] :> 
          With[{GeneralUtilities`Control`PackagePrivate`s}, 
            GeneralUtilities`Control`PackagePrivate`body], HoldPattern[
            With[
             Pattern[GeneralUtilities`Control`PackagePrivate`s, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`rest, 
              BlankSequence[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`body, 
              Blank[]]]] :> With[GeneralUtilities`Control`PackagePrivate`s, 
            With[
            GeneralUtilities`Control`PackagePrivate`rest, 
             GeneralUtilities`Control`PackagePrivate`body]], HoldPattern[
            Condition[
             Debug[
              Pattern[GeneralUtilities`Control`PackagePrivate`e, 
               Blank[]]], GeneralUtilities`$DebugMode]] :> 
          GeneralUtilities`Control`PackagePrivate`e, HoldPattern[
            Debug[
             Blank[]]] :> Null, HoldPattern[
            Verbatim[PatternTest][
             Pattern[GeneralUtilities`Control`PackagePrivate`x, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`n, 
              Blank[Integer]]]] :> 
          Part[GeneralUtilities`Control`PackagePrivate`x, 
            GeneralUtilities`Control`PackagePrivate`n], HoldPattern[
            GeneralUtilities`MacroEvaluate[
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          RuleCondition[GeneralUtilities`Control`PackagePrivate`e], 
          HoldPattern[
            Append[
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`a, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`b, 
              Blank[]]]] :> Append[
            Append[
            GeneralUtilities`Control`PackagePrivate`e, 
             GeneralUtilities`Control`PackagePrivate`a], 
            GeneralUtilities`Control`PackagePrivate`b], HoldPattern[
            Assert[
             Pattern[GeneralUtilities`Control`PackagePrivate`test, 
              Blank[]], {
             255, "/Jenkins/workspace/Component.ARG.64Bit.12.0/Paclets/\
GeneralUtilities/GeneralUtilities/Control.m"}]] :> If[
            Not[
             TrueQ[GeneralUtilities`Control`PackagePrivate`test]], 
            GeneralUtilities`Panic["FailedAssertion"]], HoldPattern[
            GeneralUtilities`ReturnFailed[
             Pattern[GeneralUtilities`Control`PackagePrivate`msg, 
              Blank[String]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`args, 
              BlankNullSequence[]]]] :> GeneralUtilities`ReturnFailed[
            MessageName[
            GeneralUtilities`$LHSHead, 
             GeneralUtilities`Control`PackagePrivate`msg], 
            GeneralUtilities`Control`PackagePrivate`args], HoldPattern[
            GeneralUtilities`ReturnFailure[
             Pattern[GeneralUtilities`Control`PackagePrivate`msg, 
              Blank[String]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`args, 
              BlankNullSequence[]]]] :> GeneralUtilities`ReturnFailure[
            MessageName[
            GeneralUtilities`$LHSHead, 
             GeneralUtilities`Control`PackagePrivate`msg], 
            GeneralUtilities`Control`PackagePrivate`args], HoldPattern[
            GeneralUtilities`ReturnTaggedFailure[
             Pattern[GeneralUtilities`Control`PackagePrivate`tag, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`msg, 
              Blank[String]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`args, 
              BlankNullSequence[]]]] :> 
          GeneralUtilities`ReturnTaggedFailure[
           GeneralUtilities`Control`PackagePrivate`tag, 
            MessageName[
            GeneralUtilities`$LHSHead, 
             GeneralUtilities`Control`PackagePrivate`msg], 
            GeneralUtilities`Control`PackagePrivate`args], HoldPattern[
            Factorial2[
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          GeneralUtilities`Breakpoint[
           GeneralUtilities`Control`PackagePrivate`e], HoldPattern[
            Pattern[
            GeneralUtilities`Control`PackagePrivate`set, Blank[MessageName] = 
             Blank[String]]] :> 
          RuleCondition[GeneralUtilities`Control`PackagePrivate`set; Null], 
          HoldPattern[
            GeneralUtilities`HoldFunction[
             Pattern[GeneralUtilities`Control`PackagePrivate`vars, 
              Blank[]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`body, 
              Blank[]]]] :> 
          Function[
           GeneralUtilities`Control`PackagePrivate`vars, 
            GeneralUtilities`Control`PackagePrivate`body, HoldAllComplete], 
          HoldPattern[
            GeneralUtilities`HoldFunction[
             Pattern[GeneralUtilities`Control`PackagePrivate`body, 
              Blank[]]]] :> 
          Function[
           Null, GeneralUtilities`Control`PackagePrivate`body, 
            HoldAllComplete], HoldPattern[Derivative[1][
              Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
               Blank[]]] = 
            Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
              Blank[]]] :> 
          GeneralUtilities`EchoSet[
           GeneralUtilities`Control`PackagePrivate`lhs, 
            GeneralUtilities`Control`PackagePrivate`rhs], 
          HoldPattern[Derivative[2][
              Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
               Blank[]]] = 
            Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
              Blank[]]] :> 
          GeneralUtilities`EchoHoldSet[
           GeneralUtilities`Control`PackagePrivate`lhs, 
            GeneralUtilities`Control`PackagePrivate`rhs], HoldPattern[
            Derivative[1][
             Pattern[GeneralUtilities`Control`PackagePrivate`s, 
              Blank[String]]]] :> 
          RegularExpression[GeneralUtilities`Control`PackagePrivate`s], 
          HoldPattern[
            Derivative[1][
             Pattern[GeneralUtilities`Control`PackagePrivate`e, {
               BlankSequence[Symbol]}]]] :> 
          GeneralUtilities`EchoSymbol[
           GeneralUtilities`Control`PackagePrivate`e], HoldPattern[
            Derivative[1][
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[Symbol]]]] :> GeneralUtilities`EchoSymbol[
            GeneralUtilities`MacroEvaluate[
             GeneralUtilities`HoldSymbolName[
             GeneralUtilities`Control`PackagePrivate`e]], 
            GeneralUtilities`Control`PackagePrivate`e], HoldPattern[
            Derivative[1][
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          GeneralUtilities`EchoRaw[GeneralUtilities`Control`PackagePrivate`e],
           HoldPattern[
            Derivative[3][
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          GeneralUtilities`EchoHold[
           GeneralUtilities`Control`PackagePrivate`e], HoldPattern[
            Derivative[2][
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          GeneralUtilities`Tap[GeneralUtilities`Control`PackagePrivate`e], 
          HoldPattern[GeneralUtilities`$Unreachable] :> 
          GeneralUtilities`Control`PackagePrivate`Unreachable[
           GeneralUtilities`$LHSHead]}], 
       GeneralUtilities`Control`PackagePrivate`InsertEachVariables[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := 
       ReplaceAll[GeneralUtilities`Control`PackagePrivate`expr, Condition[
           Pattern[GeneralUtilities`Control`PackagePrivate`f, 
            Blank[Function]], 
           Not[
            FreeQ[
             Unevaluated[GeneralUtilities`Control`PackagePrivate`f], 
             Blank[GeneralUtilities`Each]]]] :> RuleCondition[
           ReplaceAll[
            GeneralUtilities`Quoted[
            System`Private`$EachCounter = 0; 
             GeneralUtilities`Control`PackagePrivate`f], GeneralUtilities`Each[
              Pattern[GeneralUtilities`Control`PackagePrivate`var, 
               Blank[]]] :> GeneralUtilities`Quoted[
              Part[GeneralUtilities`Control`PackagePrivate`var, 
               PreIncrement[System`Private`$EachCounter]]]]]], 
       GeneralUtilities`Control`PackagePrivate`MacroReplaceRepeated[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`e = 
          GeneralUtilities`Control`PackagePrivate`expr, 
          GeneralUtilities`Control`PackagePrivate`pos}, 
         Do[
         GeneralUtilities`Control`PackagePrivate`pos = 
           Position[
            GeneralUtilities`Control`PackagePrivate`e, 
             GeneralUtilities`Control`PackagePrivate`$MacroHeadsPattern]; 
          GeneralUtilities`Control`PackagePrivate`pos = 
           Map[If[Last[#, None] === 0, 
              Most[#], Nothing]& , 
             GeneralUtilities`Control`PackagePrivate`pos]; If[
            Developer`EmptyQ[GeneralUtilities`Control`PackagePrivate`pos], 
            Return[GeneralUtilities`Control`PackagePrivate`e, Block]]; 
          GeneralUtilities`Control`PackagePrivate`pos = DeleteDuplicates[
             Reverse[
              Sort[GeneralUtilities`Control`PackagePrivate`pos]], Take[#, 
               UpTo[
                Length[#2]]] === #2& ]; 
          GeneralUtilities`Control`PackagePrivate`e = 
           ReplacePart[GeneralUtilities`Control`PackagePrivate`e, 
             Thread[
             GeneralUtilities`Control`PackagePrivate`pos -> 
              Extract[GeneralUtilities`Control`PackagePrivate`e, 
                GeneralUtilities`Control`PackagePrivate`pos, 
                GeneralUtilities`Control`PackagePrivate`expand1]]]; 
          GeneralUtilities`Control`PackagePrivate`$monitor[
           GeneralUtilities`Control`PackagePrivate`e]; Null, Infinity]], 
       GeneralUtilities`Control`PackagePrivate`$MacroHeadsPattern = 
       Alternatives[
        GeneralUtilities`CatchFailure, GeneralUtilities`CatchFailureAsMessage,
          GeneralUtilities`CatchFailureAndMessage, GeneralUtilities`Scope, 
         GeneralUtilities`ModuleScope, GeneralUtilities`Match, 
         GeneralUtilities`StringMatch, GeneralUtilities`DoWhile, 
         GeneralUtilities`Excise, GeneralUtilities`Memoized, 
         GeneralUtilities`SpeculativeScope, GeneralUtilities`SetupTeardown, 
         GeneralUtilities`UnpackOptions, GeneralUtilities`UnpackAssociation, 
         GeneralUtilities`CollectTo, GeneralUtilities`FlatList, 
         GeneralUtilities`UseMacros, GeneralUtilities`BagContents, 
         GeneralUtilities`ConditionalBody, GeneralUtilities`ContainsQ, 
         GeneralUtilities`JoinTo, GeneralUtilities`UnionTo, 
         GeneralUtilities`Timed], 
       Attributes[GeneralUtilities`CatchFailure] = {HoldAll}, 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`CatchFailure]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`CatchFailure]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`CatchFailure]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       GeneralUtilities`CatchFailure[
         Pattern[GeneralUtilities`Code`PackagePrivate`body, 
          Blank[]]] := 
       Catch[GeneralUtilities`Code`PackagePrivate`body, 
         GeneralUtilities`PackageScope`CatchFailureTag, 
         GeneralUtilities`PackageScope`CatchFailureHandler[General]], 
       GeneralUtilities`CatchFailure[
         Pattern[GeneralUtilities`Code`PackagePrivate`head, 
          Blank[Symbol]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`body, 
          Blank[]]] := 
       Catch[
        GeneralUtilities`Code`PackagePrivate`body, 
         GeneralUtilities`PackageScope`CatchFailureTag, 
         GeneralUtilities`PackageScope`CatchFailureHandler[
         GeneralUtilities`Code`PackagePrivate`head]], 
       TagSet[GeneralUtilities`CatchFailure, 
        MessageName[GeneralUtilities`CatchFailure, "usage"], 
        "\!\(\*RowBox[{\"CatchFailure\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) is a macro that evaluates \!\(\*StyleBox[\"body\", \
\"TI\"]\), but returns a Failure[\[Ellipsis]] object if a ThrowFailure[\
\[Ellipsis]] occurred during evaluation. The current function is \
automatically used as the message head.\n\!\(\*RowBox[{\"CatchFailure\", \
\"[\", RowBox[{StyleBox[\"head\", \"TI\"], \",\",  StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) explicitly uses \!\(\*StyleBox[\"head\", \"TI\"]\) as \
the message head for the failure message."], 
       Attributes[GeneralUtilities`CatchFailureAsMessage] = {HoldAll}, 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`CatchFailureAsMessage]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`CatchFailureAsMessage]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`CatchFailureAsMessage]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       GeneralUtilities`CatchFailureAsMessage[
         Pattern[GeneralUtilities`Code`PackagePrivate`head, 
          Blank[Symbol]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`body, 
          Blank[]]] := 
       Catch[GeneralUtilities`Code`PackagePrivate`body, 
         GeneralUtilities`PackageScope`CatchFailureTag, 
         GeneralUtilities`PackageScope`CatchFailureAsMessageHandler[
         GeneralUtilities`Code`PackagePrivate`head]], 
       TagSet[GeneralUtilities`CatchFailureAsMessage, 
        MessageName[GeneralUtilities`CatchFailureAsMessage, "usage"], 
        "\!\(\*RowBox[{\"CatchFailureAsMessage\", \"[\", \
RowBox[{StyleBox[\"body\", \"TI\"]}], \"]\"}]\) is a macro that evaluates \
\!\(\*StyleBox[\"body\", \"TI\"]\), but issues a message if a ThrowFailure[\
\[Ellipsis]] occurred during evaluation. The current function is \
automatically used as the message head.\n\
\!\(\*RowBox[{\"CatchFailureAsMessage\", \"[\", RowBox[{StyleBox[\"head\", \
\"TI\"], \",\",  StyleBox[\"body\", \"TI\"]}], \"]\"}]\) explicitly uses \!\(\
\*StyleBox[\"head\", \"TI\"]\) as the message head for the failure message."],
        Attributes[GeneralUtilities`CatchFailureAndMessage] = {HoldAll}, 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`CatchFailureAndMessage]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`CatchFailureAndMessage]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`CatchFailureAndMessage]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       GeneralUtilities`CatchFailureAndMessage[
         Pattern[GeneralUtilities`Code`PackagePrivate`head, 
          Blank[Symbol]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`body, 
          Blank[]]] := 
       Catch[GeneralUtilities`Code`PackagePrivate`body, 
         GeneralUtilities`PackageScope`CatchFailureTag, 
         GeneralUtilities`PackageScope`CatchFailureAndMessageHandler[
         GeneralUtilities`Code`PackagePrivate`head]], 
       TagSet[GeneralUtilities`CatchFailureAndMessage, 
        MessageName[GeneralUtilities`CatchFailureAndMessage, "usage"], 
        "\!\(\*RowBox[{\"CatchFailureAndMessage\", \"[\", \
RowBox[{StyleBox[\"body\", \"TI\"]}], \"]\"}]\) is a macro that evaluates \
\!\(\*StyleBox[\"body\", \"TI\"]\), but returns a Failure[\[Ellipsis]] object \
and issues a message if a ThrowFailure[\[Ellipsis]] occurred during \
evaluation. The current function is automatically used as the message head.\n\
\!\(\*RowBox[{\"CatchFailureAndMessage\", \"[\", RowBox[{StyleBox[\"head\", \
\"TI\"], \",\",  StyleBox[\"body\", \"TI\"]}], \"]\"}]\) explicitly uses \!\(\
\*StyleBox[\"head\", \"TI\"]\) as the message head for the failure message."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`Scope]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`Scope]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`Scope]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`Scope, 
        MessageName[GeneralUtilities`Scope, "usage"], 
        "\!\(\*RowBox[{\"Scope\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) is a macro that expands to a Block with automatically \
populated local variable list.\n\[Bullet] Variables are detected \
syntactically by the presence of = and := within \!\(\*StyleBox[\"body\", \
\"TI\"]\).\n\[Bullet] ^= and ^:= can be used to avoid this localization.\n\
\[Bullet] {\!\(\*StyleBox[SubscriptBox[\"sym\", StyleBox[\"1\", \"TR\"]], \
\"TI\"]\),\!\(\*StyleBox[SubscriptBox[\"sym\", StyleBox[\"2\", \"TR\"]], \"TI\
\"]\),\[Ellipsis]} = \!\(\*StyleBox[\"rhs\", \"TI\"]\) will localize \
\!\(\*StyleBox[SubscriptBox[\"sym\", StyleBox[\"1\", \"TR\"]], \"TI\"]\), \
\!\(\*StyleBox[SubscriptBox[\"sym\", StyleBox[\"2\", \"TR\"]], \"TI\"]\), \
\[Ellipsis].\n\[Bullet] \!\(\*StyleBox[\"sym\", \"TI\"]\) := \
\!\(\*StyleBox[\"rhs\", \"TI\"]\) will localize \!\(\*StyleBox[\"sym\", \
\"TI\"]\).\n\[Bullet] Local functions definitions \!\(\*StyleBox[\"head\", \
\"TI\"]\)[\[Ellipsis]] := \!\(\*StyleBox[\"rhs\", \"TI\"]\) do not cause \
localizalization of \!\(\*StyleBox[\"head\", \"TI\"]\).\n\[Bullet] \
ScopeVariable[\!\(\*StyleBox[SubscriptBox[\"var\", StyleBox[\"1\", \"TR\"]], \
\"TI\"]\),\!\(\*StyleBox[SubscriptBox[\"var\", StyleBox[\"2\", \"TR\"]], \"TI\
\"]\),\[Ellipsis]] can be used to ensure variables are localized without \
relying on assignment.\n\[Bullet] See also ScopeVariable, ModuleScope."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`ModuleScope]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`ModuleScope]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`ModuleScope]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`ModuleScope, 
        MessageName[GeneralUtilities`ModuleScope, "usage"], 
        "\!\(\*RowBox[{\"ModuleScope\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) works like Scope[\!\(\*StyleBox[\"body\", \"TI\"]\)], \
but uses Module to localize variables instead of Block.\n\[Bullet] See also \
Scope, ScopeVariable."], Attributes[GeneralUtilities`StringMatch] = {HoldAll}, 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`StringMatch]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`StringMatch]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`StringMatch]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       GeneralUtilities`StringMatch[
         Pattern[GeneralUtilities`Control`PackagePrivate`args, 
          BlankNullSequence[]]] := First[
         GeneralUtilities`Control`PackagePrivate`mStringMatch0[
         GeneralUtilities`Control`PackagePrivate`args]], 
       TagSet[GeneralUtilities`StringMatch, 
        MessageName[GeneralUtilities`StringMatch, "invcase"], 
        "`` is not a valid string case."], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mStringMatch0] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`mStringMatch0[
         Pattern[GeneralUtilities`Control`PackagePrivate`arg, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`rules, 
          BlankSequence[RuleDelayed]]] := If[GeneralUtilities`$DebugMode, 
         GeneralUtilities`Control`PackagePrivate`mStringMatch1[
         GeneralUtilities`Control`PackagePrivate`arg, {
          GeneralUtilities`Control`PackagePrivate`rules, 
           Pattern[System`Private`T, 
             BlankNullSequence[]] :> 
           GeneralUtilities`UnmatchedCase[
            GeneralUtilities`StringMatch, System`Private`T]}], 
         GeneralUtilities`Control`PackagePrivate`mStringMatch1[
         GeneralUtilities`Control`PackagePrivate`arg, {
          GeneralUtilities`Control`PackagePrivate`rules, BlankNullSequence[] :> 
           GeneralUtilities`UnmatchedCase[]}]], 
       GeneralUtilities`Control`PackagePrivate`mStringMatch0[
         Pattern[GeneralUtilities`Control`PackagePrivate`arg, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`rules, 
          BlankSequence[RuleDelayed]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`last, 
          Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`mStringMatch1[
        GeneralUtilities`Control`PackagePrivate`arg, {
         GeneralUtilities`Control`PackagePrivate`rules, BlankNullSequence[] :> 
          GeneralUtilities`Control`PackagePrivate`last}], 
       GeneralUtilities`Control`PackagePrivate`mStringMatch0[
         Blank[]] := GeneralUtilities`MacroPanic[], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mStringMatch1] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`mStringMatch1[
         Pattern[GeneralUtilities`Control`PackagePrivate`arg, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`rules, 
          Blank[List]]] := GeneralUtilities`ToQuoted[StringReplace, 
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`arg], 
         Map[
         GeneralUtilities`Control`PackagePrivate`strmatch, 
          GeneralUtilities`Control`PackagePrivate`rules]], 
       GeneralUtilities`Control`PackagePrivate`mStringMatch1[
         Blank[]] := GeneralUtilities`MacroPanic[], 
       Attributes[GeneralUtilities`Control`PackagePrivate`strmatch] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`strmatch[{
           Pattern[GeneralUtilities`Control`PackagePrivate`patt, 
            BlankSequence[]]} :> 
         Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`strmatch[
        StringExpression[GeneralUtilities`Control`PackagePrivate`patt] :> 
         GeneralUtilities`Control`PackagePrivate`rhs], 
       GeneralUtilities`Control`PackagePrivate`strmatch[Condition[
           Pattern[GeneralUtilities`Control`PackagePrivate`str, 
            Blank[String]], 
           Not[
            StringFreeQ[GeneralUtilities`Control`PackagePrivate`str, "*"]]] :> 
         Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]] := 
       StringReplace[
         GeneralUtilities`Control`PackagePrivate`str, "*" -> 
          BlankNullSequence[]] :> GeneralUtilities`Quoted[
          Return[GeneralUtilities`Control`PackagePrivate`rhs, StringReplace]],
        GeneralUtilities`Control`PackagePrivate`strmatch[
        Pattern[GeneralUtilities`Control`PackagePrivate`patt, 
           Blank[]] :> Pattern[GeneralUtilities`Control`PackagePrivate`rhs, 
           Blank[]]] := ReplaceAll[
          GeneralUtilities`Quoted[
           StringExpression[
           StartOfString, GeneralUtilities`Control`PackagePrivate`patt, 
            EndOfString]], 
          GeneralUtilities`Control`PackagePrivate`$stringPatternSugar] :> 
        GeneralUtilities`Quoted[
          Return[GeneralUtilities`Control`PackagePrivate`rhs, StringReplace]],
        GeneralUtilities`Control`PackagePrivate`strmatch[
         Pattern[GeneralUtilities`Control`PackagePrivate`case, 
          Blank[]]] := GeneralUtilities`MacroPanic[
         MessageName[GeneralUtilities`StringMatch, "invcase"], 
         HoldForm[GeneralUtilities`Control`PackagePrivate`case]], 
       GeneralUtilities`Control`PackagePrivate`$stringPatternSugar = {
        Word -> Longest[
           Repeated[WordCharacter]], Number -> Longest[
           Repeated[DigitCharacter]], NullSpace -> Longest[
           RepeatedNull[WhitespaceCharacter]]}, 
       Attributes[GeneralUtilities`MacroPanic] = {HoldFirst}, 
       GeneralUtilities`MacroPanic[] := 
       GeneralUtilities`Control`PackagePrivate`iMacroPanic[
        GeneralUtilities`Control`PackagePrivate`$lastMacroHead, 
         "Invalid macro invocation: ``.", 
         GeneralUtilities`Control`PackagePrivate`$lastMacroExpr], 
       GeneralUtilities`MacroPanic[
         Pattern[GeneralUtilities`Control`PackagePrivate`message, 
          Blank[String]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Control`PackagePrivate`iMacroPanic[
        GeneralUtilities`Control`PackagePrivate`$lastMacroHead, 
         GeneralUtilities`Control`PackagePrivate`message, 
         GeneralUtilities`Control`PackagePrivate`args], 
       GeneralUtilities`MacroPanic[
         Pattern[GeneralUtilities`Control`PackagePrivate`msg, 
          MessageName[
           Pattern[GeneralUtilities`Control`PackagePrivate`head, 
            Blank[]], 
           Blank[String]]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       GeneralUtilities`Control`PackagePrivate`iMacroPanic[
        GeneralUtilities`Control`PackagePrivate`head, 
         GeneralUtilities`Control`PackagePrivate`msg, 
         GeneralUtilities`Control`PackagePrivate`args], 
       GeneralUtilities`MacroPanic[
         Blank[]] := 
       GeneralUtilities`Control`PackagePrivate`iMacroPanic[
        GeneralUtilities`Control`PackagePrivate`$lastMacroHead, 
         "Unknown error in macro."], 
       TagSet[GeneralUtilities`MacroPanic, 
        MessageName[GeneralUtilities`MacroPanic, "usage"], 
        "\!\(\*RowBox[{\"MacroPanic\", \"[\", RowBox[{}], \"]\"}]\) should be \
called to complain about the current macro's invocation being invalid.\n\
\!\(\*RowBox[{\"MacroPanic\", \"[\", \
RowBox[{StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"msg\\\", \\\"TI\\\"]\\)\\\"\", \
ShowStringCharacters -> True], \",\",  RowBox[{StyleBox[\"args\", \"TI\"], \
StyleBox[\"\[Ellipsis]\", \"TR\"]}]}], \"]\"}]\) gives a more specific \
message.\n\!\(\*RowBox[{\"MacroPanic\", \"[\", \
RowBox[{RowBox[{StyleBox[\"head\", \"TI\"], \"::\", StyleBox[\"msg\", \
\"TI\"]}], \",\",  RowBox[{StyleBox[\"args\", \"TI\"], StyleBox[\"\[Ellipsis]\
\", \"TR\"]}]}], \"]\"}]\) gives a more specific message."], 
       GeneralUtilities`Control`PackagePrivate`iMacroPanic[
         Pattern[GeneralUtilities`Control`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`msg, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`args, 
          BlankNullSequence[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`failure}, 
         Internal`$LastInternalFailure = System`Private`SetNoEntry[
            Failure["MacroError", 
             Association[
             "MessageTemplate" :> GeneralUtilities`Control`PackagePrivate`msg,
               "MessageParameters" -> {
               GeneralUtilities`Control`PackagePrivate`args}, "Macro" -> 
              HoldForm[GeneralUtilities`Control`PackagePrivate`head], 
              "CallSite" -> Apply[HoldForm, GeneralUtilities`$LHSHead]]]]; 
         Print[Internal`$LastInternalFailure]; 
         Throw[$Failed, GeneralUtilities`MacroEvaluate]; Null], 
       GeneralUtilities`Control`PackagePrivate`$lastMacroHead = None, 
       GeneralUtilities`Control`PackagePrivate`$lastMacroExpr = None, 
       Attributes[GeneralUtilities`DoWhile] = {HoldAll}, 
       GeneralUtilities`DoWhile[
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]]] := 
       While[GeneralUtilities`Control`PackagePrivate`body; 
         GeneralUtilities`Control`PackagePrivate`test], 
       TagSet[GeneralUtilities`DoWhile, 
        MessageName[GeneralUtilities`DoWhile, "usage"], 
        "\!\(\*RowBox[{\"DoWhile\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"], \",\",  StyleBox[\"test\", \"TI\"]}], \"]\"}]\) will evaluate \
\!\(\*StyleBox[\"body\", \"TI\"]\) once, and then continue to evaluate it as \
long as \!\(\*StyleBox[\"test\", \"TI\"]\) returns true."], 
       Attributes[GeneralUtilities`Excise] = {HoldAllComplete}, 
       GeneralUtilities`Excise[
         BlankNullSequence[]] := Sequence[], 
       TagSet[GeneralUtilities`Excise, 
        MessageName[GeneralUtilities`Excise, "usage"], 
        "\!\(\*RowBox[{\"Excise\", \"[\", RowBox[{RowBox[{StyleBox[\"args\", \
\"TI\"], StyleBox[\"\[Ellipsis]\", \"TR\"]}]}], \"]\"}]\) evaluates to an \
empty sequence, effectively removing its arguments without evaluation."], 
       Attributes[GeneralUtilities`Memoized] = {HoldAllComplete}, 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`Memoized]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`Memoized]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`Memoized]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`Memoized, 
        MessageName[GeneralUtilities`Memoized, "invmethod"], 
        "Method -> `` should be one of ``"], 
       TagSet[GeneralUtilities`Memoized, 
        MessageName[GeneralUtilities`Memoized, "onearg"], 
        "Body of function should be a function utilizing not more than one \
bound pattern. The bound patterns that were used were ``."], 
       TagSet[GeneralUtilities`Memoized, 
        MessageName[GeneralUtilities`Memoized, "usage"], 
        "\!\(\*RowBox[{\"Memoized\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) specifies that \!\(\*StyleBox[\"body\", \"TI\"]\) should \
be evaluted but cached so that subsequent calls with the same value for any \
bound symbol use the cached value.\n\!\(\*RowBox[{\"Memoized\", \"[\", \
RowBox[{StyleBox[\"body\", \"TI\"], \",\",  Method , \"\[Rule]\",  \
StyleBox[\"method\", \"TI\"]}], \"]\"}]\) can be used, where \
\!\(\*StyleBox[\"method\", \"TI\"]\) is one of {\"Association\", \"Symbol\", \
\"Inline\", \"SystemCache\"}, to choose a specific caching method."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`SpeculativeScope]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`SpeculativeScope]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`SpeculativeScope]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       Attributes[GeneralUtilities`SetupTeardown] = {HoldAllComplete}, 
       GeneralUtilities`SetupTeardown[
         Pattern[GeneralUtilities`Control`PackagePrivate`setup, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`teardown, 
          Blank[]]] := Internal`WithLocalSettings[
         Internal`AllowExceptions[
         GeneralUtilities`Control`PackagePrivate`setup], 
         GeneralUtilities`Control`PackagePrivate`body, 
         Internal`AllowExceptions[
         GeneralUtilities`Control`PackagePrivate`teardown]], 
       TagSet[GeneralUtilities`SetupTeardown, 
        MessageName[GeneralUtilities`SetupTeardown, "usage"], 
        "\!\(\*RowBox[{\"SetupTeardown\", \"[\", RowBox[{StyleBox[\"setup\", \
\"TI\"], \",\",  StyleBox[\"body\", \"TI\"], \",\",  StyleBox[\"teardown\", \
\"TI\"]}], \"]\"}]\) evaluates \!\(\*StyleBox[\"setup\", \"TI\"]\), then \!\(\
\*StyleBox[\"body\", \"TI\"]\), and then \!\(\*StyleBox[\"teardown\", \"TI\"]\
\), even if an Abort or Throw occurs during evaluation."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`UnpackOptions]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`UnpackOptions]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`UnpackOptions]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`UnpackOptions, 
        MessageName[GeneralUtilities`UnpackOptions, "usage"], 
        "\!\(\*RowBox[{\"UnpackOptions\", \"[\", \
RowBox[{StyleBox[SubscriptBox[\"sym\", StyleBox[\"1\", \"TR\"]], \"TI\"], \",\
\",  StyleBox[SubscriptBox[\"sym\", StyleBox[\"2\", \"TR\"]], \"TI\"], \",\", \
 StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) extracts options with names \
\"\!\(\*StyleBox[SubscriptBox[\"Sym\", StyleBox[\"1\", \"TR\"]], \"TI\"]\)\", \
\"\!\(\*StyleBox[SubscriptBox[\"Sym\", StyleBox[\"2\", \"TR\"]], \"TI\"]\)\", \
\[Ellipsis] and assigns them to the \!\(\*StyleBox[SubscriptBox[\"sym\", \
StyleBox[\"i\", \"TI\"]], \"TI\"]\), where the keys are the title cased \
version of the symbol names."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`UnpackAssociation]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`UnpackAssociation]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`UnpackAssociation]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`UnpackAssociation, 
        MessageName[GeneralUtilities`UnpackAssociation, "usage"], 
        "\!\(\*RowBox[{\"UnpackAssociation\", \"[\", RowBox[{StyleBox[\"assoc\
\", \"TI\"], \",\",  StyleBox[\"\\\"\\!\\(\\*StyleBox[SubscriptBox[\\\"Name\\\
\", StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"TI\\\"]\\)\\\"\", \
ShowStringCharacters -> True], \",\",  \
StyleBox[\"\\\"\\!\\(\\*StyleBox[SubscriptBox[\\\"Name\\\", \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"TI\\\"]\\)\\\"\", ShowStringCharacters \
-> True], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) extracts the \
given keys from the association and sets variables named \
\!\(\*StyleBox[SubscriptBox[\"name\", StyleBox[\"i\", \"TI\"]], \"TI\"]\).\n\
\!\(\*RowBox[{\"UnpackAssociation\", \"[\", RowBox[{StyleBox[\"assoc\", \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"symbol\", StyleBox[\"1\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"symbol\", StyleBox[\"2\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) uppercases \
the first letter of the symbol name to get the key.\n\
\!\(\*RowBox[{\"UnpackAssociation\", \"[\", RowBox[{StyleBox[\"assoc\", \
\"TI\"], \",\",  StyleBox[SubscriptBox[\"symbol\", StyleBox[\"1\", \"TR\"]], \
\"TI\"], \":\", StyleBox[\"\\\"\\!\\(\\*StyleBox[SubscriptBox[\\\"Name\\\", \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"TI\\\"]\\)\\\"\", ShowStringCharacters \
-> True], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) gives an \
explicit name for each symbol.\n\!\(\*RowBox[{\"UnpackAssociation\", \"[\", \
RowBox[{StyleBox[\"assoc\", \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \
\"TR\"], \",\",  StyleBox[\"\\\"Default\\\"\", ShowStringCharacters -> True] \
, \"\[Rule]\",  StyleBox[\"def\", \"TI\"]}], \"]\"}]\) uses the value \
\!\(\*StyleBox[\"def\", \"TI\"]\) if a key is missing from \
\!\(\*StyleBox[\"assoc\", \"TI\"]\).\n\!\(\*RowBox[{\"UnpackAssociation\", \
\"[\", RowBox[{StyleBox[\"assoc\", \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \
\"TR\"], \",\",  StyleBox[\"\\\"DefaultFunction\\\"\", ShowStringCharacters \
-> True] , \"\[Rule]\",  StyleBox[\"func\", \"TI\"]}], \"]\"}]\) calls \
\!\(\*StyleBox[\"func\", \"TI\"]\)[\!\(\*StyleBox[\"key\", \"TI\"]\)] if a \
key is missing from \!\(\*StyleBox[\"assoc\", \"TI\"]\)."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`CollectTo]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`CollectTo]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`CollectTo]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`CollectTo, 
        MessageName[GeneralUtilities`CollectTo, "usage"], 
        "\!\(\*RowBox[{\"CollectTo\", \"[\", RowBox[{StyleBox[\"syms\", \
\"TI\"], \",\",  StyleBox[\"body\", \"TI\"]}], \"]\"}]\) creates a bag for \
each of the symbols in the list \!\(\*StyleBox[\"syms\", \"TI\"]\), and \
populates them as described by \!\(\*StyleBox[\"body\", \"TI\"]\). The bags \
are then converted to lists. \n\[Bullet] The code in \!\(\*StyleBox[\"body\", \
\"TI\"]\) must make use of methods for dealing with an Internal`Bag such as \
Internal`StuffBag."], GeneralUtilities`FlatList[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          BlankNullSequence[]]] := 
       Developer`ToList[GeneralUtilities`Control`PackagePrivate`e], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`UseMacros]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`UseMacros]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`UseMacros]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       GeneralUtilities`UseMacros[
         Blank[]] := GeneralUtilities`Panic[
         MessageName[GeneralUtilities`UseMacros, "nope"]], 
       TagSet[GeneralUtilities`UseMacros, 
        MessageName[GeneralUtilities`UseMacros, "nope"], 
        "UseMacros evaluated at run-time instead of expanding at \
definition-time. Make sure UseMacros is the outermost head on the RHS of a \
definition."], 
       TagSet[GeneralUtilities`UseMacros, 
        MessageName[GeneralUtilities`UseMacros, "usage"], 
        "\!\(\*RowBox[{\"UseMacros\", \"[\", RowBox[{StyleBox[\"body\", \
\"TI\"]}], \"]\"}]\) does nothing more than trigger macro expansion, use it \
if you want to use macros in a function but don\"t need Scope."], 
       GeneralUtilities`BagContents[
         Pattern[GeneralUtilities`Control`PackagePrivate`bag, 
          Blank[]]] := 
       Internal`BagPart[GeneralUtilities`Control`PackagePrivate`bag, All], 
       TagSet[GeneralUtilities`BagContents, 
        MessageName[GeneralUtilities`BagContents, "usage"], 
        "\!\(\*RowBox[{\"BagContents\", \"[\", RowBox[{StyleBox[\"bag\", \"TI\
\"]}], \"]\"}]\) returns the entire contents of a bag."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`ConditionalBody]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`ConditionalBody]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`ConditionalBody]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       TagSet[GeneralUtilities`ConditionalBody, 
        MessageName[GeneralUtilities`ConditionalBody, "usage"], 
        "ConditionalBody is a macro that is used to efficiently implement the \
common idiom of a system symbol that performs a set of checks, and if any of \
them fails, issues a message and returns unevaluated. \n\[Bullet] It is used \
in the following way:\n\!\(\*RowBox[{\"foo\", \"[\", RowBox[{}], \"]\"}]\) := \
ConditionalBody[\n\t\!\(\*StyleBox[SubscriptBox[\"test\", StyleBox[\"1\", \
\"TR\"]], \"TI\"]\), \!\(\*StyleBox[SubscriptBox[\"errorSpec\", \
StyleBox[\"1\", \"TR\"]], \"TI\"]\),\n\t\!\(\*StyleBox[SubscriptBox[\"test\", \
StyleBox[\"2\", \"TR\"]], \"TI\"]\), \
\!\(\*StyleBox[SubscriptBox[\"errorSpec\", StyleBox[\"2\", \"TR\"]], \
\"TI\"]\),\n\t...\n\t\!\(\*StyleBox[\"body\", \"TI\"]\)\n]\n\[Bullet] The \
\!\(\*StyleBox[SubscriptBox[\"test\", StyleBox[\"i\", \"TI\"]], \"TI\"]\) are \
ordinary expressions that should evaluate to True.\n\[Bullet] If they do not, \
the corresponding \!\(\*StyleBox[SubscriptBox[\"errorSpec\", StyleBox[\"i\", \
\"TI\"]], \"TI\"]\) is used to generate a message:\n        \[Bullet] \
\"\!\(\*StyleBox[\"msgname\", \"TI\"]\)\" generates a message \
foo::\!\(\*StyleBox[\"msgname\", \"TI\"]\)\n        \[Bullet] \
{\"\!\(\*StyleBox[\"msgname\", \"TI\"]\)\", \!\(\*StyleBox[\"args\", \"TI\"]\
\[Ellipsis]\)} generates a message with the given arguments\n        \
\[Bullet] HoldForm[$LHS] allows the entire left-hand-side to be used as a \
message argument\n\[Bullet] If \!\(\*StyleBox[\"body\", \"TI\"]\) yields \
$AbortBody (or Fail), then it will again fail to evaluate."], 
       GeneralUtilities`ContainsQ[
         Pattern[GeneralUtilities`Control`PackagePrivate`patt, 
          Blank[]]] := RightComposition[
         FreeQ[GeneralUtilities`Control`PackagePrivate`patt], Not], 
       GeneralUtilities`ContainsQ[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`patt, 
          Blank[]]] := Not[
         FreeQ[
         GeneralUtilities`Control`PackagePrivate`e, 
          GeneralUtilities`Control`PackagePrivate`patt]], 
       TagSet[GeneralUtilities`ContainsQ, 
        MessageName[GeneralUtilities`ContainsQ, "usage"], 
        "\!\(\*RowBox[{\"ContainsQ\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\",  StyleBox[\"pattern\", \"TI\"]}], \"]\"}]\) returns True if \
\!\(\*StyleBox[\"expr\", \"TI\"]\) contains \!\(\*StyleBox[\"pattern\", \
\"TI\"]\) at any level. \n\!\(\*RowBox[{\"ContainsQ\", \"[\", \
RowBox[{StyleBox[\"pattern\", \"TI\"]}], \"]\"}]\) is the operator form of \
ContainsQ.\n\[Bullet] ContainsQ is the negation of FreeQ."], 
       Attributes[GeneralUtilities`JoinTo] = {HoldFirst}, 
       GeneralUtilities`JoinTo[
         Pattern[GeneralUtilities`General`PackagePrivate`lhs, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          BlankSequence[]]] := (GeneralUtilities`General`PackagePrivate`lhs = 
        Join[
         GeneralUtilities`General`PackagePrivate`lhs, 
          GeneralUtilities`General`PackagePrivate`list]), 
       TagSet[GeneralUtilities`JoinTo, 
        MessageName[GeneralUtilities`JoinTo, "usage"], 
        "\!\(\*RowBox[{\"JoinTo\", \"[\", RowBox[{StyleBox[\"lhs\", \"TI\"], \
\",\",  StyleBox[\"list\", \"TI\"]}], \"]\"}]\) joins the list to \
\!\(\*StyleBox[\"lhs\", \"TI\"]\), updating the value of \!\(\*StyleBox[\"lhs\
\", \"TI\"]\).\n\!\(\*RowBox[{\"JoinTo\", \"[\", RowBox[{StyleBox[\"lhs\", \
\"TI\"], \",\",  list1$, \",\",  StyleBox[SubscriptBox[\"list\", StyleBox[\"2\
\", \"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) \
joins several lists to \!\(\*StyleBox[\"lhs\", \"TI\"]\)."], 
       Attributes[GeneralUtilities`UnionTo] = {HoldFirst}, 
       GeneralUtilities`UnionTo[
         Pattern[GeneralUtilities`General`PackagePrivate`lhs, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          BlankSequence[]]] := (GeneralUtilities`General`PackagePrivate`lhs = 
        Union[GeneralUtilities`General`PackagePrivate`lhs, 
          GeneralUtilities`General`PackagePrivate`list]), 
       TagSet[GeneralUtilities`UnionTo, 
        MessageName[GeneralUtilities`UnionTo, "usage"], 
        "\!\(\*RowBox[{\"UnionTo\", \"[\", RowBox[{StyleBox[\"lhs\", \"TI\"], \
\",\",  StyleBox[\"list\", \"TI\"]}], \"]\"}]\) unions the \
\!\(\*StyleBox[\"list\", \"TI\"]\) with \!\(\*StyleBox[\"lhs\", \"TI\"]\), \
updating lthe value of \!\(\*StyleBox[\"hs\", \"TI\"]\).\n\
\!\(\*RowBox[{\"UnionTo\", \"[\", RowBox[{StyleBox[\"lhs\", \"TI\"], \",\",  \
list1$, \",\",  StyleBox[SubscriptBox[\"list\", StyleBox[\"2\", \"TR\"]], \
\"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) unions \
several lists wtih \!\(\*StyleBox[\"lhs\", \"TI\"]\)."], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`s, Blank[] = 
          Blank[GeneralUtilities`Timed]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`s]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[
         GeneralUtilities`Control`PackagePrivate`sd, Blank[] := 
          Blank[GeneralUtilities`Timed]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`sd]], 
       UpSetDelayed[
        HoldPattern[
         Pattern[GeneralUtilities`Control`PackagePrivate`tsd, 
          TagSetDelayed[
           Blank[], 
           Blank[], 
           Blank[GeneralUtilities`Timed]]]], 
        GeneralUtilities`MacroEvaluate[
        GeneralUtilities`Control`PackagePrivate`tsd]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`expand1] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`expand1[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]]] := 
       Replace[GeneralUtilities`Control`PackagePrivate`$lastMacroExpr = 
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`e], 
         GeneralUtilities`MacroRules[
         GeneralUtilities`Control`PackagePrivate`$lastMacroHead = Head[
            Unevaluated[GeneralUtilities`Control`PackagePrivate`e]]]], 
       GeneralUtilities`MacroRules[GeneralUtilities`BagContents] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`BagContents[
            Pattern[GeneralUtilities`Control`PackagePrivate`bag, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Internal`BagPart[
           GeneralUtilities`Control`PackagePrivate`bag, All]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`CatchFailure] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`CatchFailure[
            Pattern[GeneralUtilities`Control`PackagePrivate`head, 
             Blank[Symbol]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Catch[
           GeneralUtilities`Control`PackagePrivate`body, 
            GeneralUtilities`PackageScope`CatchFailureTag, 
            GeneralUtilities`PackageScope`CatchFailureHandler[
            GeneralUtilities`Control`PackagePrivate`head]]], 
         GeneralUtilities`Quoted[
           GeneralUtilities`CatchFailure[
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Catch[
           GeneralUtilities`Control`PackagePrivate`body, 
            GeneralUtilities`PackageScope`CatchFailureTag, 
            GeneralUtilities`PackageScope`CatchFailureHandler[
            GeneralUtilities`$LHSHead]]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[
        GeneralUtilities`CatchFailureAndMessage] = {GeneralUtilities`Quoted[
           GeneralUtilities`CatchFailureAndMessage[
            Pattern[GeneralUtilities`Control`PackagePrivate`head, 
             Blank[Symbol]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Catch[
           GeneralUtilities`Control`PackagePrivate`body, 
            GeneralUtilities`PackageScope`CatchFailureTag, 
            GeneralUtilities`PackageScope`CatchFailureAndMessageHandler[
            GeneralUtilities`Control`PackagePrivate`head]]], 
         GeneralUtilities`Quoted[
           GeneralUtilities`CatchFailureAndMessage[
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Catch[
           GeneralUtilities`Control`PackagePrivate`body, 
            GeneralUtilities`PackageScope`CatchFailureTag, 
            GeneralUtilities`PackageScope`CatchFailureAndMessageHandler[
            GeneralUtilities`$LHSHead]]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`CatchFailureAsMessage] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`CatchFailureAsMessage[
            Pattern[GeneralUtilities`Control`PackagePrivate`head, 
             Blank[Symbol]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Catch[
           GeneralUtilities`Control`PackagePrivate`body, 
            GeneralUtilities`PackageScope`CatchFailureTag, 
            GeneralUtilities`PackageScope`CatchFailureAsMessageHandler[
            GeneralUtilities`Control`PackagePrivate`head]]], 
         GeneralUtilities`Quoted[
           GeneralUtilities`CatchFailureAsMessage[
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Catch[
           GeneralUtilities`Control`PackagePrivate`body, 
            GeneralUtilities`PackageScope`CatchFailureTag, 
            GeneralUtilities`PackageScope`CatchFailureAsMessageHandler[
            GeneralUtilities`$LHSHead]]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`CollectTo] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`CollectTo[
            Pattern[GeneralUtilities`Control`PackagePrivate`syms, {
              BlankSequence[Symbol]}], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mCollectTo[
          GeneralUtilities`Control`PackagePrivate`syms, 
           GeneralUtilities`Control`PackagePrivate`body], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`ConditionalBody] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`ConditionalBody[
            Pattern[GeneralUtilities`Control`PackagePrivate`specs, 
             BlankSequence[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> 
         Block[{GeneralUtilities`Control`PackagePrivate`hspecs, 
            GeneralUtilities`Control`PackagePrivate`pairs, 
            GeneralUtilities`Control`PackagePrivate`hbody}, 
           GeneralUtilities`Control`PackagePrivate`hbody = 
            HoldComplete[GeneralUtilities`Control`PackagePrivate`body]; 
           GeneralUtilities`Control`PackagePrivate`hspecs = 
            HoldComplete[GeneralUtilities`Control`PackagePrivate`specs]; If[
             Not[
              EvenQ[
               Length[GeneralUtilities`Control`PackagePrivate`hspecs]]], 
             GeneralUtilities`MacroPanic[
             "must be an odd number of arguments"]]; 
           GeneralUtilities`Control`PackagePrivate`pairs = 
            Partition[GeneralUtilities`Control`PackagePrivate`hspecs, 2]; 
           GeneralUtilities`Control`PackagePrivate`assembleCB[
             If[
              FreeQ[
              GeneralUtilities`Control`PackagePrivate`hbody, 
               GeneralUtilities`$LHS], GeneralUtilities`$LHSHead, 
              GeneralUtilities`$LHS], 
             Part[GeneralUtilities`Control`PackagePrivate`pairs, All, 1], 
             Replace[
              Part[GeneralUtilities`Control`PackagePrivate`pairs, All, 2], 
              Pattern[GeneralUtilities`Control`PackagePrivate`s, 
                Blank[String]] :> {
               GeneralUtilities`Control`PackagePrivate`s}, {1}], 
             ReplaceAll[
             GeneralUtilities`Control`PackagePrivate`hbody, 
              GeneralUtilities`$AbortBody -> Fail]]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`ContainsQ] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`ContainsQ[
            Pattern[GeneralUtilities`Control`PackagePrivate`e, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`patt, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Not[
            FreeQ[
            GeneralUtilities`Control`PackagePrivate`e, 
             GeneralUtilities`Control`PackagePrivate`patt]]], 
         GeneralUtilities`Quoted[
           GeneralUtilities`ContainsQ[
            Pattern[GeneralUtilities`Control`PackagePrivate`patt, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           RightComposition[
            FreeQ[GeneralUtilities`Control`PackagePrivate`patt], Not]], 
         Blank[] :> GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`DoWhile] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`DoWhile[
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`test, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           While[
           GeneralUtilities`Control`PackagePrivate`body; 
            GeneralUtilities`Control`PackagePrivate`test]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`Excise] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`Excise[
            BlankNullSequence[]]] :> GeneralUtilities`Quoted[
           Sequence[]], Blank[] :> GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`FlatList] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`FlatList[
            Pattern[GeneralUtilities`Control`PackagePrivate`e, 
             BlankNullSequence[]]]] :> GeneralUtilities`Quoted[
           Developer`ToList[GeneralUtilities`Control`PackagePrivate`e]], 
         Blank[] :> GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`JoinTo] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`JoinTo[
            Pattern[GeneralUtilities`General`PackagePrivate`lhs, 
             Blank[]], 
            Pattern[GeneralUtilities`General`PackagePrivate`list, 
             BlankSequence[]]]] :> 
         GeneralUtilities`Quoted[
          GeneralUtilities`General`PackagePrivate`lhs = 
           Join[GeneralUtilities`General`PackagePrivate`lhs, 
             GeneralUtilities`General`PackagePrivate`list]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`Match] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`Match[
            Pattern[GeneralUtilities`Control`PackagePrivate`args, 
             BlankSequence[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mMatch0[
          GeneralUtilities`Control`PackagePrivate`args], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`Memoized] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`Memoized[
            Optional[
             Pattern[GeneralUtilities`Control`PackagePrivate`test, 
              Blank[]], None], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Except[Method -> Blank[]]]]] :> 
         With[{GeneralUtilities`Control`PackagePrivate`patsym = 
            GeneralUtilities`Control`PackagePrivate`findMemoizedPatternSymbol[
             GeneralUtilities`Control`PackagePrivate`body]}, 
           GeneralUtilities`Control`PackagePrivate`checkMacroHeadNotHeld[
            GeneralUtilities`Memoized]; 
           GeneralUtilities`Control`PackagePrivate`mMemoized[
            GeneralUtilities`Control`PackagePrivate`patsym, 
             GeneralUtilities`Control`PackagePrivate`test, 
             GeneralUtilities`Control`PackagePrivate`body, "SystemCache"]], 
         GeneralUtilities`Quoted[
           GeneralUtilities`Memoized[
            Optional[
             Pattern[GeneralUtilities`Control`PackagePrivate`test, 
              Blank[]], None], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Except[Method -> Blank[]]], Method -> 
            Pattern[GeneralUtilities`Control`PackagePrivate`method, 
              Blank[]]]] :> 
         With[{GeneralUtilities`Control`PackagePrivate`patsym = 
            GeneralUtilities`Control`PackagePrivate`findMemoizedPatternSymbol[
             GeneralUtilities`Control`PackagePrivate`body]}, 
           GeneralUtilities`Control`PackagePrivate`checkMacroHeadNotHeld[
            GeneralUtilities`Memoized]; 
           GeneralUtilities`Control`PackagePrivate`mMemoized[
            GeneralUtilities`Control`PackagePrivate`patsym, 
             GeneralUtilities`Control`PackagePrivate`test, 
             GeneralUtilities`Control`PackagePrivate`body, 
             GeneralUtilities`Control`PackagePrivate`method]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`ModuleScope] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`ModuleScope[
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mScope[
          GeneralUtilities`Control`PackagePrivate`body, Module], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`Scope] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`Scope[
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mScope[
          GeneralUtilities`Control`PackagePrivate`body, Block], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`SetupTeardown] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`SetupTeardown[
            Pattern[GeneralUtilities`Control`PackagePrivate`setup, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`teardown, 
             Blank[]]]] :> GeneralUtilities`Quoted[
           Internal`WithLocalSettings[
            Internal`AllowExceptions[
            GeneralUtilities`Control`PackagePrivate`setup], 
            GeneralUtilities`Control`PackagePrivate`body, 
            Internal`AllowExceptions[
            GeneralUtilities`Control`PackagePrivate`teardown]]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`SpeculativeScope] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`SpeculativeScope[
            Pattern[GeneralUtilities`Control`PackagePrivate`checks, 
             BlankSequence[List]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`body, 
             Blank[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mSpeculativeScope[{
           GeneralUtilities`Control`PackagePrivate`checks}, 
           GeneralUtilities`Control`PackagePrivate`body], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`StringMatch] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`StringMatch[
            Pattern[GeneralUtilities`Control`PackagePrivate`args, 
             BlankSequence[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mStringMatch0[
          GeneralUtilities`Control`PackagePrivate`args], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`Timed] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`Timed[
            Pattern[GeneralUtilities`Performance`PackagePrivate`scope, 
             Blank[]], 
            Pattern[GeneralUtilities`Performance`PackagePrivate`e, 
             Blank[]]]] :> GeneralUtilities`Performance`PackagePrivate`mTimed[
           Labeled[
           GeneralUtilities`$LHSHead, 
            GeneralUtilities`Performance`PackagePrivate`scope], 
           GeneralUtilities`Performance`PackagePrivate`e], 
         GeneralUtilities`Quoted[
           GeneralUtilities`Timed[
            Pattern[GeneralUtilities`Performance`PackagePrivate`e, 
             Blank[]]]] :> 
         GeneralUtilities`Performance`PackagePrivate`mTimed[
          GeneralUtilities`$LHSHead, 
           GeneralUtilities`Performance`PackagePrivate`e], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`UnionTo] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`UnionTo[
            Pattern[GeneralUtilities`General`PackagePrivate`lhs, 
             Blank[]], 
            Pattern[GeneralUtilities`General`PackagePrivate`list, 
             BlankSequence[]]]] :> 
         GeneralUtilities`Quoted[
          GeneralUtilities`General`PackagePrivate`lhs = 
           Union[GeneralUtilities`General`PackagePrivate`lhs, 
             GeneralUtilities`General`PackagePrivate`list]], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`UnpackAssociation] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`UnpackAssociation[
            Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`spec, 
             BlankNullSequence[]], "DefaultFunction" -> 
            Pattern[GeneralUtilities`Control`PackagePrivate`func, 
              Blank[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mUnpack[
          GeneralUtilities`Control`PackagePrivate`assoc, {
           GeneralUtilities`Control`PackagePrivate`spec}, "DefaultFunction", 
           GeneralUtilities`Control`PackagePrivate`func], 
         GeneralUtilities`Quoted[
           GeneralUtilities`UnpackAssociation[
            Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`spec, 
             BlankNullSequence[]], "Default" -> 
            Pattern[GeneralUtilities`Control`PackagePrivate`def, 
              Blank[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mUnpack[
          GeneralUtilities`Control`PackagePrivate`assoc, {
           GeneralUtilities`Control`PackagePrivate`spec}, "Default", 
           GeneralUtilities`Control`PackagePrivate`def], 
         GeneralUtilities`Quoted[
           GeneralUtilities`UnpackAssociation[
            Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
             Blank[]], 
            Pattern[GeneralUtilities`Control`PackagePrivate`spec, 
             BlankNullSequence[]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mUnpack[
          GeneralUtilities`Control`PackagePrivate`assoc, {
           GeneralUtilities`Control`PackagePrivate`spec}, None, None], 
         Blank[] :> GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`UnpackOptions] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`UnpackOptions[
            Pattern[GeneralUtilities`Control`PackagePrivate`syms, 
             BlankNullSequence[Symbol]]]] :> 
         GeneralUtilities`Control`PackagePrivate`mUnpackOptions[{
           GeneralUtilities`Control`PackagePrivate`syms}], Blank[] :> 
         GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[GeneralUtilities`UseMacros] = {
        GeneralUtilities`Quoted[
           GeneralUtilities`UseMacros[
            Pattern[GeneralUtilities`Control`PackagePrivate`e, 
             Blank[]]]] :> 
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`e], 
         Blank[] :> GeneralUtilities`MacroPanic[]}, 
       GeneralUtilities`MacroRules[
         Blank[]] := {}, 
       TagSet[GeneralUtilities`MacroRules, 
        MessageName[GeneralUtilities`MacroRules, "usage"], 
        "\!\(\*RowBox[{\"MacroRules\", \"[\", RowBox[{StyleBox[\"symbol\", \
\"TI\"]}], \"]\"}]\) gives all the macro application rules associated with \
the head \!\(\*StyleBox[\"symbol\", \"TI\"]\)."], 
       Attributes[
        GeneralUtilities`Control`PackagePrivate`mSpeculativeScope] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`mSpeculativeScope[
         Pattern[GeneralUtilities`Control`PackagePrivate`checks, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`tests, 
          GeneralUtilities`Control`PackagePrivate`msgs}, 
         GeneralUtilities`Control`PackagePrivate`tests = 
          Map[GeneralUtilities`Control`PackagePrivate`holdFirst, 
            Unevaluated[GeneralUtilities`Control`PackagePrivate`checks]]; 
         GeneralUtilities`Control`PackagePrivate`msgs = 
          Map[GeneralUtilities`Control`PackagePrivate`holdRest, 
            Unevaluated[GeneralUtilities`Control`PackagePrivate`checks]]; If[
           FreeQ[GeneralUtilities`Control`PackagePrivate`tests, 
            Blank[Set]], 
           If[
            FreeQ[
             HoldComplete[GeneralUtilities`Control`PackagePrivate`body], 
             Blank[Set]], 
            GeneralUtilities`Control`PackagePrivate`makeSpecBody[
             GeneralUtilities`Quoted[
             GeneralUtilities`Control`PackagePrivate`body]], 
            GeneralUtilities`Control`PackagePrivate`makeSpecBody[
             GeneralUtilities`Control`PackagePrivate`mScope[
             GeneralUtilities`Control`PackagePrivate`body]]], 
           GeneralUtilities`ToQuoted[GeneralUtilities`Scope, 
            GeneralUtilities`Quoted[RuleCondition][
             GeneralUtilities`Control`PackagePrivate`makeSpecBody[
             GeneralUtilities`Control`PackagePrivate`body]]]]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`holdFirst] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`holdFirst[{
          Pattern[GeneralUtilities`Control`PackagePrivate`e, 
           Blank[]], 
          BlankNullSequence[]}] := 
       GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`e], 
       Attributes[GeneralUtilities`Control`PackagePrivate`holdRest] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`holdRest[{
          Blank[], 
          Pattern[GeneralUtilities`Control`PackagePrivate`rest, 
           BlankNullSequence[]]}] := 
       GeneralUtilities`Quoted[{
         GeneralUtilities`Control`PackagePrivate`rest}], 
       GeneralUtilities`Control`PackagePrivate`makeSpecBody[
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := 
       GeneralUtilities`ToQuoted[Internal`ConditionalValueBody, 
         If[
          FreeQ[
          GeneralUtilities`Control`PackagePrivate`msgs, 
           GeneralUtilities`$LHS], GeneralUtilities`$LHSHead, 
          GeneralUtilities`$LHS], 
         GeneralUtilities`Control`PackagePrivate`tests, 
         ReplaceAll[GeneralUtilities`Control`PackagePrivate`msgs, Alternatives[
            HoldForm[GeneralUtilities`$LHS], GeneralUtilities`$LHS] -> 
          Internal`ConditionalValueLHS], 
         GeneralUtilities`Control`PackagePrivate`body], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mScope] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`mScope[
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`head, 
          Blank[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`$bodyRules = {
           UpSet -> Set, Blank[GeneralUtilities`ScopeVariable] -> Null}, 
          GeneralUtilities`Control`PackagePrivate`$onExitQueue = 
          Association[], 
          GeneralUtilities`Control`PackagePrivate`$aliasedSymbols = {}, 
          GeneralUtilities`Control`PackagePrivate`mvars, 
          GeneralUtilities`Control`PackagePrivate`res}, 
         GeneralUtilities`Control`PackagePrivate`qbody = ReplaceAll[
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`body], 
            Pattern[GeneralUtilities`Control`PackagePrivate`x, 
              Blank[GeneralUtilities`OnExit]] :> RuleCondition[
              GeneralUtilities`Control`PackagePrivate`makeOnExitFlag[
              GeneralUtilities`Control`PackagePrivate`x]]]; 
         GeneralUtilities`Control`PackagePrivate`mvars = 
          GeneralUtilities`Control`PackagePrivate`findMutatedVariables[
           GeneralUtilities`Control`PackagePrivate`qbody]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          ReplaceAll[
           GeneralUtilities`Control`PackagePrivate`qbody, 
            GeneralUtilities`Control`PackagePrivate`$bodyRules]; 
         If[GeneralUtilities`Control`PackagePrivate`$onExitQueue =!= 
           Association[], GeneralUtilities`Control`PackagePrivate`res = 
           GeneralUtilities`Control`PackagePrivate`subOnExits[
            GeneralUtilities`Control`PackagePrivate`res]]; 
         If[GeneralUtilities`Control`PackagePrivate`mvars === {}, 
           Return[GeneralUtilities`Control`PackagePrivate`res]]; 
         GeneralUtilities`Control`PackagePrivate`res = 
          GeneralUtilities`ToQuoted[
           GeneralUtilities`Control`PackagePrivate`head, 
            GeneralUtilities`Control`PackagePrivate`mvars, 
            GeneralUtilities`Control`PackagePrivate`res]; 
         GeneralUtilities`Control`PackagePrivate`res], 
       TagSet[GeneralUtilities`ScopeVariable, 
        MessageName[GeneralUtilities`ScopeVariable, "usage"], 
        "\!\(\*RowBox[{\"ScopeVariable\", \"[\", \
RowBox[{StyleBox[SubscriptBox[\"var\", StyleBox[\"1\", \"TR\"]], \"TI\"], \",\
\", StyleBox[SubscriptBox[\"var\", StyleBox[\"2\", \"TR\"]], \"TI\"], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"]\"}]\) can be used in a Scope or \
ModuleScope to cause particular variables to be localized.\n\[Bullet] See \
also Scope, ModuleScope."], GeneralUtilities`Control`PackagePrivate`qbody = 
       GeneralUtilities`Quoted[
        DAALLink`PackageScope`safeLibraryInvoke[
          DAALLink`RandomForest`PackagePrivate`exportRFClassifier, 
           DAALLink`PackageScope`getMLEID[
           DAALLink`RandomForest`PackagePrivate`predictor], 
           Association[Classify -> True, Predict -> False][
           DAALLink`RandomForest`PackagePrivate`symbol]]; 
         DAALLink`RandomForest`PackagePrivate`convertForest[
           Association["FeatureIndices" -> IntegerPart[
              DAALLink`PackageScope`safeLibraryInvoke[
              DAALLink`RandomForest`PackagePrivate`rfGetVec, 0]], 
            "NumericalThresholds" -> 
            DAALLink`PackageScope`safeLibraryInvoke[
             DAALLink`RandomForest`PackagePrivate`rfGetVec, 1], "Children" -> 
            IntegerPart[
              DAALLink`PackageScope`safeLibraryInvoke[
              DAALLink`RandomForest`PackagePrivate`rfGetVec, 2]], 
            "LeafValues" -> 
            DAALLink`PackageScope`safeLibraryInvoke[
             DAALLink`RandomForest`PackagePrivate`rfGetVec, 3], "NodeCounts" -> 
            IntegerPart[
              DAALLink`PackageScope`safeLibraryInvoke[
              DAALLink`RandomForest`PackagePrivate`rfGetVec, 4]], 
            "LeafCounts" -> IntegerPart[
              DAALLink`PackageScope`safeLibraryInvoke[
              DAALLink`RandomForest`PackagePrivate`rfGetVec, 5]]], 
           DAALLink`RandomForest`PackagePrivate`symbol]], 
       DAALLink`PackageScope`safeLibraryInvoke[
         Pattern[DAALLink`common`PackagePrivate`func, 
          Blank[]], 
         Pattern[DAALLink`common`PackagePrivate`args, 
          BlankNullSequence[]]] := Replace[
         DAALLink`common`PackagePrivate`func[
         DAALLink`common`PackagePrivate`args], {
         Blank[LibraryFunctionError] :> 
          DAALLink`common`PackagePrivate`DAALPanic[
           DAALLink`common`PackagePrivate`func], Blank[LibraryFunction][
            BlankNullSequence[]] :> 
          GeneralUtilities`ThrowFailure["daallibuneval", 
            Part[DAALLink`common`PackagePrivate`func, 2], {
            DAALLink`common`PackagePrivate`args}]}], 
       DAALLink`common`PackagePrivate`DAALPanic[
         Pattern[DAALLink`common`PackagePrivate`f, 
          Blank[]]] := 
       Module[{DAALLink`common`PackagePrivate`lastError}, 
         DAALLink`common`PackagePrivate`lastError = 
          DAALLink`DAALGetLastError[]; If[
           TrueQ[
            DAALLink`common`PackagePrivate`LibraryFunctionFailureQ[
            DAALLink`common`PackagePrivate`lastError]], 
           DAALLink`common`PackagePrivate`lastError = "Unknown Error"; Null]; 
         GeneralUtilities`ThrowFailure["daalliberr", 
           Part[DAALLink`common`PackagePrivate`f, 2], 
           DAALLink`common`PackagePrivate`lastError]; Null], 
       DAALLink`DAALGetLastError := (DAALLink`DAALGetLastError = 
        LibraryFunctionLoad[
         DAALLink`PackageScope`$DAALLinkLib, "WL_GetLastError", {}, 
          "UTF8String"]), DAALLink`PackageScope`$DAALLinkLib = 
       "C:\\Program Files\\Wolfram \
Research\\Mathematica\\12.0\\SystemFiles\\Links\\DAALLink\\LibraryResources\\\
Windows-x86-64\\DAALLink.dll", 
       DAALLink`RandomForest`PackagePrivate`exportRFClassifier := (
        DAALLink`RandomForest`PackagePrivate`exportRFClassifier = 
        LibraryFunctionLoad[
         DAALLink`PackageScope`$DAALLinkLib, "WL_RandomForestVectorExport", {
          Integer, "Boolean"}, Null]), DAALLink`PackageScope`getMLEID[
         Condition[
          Pattern[DAALLink`common`PackagePrivate`x, 
           Blank[]], 
          ManagedLibraryExpressionQ[DAALLink`common`PackagePrivate`x]]] := 
       ManagedLibraryExpressionID[DAALLink`common`PackagePrivate`x], 
       DAALLink`PackageScope`getMLEID[
         DAALLink`DAALRandomForestPredictor[
          Pattern[DAALLink`RandomForest`PackagePrivate`mle, 
           Blank[]], 
          BlankNullSequence[]]] := 
       ManagedLibraryExpressionID[DAALLink`RandomForest`PackagePrivate`mle], 
       DAALLink`PackageScope`getMLEID[
         DAALLink`DAALNumericTable[
          Pattern[DAALLink`table`PackagePrivate`mle, 
           Blank[]], 
          BlankNullSequence[]]] := 
       ManagedLibraryExpressionID[DAALLink`table`PackagePrivate`mle], 
       DAALLink`PackageScope`getMLEID[
         BlankNullSequence[]] := 
       GeneralUtilities`Panic["Invalid argument to getMLEID"], 
       DAALLink`DAALRandomForestPredictor[
         Blank[], 
         Pattern[DAALLink`RandomForest`PackagePrivate`oobe, 
          Blank[]], 
         BlankSequence[]]["Error"] := 
       DAALLink`RandomForest`PackagePrivate`oobe, 
       TagSetDelayed[DAALLink`DAALRandomForestPredictor, 
        Condition[
         MakeBoxes[
          Pattern[System`Private`T, 
           Blank[DAALLink`DAALRandomForestPredictor]], StandardForm], 
         Refresh[
          Not[BoxForm`UseTextFormattingQ], None]], 
        RuleCondition[
         Replace[
          Unevaluated[System`Private`T], {HoldPattern[
             Pattern[DAALLink`RandomForest`PackagePrivate`e, 
              DAALLink`DAALRandomForestPredictor[
               Pattern[DAALLink`RandomForest`PackagePrivate`mle, 
                Blank[]], 
               Pattern[DAALLink`RandomForest`PackagePrivate`oobe, 
                Blank[]], 
               Pattern[DAALLink`RandomForest`PackagePrivate`task, 
                Blank[]], 
               Pattern[DAALLink`RandomForest`PackagePrivate`class, 
                Blank[]]]]] :> Block[{}, 
             BoxForm`ArrangeSummaryBox[
             DAALLink`DAALRandomForestPredictor, 
              DAALLink`RandomForest`PackagePrivate`e, None, {
               BoxForm`SummaryItem[{"ID: ", 
                 DAALLink`PackageScope`getMLEID[
                 DAALLink`RandomForest`PackagePrivate`mle]}], 
               
               BoxForm`SummaryItem[{
                "Error: ", DAALLink`RandomForest`PackagePrivate`oobe}], 
               
               BoxForm`SummaryItem[{
                "Task: ", DAALLink`RandomForest`PackagePrivate`task}]}, {}, 
              StandardForm]], Blank[] :> Fail}]]], 
       UpSetDelayed[
        Dimensions[
         Pattern[DAALLink`table`PackagePrivate`x, 
          Blank[DAALLink`DAALNumericTable]]], 
        DAALLink`DAALNumericTableDimensions[DAALLink`table`PackagePrivate`x]], 
       TagSetDelayed[DAALLink`DAALNumericTable, 
        Condition[
         MakeBoxes[
          Pattern[System`Private`T, 
           Blank[DAALLink`DAALNumericTable]], StandardForm], 
         Refresh[
          Not[BoxForm`UseTextFormattingQ], None]], 
        RuleCondition[
         Replace[
          Unevaluated[System`Private`T], {HoldPattern[
             Pattern[DAALLink`table`PackagePrivate`e, 
              DAALLink`DAALNumericTable[
               Pattern[DAALLink`table`PackagePrivate`mle, 
                Blank[]], 
               Pattern[DAALLink`table`PackagePrivate`array, 
                Blank[]], 
               Pattern[DAALLink`table`PackagePrivate`type, 
                Blank[]], 
               BlankNullSequence[]]]] :> Block[{}, 
             BoxForm`ArrangeSummaryBox[
             DAALLink`DAALNumericTable, DAALLink`table`PackagePrivate`e, 
              None, {
               BoxForm`SummaryItem[{"ID: ", 
                 DAALLink`PackageScope`getMLEID[
                 DAALLink`table`PackagePrivate`mle]}], 
               BoxForm`SummaryItem[{"Dimensions: ", 
                 DAALLink`PackageScope`safeLibraryInvoke[
                 DAALLink`table`PackagePrivate`numericTableDims, 
                  DAALLink`PackageScope`getMLEID[
                  DAALLink`table`PackagePrivate`mle]]}], 
               
               BoxForm`SummaryItem[{
                "Type: ", DAALLink`table`PackagePrivate`type}]}, {}, 
              StandardForm]], Blank[] :> Fail}]]], 
       DAALLink`DAALNumericTableDimensions[
         Pattern[DAALLink`table`PackagePrivate`x, 
          Blank[DAALLink`DAALNumericTable]]] := Catch[
         DAALLink`PackageScope`safeLibraryInvoke[
         DAALLink`table`PackagePrivate`numericTableDims, 
          DAALLink`PackageScope`getMLEID[DAALLink`table`PackagePrivate`x]], 
         GeneralUtilities`PackageScope`CatchFailureTag, 
         GeneralUtilities`PackageScope`CatchFailureHandler[
         DAALLink`DAALNumericTableDimensions]], 
       DAALLink`table`PackagePrivate`numericTableDims := (
        DAALLink`table`PackagePrivate`numericTableDims = 
        LibraryFunctionLoad[
         DAALLink`PackageScope`$DAALLinkLib, "WL_NumericTableDims", {
          Integer}, {Integer, 1}]), 
       DAALLink`RandomForest`PackagePrivate`convertForest[
         Pattern[DAALLink`RandomForest`PackagePrivate`forest, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`symbol, 
          Blank[]]] := 
       Module[{DAALLink`RandomForest`PackagePrivate`forest2, 
          DAALLink`RandomForest`PackagePrivate`nodecounts, 
          DAALLink`RandomForest`PackagePrivate`leafcounts}, 
         DAALLink`RandomForest`PackagePrivate`forest2 = 
          Part[DAALLink`RandomForest`PackagePrivate`forest, {
            "FeatureIndices", "NumericalThresholds", "Children", 
             "LeafValues"}]; 
         DAALLink`RandomForest`PackagePrivate`nodecounts = 
          DAALLink`RandomForest`PackagePrivate`forest["NodeCounts"]; 
         DAALLink`RandomForest`PackagePrivate`leafcounts = 
          DAALLink`RandomForest`PackagePrivate`forest["LeafCounts"]; 
         DAALLink`RandomForest`PackagePrivate`forest2 = Map[Association, 
            Transpose[
             Map[
             DAALLink`RandomForest`PackagePrivate`splitVectors[#, 
               DAALLink`RandomForest`PackagePrivate`nodecounts, 
               DAALLink`RandomForest`PackagePrivate`leafcounts]& , 
              Normal[DAALLink`RandomForest`PackagePrivate`forest2]]]]; 
         If[DAALLink`RandomForest`PackagePrivate`symbol === Classify, 
           Part[DAALLink`RandomForest`PackagePrivate`forest2, All, 
             "LeafValues"] = 
           Part[DAALLink`RandomForest`PackagePrivate`forest2, All, 
              "LeafValues"] + 1]; 
         DAALLink`RandomForest`PackagePrivate`forest2 = 
          Map[Append[#, {
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
              0}]& , DAALLink`RandomForest`PackagePrivate`forest2]; 
         DAALLink`RandomForest`PackagePrivate`forest2], 
       DAALLink`RandomForest`PackagePrivate`splitVectors[
        Pattern[DAALLink`RandomForest`PackagePrivate`key, 
           Alternatives["FeatureIndices", "NumericalThresholds"]] -> 
         Pattern[DAALLink`RandomForest`PackagePrivate`value, 
           Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`nodecounts, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`leafcounts, 
          Blank[]]] := 
       Thread[DAALLink`RandomForest`PackagePrivate`key -> 
         DAALLink`RandomForest`PackagePrivate`splitf[
          DAALLink`RandomForest`PackagePrivate`value, 0, 
           DAALLink`RandomForest`PackagePrivate`nodecounts]], 
       DAALLink`RandomForest`PackagePrivate`splitVectors[
        "Children" -> Pattern[DAALLink`RandomForest`PackagePrivate`value, 
           Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`nodecounts, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`leafcounts, 
          Blank[]]] := 
       Thread["Children" -> DAALLink`RandomForest`PackagePrivate`splitf[
           Partition[DAALLink`RandomForest`PackagePrivate`value, 2], 0, 
           DAALLink`RandomForest`PackagePrivate`nodecounts]], 
       DAALLink`RandomForest`PackagePrivate`splitVectors[
        "LeafValues" -> Pattern[DAALLink`RandomForest`PackagePrivate`value, 
           Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`nodecounts, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`leafcounts, 
          Blank[]]] := 
       Thread["LeafValues" -> 
         DAALLink`RandomForest`PackagePrivate`splitf[
          DAALLink`RandomForest`PackagePrivate`value, 0, 
           DAALLink`RandomForest`PackagePrivate`leafcounts]], 
       DAALLink`RandomForest`PackagePrivate`splitf[
         Pattern[DAALLink`RandomForest`PackagePrivate`vector, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`initial, 
          Blank[]], {}] := {}, DAALLink`RandomForest`PackagePrivate`splitf[
         Pattern[DAALLink`RandomForest`PackagePrivate`vector, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`initial, 
          Blank[]], 
         Pattern[DAALLink`RandomForest`PackagePrivate`splittings, 
          Blank[]]] := Join[{
          Part[DAALLink`RandomForest`PackagePrivate`vector, 
           Span[
           DAALLink`RandomForest`PackagePrivate`initial + 1, 
            DAALLink`RandomForest`PackagePrivate`initial + 
            First[DAALLink`RandomForest`PackagePrivate`splittings]]]}, 
         DAALLink`RandomForest`PackagePrivate`splitf[
         DAALLink`RandomForest`PackagePrivate`vector, 
          First[DAALLink`RandomForest`PackagePrivate`splittings] + 
          DAALLink`RandomForest`PackagePrivate`initial, 
          Rest[DAALLink`RandomForest`PackagePrivate`splittings]]], 
       DAALLink`RandomForest`PackagePrivate`rfGetVec := (
        DAALLink`RandomForest`PackagePrivate`rfGetVec = 
        LibraryFunctionLoad[
         DAALLink`PackageScope`$DAALLinkLib, "WL_RandomForestGetVector", {
          Integer}, {Real, 1}]), 
       TagSet[GeneralUtilities`OnExit, 
        MessageName[GeneralUtilities`OnExit, "usage"], 
        "\!\(\*RowBox[{\"OnExit\", \"[\", RowBox[{StyleBox[\"cleanup\", \
\"TI\"]}], \"]\"}]\) within a Scope[\[Ellipsis]] will ensure that \
\!\(\*StyleBox[\"cleanup\", \"TI\"]\) is run when the Scope is exited.\n\
\[Bullet] The OnExit[\[Ellipsis]] must be reached before \
\!\(\*StyleBox[\"body\", \"TI\"]\) will be run.\n\[Bullet] The cleanup code \
will be run even if the Scope is exited via a Throw, Return, etc."], 
       Attributes[GeneralUtilities`Control`PackagePrivate`makeOnExitFlag] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`makeOnExitFlag[
         GeneralUtilities`OnExit[
          Pattern[GeneralUtilities`Control`PackagePrivate`e, 
           Blank[]]]] := 
       With[{GeneralUtilities`Control`PackagePrivate`u = Symbol[
            StringJoin["System`Private`ExitFlag$", 
             IntegerString[
              Length[
              GeneralUtilities`Control`PackagePrivate`$onExitQueue]]]]}, 
         AppendTo[
          GeneralUtilities`Control`PackagePrivate`$onExitQueue, 
           GeneralUtilities`Control`PackagePrivate`u -> 
           GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`e]]; 
         GeneralUtilities`Quoted[
          GeneralUtilities`Control`PackagePrivate`u = True]], 
       GeneralUtilities`Control`PackagePrivate`findMutatedVariables[
         Pattern[GeneralUtilities`Control`PackagePrivate`hc, 
          Blank[]]] := DeleteDuplicates[
         Flatten[
          Cases[
           GeneralUtilities`Control`PackagePrivate`removeBoundVariables[
           GeneralUtilities`Control`PackagePrivate`hc], HoldPattern[
             Alternatives[Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
                Blank[]] = Blank[], 
              GeneralUtilities`EchoSet[
               Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
                Blank[]], 
               Blank[]], Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
                Blank[Symbol]] := Blank[], 
              Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
               Blank[GeneralUtilities`ScopeVariable]]]] :> 
           GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
            GeneralUtilities`Control`PackagePrivate`lhs], Infinity, Heads -> 
           True]]], 
       GeneralUtilities`Control`PackagePrivate`removeBoundVariables[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Blank[]]] := 
       ReplaceRepeated[
        GeneralUtilities`Control`PackagePrivate`expr, 
         Pattern[GeneralUtilities`Control`PackagePrivate`scoped, 
           Alternatives[Block, Module, With, Function, Do, Table][
            BlankNullSequence[]]] :> RuleCondition[
           GeneralUtilities`Control`PackagePrivate`rewriteScope[
           GeneralUtilities`Control`PackagePrivate`scoped]]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`rewriteScope] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`rewriteScope[
         Alternatives[Do, Table][
          Pattern[GeneralUtilities`Control`PackagePrivate`body, 
           Blank[]], 
          Pattern[GeneralUtilities`Control`PackagePrivate`iterators, 
           BlankNullSequence[]]]] := ReplaceAll[
         HoldComplete[GeneralUtilities`Control`PackagePrivate`body], 
         GeneralUtilities`Control`PackagePrivate`makePatt[
          GeneralUtilities`Control`PackagePrivate`getIterVar, {
           GeneralUtilities`Control`PackagePrivate`iterators}] -> Null], 
       GeneralUtilities`Control`PackagePrivate`rewriteScope[
         Blank[][
          Pattern[GeneralUtilities`Control`PackagePrivate`vars, 
           Blank[]], 
          Pattern[GeneralUtilities`Control`PackagePrivate`rest, 
           BlankSequence[]]]] := ReplaceAll[
         HoldComplete[GeneralUtilities`Control`PackagePrivate`rest], 
         GeneralUtilities`Control`PackagePrivate`makePatt[
          GeneralUtilities`Control`PackagePrivate`getVar, 
           GeneralUtilities`Control`PackagePrivate`vars] -> Null], 
       GeneralUtilities`Control`PackagePrivate`rewriteScope[
         Blank[][
          Pattern[GeneralUtilities`Control`PackagePrivate`args, 
           BlankNullSequence[]]]] := 
       HoldComplete[GeneralUtilities`Control`PackagePrivate`args], 
       Attributes[GeneralUtilities`Control`PackagePrivate`makePatt] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`makePatt[
         Pattern[GeneralUtilities`Control`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[List]]] := Apply[Alternatives, 
         DeleteCases[GeneralUtilities`Control`PackagePrivate`DUMMY][
          Map[GeneralUtilities`Control`PackagePrivate`f, 
           Unevaluated[GeneralUtilities`Control`PackagePrivate`e]]]], 
       GeneralUtilities`Control`PackagePrivate`makePatt[
         Pattern[GeneralUtilities`Control`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`f[
        GeneralUtilities`Control`PackagePrivate`e], 
       Attributes[GeneralUtilities`Control`PackagePrivate`getIterVar] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`getIterVar[{
          Pattern[GeneralUtilities`Control`PackagePrivate`i, 
           Blank[Symbol]], 
          BlankSequence[]}] := GeneralUtilities`Control`PackagePrivate`i, 
       GeneralUtilities`Control`PackagePrivate`getIterVar[
         Blank[]] := GeneralUtilities`Control`PackagePrivate`DUMMY, 
       Attributes[GeneralUtilities`Control`PackagePrivate`getVar] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`getVar[
         Alternatives[Set, SetDelayed][
          Pattern[GeneralUtilities`Control`PackagePrivate`a, 
           Blank[]], 
          Blank[]]] := HoldPattern[GeneralUtilities`Control`PackagePrivate`a],
        GeneralUtilities`Control`PackagePrivate`getVar[
         Pattern[GeneralUtilities`Control`PackagePrivate`a, 
          Blank[Symbol]]] := 
       HoldPattern[GeneralUtilities`Control`PackagePrivate`a], 
       GeneralUtilities`Control`PackagePrivate`getVar[
         Blank[]] := GeneralUtilities`Control`PackagePrivate`DUMMY, 
       Attributes[GeneralUtilities`EchoSet] = {HoldFirst}, 
       GeneralUtilities`EchoSet[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`var, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`value, 
          Blank[]]] := (If[$Notebooks, 
          GeneralUtilities`Debugging`PackagePrivate`cellPrint[
           RawBoxes[
            RowBox[{
              GeneralUtilities`MakeCodeBoxes[
              GeneralUtilities`Debugging`PackagePrivate`var], " ", 
              StyleBox["=", Orange, Bold], " ", 
              GeneralUtilities`PackageScope`makeInputPasteBox[
              GeneralUtilities`Debugging`PackagePrivate`value]}]]], 
          GeneralUtilities`Debugging`PackagePrivate`consolePrint[
            Unevaluated[
            GeneralUtilities`Debugging`PackagePrivate`var = 
             InputForm[GeneralUtilities`Debugging`PackagePrivate`value]]]; 
          Null]; GeneralUtilities`Debugging`PackagePrivate`var = 
         GeneralUtilities`Debugging`PackagePrivate`value), 
       TagSet[GeneralUtilities`EchoSet, 
        MessageName[GeneralUtilities`EchoSet, "usage"], 
        "\!\(\*RowBox[{\"EchoSet\", \"[\", RowBox[{StyleBox[\"sym\", \"TI\"], \
\",\",  StyleBox[\"value\", \"TI\"]}], \"]\"}]\) sets \!\(\*StyleBox[\"sym\", \
\"TI\"]\) to \!\(\*StyleBox[\"value\", \"TI\"]\), while simultaneously \
printing \"\!\(\*StyleBox[\"sym\", \"TI\"]\) = \!\(\*StyleBox[\"value\", \"TI\
\"]\)\".\n\[Bullet] See also EchoRaw, EchoHold, EchoGroup, EchoSequence, \
EchoTiming, Tap, EchoSymbol, EchoTag, DisableEcho."], Condition[
         GeneralUtilities`Debugging`PackagePrivate`cellPrint[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
           Blank[]]], GeneralUtilities`Debugging`PackagePrivate`$ShouldEcho] := 
       GeneralUtilities`Debugging`PackagePrivate`rawEchoPrint[
         ToBoxes[GeneralUtilities`Debugging`PackagePrivate`expr]], Condition[
         GeneralUtilities`Debugging`PackagePrivate`cellPrint[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`label, 
           Blank[]], 
          Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
           Blank[]]], GeneralUtilities`Debugging`PackagePrivate`$ShouldEcho] := 
       GeneralUtilities`Debugging`PackagePrivate`rawEchoPrint[
         RowBox[{
           StyleBox[
            TagBox[
             ToBoxes[GeneralUtilities`Debugging`PackagePrivate`label], 
             "EchoLabel"], ShowStringCharacters -> False], 
           ToBoxes[GeneralUtilities`Debugging`PackagePrivate`expr]}]], 
       GeneralUtilities`Debugging`PackagePrivate`$ShouldEcho := (
        If[AbsoluteTime[] - 
           GeneralUtilities`Debugging`PackagePrivate`$LastEchoTime > 1, 
          GeneralUtilities`Debugging`PackagePrivate`$LastEchoTime = 
           AbsoluteTime[]; 
          GeneralUtilities`Debugging`PackagePrivate`$EchoCount = 0; Null]; 
        Increment[GeneralUtilities`Debugging`PackagePrivate`$EchoCount]; 
        Which[GeneralUtilities`Debugging`PackagePrivate`$EchoCount <= 
          GeneralUtilities`$MaximumEchoRate, True, 
          GeneralUtilities`Debugging`PackagePrivate`$EchoCount - 1 === 
          GeneralUtilities`$MaximumEchoRate, 
          Print["Maximum echo rate exceeded, change $MaximumEchoRate to \
adjust."]; False, True, False]), 
       GeneralUtilities`Debugging`PackagePrivate`$LastEchoTime = 0, 
       GeneralUtilities`Debugging`PackagePrivate`$EchoCount = 0, 
       GeneralUtilities`$MaximumEchoRate = 10, 
       GeneralUtilities`Debugging`PackagePrivate`rawEchoPrint[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`boxes, 
          Blank[]]] := CellPrint[
         Cell[
          BoxData[GeneralUtilities`Debugging`PackagePrivate`boxes], "Echo", 
          ShowStringCharacters -> True, 
          CellMargins -> {{
            Inherited + GeneralUtilities`Debugging`PackagePrivate`$echolevel, 
             Inherited}, {Inherited, Inherited}}]], 
       GeneralUtilities`Debugging`PackagePrivate`$echolevel = 0, 
       Attributes[GeneralUtilities`MakeCodeBoxes] = {HoldAllComplete}, 
       GeneralUtilities`MakeCodeBoxes[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          BlankNullSequence[]]] := GeneralUtilities`PackageScope`CodeStyleBox[
         GeneralUtilities`MakePlainBoxes[
         GeneralUtilities`Debugging`PackagePrivate`e]], Condition[
         GeneralUtilities`Debugging`PackagePrivate`consolePrint[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
           Blank[]]], GeneralUtilities`Debugging`PackagePrivate`$ShouldEcho] := 
       Print[GeneralUtilities`Debugging`PackagePrivate`$echoPrefix, 
         Unevaluated[
          InputForm[GeneralUtilities`Debugging`PackagePrivate`expr]]], 
       Condition[
         GeneralUtilities`Debugging`PackagePrivate`consolePrint[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`label, 
           Blank[]], 
          Pattern[GeneralUtilities`Debugging`PackagePrivate`expr, 
           Blank[]]], GeneralUtilities`Debugging`PackagePrivate`$ShouldEcho] := 
       Print[GeneralUtilities`Debugging`PackagePrivate`$echoPrefix, 
         GeneralUtilities`Debugging`PackagePrivate`label, ": ", 
         Unevaluated[
          InputForm[GeneralUtilities`Debugging`PackagePrivate`expr]]], 
       GeneralUtilities`Debugging`PackagePrivate`$echoPrefix := ">> ", 
       Attributes[
        GeneralUtilities`Control`PackagePrivate`getMutatedVariables] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
        Null] := {}, 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         Pattern[GeneralUtilities`Control`PackagePrivate`list, 
          Blank[List]]] := 
       Map[GeneralUtilities`Control`PackagePrivate`getMutatedVariables, 
         Unevaluated[GeneralUtilities`Control`PackagePrivate`list]], 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         GeneralUtilities`ScopeVariable[
          Pattern[GeneralUtilities`Control`PackagePrivate`vars, 
           BlankSequence[Symbol]]]] := Map[GeneralUtilities`Quoted, 
         Unevaluated[{GeneralUtilities`Control`PackagePrivate`vars}]], 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         Derivative[
          Blank[]][
          Pattern[GeneralUtilities`Control`PackagePrivate`e, 
           Blank[]]]] := 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
        GeneralUtilities`Control`PackagePrivate`e], 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         GeneralUtilities`Quoted[
          Pattern[GeneralUtilities`Control`PackagePrivate`q, 
           Blank[]]]] := 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
        GeneralUtilities`Control`PackagePrivate`q], 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[Symbol]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`qsym = 
          GeneralUtilities`Quoted[
           GeneralUtilities`Control`PackagePrivate`sym]}, 
         If[
          MemberQ[
          GeneralUtilities`$LHSPatternSymbols, 
           GeneralUtilities`Control`PackagePrivate`qsym], 
          GeneralUtilities`Control`PackagePrivate`recordAlias[
          GeneralUtilities`Control`PackagePrivate`qsym, 
           GeneralUtilities`Control`PackagePrivate`sym], 
          GeneralUtilities`Control`PackagePrivate`qsym]], 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[Symbol]][
          BlankNullSequence[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`qsym = 
          GeneralUtilities`Quoted[
           GeneralUtilities`Control`PackagePrivate`sym]}, 
         If[
          MemberQ[
          GeneralUtilities`$LHSPatternSymbols, 
           GeneralUtilities`Control`PackagePrivate`qsym], 
          GeneralUtilities`Control`PackagePrivate`recordAlias[
          GeneralUtilities`Control`PackagePrivate`qsym, 
           GeneralUtilities`Control`PackagePrivate`sym], {}]], 
       GeneralUtilities`Control`PackagePrivate`getMutatedVariables[
         BlankNullSequence[]] := {}, Attributes[Derivative] = {NHoldAll}, 
       Attributes[GeneralUtilities`Control`PackagePrivate`recordAlias] = {
        HoldRest}, GeneralUtilities`Control`PackagePrivate`recordAlias[
         Pattern[GeneralUtilities`Control`PackagePrivate`qsym, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := If[
         MemberQ[
         GeneralUtilities`Control`PackagePrivate`$aliasedSymbols, 
          GeneralUtilities`Control`PackagePrivate`qsym], {}, 
         AppendTo[
          GeneralUtilities`Control`PackagePrivate`$aliasedSymbols, 
           GeneralUtilities`Control`PackagePrivate`qsym]; 
         With[{GeneralUtilities`Control`PackagePrivate`alias = 
            GeneralUtilities`Control`PackagePrivate`toAliasedSymbol[
             GeneralUtilities`Control`PackagePrivate`sym]}, 
           AppendTo[
            GeneralUtilities`Control`PackagePrivate`$bodyRules, 
             HoldPattern[GeneralUtilities`Control`PackagePrivate`sym] :> 
             GeneralUtilities`Control`PackagePrivate`alias]; 
           GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`alias = 
             GeneralUtilities`Control`PackagePrivate`sym]]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`toAliasedSymbol] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`toAliasedSymbol[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := 
       With[{GeneralUtilities`Control`PackagePrivate`name = StringJoin[
            GeneralUtilities`QualifiedSymbolName[
            GeneralUtilities`Control`PackagePrivate`sym], "$"]}, 
         Clear[GeneralUtilities`Control`PackagePrivate`name]; 
         Symbol[GeneralUtilities`Control`PackagePrivate`name]], 
       GeneralUtilities`Control`PackagePrivate`subOnExits[
         GeneralUtilities`Quoted[
          Pattern[GeneralUtilities`Control`PackagePrivate`body, 
           Blank[]]]] := 
       With[{GeneralUtilities`Control`PackagePrivate`sets = Apply[
            GeneralUtilities`Quoted[Set], 
            Append[
             Keys[GeneralUtilities`Control`PackagePrivate`$onExitQueue], 
             False]], GeneralUtilities`Control`PackagePrivate`teardowns = 
          GeneralUtilities`Quoted[Internal`AllowExceptions][
            KeyValueMap[
            If, GeneralUtilities`Control`PackagePrivate`$onExitQueue]]}, 
         GeneralUtilities`Quoted[
          Internal`WithLocalSettings[
          GeneralUtilities`Control`PackagePrivate`sets, 
           GeneralUtilities`Control`PackagePrivate`body, 
           GeneralUtilities`Control`PackagePrivate`teardowns]]], 
       GeneralUtilities`Control`PackagePrivate`assembleCB[
         Pattern[GeneralUtilities`Control`PackagePrivate`lhs, 
          Blank[]], 
         HoldComplete[
          Pattern[GeneralUtilities`Control`PackagePrivate`tests, 
           BlankSequence[]]], 
         HoldComplete[
          Pattern[GeneralUtilities`Control`PackagePrivate`msgs, 
           BlankSequence[]]], 
         HoldComplete[
          Pattern[GeneralUtilities`Control`PackagePrivate`body, 
           Blank[]]]] := GeneralUtilities`Quoted[
         Internal`ConditionalValueBody[
         GeneralUtilities`Control`PackagePrivate`lhs, {
          GeneralUtilities`Control`PackagePrivate`tests}, {
          GeneralUtilities`Control`PackagePrivate`msgs}, 
          GeneralUtilities`Control`PackagePrivate`body]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mMatch0] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`mMatch0[
         Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
          Except[
           Blank[RuleDelayed]]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`rest, 
          BlankSequence[]]] := Insert[
         GeneralUtilities`Control`PackagePrivate`mMatch1[
         GeneralUtilities`Control`PackagePrivate`rest], 
         Unevaluated[GeneralUtilities`Control`PackagePrivate`expr], {1, 1}], 
       GeneralUtilities`Control`PackagePrivate`mMatch0[
         Pattern[GeneralUtilities`Control`PackagePrivate`rest, 
          BlankSequence[]]] := 
       GeneralUtilities`Control`PackagePrivate`mMatch1[
        GeneralUtilities`Control`PackagePrivate`rest], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mMatch1] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`mMatch1[
         Pattern[GeneralUtilities`Control`PackagePrivate`patts, 
          BlankSequence[RuleDelayed]]] := If[GeneralUtilities`$DebugMode, 
         GeneralUtilities`Quoted[
          
          Replace[{
           GeneralUtilities`Control`PackagePrivate`patts, 
            Pattern[System`Private`T, 
              Blank[]] :> 
            GeneralUtilities`UnmatchedCase[
             GeneralUtilities`Match, System`Private`T]}]], 
         GeneralUtilities`Quoted[
          
          Replace[{
           GeneralUtilities`Control`PackagePrivate`patts, Blank[] :> 
            GeneralUtilities`UnmatchedCase[]}]]], 
       GeneralUtilities`Control`PackagePrivate`mMatch1[
         Pattern[GeneralUtilities`Control`PackagePrivate`patts, 
          BlankSequence[RuleDelayed]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`last, 
          Blank[]]] := GeneralUtilities`Quoted[
         Replace[{
          GeneralUtilities`Control`PackagePrivate`patts, Blank[] :> 
           GeneralUtilities`Control`PackagePrivate`last}]], 
       GeneralUtilities`Control`PackagePrivate`mMatch1[
         BlankNullSequence[]] := GeneralUtilities`MacroPanic[], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mUnpack] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`mUnpack[
         Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`specs, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`deftype, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`def, 
          Blank[]]] := 
       Block[{$ContextPath, GeneralUtilities`Control`PackagePrivate`syms, 
          GeneralUtilities`Control`PackagePrivate`keys}, $ContextPath = {
            If[
             Developer`HoldSymbolQ[
             GeneralUtilities`Control`PackagePrivate`assoc], 
             Context[GeneralUtilities`Control`PackagePrivate`assoc], 
             Nothing]}; {
           GeneralUtilities`Control`PackagePrivate`syms, 
            GeneralUtilities`Control`PackagePrivate`keys} = Transpose[
            GeneralUtilities`HoldMap[
            GeneralUtilities`Control`PackagePrivate`unpacker, 
             GeneralUtilities`Control`PackagePrivate`specs]]; 
         With[{GeneralUtilities`Control`PackagePrivate`syms = 
            GeneralUtilities`Control`PackagePrivate`syms, 
            GeneralUtilities`Control`PackagePrivate`keys = 
            GeneralUtilities`Control`PackagePrivate`keys}, 
           Switch[GeneralUtilities`Control`PackagePrivate`deftype, None, 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`syms = 
             GeneralUtilities`LookupOr[
              GeneralUtilities`Control`PackagePrivate`assoc, 
               GeneralUtilities`Control`PackagePrivate`keys, 
               GeneralUtilities`Panic[
               "UnpackAssociation", 
                "Key `` is not present in assoc. Available keys: ``", #, 
                Keys[GeneralUtilities`Control`PackagePrivate`assoc]]& ]], 
            "Default", 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`syms = 
             Lookup[GeneralUtilities`Control`PackagePrivate`assoc, 
               GeneralUtilities`Control`PackagePrivate`keys, 
               GeneralUtilities`Control`PackagePrivate`def]], 
            "DefaultFunction", 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`syms = 
             GeneralUtilities`LookupOr[
              GeneralUtilities`Control`PackagePrivate`assoc, 
               GeneralUtilities`Control`PackagePrivate`keys, 
               GeneralUtilities`Control`PackagePrivate`def]]]]], 
       Attributes[GeneralUtilities`HoldMap] = {HoldRest, SequenceHold}, 
       GeneralUtilities`HoldMap[
         Verbatim[Function][
          Pattern[GeneralUtilities`General`PackagePrivate`body, 
           Blank[]]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := GeneralUtilities`General`PackagePrivate`iHoldMap[
         Function[
         Null, GeneralUtilities`General`PackagePrivate`body, {HoldFirst}], 
         GeneralUtilities`General`PackagePrivate`list], 
       GeneralUtilities`HoldMap[
         Verbatim[Function][
          Pattern[GeneralUtilities`General`PackagePrivate`x, 
           Blank[Symbol]], 
          Pattern[GeneralUtilities`General`PackagePrivate`body, 
           Blank[]]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := GeneralUtilities`General`PackagePrivate`iHoldMap[
         Function[
         GeneralUtilities`General`PackagePrivate`x, 
          GeneralUtilities`General`PackagePrivate`body, {HoldFirst}], 
         GeneralUtilities`General`PackagePrivate`list], 
       GeneralUtilities`HoldMap[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := 
       GeneralUtilities`General`PackagePrivate`iHoldMap[
        GeneralUtilities`General`PackagePrivate`f, 
         GeneralUtilities`General`PackagePrivate`list], 
       Attributes[GeneralUtilities`General`PackagePrivate`iHoldMap] = {
        HoldAllComplete}, GeneralUtilities`General`PackagePrivate`iHoldMap[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[Association]]] := If[
         AssociationQ[
          Unevaluated[GeneralUtilities`General`PackagePrivate`list]], 
         Map[
         GeneralUtilities`General`PackagePrivate`f, 
          GeneralUtilities`General`PackagePrivate`list], 
         Association[
          GeneralUtilities`General`PackagePrivate`iMapAssoc[
          GeneralUtilities`General`PackagePrivate`f, 
           GeneralUtilities`General`PackagePrivate`list]]], 
       GeneralUtilities`General`PackagePrivate`iHoldMap[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`General`PackagePrivate`list, 
          Blank[]]] := Map[GeneralUtilities`General`PackagePrivate`f, 
         Unevaluated[GeneralUtilities`General`PackagePrivate`list]], 
       Attributes[GeneralUtilities`General`PackagePrivate`iMapAssoc] = {
        HoldAllComplete}, GeneralUtilities`General`PackagePrivate`iMapAssoc[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], 
         Association[
          Pattern[GeneralUtilities`General`PackagePrivate`args, 
           BlankNullSequence[]]]] := 
       GeneralUtilities`General`PackagePrivate`iMapAssoc[
        GeneralUtilities`General`PackagePrivate`f, {
         GeneralUtilities`General`PackagePrivate`args}], 
       GeneralUtilities`General`PackagePrivate`iMapAssoc[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], {Pattern[GeneralUtilities`General`PackagePrivate`key, 
            Blank[]] -> Pattern[GeneralUtilities`General`PackagePrivate`val, 
            Blank[]], 
          Pattern[GeneralUtilities`General`PackagePrivate`rest, 
           BlankNullSequence[]]}] := Prepend[
         GeneralUtilities`General`PackagePrivate`iMapAssoc[
         GeneralUtilities`General`PackagePrivate`f, {
          GeneralUtilities`General`PackagePrivate`rest}], 
         GeneralUtilities`General`PackagePrivate`key -> 
         GeneralUtilities`General`PackagePrivate`f[
          GeneralUtilities`General`PackagePrivate`val]], 
       GeneralUtilities`General`PackagePrivate`iMapAssoc[
         Pattern[GeneralUtilities`General`PackagePrivate`f, 
          Blank[]], {}] := {}, 
       Attributes[GeneralUtilities`Control`PackagePrivate`unpacker] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`unpacker[
         Pattern[GeneralUtilities`Control`PackagePrivate`str, 
          Blank[String]]] := {
         GeneralUtilities`Control`PackagePrivate`lowerCaseSymbol[
         GeneralUtilities`Control`PackagePrivate`str], 
         GeneralUtilities`Control`PackagePrivate`str}, 
       GeneralUtilities`Control`PackagePrivate`unpacker[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[Symbol]]] := {
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`sym], 
         GeneralUtilities`Control`PackagePrivate`upperCaseString[
          SymbolName[
           Unevaluated[GeneralUtilities`Control`PackagePrivate`sym]]]}, 
       GeneralUtilities`Control`PackagePrivate`unpacker[
         Verbatim[Pattern][
          Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
           Blank[Symbol]], 
          Pattern[GeneralUtilities`Control`PackagePrivate`str, 
           Blank[String]]]] := {
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`sym],
          GeneralUtilities`Control`PackagePrivate`str}, 
       GeneralUtilities`Control`PackagePrivate`unpacker[
        Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
           Blank[Symbol]] -> 
         Pattern[GeneralUtilities`Control`PackagePrivate`str, 
           Blank[String]]] := {
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`sym],
          GeneralUtilities`Control`PackagePrivate`str}, 
       GeneralUtilities`Control`PackagePrivate`unpacker[
         Blank[]] := GeneralUtilities`MacroPanic[], 
       GeneralUtilities`Control`PackagePrivate`lowerCaseSymbol[
         Pattern[GeneralUtilities`Control`PackagePrivate`str, 
          Blank[String]]] := If[
         StringContainsQ[GeneralUtilities`Control`PackagePrivate`str, "_"], 
         GeneralUtilities`Control`PackagePrivate`lowerCaseSymbol[
          StringReplace[
          GeneralUtilities`Control`PackagePrivate`str, StringExpression["_", 
             Pattern[
             GeneralUtilities`Control`PackagePrivate`a, WordCharacter]] :> 
           ToUpperCase[GeneralUtilities`Control`PackagePrivate`a]]], 
         If[$ContextPath === {}, 
           GeneralUtilities`MacroPanic[]]; ToExpression[
           StringJoin[
            ToLowerCase[
             StringTake[GeneralUtilities`Control`PackagePrivate`str, 1]], 
            StringDrop[GeneralUtilities`Control`PackagePrivate`str, 1]], 
           InputForm, GeneralUtilities`Quoted]], 
       GeneralUtilities`Control`PackagePrivate`upperCaseString[
         Pattern[GeneralUtilities`Control`PackagePrivate`str, 
          Blank[String]]] := StringJoin[
         ToUpperCase[
          StringTake[GeneralUtilities`Control`PackagePrivate`str, 1]], 
         StringDrop[GeneralUtilities`Control`PackagePrivate`str, 1]], 
       GeneralUtilities`LookupOr[
         Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`keys, 
          Blank[]]] := 
       GeneralUtilities`LookupOr[
        GeneralUtilities`Control`PackagePrivate`assoc, 
         GeneralUtilities`Control`PackagePrivate`keys, GeneralUtilities`Panic[
         "KeyMissing", "Key `` missing.", #]& ], GeneralUtilities`LookupOr[
         Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
          Blank[Association]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`keys, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`func, 
          Blank[]]] := 
       Lookup[GeneralUtilities`Control`PackagePrivate`assoc, 
         GeneralUtilities`Control`PackagePrivate`keys, 
         Return[
          GeneralUtilities`Control`PackagePrivate`iLookupOr[
          GeneralUtilities`Control`PackagePrivate`assoc, 
           GeneralUtilities`Control`PackagePrivate`keys, 
           GeneralUtilities`Control`PackagePrivate`func], Lookup]], 
       TagSet[GeneralUtilities`LookupOr, 
        MessageName[GeneralUtilities`LookupOr, "usage"], 
        "\!\(\*RowBox[{\"LookupOr\", \"[\", RowBox[{StyleBox[\"assoc\", \
\"TI\"], \",\",  StyleBox[\"keys\", \"TI\"], \",\",  StyleBox[\"func\", \
\"TI\"]}], \"]\"}]\) looks up a set of \!\(\*StyleBox[\"keys\", \"TI\"]\), \
calling \!\(\*StyleBox[\"func\", \"TI\"]\)[\!\(\*StyleBox[\"key\", \"TI\"]\)] \
if a key is missing from \!\(\*StyleBox[\"assoc\", \"TI\"]\)."], 
       GeneralUtilities`Control`PackagePrivate`iLookupOr[
         Pattern[GeneralUtilities`Control`PackagePrivate`assoc, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`keys, 
          Blank[List]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`func, 
          Blank[]]] := Table[
         Lookup[
         GeneralUtilities`Control`PackagePrivate`assoc, 
          GeneralUtilities`Control`PackagePrivate`key, 
          GeneralUtilities`Control`PackagePrivate`func[
          GeneralUtilities`Control`PackagePrivate`key]], {
         GeneralUtilities`Control`PackagePrivate`key, 
          GeneralUtilities`Control`PackagePrivate`keys}], 
       GeneralUtilities`Control`PackagePrivate`iLookupOr[
         Blank[], 
         Pattern[GeneralUtilities`Control`PackagePrivate`key, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`func, 
          Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`func[
        GeneralUtilities`Control`PackagePrivate`key], 
       Attributes[
        GeneralUtilities`Control`PackagePrivate`findMemoizedPatternSymbol] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`findMemoizedPatternSymbol[
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := 
       Block[{GeneralUtilities`Control`PackagePrivate`patts}, 
         GeneralUtilities`Control`PackagePrivate`patts = 
          Apply[HoldPattern, GeneralUtilities`$LHSPatternSymbols, {1}]; 
         GeneralUtilities`Control`PackagePrivate`patts = DeleteDuplicates[
            Cases[
             Unevaluated[GeneralUtilities`Control`PackagePrivate`body], 
             Apply[
             Alternatives, GeneralUtilities`Control`PackagePrivate`patts], 
             Infinity]]; 
         If[Length[GeneralUtilities`Control`PackagePrivate`patts] > 1, 
           GeneralUtilities`MacroPanic[
            MessageName[GeneralUtilities`Memoized, "onearg"], 
            Apply[
            HoldForm, GeneralUtilities`Control`PackagePrivate`patts, {1}]]]; 
         First[GeneralUtilities`Control`PackagePrivate`patts, None]], 
       GeneralUtilities`Control`PackagePrivate`checkMacroHeadNotHeld[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := If[
         Apply[GeneralUtilities`HeldFunctionQ, GeneralUtilities`$LHSHead], 
         GeneralUtilities`MacroPanic[
          MessageName[
          GeneralUtilities`Control`PackagePrivate`sym, 
           GeneralUtilities`Control`PackagePrivate`holdmacro], 
          GeneralUtilities`Control`PackagePrivate`sym, 
          Apply[HoldForm, GeneralUtilities`$LHSHead]]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mMemoized] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`mMemoized[
         Pattern[GeneralUtilities`Control`PackagePrivate`patsym, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], "Association"] := 
       With[{GeneralUtilities`Control`PackagePrivate`cachedsymname = 
          StringJoin[
            Apply[
            GeneralUtilities`Control`PackagePrivate`toMemoizedSymbolName, 
             GeneralUtilities`$LHSHead], "$Association"]}, 
         ClearAll[GeneralUtilities`Control`PackagePrivate`cachedsymname]; 
         Symbol[GeneralUtilities`Control`PackagePrivate`cachedsymname]; 
         With[{GeneralUtilities`Control`PackagePrivate`cachedsym = 
            Symbol[GeneralUtilities`Control`PackagePrivate`cachedsymname]}, 
           GeneralUtilities`Control`PackagePrivate`cachedsym = Association[]; 
           GeneralUtilities`Quoted[
             Lookup[GeneralUtilities`Control`PackagePrivate`cachedsym, 
              Key[GeneralUtilities`Control`PackagePrivate`patsym], 
              GeneralUtilities`Control`PackagePrivate`cachedsym[
               GeneralUtilities`Control`PackagePrivate`patsym] = 
              GeneralUtilities`Control`PackagePrivate`body]]]], 
       GeneralUtilities`Control`PackagePrivate`mMemoized[None, 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`method, 
          Blank[]]] := 
       Switch[GeneralUtilities`Control`PackagePrivate`method, "Inline", 
         GeneralUtilities`Quoted[
         GeneralUtilities`$LHS = 
          GeneralUtilities`Control`PackagePrivate`body], "SystemCache", 
         GeneralUtilities`Quoted[
          GeneralUtilities`EvaluateCached[
          GeneralUtilities`$LHS, GeneralUtilities`Control`PackagePrivate`test,
            GeneralUtilities`Control`PackagePrivate`body]], 
         Blank[], 
         GeneralUtilities`Control`PackagePrivate`invMethodPanic[
         GeneralUtilities`Control`PackagePrivate`method]], 
       GeneralUtilities`Control`PackagePrivate`mMemoized[
         Pattern[GeneralUtilities`Control`PackagePrivate`patsym, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], "Symbol"] := 
       With[{
         GeneralUtilities`Control`PackagePrivate`cachedsymname = 
          Apply[GeneralUtilities`Control`PackagePrivate`toMemoizedSymbolName, 
            GeneralUtilities`$LHSHead]}, 
         ClearAll[GeneralUtilities`Control`PackagePrivate`cachedsymname]; 
         Symbol[GeneralUtilities`Control`PackagePrivate`cachedsymname]; 
         GeneralUtilities`SetHoldAllComplete[
          GeneralUtilities`Control`PackagePrivate`cachedsymname]; 
         With[{GeneralUtilities`Control`PackagePrivate`cachedsym = 
            Symbol[GeneralUtilities`Control`PackagePrivate`cachedsymname], 
            GeneralUtilities`Control`PackagePrivate`pat = 
            GeneralUtilities`Control`PackagePrivate`makeBlank[
             GeneralUtilities`Control`PackagePrivate`patsym]}, 
           GeneralUtilities`Control`PackagePrivate`MacroSetDelayed[
             GeneralUtilities`Control`PackagePrivate`cachedsym[
             GeneralUtilities`Control`PackagePrivate`pat], 
             GeneralUtilities`Control`PackagePrivate`cachedsym[
               Verbatim[GeneralUtilities`Control`PackagePrivate`patsym]] = 
             GeneralUtilities`Control`PackagePrivate`body]; 
           GeneralUtilities`Quoted[
             GeneralUtilities`Control`PackagePrivate`cachedsym[
             GeneralUtilities`Control`PackagePrivate`patsym]]]], 
       GeneralUtilities`Control`PackagePrivate`mMemoized[
         Pattern[GeneralUtilities`Control`PackagePrivate`patsym, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], "Inline"] := 
       With[{GeneralUtilities`Control`PackagePrivate`pat = 
          GeneralUtilities`Control`PackagePrivate`makeBlank[
           GeneralUtilities`Control`PackagePrivate`patsym], 
          GeneralUtilities`Control`PackagePrivate`sym = 
          First[GeneralUtilities`$LHSHead]}, 
         GeneralUtilities`Quoted[GeneralUtilities`Control`PackagePrivate`sym[
            Verbatim[GeneralUtilities`Control`PackagePrivate`patsym]] = 
          GeneralUtilities`Control`PackagePrivate`body]], 
       GeneralUtilities`Control`PackagePrivate`mMemoized[
         Blank[], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], "SystemCache"] := GeneralUtilities`Quoted[
         GeneralUtilities`EvaluateCached[
         GeneralUtilities`$LHS, GeneralUtilities`Control`PackagePrivate`test, 
          GeneralUtilities`Control`PackagePrivate`body]], 
       GeneralUtilities`Control`PackagePrivate`mMemoized[
         Blank[], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`method, 
          Blank[]]] := 
       GeneralUtilities`Control`PackagePrivate`invMethodPanic[
        GeneralUtilities`Control`PackagePrivate`method], 
       GeneralUtilities`Control`PackagePrivate`mMemoized[
         BlankNullSequence[]] := GeneralUtilities`MacroPanic[], 
       Attributes[
        GeneralUtilities`Control`PackagePrivate`toMemoizedSymbolName] = {
        HoldFirst}, 
       GeneralUtilities`Control`PackagePrivate`toMemoizedSymbolName[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := StringJoin["Internal`MemoizedSymbols`", 
         SymbolName[
          Unevaluated[GeneralUtilities`Control`PackagePrivate`sym]], "$", 
         GeneralUtilities`Base36Hash[
          Context[GeneralUtilities`Control`PackagePrivate`sym]]], 
       GeneralUtilities`Base36Hash[
         Pattern[GeneralUtilities`Strings`PackagePrivate`expr, 
          Blank[]]] := IntegerString[
         Hash[GeneralUtilities`Strings`PackagePrivate`expr], 36, 13], 
       Attributes[GeneralUtilities`EvaluateCached] = {HoldAll}, 
       GeneralUtilities`EvaluateCached[
         Pattern[GeneralUtilities`Control`PackagePrivate`key, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := 
       GeneralUtilities`EvaluateCached[
        GeneralUtilities`Control`PackagePrivate`key, None, 
         GeneralUtilities`Control`PackagePrivate`body], 
       GeneralUtilities`EvaluateCached[
         Pattern[GeneralUtilities`Control`PackagePrivate`key, 
          Blank[]], None, 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := Replace[
         Internal`CheckCache[
          Unevaluated[GeneralUtilities`Control`PackagePrivate`key]], $Failed :> 
         Block[{GeneralUtilities`Control`PackagePrivate`result = 
            GeneralUtilities`Control`PackagePrivate`body}, Internal`SetCache[
             Unevaluated[GeneralUtilities`Control`PackagePrivate`key], 
             GeneralUtilities`Control`PackagePrivate`result]; 
           GeneralUtilities`Control`PackagePrivate`result]], 
       GeneralUtilities`EvaluateCached[
         Pattern[GeneralUtilities`Control`PackagePrivate`key, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`test, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := Replace[
         Internal`CheckCache[
          Unevaluated[GeneralUtilities`Control`PackagePrivate`key]], $Failed :> 
         Block[{GeneralUtilities`Control`PackagePrivate`result = 
            GeneralUtilities`Control`PackagePrivate`body}, If[
             GeneralUtilities`Control`PackagePrivate`test[
             GeneralUtilities`Control`PackagePrivate`result], 
             Internal`SetCache[
              Unevaluated[GeneralUtilities`Control`PackagePrivate`key], 
              GeneralUtilities`Control`PackagePrivate`result]]; 
           GeneralUtilities`Control`PackagePrivate`result]], 
       TagSet[GeneralUtilities`EvaluateCached, 
        MessageName[GeneralUtilities`EvaluateCached, "usage"], 
        "\!\(\*RowBox[{\"EvaluateCached\", \"[\", RowBox[{StyleBox[\"key\", \
\"TI\"], \",\",  StyleBox[\"expr\", \"TI\"]}], \"]\"}]\) checks \
\!\(\*StyleBox[\"key\", \"TI\"]\) in the system cache, returning the \
associated value if present, and storing and returning the result of \
evaluating \!\(\*StyleBox[\"expr\", \"TI\"]\) if not.\n\
\!\(\*RowBox[{\"EvaluateCached\", \"[\", RowBox[{StyleBox[\"key\", \"TI\"], \
\",\",  StyleBox[\"test\", \"TI\"], \",\",  StyleBox[\"expr\", \"TI\"]}], \"]\
\"}]\) only stores the result of evaluating \!\(\*StyleBox[\"expr\", \
\"TI\"]\) if \!\(\*StyleBox[\"test\", \"TI\"]\)[\!\(\*StyleBox[\"result\", \
\"TI\"]\)] gives True."], 
       GeneralUtilities`Control`PackagePrivate`invMethodPanic[
         Pattern[GeneralUtilities`Control`PackagePrivate`method, 
          Blank[]]] := GeneralUtilities`MacroPanic[
         MessageName[GeneralUtilities`Memoized, "invmethod"], 
         GeneralUtilities`Control`PackagePrivate`method, 
         Style[{"Association", "Symbol", "Inline", "SystemCache"}, 
          ShowStringCharacters -> True]], GeneralUtilities`SetHoldAllComplete[
         Pattern[GeneralUtilities`Code`PackagePrivate`syms, 
          BlankSequence[]]] := 
       GeneralUtilities`Code`PackagePrivate`setAttribute[
        HoldAllComplete, GeneralUtilities`Code`PackagePrivate`syms], 
       Attributes[GeneralUtilities`Code`PackagePrivate`setAttribute] = {
        HoldAll}, GeneralUtilities`Code`PackagePrivate`setAttribute[
         Pattern[GeneralUtilities`Code`PackagePrivate`attr, 
          Blank[]], 
         Pattern[GeneralUtilities`Code`PackagePrivate`syms, 
          BlankNullSequence[]]] := Scan[
         Function[
         GeneralUtilities`Code`PackagePrivate`sym, 
          Attributes[GeneralUtilities`Code`PackagePrivate`sym] = {
           GeneralUtilities`Code`PackagePrivate`attr}, HoldFirst], 
         Unevaluated[{GeneralUtilities`Code`PackagePrivate`syms}]], 
       GeneralUtilities`Control`PackagePrivate`makeBlank[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := 
       GeneralUtilities`SafeConstruct[
        Pattern, GeneralUtilities`Control`PackagePrivate`sym, 
         GeneralUtilities`SafeConstruct[Blank]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mUnpackOptions] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`mUnpackOptions[
         Pattern[GeneralUtilities`Control`PackagePrivate`syms, 
          Blank[]]] := GeneralUtilities`ToQuoted[Set, 
         GeneralUtilities`Quoted[
         GeneralUtilities`Control`PackagePrivate`syms], 
         GeneralUtilities`ToQuoted[OptionValue, 
          Map[GeneralUtilities`Control`PackagePrivate`capFirst, 
           Map[GeneralUtilities`HoldSymbolName, 
            Unevaluated[GeneralUtilities`Control`PackagePrivate`syms]]]]], 
       GeneralUtilities`Control`PackagePrivate`capFirst[
         Pattern[GeneralUtilities`Control`PackagePrivate`s, 
          Blank[String]]] := If[
         StringStartsQ[GeneralUtilities`Control`PackagePrivate`s, "$"], 
         GeneralUtilities`Control`PackagePrivate`capFirst[
          StringDrop[GeneralUtilities`Control`PackagePrivate`s, 1]], 
         StringJoin[
          ToUpperCase[
           StringTake[GeneralUtilities`Control`PackagePrivate`s, 1]], 
          StringDrop[GeneralUtilities`Control`PackagePrivate`s, 1]]], 
       Attributes[GeneralUtilities`HoldSymbolName] = {HoldAllComplete}, 
       GeneralUtilities`HoldSymbolName[
         Pattern[GeneralUtilities`Code`PackagePrivate`sym, 
          Blank[Symbol]]] := SymbolName[
         Unevaluated[GeneralUtilities`Code`PackagePrivate`sym]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`mCollectTo] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`mCollectTo[
         Pattern[GeneralUtilities`Control`PackagePrivate`syms, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`body, 
          Blank[]]] := 
       Block[{
         GeneralUtilities`Control`PackagePrivate`inits, 
          GeneralUtilities`Control`PackagePrivate`collects}, 
         GeneralUtilities`Control`PackagePrivate`inits = 
          Map[GeneralUtilities`Control`PackagePrivate`bagInit, 
            Unevaluated[GeneralUtilities`Control`PackagePrivate`syms]]; 
         GeneralUtilities`Control`PackagePrivate`collects = 
          Map[GeneralUtilities`Control`PackagePrivate`bagCollect, 
            Unevaluated[GeneralUtilities`Control`PackagePrivate`syms]]; 
         FlattenAt[
           GeneralUtilities`ToQuoted[
           CompoundExpression, GeneralUtilities`Control`PackagePrivate`inits, 
            GeneralUtilities`Quoted[
            GeneralUtilities`Control`PackagePrivate`body], 
            GeneralUtilities`Control`PackagePrivate`collects, Null], {{1, 
           1}, {1, 3}}]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`bagInit] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`bagInit[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := 
       GeneralUtilities`Quoted[
        GeneralUtilities`Control`PackagePrivate`sym = Internal`Bag[]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`bagCollect] = {
        HoldAllComplete}, GeneralUtilities`Control`PackagePrivate`bagCollect[
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := 
       GeneralUtilities`Quoted[
        GeneralUtilities`Control`PackagePrivate`sym = 
         Internal`BagPart[GeneralUtilities`Control`PackagePrivate`sym, All]], 
       Attributes[GeneralUtilities`Performance`PackagePrivate`mTimed] = {
        HoldAllComplete}, GeneralUtilities`Performance`PackagePrivate`mTimed[
         Pattern[GeneralUtilities`Performance`PackagePrivate`scope, 
          Blank[]], 
         Pattern[GeneralUtilities`Performance`PackagePrivate`body, 
          Blank[]]] := If[
         Not[GeneralUtilities`$TimingEnabled], 
         GeneralUtilities`Quoted[
         GeneralUtilities`Performance`PackagePrivate`body], 
         ReplaceAll[
          GeneralUtilities`Quoted[
           GeneralUtilities`Performance`PackagePrivate`eTimed[
           GeneralUtilities`Performance`PackagePrivate`scope, 
            GeneralUtilities`Performance`PackagePrivate`body]], 
          GeneralUtilities`TimeLabel[
            Pattern[GeneralUtilities`Performance`PackagePrivate`label, 
             Blank[String]]] :> 
          GeneralUtilities`Performance`PackagePrivate`addLabelTime[
           GeneralUtilities`Performance`PackagePrivate`label]]], 
       GeneralUtilities`$TimingEnabled = False, 
       Attributes[GeneralUtilities`Performance`PackagePrivate`eTimed] = {
        HoldAllComplete}, GeneralUtilities`Performance`PackagePrivate`eTimed[
         Pattern[GeneralUtilities`Performance`PackagePrivate`scope, 
          Blank[]], 
         Pattern[GeneralUtilities`Performance`PackagePrivate`body, 
          Blank[]]] := 
       Block[{GeneralUtilities`Performance`PackagePrivate`r, 
          GeneralUtilities`Performance`PackagePrivate`t, 
          GeneralUtilities`Performance`PackagePrivate`$lastLabelTime = 0, 
          GeneralUtilities`Performance`PackagePrivate`$lastLabel = None, 
          GeneralUtilities`Performance`PackagePrivate`$timedScope = 
          GeneralUtilities`Performance`PackagePrivate`scope}, {
           GeneralUtilities`Performance`PackagePrivate`t, 
            GeneralUtilities`Performance`PackagePrivate`r} = 
          AbsoluteTiming[GeneralUtilities`Performance`PackagePrivate`body]; 
         GeneralUtilities`Performance`PackagePrivate`addLabelTime[None]; 
         GeneralUtilities`Performance`PackagePrivate`addTime[
          GeneralUtilities`Performance`PackagePrivate`scope, 
           GeneralUtilities`Performance`PackagePrivate`t]; 
         GeneralUtilities`Performance`PackagePrivate`r], 
       GeneralUtilities`Performance`PackagePrivate`addLabelTime[
         Pattern[GeneralUtilities`Performance`PackagePrivate`label, 
          Blank[]]] := (
        If[GeneralUtilities`Performance`PackagePrivate`$lastLabel =!= None, 
          GeneralUtilities`Performance`PackagePrivate`addTime[
           Labeled[
           GeneralUtilities`Performance`PackagePrivate`$timedScope, 
            GeneralUtilities`Performance`PackagePrivate`$lastLabel], 
           AbsoluteTime[] - 
           GeneralUtilities`Performance`PackagePrivate`$lastLabelTime]]; 
        GeneralUtilities`Performance`PackagePrivate`$lastLabelTime = 
         AbsoluteTime[]; 
        GeneralUtilities`Performance`PackagePrivate`$lastLabel = 
         GeneralUtilities`Performance`PackagePrivate`label; Null), 
       GeneralUtilities`Performance`PackagePrivate`addTime[
         Pattern[GeneralUtilities`Performance`PackagePrivate`key, 
          Blank[]], 
         Pattern[GeneralUtilities`Performance`PackagePrivate`t, 
          Blank[]]] := (
        GeneralUtilities`$LastTimings[
         GeneralUtilities`Performance`PackagePrivate`key] = 
        Lookup[GeneralUtilities`$LastTimings, 
           Key[GeneralUtilities`Performance`PackagePrivate`key], {0, 0}] + {
          1, GeneralUtilities`Performance`PackagePrivate`t}), 
       GeneralUtilities`$LastTimings = Association[], 
       GeneralUtilities`Control`PackagePrivate`$NullOptimizationTargets = 
       Alternatives[
        GeneralUtilities`ReturnOnFailure, GeneralUtilities`ThrowOnFailure], 
       GeneralUtilities`ReturnOnFailure[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]]] := If[
         FailureQ[GeneralUtilities`Control`PackagePrivate`e], 
         Return[GeneralUtilities`Control`PackagePrivate`e, Block], 
         GeneralUtilities`Control`PackagePrivate`e], 
       GeneralUtilities`ThrowOnFailure[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]]] := If[
         FailureQ[GeneralUtilities`Control`PackagePrivate`e], 
         GeneralUtilities`ThrowRawFailure[
         GeneralUtilities`Control`PackagePrivate`e], 
         GeneralUtilities`Control`PackagePrivate`e], 
       GeneralUtilities`Control`PackagePrivate`$NullOptimizationPipeline := {
        GeneralUtilities`Control`PackagePrivate`$Nullify, 
         GeneralUtilities`Control`PackagePrivate`$PropogateNulls, 
         GeneralUtilities`Control`PackagePrivate`$TransformNulls, 
         GeneralUtilities`Control`PackagePrivate`$Denullify}, 
       GeneralUtilities`Control`PackagePrivate`$Nullify = HoldPattern[
          Pattern[GeneralUtilities`Control`PackagePrivate`args, 
           BlankSequence[]]] :> RuleCondition[
          FlattenAt[
           Map[GeneralUtilities`Control`PackagePrivate`$Null, 
            GeneralUtilities`Control`PackagePrivate`$CE[
            GeneralUtilities`Control`PackagePrivate`args]], -1]], 
       Attributes[GeneralUtilities`Control`PackagePrivate`$Null] = {
        HoldAllComplete}, 
       Attributes[GeneralUtilities`Control`PackagePrivate`$CE] = {
        HoldAllComplete}, 
       GeneralUtilities`Control`PackagePrivate`$PropogateNulls = 
       Dispatch[{GeneralUtilities`Control`PackagePrivate`$Null[
            Pattern[GeneralUtilities`Control`PackagePrivate`i, 
             Blank[If]]] :> RuleCondition[
            MapAt[GeneralUtilities`Control`PackagePrivate`$Null, 
             GeneralUtilities`Quoted[
             GeneralUtilities`Control`PackagePrivate`i], {1, 
              Span[2, All]}]], GeneralUtilities`Control`PackagePrivate`$Null[
            Pattern[GeneralUtilities`Control`PackagePrivate`c, 
             Blank[GeneralUtilities`Control`PackagePrivate`$CE]]] :> 
          RuleCondition[
            MapAt[
            GeneralUtilities`Control`PackagePrivate`$Null, 
             GeneralUtilities`Control`PackagePrivate`c, -1]], 
          GeneralUtilities`Control`PackagePrivate`$Null[
            Pattern[GeneralUtilities`Control`PackagePrivate`s, 
             Blank[Switch]]] :> RuleCondition[
            MapAt[GeneralUtilities`Control`PackagePrivate`$Null, 
             GeneralUtilities`Quoted[
             GeneralUtilities`Control`PackagePrivate`s], {1, 
              Span[3, All, 2]}]], 
          GeneralUtilities`Control`PackagePrivate`$Null[
            Pattern[GeneralUtilities`Control`PackagePrivate`s, 
             Blank[Which]]] :> RuleCondition[
            MapAt[GeneralUtilities`Control`PackagePrivate`$Null, 
             GeneralUtilities`Quoted[
             GeneralUtilities`Control`PackagePrivate`s], {1, 
              Span[2, All, 2]}]], 
          GeneralUtilities`Control`PackagePrivate`$Null[
            Alternatives[
             Pattern[GeneralUtilities`Control`PackagePrivate`r, 
              Blank[Replace]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`r, 
              Blank[StringReplace]]]] :> RuleCondition[
            GeneralUtilities`Control`PackagePrivate`nullReplace[
            GeneralUtilities`Control`PackagePrivate`r]]}], 
       GeneralUtilities`Control`PackagePrivate`$TransformNulls = 
       Dispatch[{GeneralUtilities`Control`PackagePrivate`$Null[PatternTest[
              Pattern[GeneralUtilities`Control`PackagePrivate`var, 
               Blank[Symbol]], Developer`HoldSymbolQ] = 
            Pattern[GeneralUtilities`Control`PackagePrivate`head, 
              Alternatives[
              GeneralUtilities`ReturnOnFailure, 
               GeneralUtilities`ThrowOnFailure]][
              Pattern[GeneralUtilities`Control`PackagePrivate`expr, 
               Blank[]], 
              Pattern[GeneralUtilities`Control`PackagePrivate`rest, 
               BlankNullSequence[]]]] :> 
          GeneralUtilities`Control`PackagePrivate`$CE[
           GeneralUtilities`Control`PackagePrivate`var = 
            GeneralUtilities`Control`PackagePrivate`expr, 
            GeneralUtilities`Control`PackagePrivate`$Null[
             GeneralUtilities`Control`PackagePrivate`head[
             GeneralUtilities`Control`PackagePrivate`var, 
              GeneralUtilities`Control`PackagePrivate`rest]]], 
          GeneralUtilities`Control`PackagePrivate`$Null[
            GeneralUtilities`ReturnOnFailure[
             Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
              Blank[]]]] :> If[
            FailureQ[GeneralUtilities`Control`PackagePrivate`sym], 
            GeneralUtilities`Control`PackagePrivate`$Return$[
            GeneralUtilities`Control`PackagePrivate`sym]], 
          GeneralUtilities`Control`PackagePrivate`$Null[
            GeneralUtilities`ThrowOnFailure[
             Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
              Blank[]]]] :> If[
            FailureQ[GeneralUtilities`Control`PackagePrivate`sym], 
            GeneralUtilities`ThrowRawFailure[
            GeneralUtilities`Control`PackagePrivate`sym]]}], 
       GeneralUtilities`Control`PackagePrivate`$Denullify = 
       Dispatch[{GeneralUtilities`Control`PackagePrivate`$Null[
            Pattern[GeneralUtilities`Control`PackagePrivate`e, 
             Blank[]]] :> GeneralUtilities`Control`PackagePrivate`e, 
          Pattern[GeneralUtilities`Control`PackagePrivate`c, 
            GeneralUtilities`Control`PackagePrivate`$CE[
             BlankNullSequence[], 
             Blank[GeneralUtilities`Control`PackagePrivate`$CE], 
             BlankNullSequence[]]] :> RuleCondition[
            Flatten[
            GeneralUtilities`Control`PackagePrivate`c, 1, 
             GeneralUtilities`Control`PackagePrivate`$CE]], 
          GeneralUtilities`Control`PackagePrivate`$CE -> CompoundExpression}],
        GeneralUtilities`Control`PackagePrivate`$InliningRules = 
       Dispatch[{Pattern[GeneralUtilities`Control`PackagePrivate`i, 
            Blank[GeneralUtilities`PackageScope`InlineFunction]] :> 
          RuleCondition[GeneralUtilities`Control`PackagePrivate`i], 
          HoldPattern[
            Map[
             Replace[
              Pattern[GeneralUtilities`Control`PackagePrivate`r, 
               Blank[]]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          Replace[GeneralUtilities`Control`PackagePrivate`e, 
            GeneralUtilities`Control`PackagePrivate`r, {1}], HoldPattern[
            AssociationMap[Pattern[GeneralUtilities`Control`PackagePrivate`b, 
              Blank[]]& , 
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> Association[
            
            Map[# -> GeneralUtilities`Control`PackagePrivate`b& , 
             GeneralUtilities`Control`PackagePrivate`e]], 
          GeneralUtilities`Quoted[
            Pattern[GeneralUtilities`Control`PackagePrivate`q, 
             Blank[]]] :> GeneralUtilities`Control`PackagePrivate`q, 
          HoldPattern[GeneralUtilities`$LHSHead] :> RuleCondition[
            If[
             ValueQ[GeneralUtilities`$LHSHead], GeneralUtilities`$LHSHead, 
             Fail]]}], GeneralUtilities`Control`PackagePrivate`$FinalRules = 
       Dispatch[{
         GeneralUtilities`Control`PackagePrivate`$Quoted$ -> 
          GeneralUtilities`Quoted, GeneralUtilities`ReturnFailed[] :> 
          GeneralUtilities`Control`PackagePrivate`$Return$[$Failed], 
          GeneralUtilities`ReturnFailed[
            Pattern[GeneralUtilities`Control`PackagePrivate`args, 
             BlankNullSequence[]]] :> 
          GeneralUtilities`Control`PackagePrivate`$Return$[
           Message[GeneralUtilities`Control`PackagePrivate`args]; $Failed], 
          GeneralUtilities`ReturnFailure[
            Pattern[GeneralUtilities`Control`PackagePrivate`args, 
             BlankNullSequence[]]] :> 
          GeneralUtilities`Control`PackagePrivate`$Return$[
            GeneralUtilities`ToFailure[
            GeneralUtilities`Control`PackagePrivate`args]], 
          GeneralUtilities`ReturnTaggedFailure[
            Pattern[GeneralUtilities`Control`PackagePrivate`args, 
             BlankNullSequence[]]] :> 
          GeneralUtilities`Control`PackagePrivate`$Return$[
            GeneralUtilities`ToTaggedFailure[
            GeneralUtilities`Control`PackagePrivate`args]], HoldPattern[
            GeneralUtilities`ReturnOnFailure[
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          Replace[GeneralUtilities`Control`PackagePrivate`e, PatternTest[
              Pattern[System`Private`T, 
               Blank[]], FailureQ] :> 
            GeneralUtilities`Control`PackagePrivate`$Return$[
             System`Private`T]], HoldPattern[
            GeneralUtilities`ThrowOnFailure[
             Pattern[GeneralUtilities`Control`PackagePrivate`e, 
              Blank[]]]] :> 
          Replace[GeneralUtilities`Control`PackagePrivate`e, PatternTest[
              Pattern[System`Private`T, 
               Blank[]], FailureQ] :> 
            GeneralUtilities`ThrowRawFailure[
             GeneralUtilities`Control`PackagePrivate`T]], HoldPattern[
            Message[
             MessageName[Inherited, 
              Pattern[GeneralUtilities`Control`PackagePrivate`msg, 
               Blank[String]]], 
             Pattern[GeneralUtilities`Control`PackagePrivate`args, 
              BlankNullSequence[]]]] :> 
          GeneralUtilities`InheritedMessage[
           GeneralUtilities`Control`PackagePrivate`msg, 
            GeneralUtilities`Control`PackagePrivate`args]}], 
       GeneralUtilities`Control`PackagePrivate`subReturn[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          HoldComplete[
           Alternatives[
            Blank[Internal`ConditionalValueBody], 
            Block[
             Blank[], 
             RuleCondition[
              Blank[Internal`ConditionalValueBody]]]]]]] := 
       ReplaceAll[
        GeneralUtilities`Control`PackagePrivate`e, {
         GeneralUtilities`Control`PackagePrivate`$Return$[
            Blank[Message], 
            Blank[]] :> 
          Return[GeneralUtilities`Control`PackagePrivate`m; Fail, 
            Internal`ConditionalValueBody], 
          GeneralUtilities`Control`PackagePrivate`$Return$[
            Blank[]] :> Return[Fail, Internal`ConditionalValueBody]}], 
       GeneralUtilities`Control`PackagePrivate`subReturn[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          HoldComplete[
           Pattern[GeneralUtilities`Control`PackagePrivate`head, 
            Blank[Symbol]][
            BlankNullSequence[]]]]] := If[
         GeneralUtilities`Control`PackagePrivate`validReturnQ[
         GeneralUtilities`Control`PackagePrivate`e, 
          GeneralUtilities`Control`PackagePrivate`head], 
         ReplaceAll[
         GeneralUtilities`Control`PackagePrivate`e, 
          GeneralUtilities`Control`PackagePrivate`$Return$[
            Pattern[GeneralUtilities`Control`PackagePrivate`value, 
             Blank[]]] :> 
          Return[GeneralUtilities`Control`PackagePrivate`value, 
            GeneralUtilities`Control`PackagePrivate`head]], 
         GeneralUtilities`MacroPanic["Can't return using `2` within `1`.", 
          HoldForm[GeneralUtilities`Control`PackagePrivate`head], 
          Apply[
          GeneralUtilities`Quoted, 
           GeneralUtilities`Control`PackagePrivate`e]]], 
       GeneralUtilities`Control`PackagePrivate`subReturn[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`MacroPanic["No return scope available in ``.", 
         Apply[
         GeneralUtilities`Quoted, GeneralUtilities`Control`PackagePrivate`e]],
        GeneralUtilities`Control`PackagePrivate`validReturnQ[
         Pattern[GeneralUtilities`Control`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Control`PackagePrivate`sym, 
          Blank[]]] := And[
         MemberQ[
          Attributes[GeneralUtilities`Control`PackagePrivate`sym], 
          Alternatives[HoldAll, HoldAllComplete, HoldFirst]], 
         FreeQ[GeneralUtilities`Control`PackagePrivate`e, 
          Condition[
           Pattern[GeneralUtilities`Control`PackagePrivate`s, 
            Blank[GeneralUtilities`Control`PackagePrivate`sym]], 
           Not[
            FreeQ[
             Unevaluated[GeneralUtilities`Control`PackagePrivate`s], 
             GeneralUtilities`Control`PackagePrivate`$Return$]]], {
          2, Infinity}]], GeneralUtilities`EchoRaw[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`arg, 
          Blank[]]] := (If[$Notebooks, 
          GeneralUtilities`Debugging`PackagePrivate`cellPrint[
           GeneralUtilities`HoldPrettyForm[
           GeneralUtilities`Debugging`PackagePrivate`arg]], 
          GeneralUtilities`Debugging`PackagePrivate`consolePrint[
          GeneralUtilities`Debugging`PackagePrivate`arg]]; 
        GeneralUtilities`Debugging`PackagePrivate`arg), 
       GeneralUtilities`EchoRaw[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
          BlankNullSequence[]]] := (If[$Notebooks, 
          GeneralUtilities`Debugging`PackagePrivate`cellPrint[
           GeneralUtilities`HoldPlainForm[
            GeneralUtilities`PackageScope`HoldSequenceForm[
            GeneralUtilities`Debugging`PackagePrivate`args]]], 
          GeneralUtilities`Debugging`PackagePrivate`consolePrint[
          GeneralUtilities`Debugging`PackagePrivate`args]]; 
        Apply[Sequence, {GeneralUtilities`Debugging`PackagePrivate`args}]), 
       TagSet[GeneralUtilities`EchoRaw, 
        MessageName[GeneralUtilities`EchoRaw, "usage"], 
        "\!\(\*RowBox[{\"EchoRaw\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) prints the undecorated InputForm of \
\!\(\*StyleBox[\"expr\", \"TI\"]\) and returns it unevaluated.\n\[Bullet] See \
also EchoHold, EchoGroup, EchoSequence, EchoTiming, Tap, EchoSet, EchoSymbol, \
EchoTag, DisableEcho."], 
       Attributes[GeneralUtilities`HoldPrettyForm] = {HoldAllComplete}, 
       TagSetDelayed[GeneralUtilities`HoldPrettyForm, 
        MakeBoxes[
         GeneralUtilities`HoldPrettyForm[
          Pattern[GeneralUtilities`Formatting`PackagePrivate`expr, 
           Blank[]]], StandardForm], 
        GeneralUtilities`PrettyFormBoxes[
        GeneralUtilities`Formatting`PackagePrivate`expr]], 
       Attributes[GeneralUtilities`HoldPlainForm] = {HoldAllComplete}, 
       TagSetDelayed[GeneralUtilities`HoldPlainForm, 
        MakeBoxes[
         GeneralUtilities`HoldPlainForm[
          Pattern[GeneralUtilities`Debugging`PackagePrivate`x, 
           Blank[]]], StandardForm], 
        GeneralUtilities`MakePlainBoxes[
        GeneralUtilities`Debugging`PackagePrivate`x]], 
       Attributes[GeneralUtilities`EchoHold] = {HoldAllComplete}, 
       GeneralUtilities`EchoHold[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          And[
           Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
            BlankNullSequence[]]]]] := 
       GeneralUtilities`Debugging`PackagePrivate`EchoGroup2[
        GeneralUtilities`Debugging`PackagePrivate`e, 
         GeneralUtilities`Debugging`PackagePrivate`EchoAnd[
         GeneralUtilities`Debugging`PackagePrivate`args]], 
       GeneralUtilities`EchoHold[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Or[
           Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
            BlankNullSequence[]]]]] := 
       GeneralUtilities`Debugging`PackagePrivate`EchoGroup2[
        GeneralUtilities`Debugging`PackagePrivate`e, 
         GeneralUtilities`Debugging`PackagePrivate`EchoOr[
         GeneralUtilities`Debugging`PackagePrivate`args]], 
       GeneralUtilities`EchoHold[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`input, 
          Pattern[GeneralUtilities`Debugging`PackagePrivate`head, 
           Blank[]][
           Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
            BlankNullSequence[]]]]] := 
       With[{GeneralUtilities`Debugging`PackagePrivate`attrs = 
          GeneralUtilities`FunctionAttributes[
           GeneralUtilities`Debugging`PackagePrivate`head]}, 
         Block[{
          GeneralUtilities`Debugging`PackagePrivate`pairs, 
           GeneralUtilities`Debugging`PackagePrivate`final}, {
            GeneralUtilities`Debugging`PackagePrivate`pairs, 
             GeneralUtilities`Debugging`PackagePrivate`final} = 
           GeneralUtilities`Debugging`PackagePrivate`evalArgs[
            GeneralUtilities`Debugging`PackagePrivate`attrs, {
             GeneralUtilities`Debugging`PackagePrivate`args}]; 
          With[{GeneralUtilities`Debugging`PackagePrivate`final = 
             GeneralUtilities`Debugging`PackagePrivate`final}, 
            GeneralUtilities`Debugging`PackagePrivate`InputOutputArrowBox[
             Apply[
             GeneralUtilities`Debugging`PackagePrivate`head, 
              GeneralUtilities`Debugging`PackagePrivate`final], 
             GeneralUtilities`HeadBox[
              GeneralUtilities`PackageScope`PasteBox[
               GeneralUtilities`MakeInputBoxes[
               GeneralUtilities`Debugging`PackagePrivate`head], 
               GeneralUtilities`Debugging`PackagePrivate`assembleEvalBody[
               GeneralUtilities`Debugging`PackagePrivate`head, 
                GeneralUtilities`Debugging`PackagePrivate`pairs]], 
              Apply[
              GeneralUtilities`Debugging`PackagePrivate`\
makeInputOutputPasteBox, GeneralUtilities`Debugging`PackagePrivate`pairs, {
               1}]], GeneralUtilities`PackageScope`makeInputPasteBox]]]], 
       GeneralUtilities`EchoHold[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`var, 
          Blank[]]] := 
       GeneralUtilities`Debugging`PackagePrivate`InputOutputArrowBox[
        GeneralUtilities`Debugging`PackagePrivate`var, 
         GeneralUtilities`PackageScope`makeInputPasteBox[
         GeneralUtilities`Debugging`PackagePrivate`var], 
         GeneralUtilities`PackageScope`makeInputPasteBox], 
       TagSet[GeneralUtilities`EchoHold, 
        MessageName[GeneralUtilities`EchoHold, "usage"], 
        "\!\(\*RowBox[{\"EchoHold\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) evaluates and returns \!\(\*StyleBox[\"expr\", \
\"TI\"]\), while simultaneously printing the \"\!\(\*StyleBox[\"expr\", \
\"TI\"]\) \[Rule] \!\(\*StyleBox[\"result\", \"TI\"]\)\".\n\[Bullet] See also \
EchoRaw, EchoGroup, EchoSequence, EchoTiming, Tap, EchoSet, EchoSymbol, \
EchoTag, DisableEcho."], 
       Attributes[GeneralUtilities`Debugging`PackagePrivate`EchoGroup2] = {
        HoldAllComplete}, GeneralUtilities`Debugging`PackagePrivate`EchoGroup2[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`body, 
          Blank[]]] := 
       GeneralUtilities`Debugging`PackagePrivate`InputOutputArrowBox[
         Block[{
          GeneralUtilities`Debugging`PackagePrivate`$echolevel = 
           GeneralUtilities`Debugging`PackagePrivate`$echolevel + 16}, 
          GeneralUtilities`Debugging`PackagePrivate`body], 
         GeneralUtilities`PackageScope`makeInputPasteBox[
         GeneralUtilities`Debugging`PackagePrivate`e], 
         GeneralUtilities`PackageScope`makeInputPasteBox], 
       Attributes[
        GeneralUtilities`Debugging`PackagePrivate`InputOutputArrowBox] = {
        HoldFirst}, 
       GeneralUtilities`Debugging`PackagePrivate`InputOutputArrowBox[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`body, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`lhsBoxes, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`rhsBoxesFunc, 
          Blank[]]] := Block[{GeneralUtilities`Debugging`PackagePrivate`res}, 
         Internal`WithLocalSettings[
          Internal`AllowExceptions[
          GeneralUtilities`Debugging`PackagePrivate`res = 
           GeneralUtilities`Debugging`PackagePrivate`$noresult], 
          GeneralUtilities`Debugging`PackagePrivate`res = 
          GeneralUtilities`Debugging`PackagePrivate`body, 
          Internal`AllowExceptions[
           If[$Notebooks, 
            GeneralUtilities`Debugging`PackagePrivate`cellPrint[
             RawBoxes[
              RowBox[{GeneralUtilities`Debugging`PackagePrivate`lhsBoxes, " ", 
                StyleBox["\[Function]", Orange, Bold], " ", 
                
                If[{GeneralUtilities`Debugging`PackagePrivate`res} === {
                  GeneralUtilities`Debugging`PackagePrivate`$noresult}, 
                 Nothing, 
                 GeneralUtilities`Debugging`PackagePrivate`colorFrameBox[
                  
                  With[{GeneralUtilities`Debugging`PackagePrivate`res = 
                    GeneralUtilities`Debugging`PackagePrivate`res}, 
                   GeneralUtilities`Debugging`PackagePrivate`rhsBoxesFunc[
                   GeneralUtilities`Debugging`PackagePrivate`res]], 
                  RGBColor[1., 0.95, 0.95]]]}]]], 
            With[{GeneralUtilities`Debugging`PackagePrivate`res = 
               GeneralUtilities`Debugging`PackagePrivate`res}, 
              GeneralUtilities`Debugging`PackagePrivate`consolePrint[
               Unevaluated[
               GeneralUtilities`Debugging`PackagePrivate`body -> 
                InputForm[GeneralUtilities`Debugging`PackagePrivate`res]]]]; 
            Null]]]], GeneralUtilities`Debugging`PackagePrivate`colorFrameBox[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`box, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`col, 
          Blank[]]] := 
       FrameBox[
        GeneralUtilities`Debugging`PackagePrivate`box, BaselinePosition -> 
         Baseline, FrameMargins -> Small, Background -> 
         GeneralUtilities`Debugging`PackagePrivate`col, FrameStyle -> None], 
       Attributes[GeneralUtilities`Debugging`PackagePrivate`EchoAnd] = {
        HoldAllComplete}, GeneralUtilities`Debugging`PackagePrivate`EchoAnd[] := 
       True, GeneralUtilities`Debugging`PackagePrivate`EchoAnd[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`rest, 
          BlankNullSequence[]]] := And[
         GeneralUtilities`EchoHold[
         GeneralUtilities`Debugging`PackagePrivate`f], 
         GeneralUtilities`Debugging`PackagePrivate`EchoAnd[
         GeneralUtilities`Debugging`PackagePrivate`rest]], 
       Attributes[GeneralUtilities`Debugging`PackagePrivate`EchoOr] = {
        HoldAllComplete}, GeneralUtilities`Debugging`PackagePrivate`EchoOr[] := 
       False, GeneralUtilities`Debugging`PackagePrivate`EchoOr[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`f, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`rest, 
          BlankNullSequence[]]] := Or[
         GeneralUtilities`EchoHold[
         GeneralUtilities`Debugging`PackagePrivate`f], 
         GeneralUtilities`Debugging`PackagePrivate`EchoAnd[
         GeneralUtilities`Debugging`PackagePrivate`rest]], 
       GeneralUtilities`FunctionAttributes[
         PatternTest[
          Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
           Blank[Symbol]], Developer`HoldSymbolQ]] := 
       Attributes[GeneralUtilities`Predicates`PackagePrivate`s], 
       GeneralUtilities`FunctionAttributes[
         Verbatim[Function][
          Blank[], 
          Blank[], 
          Pattern[GeneralUtilities`Predicates`PackagePrivate`l, 
           Blank[List]]]] := GeneralUtilities`Predicates`PackagePrivate`l, 
       GeneralUtilities`FunctionAttributes[
         Verbatim[Function][
          Blank[], 
          Blank[], 
          Pattern[GeneralUtilities`Predicates`PackagePrivate`s, 
           Blank[Symbol]]]] := {GeneralUtilities`Predicates`PackagePrivate`s},
        GeneralUtilities`FunctionAttributes[
         Blank[]] := {}, 
       Attributes[GeneralUtilities`Debugging`PackagePrivate`evalArgs] = {
        HoldAllComplete}, GeneralUtilities`Debugging`PackagePrivate`evalArgs[
         Blank[], {}] := {{}, 
         HoldComplete[]}, 
       GeneralUtilities`Debugging`PackagePrivate`evalArgs[{}, 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
          Blank[]]] := 
       GeneralUtilities`Debugging`PackagePrivate`getOutputs[False, 
         GeneralUtilities`HoldMap[
         GeneralUtilities`Debugging`PackagePrivate`evalOne, 
          GeneralUtilities`Debugging`PackagePrivate`args]], 
       GeneralUtilities`Debugging`PackagePrivate`evalArgs[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`attrs, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`all, {
           Pattern[GeneralUtilities`Debugging`PackagePrivate`first, 
            Blank[]], 
           Pattern[GeneralUtilities`Debugging`PackagePrivate`rest, 
            BlankNullSequence[]]}]] := 
       GeneralUtilities`Debugging`PackagePrivate`getOutputs[
         MemberQ[GeneralUtilities`Debugging`PackagePrivate`attrs, 
          Alternatives[HoldAllComplete, SequenceHold]], 
         Which[
          MemberQ[GeneralUtilities`Debugging`PackagePrivate`attrs, 
           Alternatives[HoldAll, HoldAllComplete]], 
          GeneralUtilities`HoldMap[
          GeneralUtilities`Debugging`PackagePrivate`holdOne, 
           GeneralUtilities`Debugging`PackagePrivate`all], 
          MemberQ[GeneralUtilities`Debugging`PackagePrivate`attrs, HoldFirst], 
          Prepend[
           GeneralUtilities`Debugging`PackagePrivate`holdOne[
           GeneralUtilities`Debugging`PackagePrivate`first]][
           GeneralUtilities`HoldMap[
           GeneralUtilities`Debugging`PackagePrivate`evalOne, {
            GeneralUtilities`Debugging`PackagePrivate`rest}]], 
          MemberQ[GeneralUtilities`Debugging`PackagePrivate`attrs, HoldRest], 
          Prepend[
           GeneralUtilities`Debugging`PackagePrivate`evalOne[
           GeneralUtilities`Debugging`PackagePrivate`first]][
           GeneralUtilities`HoldMap[
           GeneralUtilities`Debugging`PackagePrivate`holdOne, {
            GeneralUtilities`Debugging`PackagePrivate`rest}]], True, 
          GeneralUtilities`HoldMap[
          GeneralUtilities`Debugging`PackagePrivate`evalOne, 
           GeneralUtilities`Debugging`PackagePrivate`all]]], 
       GeneralUtilities`Debugging`PackagePrivate`getOutputs[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`holdseq, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`pairs, 
          Blank[]]] := 
       Block[{GeneralUtilities`Debugging`PackagePrivate`outlist}, 
         GeneralUtilities`Debugging`PackagePrivate`outlist = Replace[
            Thread[
            GeneralUtilities`Debugging`PackagePrivate`pairs, HoldComplete], {
            HoldComplete[
               Blank[], {
                Pattern[GeneralUtilities`Debugging`PackagePrivate`args2, 
                 BlankNullSequence[]]}] :> 
             HoldComplete[GeneralUtilities`Debugging`PackagePrivate`args2], 
             Blank[] :> GeneralUtilities`ThrowFailure[]}]; If[
           Not[GeneralUtilities`Debugging`PackagePrivate`holdseq], 
           GeneralUtilities`Debugging`PackagePrivate`outlist = 
           Apply[HoldComplete, 
             Apply[
             Hold, GeneralUtilities`Debugging`PackagePrivate`outlist]]]; {
          GeneralUtilities`Debugging`PackagePrivate`pairs, 
           GeneralUtilities`Debugging`PackagePrivate`outlist}], 
       Attributes[GeneralUtilities`Debugging`PackagePrivate`evalOne] = {
        HoldAllComplete}, GeneralUtilities`Debugging`PackagePrivate`evalOne[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]]] := 
       With[{GeneralUtilities`Debugging`PackagePrivate`res = 
          GeneralUtilities`Debugging`PackagePrivate`e}, 
         HoldComplete[
         GeneralUtilities`Debugging`PackagePrivate`e, 
          GeneralUtilities`Debugging`PackagePrivate`res]], 
       Attributes[GeneralUtilities`Debugging`PackagePrivate`holdOne] = {
        HoldAllComplete}, GeneralUtilities`Debugging`PackagePrivate`holdOne[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]]] := 
       HoldComplete[
        GeneralUtilities`Debugging`PackagePrivate`e, 
         GeneralUtilities`Debugging`PackagePrivate`e], 
       GeneralUtilities`HeadBox[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`head, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`args, 
          Blank[List]]] := 
       RowBox[{GeneralUtilities`Debugging`PackagePrivate`head, "[", 
          RowBox[
           Riffle[GeneralUtilities`Debugging`PackagePrivate`args, ","]], 
          "]"}], Attributes[GeneralUtilities`MakeInputBoxes] = {
        HoldAllComplete}, GeneralUtilities`MakeInputBoxes[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]]] := GeneralUtilities`PackageScope`InputStyleBox[
         GeneralUtilities`MakePlainBoxes[
          GeneralUtilities`PackageScope`ShortForm[
          GeneralUtilities`Debugging`PackagePrivate`e]]], 
       GeneralUtilities`MakeInputBoxes[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          BlankNullSequence[]]] := Apply[
         GeneralUtilities`PackageScope`InputStyleBox[
          GeneralUtilities`MakePlainBoxes[
          GeneralUtilities`PackageScope`HoldSequenceForm]], 
         Map[GeneralUtilities`PackageScope`ShortForm, 
          HoldComplete[GeneralUtilities`Debugging`PackagePrivate`e]]], 
       GeneralUtilities`Debugging`PackagePrivate`assembleEvalBody[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`head, 
          Blank[]], {
          Pattern[GeneralUtilities`Debugging`PackagePrivate`pairs, 
           BlankNullSequence[]]}] := Part[
         HoldComplete[
          GeneralUtilities`Debugging`PackagePrivate`head[
          GeneralUtilities`Debugging`PackagePrivate`pairs]], All, All, 2], 
       Attributes[
        GeneralUtilities`Debugging`PackagePrivate`makeInputOutputPasteBox] = {
        HoldAllComplete}, 
       GeneralUtilities`Debugging`PackagePrivate`makeInputOutputPasteBox[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`e, 
          Blank[]]] := 
       GeneralUtilities`PackageScope`makeInputPasteBox[
        GeneralUtilities`Debugging`PackagePrivate`e], 
       GeneralUtilities`Debugging`PackagePrivate`makeInputOutputPasteBox[
         Pattern[GeneralUtilities`Debugging`PackagePrivate`in, 
          Blank[]], 
         Pattern[GeneralUtilities`Debugging`PackagePrivate`out, 
          Blank[]]] := TagBox[
         FrameBox[
          GeneralUtilities`PackageScope`MakeSimpleOpenerViewBoxes[
           GeneralUtilities`PackageScope`makeInputPasteBox[
           GeneralUtilities`Debugging`PackagePrivate`out], 
           GeneralUtilities`PackageScope`makeInputPasteBox[
           GeneralUtilities`Debugging`PackagePrivate`in]], 
          FrameMargins -> {{0, 10}, {1, 1}}, FrameStyle -> LightGray, 
          BaselinePosition -> Baseline], 
         EventHandlerTag[{PassEventsUp -> False}]], 
       Internal`BulkFetchEntityNames[
         Pattern[EntityFramework`Private`list, 
          Blank[]]] := CommonName[EntityFramework`Private`list], 
       Dataset`EntityBox[
         HoldPattern[
          Pattern[Dataset`FormattingAtomic`PackagePrivate`e, 
           Blank[Entity]]]] := 
       Dataset`RichBox[Dataset`FormattingAtomic`PackagePrivate`e, 
         Replace[
          EntityFramework`Private`GetEntityName[
          Dataset`FormattingAtomic`PackagePrivate`e, 0.1], $Failed -> 
          Last[Dataset`FormattingAtomic`PackagePrivate`e]]], Dataset`RichBox[
         Pattern[Dataset`FormattingAtomic`PackagePrivate`x, 
          Blank[]]] := Dataset`LozengeBox[
         StyleBox[
          If[
           StringQ[Dataset`FormattingAtomic`PackagePrivate`x], 
           ToBoxes[Dataset`FormattingAtomic`PackagePrivate`x, StandardForm], 
           Dataset`FormattingAtomic`PackagePrivate`x], FontFamily -> "Arial", 
          FontSize -> 11, FontWeight -> Bold, FontColor -> 
          Hue[0.55, 0.32, 0.38], 
          GrayLevel[0.3]], 
         RGBColor[0.999527, 0.97705, 0.907225], 
         RGBColor[{208, 202, 176}/255]], Dataset`RichBox[
         Pattern[Dataset`FormattingAtomic`PackagePrivate`e, 
          Blank[]], 
         Pattern[Dataset`FormattingAtomic`PackagePrivate`x, 
          Blank[]]] := 
       Dataset`PackageScope`interpretas[
        Dataset`FormattingAtomic`PackagePrivate`e][
         TagBox[
          TooltipBox[
           StyleBox[
            If[
             StringQ[Dataset`FormattingAtomic`PackagePrivate`x], 
             ToBoxes[Dataset`FormattingAtomic`PackagePrivate`x, StandardForm],
              Dataset`FormattingAtomic`PackagePrivate`x], FontFamily -> 
            "Arial", FontSize -> 11, FontWeight -> Bold, FontColor -> 
            RGBColor[{165, 135, 117}/370]], 
           StyleBox[
            ToString[Dataset`FormattingAtomic`PackagePrivate`e, InputForm], 
            FontWeight -> Bold, ShowStringCharacters -> True]], 
          MouseAppearanceTag["Arrow"]]], Dataset`LozengeBox[
         Pattern[Dataset`FormattingAtomic`PackagePrivate`txt, 
          Blank[]], 
         Pattern[Dataset`FormattingAtomic`PackagePrivate`bcol, 
          Blank[]]] := 
       Dataset`LozengeBox[
        Dataset`FormattingAtomic`PackagePrivate`txt, 
         Dataset`FormattingAtomic`PackagePrivate`bcol, 
         Darker[Dataset`FormattingAtomic`PackagePrivate`bcol]], 
       Dataset`LozengeBox[
         Pattern[Dataset`FormattingAtomic`PackagePrivate`txt, 
          Blank[]], 
         Pattern[Dataset`FormattingAtomic`PackagePrivate`fcol, 
          Blank[]], 
         Pattern[Dataset`FormattingAtomic`PackagePrivate`bcol, 
          Blank[]]] := 
       FrameBox[
        Dataset`FormattingAtomic`PackagePrivate`txt, BaselinePosition -> 
         Baseline, Background -> Dataset`FormattingAtomic`PackagePrivate`fcol,
          FrameMargins -> {{2, 4}, {0, 0}}, RoundingRadius -> 3, FrameStyle -> 
         Dataset`FormattingAtomic`PackagePrivate`bcol], 
       EntityFramework`Private`GetEntityName[
         Pattern[EntityFramework`Formatting`Private`e, 
          Blank[]], 
         Pattern[EntityFramework`Formatting`Private`timeout, 
          Blank[]]] := ReplaceAll[
         CommonName[EntityFramework`Formatting`Private`e], 
         Blank[Missing] :> $Failed], 
       Dataset`$DatasetStyle = {
        ShowAutoStyles -> False, LineBreakWithin -> False, FontWeight -> 
         "Light", FontFamily -> "Helvetica Neue", NumberMarks -> False, 
         SpanMaxSize -> 3, SpanMinSize -> 1., Editable -> False, Selectable -> 
         True, Background -> RGBColor[0.985, 0.98, 0.973], 
         LinebreakAdjustments -> {0.4, 5, 100, 0, 0.5}, LineIndent -> 0, 
         LineSpacing -> {1.1, 5}}, Dataset`GetType[
         HoldPattern[
          Dataset[
           Pattern[Dataset`Dataset`PackagePrivate`data, 
            Blank[]], 
           Pattern[Dataset`Dataset`PackagePrivate`type, 
            Blank[]], 
           Blank[]]]] := Dataset`Dataset`PackagePrivate`type, Dataset`GetType[
         HoldPattern[
          Dataset[
           Pattern[Dataset`Dataset`PackagePrivate`data, 
            Blank[]], 
           Pattern[Dataset`Dataset`PackagePrivate`type, 
            Blank[]]]]] := Dataset`Dataset`PackagePrivate`type, 
       Dataset`GetType[
         Blank[]] := $Failed, 
       MachineLearning`file67Formatting`PackagePrivate`makeSummary[
         Pattern[MachineLearning`file67Formatting`PackagePrivate`global, 
          Blank[]]] := {
         StringJoin[
          IntegerString[
           MachineLearning`file67Formatting`PackagePrivate`global[
           "ExampleNumber"]], " examples"], 
         If[
         MachineLearning`file67Formatting`PackagePrivate`global[
           "ExampleWeights"] === 1, "no weights", "weighted"], 
         If[
         MachineLearning`file67Formatting`PackagePrivate`global[
           "ExampleNumber"] == 1, 
          If[
           MachineLearning`file67Formatting`PackagePrivate`global[
           "RawExample"], "raw example", "grouped examples"], Nothing], 
         If[
         MachineLearning`file67Formatting`PackagePrivate`global[
           "LogDensityRatios"] === 0, "no density weights", 
          "density weighted"]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7707358966088524`*^9, 3.7707359062142324`*^9}, {
   3.770739311114404*^9, 3.770739334379616*^9}, 3.770739678323597*^9, {
   3.7707403797049556`*^9, 3.7707404045996933`*^9}, 3.770752858986535*^9, 
   3.770763180903039*^9, 3.7707632133340673`*^9, 3.7707643520386243`*^9, 
   3.770765038289835*^9, {3.7709343892133274`*^9, 3.7709344481479473`*^9}, 
   3.771603889771733*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"448e19d3-95b4-42e7-84bd-ae6bd8a1b8f4"]
}, Open  ]],

Cell["\<\
This is the plot of predicted run distance against temperature, with the \
previous points overlaid. The plot shows how my runs are generally quite \
short when the temperature is below 0\[Degree]C, and quickly increase in \
average distance as the temperature increases. It also shows how above ~20\
\[Degree]C my runs don\[CloseCurlyQuote]t keep linearly increasing in \
distance due to the heat.  Although this may not be surprising, the model \
decent job of showing the trends in my running data, and it shows how \
computational thinking can be used to track personal fitness and learn about \
yourself.\
\>", "Text",
 CellChangeTimes->{{3.7707375917163124`*^9, 3.7707376528382816`*^9}, {
  3.770738177332782*^9, 3.7707382272389064`*^9}, {3.7707394738716125`*^9, 
  3.770739517296543*^9}, {3.7707528184764614`*^9, 3.7707528322876897`*^9}, {
  3.7707529384913564`*^9, 
  3.7707531808181696`*^9}},ExpressionUUID->"e8dc870d-90e9-46ae-9a1c-\
6940987fb0d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"distpredict", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "20"}], ",", "30"}], "}"}], ",", 
     RowBox[{"Exclusions", "\[Rule]", "None"}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"Cases", "[", 
     RowBox[{"tempdistassoc", ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t_", "\[Rule]", "d_"}], "}"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"t", ",", "d"}], "}"}]}], ",", "Infinity"}], "]"}], "]"}], 
   ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Temperature (\[Degree]C)\>\"", ",", "\"\<Run Distance (km)\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770727844279398*^9, 3.7707278984319687`*^9}, 
   3.7707323140146112`*^9, 3.7707380932781425`*^9, {3.7707393818780136`*^9, 
   3.770739394338747*^9}, {3.770740450203511*^9, 3.7707404722593584`*^9}, {
   3.7707409071459303`*^9, 3.770740907573365*^9}, {3.770752918106172*^9, 
   3.7707529188925*^9}, {3.7716039578489914`*^9, 3.771603958461071*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"3c3a6fb7-db49-4735-afdf-14c33d6f66de"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
//9vCfx/AOnkQi0=
        "]]},
      Annotation[#, "Charting`Private`Tag$356711#1"]& ]}, {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6], 
      PointBox[CompressedData["
1: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
BIc=
       "]]}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Temperature (\[Degree]C)\"", TraditionalForm], 
    FormBox["\"Run Distance (km)\"", TraditionalForm]},
  AxesOrigin->{0, 2.3620000186642773`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{469., Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-20, 30}, {2.3620000186642773`, 5.608599983335075}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7707308697699947`*^9, 3.770732586118311*^9, 3.7707381021642656`*^9, {
   3.77073936392877*^9, 3.770739398641684*^9}, 3.770739696544933*^9, {
   3.770740383384759*^9, 3.7707404120190096`*^9}, {3.770740458862705*^9, 
   3.7707404762000594`*^9}, 3.770740925200844*^9, 3.7707529234822245`*^9, 
   3.7707627018145742`*^9, 3.771603910480276*^9, {3.771603952332875*^9, 
   3.7716039625430365`*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"be4f363b-1108-4078-9955-13507bd5b872"]
}, Open  ]],

Cell["\<\
To improve, I\[CloseCurlyQuote]ll  try to beat the predictive algorithm, and \
beat the forecast!\
\>", "Text",
 CellChangeTimes->{{3.770764734739951*^9, 3.770764749272069*^9}, 
   3.771430076702846*^9, {3.7716039221957417`*^9, 3.7716039322953386`*^9}, {
   3.7716039701798334`*^9, 
   3.77160400527334*^9}},ExpressionUUID->"1419eafa-d5f3-4ead-8e11-\
2cc25783ba13"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Future Explorations and Contact Information", "Subsection",
 CellChangeTimes->{
  3.7707647203038616`*^9},ExpressionUUID->"212585b9-22bc-498f-9a96-\
782e7517f905"],

Cell["\<\
Thank you for reading this computational essay, I am looking forward to \
seeing how the predictive algorithm changes based on how I run in the future! \
Please contact me via email at stephenschroeder2013@gmail.com or GitHub \
@StephenSchroeder if you have any questions.\
\>", "Text",
 CellChangeTimes->{{3.7707382306521397`*^9, 3.7707383415036163`*^9}, {
  3.7707532228358903`*^9, 3.770753271268342*^9}, {3.7707627167318726`*^9, 
  3.770762717019464*^9}, {3.770764762944525*^9, 3.7707648746695166`*^9}, {
  3.7716040148359747`*^9, 
  3.771604038296778*^9}},ExpressionUUID->"4293b93a-7d0b-411b-ba10-\
a608da6f383b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1488, 920},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
Magnification:>1.1 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Title"->{
  Cell[580, 22, 484, 6, 107, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd",
   CellTags->"Title"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Title", 2181307, 41270}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 484, 6, 107, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd",
 CellTags->"Title"],
Cell[1067, 30, 270, 4, 57, "Subtitle",ExpressionUUID->"8a1a1634-d8b7-462a-80e1-f7e6df34ce06"],
Cell[1340, 36, 615, 9, 44, "Text",ExpressionUUID->"94536f76-3fd2-4bf6-b228-fa93ec9acae9"],
Cell[CellGroupData[{
Cell[1980, 49, 161, 3, 73, "Section",ExpressionUUID->"444246f5-b120-4af2-b40d-8ac57b74d2b2"],
Cell[2144, 54, 401, 7, 65, "Text",ExpressionUUID->"376195f3-5903-4a3b-8346-2b765c665a2c"],
Cell[2548, 63, 1188, 18, 115, "Text",ExpressionUUID->"6e47cff0-1e89-48cb-a4ee-e61e7020d444"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3773, 86, 171, 3, 73, "Section",ExpressionUUID->"cd29592b-705a-4fc7-9761-f3f3328b8ef1"],
Cell[CellGroupData[{
Cell[3969, 93, 223, 4, 59, "Subsection",ExpressionUUID->"091cf052-dc81-43c5-8873-1a26138f7182"],
Cell[4195, 99, 2318, 50, 141, "Text",ExpressionUUID->"87132916-27dd-40fa-a986-a69c1f83d536"],
Cell[6516, 151, 871, 13, 55, "Code",ExpressionUUID->"0264e3e9-b146-4693-a1d0-7c3c665e4ec6"],
Cell[7390, 166, 2360, 40, 212, "Code",ExpressionUUID->"959a7cc8-b788-4878-ba56-06e46ed0407a",
 InitializationCell->False],
Cell[9753, 208, 648, 12, 65, "Text",ExpressionUUID->"bad86d7b-0ba7-4268-8ca8-fc77ba3316a3",
 InitializationCell->True],
Cell[10404, 222, 1966, 47, 187, "Input",ExpressionUUID->"cb339342-d642-4742-b8b6-1ce19c640d3c"],
Cell[12373, 271, 371, 9, 39, "Text",ExpressionUUID->"26a71cc0-6dbb-4d63-978e-18cb5d014900"],
Cell[12747, 282, 664, 17, 99, "Input",ExpressionUUID->"9b0c98c6-328e-4586-ae5a-1937874ccebd"],
Cell[13414, 301, 332, 7, 39, "Text",ExpressionUUID->"f88871e4-07a9-4845-aada-f6d21879b7ab"],
Cell[13749, 310, 678, 15, 99, "Input",ExpressionUUID->"def2ee34-a1df-4d74-84c4-b7e33ef3dc2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14464, 330, 253, 4, 59, "Subsection",ExpressionUUID->"50df9762-53f9-4026-b5e0-9ddaea14b77f"],
Cell[14720, 336, 534, 9, 65, "Text",ExpressionUUID->"aacdb114-8c42-4e72-9c4d-e5b41b5f06ef"],
Cell[15257, 347, 700, 18, 32, "Input",ExpressionUUID->"7485bb05-851b-4c43-84d7-e09558e82ccd"],
Cell[15960, 367, 413, 10, 32, "Input",ExpressionUUID->"88e413a0-02a5-4b73-999c-d6f174abf3db"],
Cell[16376, 379, 273, 6, 39, "Text",ExpressionUUID->"efae4613-604f-4802-929c-361db41b9ac7"],
Cell[16652, 387, 361, 8, 32, "Input",ExpressionUUID->"81b463c9-c949-4976-a196-dcd2cac8c6b2"],
Cell[17016, 397, 795, 18, 99, "Input",ExpressionUUID->"4443d08e-3f14-49fb-a11f-8a4de2635edd"],
Cell[17814, 417, 277, 6, 39, "Text",ExpressionUUID->"eff5c0d9-1cbe-483c-8473-e51e0954d32c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18140, 429, 178, 3, 73, "Section",ExpressionUUID->"ad92d571-0d13-4e14-97b8-a08f85822648"],
Cell[18321, 434, 475, 9, 39, "Text",ExpressionUUID->"e4274698-a6c4-472b-a13d-2724c3c1541f"],
Cell[18799, 445, 569, 12, 77, "Input",ExpressionUUID->"5f601c88-7403-43ba-b133-273808ef0c34"],
Cell[CellGroupData[{
Cell[19393, 461, 824, 14, 32, "Input",ExpressionUUID->"5a6959af-c86e-4c26-9751-4f178bbc6f7f"],
Cell[20220, 477, 759764, 13582, 362, 695345, 12526, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"bcdae57e-ef69-4018-87d5-df6478aaa7cb"]
}, Open  ]],
Cell[779999, 14062, 360, 8, 39, "Text",ExpressionUUID->"e57f576a-a3d0-40ca-877c-b62dd722832c"],
Cell[CellGroupData[{
Cell[780384, 14074, 985, 20, 55, "Input",ExpressionUUID->"768aa3dc-3dfa-4294-9800-5f133bb4dc7b"],
Cell[781372, 14096, 8853, 168, 437, "Output",ExpressionUUID->"038c6354-ce3c-48be-b466-bcbe0901af28"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790262, 14269, 189, 3, 59, "Subsection",ExpressionUUID->"832211ad-333b-4a1b-8861-11a75d2d00f8"],
Cell[790454, 14274, 391, 8, 39, "Text",ExpressionUUID->"9c43d51f-1d91-4e54-a88c-a3232e1cd492"],
Cell[CellGroupData[{
Cell[790870, 14286, 841, 19, 32, "Input",ExpressionUUID->"751cb31a-c8ab-4919-a863-6fe6efc2a21d"],
Cell[791714, 14307, 4905, 97, 395, "Output",ExpressionUUID->"a08f036b-0814-4c64-91fb-8dbcb05d4b3c"]
}, Open  ]],
Cell[796634, 14407, 712, 13, 65, "Text",ExpressionUUID->"35cc517c-8968-4c49-b3ec-261c180a2856"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[797395, 14426, 340, 5, 73, "Section",ExpressionUUID->"024d6b31-6368-4903-968e-2d73a733e266"],
Cell[CellGroupData[{
Cell[797760, 14435, 180, 3, 59, "Subsection",ExpressionUUID->"7b2b0c48-4eec-4f0a-a533-036cccaedee9"],
Cell[797943, 14440, 512, 9, 65, "Text",ExpressionUUID->"78144a61-3669-4598-abcc-dd92fbfb956c"],
Cell[798458, 14451, 1363, 29, 55, "Input",ExpressionUUID->"e15d4364-5693-4a0e-99e0-6e79d0bcaaa6"],
Cell[CellGroupData[{
Cell[799846, 14484, 477, 10, 32, "Input",ExpressionUUID->"f5594e9d-fe7a-48fa-b95a-2bbeb58e260b"],
Cell[800326, 14496, 39890, 744, 75, "Output",ExpressionUUID->"68520036-1047-4378-92c2-2eaad7375408"]
}, Open  ]],
Cell[840231, 15243, 520, 9, 39, "Text",ExpressionUUID->"83120ded-a36d-49d9-93b1-8b24a01acb98"],
Cell[CellGroupData[{
Cell[840776, 15256, 1582, 29, 55, "Input",ExpressionUUID->"bef3fa19-b844-471c-ae2d-072fc3759839"],
Cell[842361, 15287, 1313037, 25493, 168, "Output",ExpressionUUID->"448e19d3-95b4-42e7-84bd-ae6bd8a1b8f4"]
}, Open  ]],
Cell[2155413, 40783, 968, 16, 90, "Text",ExpressionUUID->"e8dc870d-90e9-46ae-9a1c-6940987fb0d5"],
Cell[CellGroupData[{
Cell[2156406, 40803, 1224, 29, 55, "Input",ExpressionUUID->"3c3a6fb7-db49-4735-afdf-14c33d6f66de"],
Cell[2157633, 40834, 21619, 376, 305, "Output",ExpressionUUID->"be4f363b-1108-4078-9955-13507bd5b872"]
}, Open  ]],
Cell[2179267, 41213, 375, 8, 39, "Text",ExpressionUUID->"1419eafa-d5f3-4ead-8e11-2cc25783ba13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2179679, 41226, 169, 3, 59, "Subsection",ExpressionUUID->"212585b9-22bc-498f-9a96-782e7517f905"],
Cell[2179851, 41231, 627, 11, 65, "Text",ExpressionUUID->"4293b93a-7d0b-411b-ba10-a608da6f383b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

